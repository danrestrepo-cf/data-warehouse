name: loan_lender_user_access
primary_source_table: staging.history_octane.deal_lender_user
primary_key:
- octane_username
- loan_dwid
- account_pid
columns:
  dwid:
    data_type: BIGINT
  data_source_dwid:
    data_type: BIGINT
  edw_created_datetime:
    data_type: TIMESTAMPTZ
  edw_modified_datetime:
    data_type: TIMESTAMPTZ
  etl_batch_id:
    data_type: TEXT
  data_source_integration_columns:
    data_type: TEXT
  data_source_integration_id:
    data_type: TEXT
  data_source_modified_datetime:
    data_type: TIMESTAMPTZ
  octane_username:
    data_type: TEXT
  loan_dwid:
    data_type: BIGINT
  account_pid:
    data_type: BIGINT
etls:
  SP-200001-insert:
    input_type: table
    output_type: insert
    hardcoded_data_source: Octane
    json_output_field: loan_dwid
    truncate_table: false
    container_memory: 2048
    input_sql: |-
      SELECT NOW( ) AS edw_created_datetime
           , NOW( ) AS edw_modified_datetime
           , 'lu_account_pid~lu_username~dlu_lender_user_pid~d_pid~prp_pid~l_pid~data_source_dwid' AS data_source_integration_columns
           , COALESCE( CAST( lender_user.lu_account_pid AS TEXT ), '<NULL>' ) || '~' ||
             COALESCE( CAST( lender_user.lu_username AS TEXT ), '<NULL>' ) || '~' ||
             COALESCE( CAST( deal_lender_user.dlu_lender_user_pid AS TEXT ), '<NULL>' ) || '~' ||
             COALESCE( CAST( deal.d_pid AS TEXT ), '<NULL>' ) || '~' ||
             COALESCE( CAST( proposal.prp_pid AS TEXT ), '<NULL>' ) || '~' ||
             COALESCE( CAST( loan.l_pid AS TEXT ), '<NULL>' ) || '~' ||
             '1' AS data_source_integration_id
           , deal_lender_user.data_source_updated_datetime AS data_source_modified_datetime
           , lender_user.lu_username AS octane_username
           , loan_fact.loan_dwid
           , lender_user.lu_account_pid AS account_pid
      FROM (
          SELECT <<loan_fact_partial_load_condition>> AS include_record
               , loan_fact.*
          FROM star_loan.loan_fact
      ) AS loan_fact
      -- join to loan
      JOIN (
          SELECT <<loan_partial_load_condition>> AS include_record
               , loan.*
          FROM history_octane.loan
          LEFT JOIN history_octane.loan history_records
                    ON loan.l_pid = history_records.l_pid
                        AND loan.data_source_updated_datetime < history_records.data_source_updated_datetime
          WHERE history_records.l_pid IS NULL
            AND loan.data_source_deleted_flag = FALSE
      ) AS loan
           ON loan.l_pid = loan_fact.loan_pid
               AND loan_fact.data_source_dwid = 1
      -- join to proposal
      JOIN (
          SELECT <<proposal_partial_load_condition>> AS include_record
               , proposal.*
          FROM history_octane.proposal
          LEFT JOIN history_octane.proposal history_records
                    ON proposal.prp_pid = history_records.prp_pid
                        AND proposal.data_source_updated_datetime < history_records.data_source_updated_datetime
          WHERE history_records.prp_pid IS NULL
            AND proposal.data_source_deleted_flag = FALSE
            AND proposal.prp_proposal_type = 'ACTIVE'
      ) AS proposal
           ON proposal.prp_pid = loan.l_proposal_pid
      -- join to deal
      JOIN (
          SELECT <<deal_partial_load_condition>> AS include_record
               , deal.*
          FROM history_octane.deal
          LEFT JOIN history_octane.deal history_records
                    ON deal.d_pid = history_records.d_pid
                        AND deal.data_source_updated_datetime < history_records.data_source_updated_datetime
          WHERE history_records.d_pid IS NULL
            AND deal.data_source_deleted_flag = FALSE
      ) AS deal
           ON deal.d_pid = proposal.prp_deal_pid
      -- join to deal_lender_user
      JOIN (
          -- selecting *distinct* pairs of deal/lender_user from a table at a lower granularity than loan_lender_user_access
          -- using a GROUP BY instead of DISTINCT because we need the maximum data_source_updated_datetime as well as the deal/lender_user pair
          -- using BOOL_OR because MAX doesn't work for boolean arguments
          SELECT BOOL_OR( <<deal_lender_user_partial_load_condition>> ) AS include_record
               , deal_lender_user.dlu_deal_pid
               , deal_lender_user.dlu_lender_user_pid
               , MAX( deal_lender_user.data_source_updated_datetime ) AS data_source_updated_datetime
          FROM history_octane.deal_lender_user
          LEFT JOIN history_octane.deal_lender_user history_records
                    ON deal_lender_user.dlu_pid = history_records.dlu_pid
                        AND deal_lender_user.data_source_updated_datetime < history_records.data_source_updated_datetime
          WHERE history_records.dlu_pid IS NULL
            AND deal_lender_user.data_source_deleted_flag = FALSE
          GROUP BY deal_lender_user.dlu_deal_pid, deal_lender_user.dlu_lender_user_pid
      ) AS deal_lender_user
           ON deal_lender_user.dlu_deal_pid = deal.d_pid
      -- join to lender_user
      JOIN (
          SELECT <<lender_user_partial_load_condition>> AS include_record
               , lender_user.*
          FROM history_octane.lender_user
          LEFT JOIN history_octane.lender_user history_records
                    ON lender_user.lu_pid = history_records.lu_pid
                        AND lender_user.data_source_updated_datetime < history_records.data_source_updated_datetime
          WHERE history_records.lu_pid IS NULL
            AND lender_user.data_source_deleted_flag = FALSE
      ) AS lender_user
           ON lender_user.lu_pid = deal_lender_user.dlu_lender_user_pid
      -- join to loan_lender_user_access to ensure no duplicate lender_user - loan pairings are inserted
      LEFT JOIN star_loan.loan_lender_user_access
                ON loan_lender_user_access.octane_username = lender_user.lu_username
                    AND loan_lender_user_access.account_pid = lender_user.lu_account_pid
                    AND loan_lender_user_access.loan_dwid = loan_fact.loan_dwid
                    AND loan_lender_user_access.data_source_dwid = 1
      WHERE loan_lender_user_access.dwid IS NULL
        AND GREATEST( loan_fact.include_record, loan.include_record, proposal.include_record, deal.include_record,
                      deal_lender_user.include_record, lender_user.include_record ) = TRUE;
  SP-200001-delete:
    input_type: table
    output_type: delete
    hardcoded_data_source: Octane
    json_output_field: dwid
    delete_keys:
      - octane_username
      - loan_dwid
      - account_pid
    container_memory: 2048
    input_sql: |-
      SELECT loan_lender_user_access.dwid
           , distinct_username_deal_pairs.lu_username AS octane_username
           , loan_dim.dwid AS loan_dwid
           , distinct_username_deal_pairs.lu_account_pid AS account_pid
      FROM star_loan.loan_dim
      -- join to loan
      JOIN (
          SELECT loan.*
          FROM history_octane.loan
          LEFT JOIN history_octane.loan history_records
                    ON loan.l_pid = history_records.l_pid
                        AND loan.data_source_updated_datetime < history_records.data_source_updated_datetime
          WHERE history_records.l_pid IS NULL
      ) AS loan
           ON loan.l_pid = loan_dim.loan_pid
               AND loan_dim.data_source_dwid = 1
      -- join to proposal
      JOIN (
          SELECT proposal.*
          FROM history_octane.proposal
          LEFT JOIN history_octane.proposal history_records
                    ON proposal.prp_pid = history_records.prp_pid
                        AND proposal.data_source_updated_datetime < history_records.data_source_updated_datetime
          WHERE history_records.prp_version IS NULL
            AND proposal.prp_proposal_type = 'ACTIVE'
      ) AS proposal
           ON proposal.prp_pid = loan.l_proposal_pid
      -- join to deal
      JOIN (
          SELECT deal.*
          FROM history_octane.deal
          LEFT JOIN history_octane.deal history_records
                    ON deal.d_pid = history_records.d_pid
                        AND deal.data_source_updated_datetime < history_records.data_source_updated_datetime
          WHERE history_records.d_pid IS NULL
      ) AS deal
           ON deal.d_pid = proposal.prp_deal_pid
      -- join to deal_lender_user and lender_user to get unique username-deal_pid pairings
      JOIN (
          /*
          Use of DISTINCT is needed because deal_lender_user is at a lower granularity than loan_lender_user_access,
          and this query needs to determine which *unique* sets of deal-username-account_pid have no active connections across
          deal_lender_user/lender_user so that they can be deleted from loan_lender_user_access.
           */
          SELECT DISTINCT deal_lender_user.dlu_deal_pid
                        , lender_user.lu_username
                        , lender_user.lu_account_pid
          FROM history_octane.deal_lender_user
          LEFT JOIN history_octane.deal_lender_user dlu_history_records
                    ON deal_lender_user.dlu_pid = dlu_history_records.dlu_pid
                        AND deal_lender_user.data_source_updated_datetime < dlu_history_records.data_source_updated_datetime
              --join to ALL lender_user rows, not just most current, in order to include non-current usernames
          JOIN history_octane.lender_user
               ON lender_user.lu_pid = deal_lender_user.dlu_lender_user_pid
          WHERE dlu_history_records.dlu_pid IS NULL
            AND GREATEST(<<deal_lender_user_partial_load_condition>>, <<lender_user_partial_load_condition>>) = TRUE
      ) AS distinct_username_deal_pairs
           ON distinct_username_deal_pairs.dlu_deal_pid = deal.d_pid
      -- join again to deal_lender_user to filter to username-deal relationships that have been *completely* severed
      LEFT JOIN (
          SELECT deal_lender_user.dlu_deal_pid
               , lender_user.lu_username
               , lender_user.lu_account_pid
          FROM history_octane.deal_lender_user
          LEFT JOIN history_octane.deal_lender_user dlu_history_records
                    ON deal_lender_user.dlu_pid = dlu_history_records.dlu_pid
                        AND deal_lender_user.data_source_updated_datetime < dlu_history_records.data_source_updated_datetime
          JOIN history_octane.lender_user
               ON lender_user.lu_pid = deal_lender_user.dlu_lender_user_pid
          LEFT JOIN history_octane.lender_user lu_history_records
                    ON lender_user.lu_pid = lu_history_records.lu_pid
                        AND lender_user.data_source_updated_datetime < lu_history_records.data_source_updated_datetime
          WHERE dlu_history_records.dlu_pid IS NULL
            AND lu_history_records.lu_pid IS NULL
            AND deal_lender_user.data_source_deleted_flag = FALSE
      ) AS non_deletable_deal_lender_user
                ON distinct_username_deal_pairs.dlu_deal_pid = non_deletable_deal_lender_user.dlu_deal_pid
                    AND distinct_username_deal_pairs.lu_username = non_deletable_deal_lender_user.lu_username
                    AND distinct_username_deal_pairs.lu_account_pid = non_deletable_deal_lender_user.lu_account_pid
      -- join to loan_lender_user_access to only try to delete rows that have already been added to the target table
      JOIN star_loan.loan_lender_user_access
           ON loan_lender_user_access.loan_dwid = loan_dim.dwid
               AND loan_lender_user_access.octane_username = distinct_username_deal_pairs.lu_username
               AND loan_lender_user_access.account_pid = distinct_username_deal_pairs.lu_account_pid
               AND loan_lender_user_access.data_source_dwid = 1
      WHERE non_deletable_deal_lender_user.dlu_deal_pid IS NULL;
