create database staging
    with owner postgres;

create sequence star_loan.loan_lender_user_access_dwid_seq;

alter sequence star_loan.loan_lender_user_access_dwid_seq owner to deployer;

grant select, usage on sequence star_loan.loan_lender_user_access_dwid_seq to etl_loan;

create sequence star_loan.loan_dim_dwid_seq;

alter sequence star_loan.loan_dim_dwid_seq owner to deployer;

grant select, usage on sequence star_loan.loan_dim_dwid_seq to etl_loan;

create sequence star_loan.loan_junk_dim_dwid_seq;

alter sequence star_loan.loan_junk_dim_dwid_seq owner to deployer;

grant select, usage on sequence star_loan.loan_junk_dim_dwid_seq to etl_loan;

create sequence star_loan.product_choice_dim_dwid_seq;

alter sequence star_loan.product_choice_dim_dwid_seq owner to deployer;

grant select, usage on sequence star_loan.product_choice_dim_dwid_seq to etl_loan;

create sequence star_loan.transaction_junk_dim_dwid_seq;

alter sequence star_loan.transaction_junk_dim_dwid_seq owner to deployer;

grant select, usage on sequence star_loan.transaction_junk_dim_dwid_seq to etl_loan;

create sequence star_loan.hmda_purchaser_of_loan_dim_dwid_seq;

alter sequence star_loan.hmda_purchaser_of_loan_dim_dwid_seq owner to deployer;

grant select, usage on sequence star_loan.hmda_purchaser_of_loan_dim_dwid_seq to etl_loan;

create sequence star_loan.borrower_dim_dwid_seq;

alter sequence star_loan.borrower_dim_dwid_seq owner to deployer;

grant select, usage on sequence star_loan.borrower_dim_dwid_seq to etl_loan;

create sequence star_loan.borrower_demographics_dim_dwid_seq;

alter sequence star_loan.borrower_demographics_dim_dwid_seq owner to deployer;

grant select, usage on sequence star_loan.borrower_demographics_dim_dwid_seq to etl_loan;

create sequence star_loan.borrower_lending_profile_dim_dwid_seq;

alter sequence star_loan.borrower_lending_profile_dim_dwid_seq owner to deployer;

grant select, usage on sequence star_loan.borrower_lending_profile_dim_dwid_seq to etl_loan;

create sequence star_loan.interim_funder_dim_dwid_seq;

alter sequence star_loan.interim_funder_dim_dwid_seq owner to deployer;

grant select, usage on sequence star_loan.interim_funder_dim_dwid_seq to etl_loan;

create sequence star_loan.investor_dim_dwid_seq;

alter sequence star_loan.investor_dim_dwid_seq owner to deployer;

grant select, usage on sequence star_loan.investor_dim_dwid_seq to etl_loan;

create sequence star_loan.lender_user_dim_dwid_seq;

alter sequence star_loan.lender_user_dim_dwid_seq owner to deployer;

grant select, usage on sequence star_loan.lender_user_dim_dwid_seq to etl_loan;

create sequence star_loan.loan_beneficiary_dim_dwid_seq;

alter sequence star_loan.loan_beneficiary_dim_dwid_seq owner to deployer;

grant select, usage on sequence star_loan.loan_beneficiary_dim_dwid_seq to etl_loan;

create sequence star_loan.loan_funding_dim_dwid_seq;

alter sequence star_loan.loan_funding_dim_dwid_seq owner to deployer;

grant select, usage on sequence star_loan.loan_funding_dim_dwid_seq to etl_loan;

create sequence star_loan.product_dim_dwid_seq;

alter sequence star_loan.product_dim_dwid_seq owner to deployer;

grant select, usage on sequence star_loan.product_dim_dwid_seq to etl_loan;

create sequence star_loan.product_terms_dim_dwid_seq;

alter sequence star_loan.product_terms_dim_dwid_seq owner to deployer;

grant select, usage on sequence star_loan.product_terms_dim_dwid_seq to etl_loan;

create sequence star_loan.application_dim_dwid_seq;

alter sequence star_loan.application_dim_dwid_seq owner to deployer;

grant select, usage on sequence star_loan.application_dim_dwid_seq to etl_loan;

create sequence star_loan.transaction_dim_dwid_seq;

alter sequence star_loan.transaction_dim_dwid_seq owner to deployer;

grant select, usage on sequence star_loan.transaction_dim_dwid_seq to etl_loan;

create sequence star_loan.loan_lender_user_access_dwid_seq1;

alter sequence star_loan.loan_lender_user_access_dwid_seq1 owner to deployer;

grant select, usage on sequence star_loan.loan_lender_user_access_dwid_seq1 to etl_loan;

-- Unknown how to generate base type type

comment on type pg_catalog.aclitem is 'access control list';

-- Unknown how to generate base type type

comment on type pg_catalog.bit is 'fixed-length bit string';

-- Unknown how to generate base type type

comment on type pg_catalog.bool is 'boolean, ''true''/''false''';

-- Unknown how to generate base type type

comment on type pg_catalog.box is 'geometric box ''(lower left,upper right)''';

-- Unknown how to generate base type type

comment on type pg_catalog.bpchar is 'char(length), blank-padded string, fixed storage length';

-- Unknown how to generate base type type

comment on type pg_catalog.bytea is 'variable-length string, binary values escaped';

create domain information_schema.cardinal_number as integer
    constraint cardinal_number_domain_check check (VALUE >= 0);

-- Unknown how to generate base type type

comment on type pg_catalog.char is 'single character';

create domain information_schema.character_data as varchar;

-- Unknown how to generate base type type

comment on type pg_catalog.cid is 'command identifier type, sequence in transaction id';

-- Unknown how to generate base type type

comment on type pg_catalog.cidr is 'network IP address/netmask, network address';

-- Unknown how to generate base type type

comment on type pg_catalog.circle is 'geometric circle ''(center,radius)''';

-- Unknown how to generate base type type

comment on type pg_catalog.date is 'date';

-- Unknown how to generate base type type

comment on type pg_catalog.float4 is 'single-precision floating point number, 4-byte storage';

-- Unknown how to generate base type type

comment on type pg_catalog.float8 is 'double-precision floating point number, 8-byte storage';

-- Unknown how to generate base type type

comment on type pg_catalog.gtsvector is 'GiST index internal text representation for text search';

-- Unknown how to generate base type type

comment on type pg_catalog.inet is 'IP address/netmask, host address, netmask optional';

-- Unknown how to generate base type type

comment on type pg_catalog.int2 is '-32 thousand to 32 thousand, 2-byte storage';

-- Unknown how to generate base type type

comment on type pg_catalog.int4 is '-2 billion to 2 billion integer, 4-byte storage';

-- Unknown how to generate base type type

comment on type pg_catalog.int8 is '~18 digit integer, 8-byte storage';

-- Unknown how to generate base type type

comment on type pg_catalog.interval is '@ <number> <units>, time interval';

-- Unknown how to generate base type type

comment on type pg_catalog.json is 'JSON stored as text';

-- Unknown how to generate base type type

comment on type pg_catalog.jsonb is 'Binary JSON';

-- Unknown how to generate base type type

comment on type pg_catalog.jsonpath is 'JSON path';

-- Unknown how to generate base type type

comment on type pg_catalog.line is 'geometric line';

-- Unknown how to generate base type type

comment on type pg_catalog.lseg is 'geometric line segment ''(pt1,pt2)''';

-- Unknown how to generate base type type

comment on type pg_catalog.macaddr is 'XX:XX:XX:XX:XX:XX, MAC address';

-- Unknown how to generate base type type

comment on type pg_catalog.macaddr8 is 'XX:XX:XX:XX:XX:XX:XX:XX, MAC address';

-- Unknown how to generate base type type

comment on type pg_catalog.money is 'monetary amounts, $d,ddd.cc';

-- Unknown how to generate base type type

comment on type pg_catalog.name is '63-byte type for storing system identifiers';

-- Unknown how to generate base type type

comment on type pg_catalog.numeric is 'numeric(precision, decimal), arbitrary precision number';

-- Unknown how to generate base type type

comment on type pg_catalog.oid is 'object identifier(oid), maximum 4 billion';

-- Unknown how to generate base type type

comment on type pg_catalog.path is 'geometric path ''(pt1,...)''';

-- Unknown how to generate base type type

comment on type pg_catalog.pg_dependencies is 'multivariate dependencies';

-- Unknown how to generate base type type

comment on type pg_catalog.pg_lsn is 'PostgreSQL LSN datatype';

-- Unknown how to generate base type type

comment on type pg_catalog.pg_mcv_list is 'multivariate MCV list';

-- Unknown how to generate base type type

comment on type pg_catalog.pg_ndistinct is 'multivariate ndistinct coefficients';

-- Unknown how to generate base type type

comment on type pg_catalog.pg_node_tree is 'string representing an internal node tree';

-- Unknown how to generate base type type

comment on type pg_catalog.point is 'geometric point ''(x, y)''';

-- Unknown how to generate base type type

comment on type pg_catalog.polygon is 'geometric polygon ''(pt1,...)''';

-- Unknown how to generate base type type

comment on type pg_catalog.refcursor is 'reference to cursor (portal name)';

-- Unknown how to generate base type type

comment on type pg_catalog.regclass is 'registered class';

-- Unknown how to generate base type type

comment on type pg_catalog.regconfig is 'registered text search configuration';

-- Unknown how to generate base type type

comment on type pg_catalog.regdictionary is 'registered text search dictionary';

-- Unknown how to generate base type type

comment on type pg_catalog.regnamespace is 'registered namespace';

-- Unknown how to generate base type type

comment on type pg_catalog.regoper is 'registered operator';

-- Unknown how to generate base type type

comment on type pg_catalog.regoperator is 'registered operator (with args)';

-- Unknown how to generate base type type

comment on type pg_catalog.regproc is 'registered procedure';

-- Unknown how to generate base type type

comment on type pg_catalog.regprocedure is 'registered procedure (with args)';

-- Unknown how to generate base type type

comment on type pg_catalog.regrole is 'registered role';

-- Unknown how to generate base type type

comment on type pg_catalog.regtype is 'registered type';

create domain information_schema.sql_identifier as name;

-- Unknown how to generate base type type

comment on type pg_catalog.text is 'variable-length string, no limit specified';

-- Unknown how to generate base type type

comment on type pg_catalog.tid is '(block, offset), physical location of tuple';

-- Unknown how to generate base type type

comment on type pg_catalog.time is 'time of day';

create domain information_schema.time_stamp as timestamp(2) with time zone
    default CURRENT_TIMESTAMP(2);

-- Unknown how to generate base type type

comment on type pg_catalog.timestamp is 'date and time';

-- Unknown how to generate base type type

comment on type pg_catalog.timestamptz is 'date and time with time zone';

-- Unknown how to generate base type type

comment on type pg_catalog.timetz is 'time of day with time zone';

-- Unknown how to generate base type type

comment on type pg_catalog.tsquery is 'query representation for text search';

-- Unknown how to generate base type type

comment on type pg_catalog.tsvector is 'text representation for text search';

-- Unknown how to generate base type type

comment on type pg_catalog.txid_snapshot is 'txid snapshot';

-- Unknown how to generate base type type

comment on type pg_catalog.uuid is 'UUID datatype';

-- Unknown how to generate base type type

comment on type pg_catalog.varbit is 'variable-length bit string';

-- Unknown how to generate base type type

comment on type pg_catalog.varchar is 'varchar(length), non-blank-padded string, variable storage length';

-- Unknown how to generate base type type

comment on type pg_catalog.xid is 'transaction id';

-- Unknown how to generate base type type

comment on type pg_catalog.xml is 'XML content';

create domain information_schema.yes_or_no as varchar(3)
    constraint yes_or_no_check check ((VALUE)::text = ANY ((ARRAY['YES'::character varying, 'NO'::character varying])::text[]));

create table "flyway-baseline".flyway_schema_history
(
    installed_rank integer not null
        constraint flyway_schema_history_pk
            primary key,
    version varchar(50),
    description varchar(200) not null,
    type varchar(20) not null,
    script varchar(1000) not null,
    checksum integer,
    installed_by varchar(100) not null,
    installed_on timestamp default now() not null,
    execution_time integer not null,
    success boolean not null
);

alter table "flyway-baseline".flyway_schema_history owner to postgres;

create index flyway_schema_history_s_idx
    on "flyway-baseline".flyway_schema_history (success);

create table flyway.flyway_schema_history
(
    installed_rank integer not null
        constraint flyway_schema_history_pk
            primary key,
    version varchar(50),
    description varchar(200) not null,
    type varchar(20) not null,
    script varchar(1000) not null,
    checksum integer,
    installed_by varchar(100) not null,
    installed_on timestamp default now() not null,
    execution_time integer not null,
    success boolean not null
);

alter table flyway.flyway_schema_history owner to deployer;

create index flyway_schema_history_s_idx
    on flyway.flyway_schema_history (success);

grant select on flyway.flyway_schema_history to readonly;

create table loan.encompass_loan
(
    created_at timestamp default now(),
    updated_at timestamp default now(),
    el_loan_number bigint,
    el_loan_guid text,
    el_loan_create_datetime timestamp,
    el_lien_priority_type text,
    el_loan_purpose_type text,
    el_fannie_mae_loan_doc_code_type text,
    el_interest_only text,
    el_prepay_penalty text,
    el_subject_property_type text,
    el_subject_property_occupancy_status text,
    el_subject_property_estate_held_type text,
    el_underwriting_risk_assessment_type text,
    el_rate_lock_most_recent_lock_request_loan_type text,
    el_rate_lock_trans_details_amort_type_most_recent text,
    el_rate_lock_request_rate_sheet_id text,
    el_rate_lock_buy_side_investor_commitment text,
    el_mortgage_type text,
    el_mi_company_name_type text,
    el_mi_payer_type text,
    el_mi_payment_type text,
    el_hmda_action_type text,
    el_amortization_type text,
    el_proposal_structure_type text,
    el_product_special_program_type text,
    el_hmda_hoepa_status_type text,
    el_investor_hmda_purchaser_of_loan_type text,
    el_fund_source_type text,
    el_velocify_lead_id text,
    el_lead_source_id text,
    el_lead_reference_id text,
    el_borrower_intent_to_proceed boolean,
    el_mortgage_amount numeric(17,2),
    el_interest_rate_percent numeric(20,9),
    el_refinance_purpose_type text,
    el_investor_offering_name text,
    el_down_payment_percent numeric(20,9),
    el_housing_ratio_percent numeric(20,9),
    el_debt_ratio_percent numeric(20,9),
    el_sale_price_amount numeric(17,2),
    el_cltv_percent numeric(20,9),
    el_transaction_apr_percent numeric(20,9),
    el_product_amortization_term_months integer,
    el_mlds_prepay_penalty_period numeric(20,9),
    el_escrow_type text,
    el_borrower_first_name text,
    el_borrower_middle_name text,
    el_borrower_last_name text,
    el_borrower_email text,
    el_borrower_home_phone text,
    el_borrower_office_phone text,
    el_borrower_mobile_phone text,
    el_borrower_current_residence_street text,
    el_borrower_current_residence_city text,
    el_borrower_current_residence_state text,
    el_borrower_current_residence_postal_code text,
    el_borrower_birth_date timestamp,
    el_borrower_gender_type text,
    el_borrower_ethnicity_type text,
    el_borrower_race_american_indian boolean,
    el_borrower_race_asian boolean,
    el_borrower_race_black boolean,
    el_borrower_race_native_hawaiian boolean,
    el_borrower_race_white boolean,
    el_borrower_race_info_not_provided boolean,
    el_borrower_race_not_applicable boolean,
    el_borrower_first_time_homebuyer boolean,
    el_borrower_self_employed boolean,
    el_borrower_gross_monthly_income numeric(17,2),
    el_borrower_financed_property_ownership_count integer,
    el_borr_lmedian_fico integer,
    el_coborr_lmedian_fico integer,
    el_va_mortgage_summary_credit_score integer,
    el_coborrower_first_name text,
    el_coborrower_middle_name text,
    el_coborrower_last_name text,
    el_coborrower_email text,
    el_coborrower_home_phone text,
    el_coborrower_office_phone text,
    el_coborrower_mobile_phone text,
    el_coborrower_current_residence_street text,
    el_coborrower_current_residence_city text,
    el_coborrower_current_residence_state text,
    el_coborrower_current_residence_postal_code text,
    el_coborrower_birth_date timestamp,
    el_coborrower_gender_type text,
    el_coborrower_experian_fico_score integer,
    el_coborrower_ethnicity_type text,
    el_coborrower_race_american_indian boolean,
    el_coborrower_race_asian boolean,
    el_coborrower_race_black boolean,
    el_coborrower_race_native_hawaiian boolean,
    el_coborrower_race_white boolean,
    el_coborrower_race_info_not_provided boolean,
    el_coborrower_race_not_applicable boolean,
    el_borrower_income_verification_available boolean,
    el_coborrower_income_verification_available boolean,
    el_subject_property_street_1 text,
    el_subject_property_street_2 text,
    el_subject_property_city text,
    el_subject_property_state text,
    el_subject_property_postal_code text,
    el_subject_property_county text,
    el_subject_property_msa_number text,
    el_subject_property_county_code text,
    el_subject_property_number_units integer,
    el_subject_property_year_built text,
    el_subject_property_estimated_amount numeric(17,2),
    el_subject_property_appraised_amount numeric(17,2),
    el_occupancy_type text,
    el_property_type text,
    el_credit_report_received_date timestamp,
    el_credit_report_reference_number text,
    el_payoff_junior_lien_holder_company text,
    el_payoff_primary_lien_holder_company text,
    el_appraisal_retrieval_relative_value text,
    el_appraisal_report_as_is text,
    el_originator_compensation_line_802_discount_point_line_2_perc numeric(20,9),
    el_originator_compensation_line_802_discount_point_line_4_perc numeric(20,9),
    el_originator_compensation_line_802_user_defined_discount_amou numeric(17,2),
    el_801_borrower_paid_origination_chrarge_amount numeric(17,2),
    el_801_user_defined_fee_2_borrower_amount numeric(17,2),
    el_801_broker_compensation_borrower_paid numeric(17,2),
    el_801_user_defined_fee_2_description text,
    el_802_borrower_credits_amount numeric(17,2),
    el_fees_line_803_borrower_paid_adj_origination_charges_amount numeric(17,2),
    el_borrower_origination_fee_amount_amount numeric(17,2),
    el_borrower_origination_charge_amount numeric(17,2),
    el_fees_compensation_to_broker_1_amount numeric(17,2),
    el_originator_compensation_lender_compensation_credit_amount_l numeric(17,2),
    el_lo_compensation_borrower_paid_discount_point_amount_line_3_ numeric(17,2),
    el_requested_concession_amount numeric(17,2),
    el_manager_concession_amount numeric(17,2),
    el_lo_comp_borrower_paid_discount_point_amount_line_1_amount numeric(17,2),
    el_total_credit_for_rate_chosen_amount numeric(17,2),
    el_total_borrower_paid_discount_point_amount_line_4_amount numeric(17,2),
    el_fees_line_801_user_defined_fee_1_borrower_amount numeric(17,2),
    el_fees_line_801_user_defined_fee_1_borrower numeric(17,2),
    el_total_finance_charge_amount numeric(17,2),
    el_preapproval_letter_create_date timestamp,
    el_underwriting_suspended_date timestamp,
    el_underwriting_level_of_property_review_form_number text,
    el_uw_suspended_cleared_date timestamp,
    el_credit_committee_fico_exception boolean,
    el_fnma_collateral_underwriter_risk_score numeric(20,9),
    el_day_1_income_verification_available boolean,
    el_du_fail_reason text,
    el_acceptable_du text,
    el_acceptable_lp text,
    el_ability_to_repay_loan_type text,
    el_rate_lock_most_recent_request_fulfilled_datetime timestamp,
    el_rate_lock_request_fulfilled_datetime timestamp,
    el_rate_lock_most_recent_loan_program text,
    el_rate_lock_buy_side_base_margin numeric(20,9),
    el_rate_lock_most_recent_mortgage_amount_excluding_pmi numeric(17,2),
    el_rate_lock_most_recent_subject_property_number_of_units integer,
    el_rate_lock_buy_side_lock_expires_date timestamp,
    el_rate_lock_buy_side_lock_date timestamp,
    el_rate_lock_first_lock_lock_date timestamp,
    el_rate_lock_most_recent_lock_request_escrow_waived numeric(17,2),
    el_rate_lock_most_recent_rate_lock_request_loan_amount numeric(17,2),
    el_rate_lock_buy_side_comments text,
    el_rate_lock_sell_side_lock_expires_date timestamp,
    el_rate_lock_sell_side_number_of_days integer,
    el_rate_lock_sell_side_total_sell_price_amount numeric(17,2),
    el_rate_lock_sell_side_investor_lock_type text,
    el_rate_lock_sell_investor_name text,
    el_rate_lock_sell_side_investor_loan_number text,
    el_rate_lock_sell_side_lock_date timestamp,
    el_rate_lock_most_recent_sell_side_lock_date timestamp,
    el_rate_lock_sell_side_base_rate_percent numeric(20,9),
    el_rate_lock_sell_side_investor_delivery_date timestamp,
    el_rate_lock_most_recent_sell_side_base_rate_adjust_1_percent numeric(20,9),
    el_rate_lock_most_recent_sell_side_investor_commitment text,
    el_rate_lock_sell_side_net_sell_price_amount numeric(17,2),
    el_rate_lock_sell_side_net_buy_rate_percent numeric(20,9),
    el_rate_lock_most_recent_rate_lock_term_in_months integer,
    el_rate_lock_buy_side_number_of_days integer,
    el_rate_lock_first_lock_ltv_percent numeric(20,9),
    el_rate_lock_first_lock_cltv_percent numeric(20,9),
    el_rate_lock_first_lock_net_buy_price_amount numeric(17,2),
    el_rate_lock_date timestamp,
    el_rate_lock_expiration_date timestamp,
    el_rate_lock_number_days integer,
    el_rate_lock_extension_original_lock_term integer,
    el_rate_lock_extension_original_lock_date timestamp,
    el_rate_lock_extension_original_lock_expiration_date timestamp,
    el_rate_lock_extension_new_expiration_date timestamp,
    el_rate_initial_capture_of_lock_number_days integer,
    el_first_payment_due_date timestamp,
    el_first_payment_adjustment_date timestamp,
    el_loan_maturity_date timestamp,
    el_mortgage_total_with_mi_premium_amount numeric(17,2),
    el_mortgage_info_arm_disclosure_type text,
    el_arm_margin_percent numeric(20,9),
    el_freddie_mac_lender_rate_adjustment_convertible_percent numeric(20,9),
    el_freddie_mac_ltv_percent numeric(20,9),
    el_regz_loan_info_document_date timestamp,
    el_sub_fin_second_mortgage_loan_amount numeric(17,2),
    el_miac_aus_eligibility_type text,
    el_total_number_of_borrowers_on_loan integer,
    el_monthly_pi_amount numeric(17,2),
    el_extension_cost_total_amount numeric(17,2),
    el_homeready_eligibility boolean,
    el_homeready_eligibility_review_complete boolean,
    el_homeready_borrower_acceptance boolean,
    el_homepossible_eligibility boolean,
    el_homepossible_eligibility_review_complete boolean,
    el_fannie_mae_investor_eligibility boolean,
    el_freddie_mac_investor_eligibility boolean,
    el_morgan_stanley_upload boolean,
    el_arm_initial_rate_adjustment_term_months numeric(20,9),
    el_arm_initial_rate_adjustment_cap_percent numeric(20,9),
    el_arm_floor_rate_percent numeric(20,9),
    el_arm_subsequent_rate_adjustment_months numeric(20,9),
    el_subsequent_rate_adjustment_cap_percent numeric(20,9),
    el_arm_rate_adjustment_lifetime_cap_percent numeric(20,9),
    el_mi_company_type text,
    el_mi_company_name text,
    el_mi_coverage_factor numeric(20,9),
    el_mi_required boolean,
    el_uldd_mi_premium_source_type text,
    el_lpmi_premium_estimated_amount numeric(20,9),
    el_lpmi_final_price_percent numeric(17,2),
    el_mi_premium_frequency_type text,
    el_mi_certificate_id text,
    el_postfunding_disbursement_ledger_received_date timestamp,
    el_warehouse_curtailment boolean,
    el_funding_executed_docs_submitted_datetime text,
    el_funds_requested_date timestamp,
    el_funds_sent_date timestamp,
    el_funds_released_date timestamp,
    el_fund_outstanding_docs_funding_authorized boolean,
    el_collateral_delivery_work_completed boolean,
    el_interim_funder_company_name text,
    el_coll_to_warehouse_warehouse_company text,
    el_bbt_elds_maturity_date text,
    el_interim_servicer_payment_summary_unpaid_balance_amount numeric(17,2),
    el_collateral_delivery_servicer_id text,
    el_next_payment_due_to_interim_servicer_date timestamp,
    el_servicer_upload_pi_change_date timestamp,
    el_shipping_investor_delivery_date timestamp,
    el_shipping_actual_shipping_date timestamp,
    el_collateral_delivery_customer_to_inventory_ship_date timestamp,
    el_collateral_to_investor_work_completed_datetime timestamp,
    el_collateral_delivery_to_custodian_ship_date timestamp,
    el_purchase_advice_date timestamp,
    el_purchase_advice_actual_sell_price_percent numeric(17,2),
    el_first_payment_to_investor_due_date text,
    el_purchase_advice_first_payment_to_type text,
    el_purchase_advice_actual_sell_side_srp numeric(20,9),
    el_purchase_advice_payouts_1_amount numeric(17,2),
    el_purchase_advice_payouts_2_amount numeric(17,2),
    el_purchase_advice_payouts_3_amount numeric(17,2),
    el_purchase_advice_payouts_4_amount numeric(17,2),
    el_purchase_advice_payouts_5_amount numeric(17,2),
    el_purchase_advice_payouts_6_amount numeric(17,2),
    el_purchase_advice_payouts_7_amount numeric(17,2),
    el_purchase_advice_payouts_8_amount numeric(17,2),
    el_purchase_advice_payouts_9_amount numeric(17,2),
    el_purchase_advice_payouts_10_amount numeric(17,2),
    el_purchase_advice_payouts_11_amount numeric(17,2),
    el_purchase_advice_payouts_12_amount numeric(17,2),
    el_purchase_advice_premium_amount numeric(17,2),
    el_purchase_advice_service_release_premium_received_amount numeric(20,9),
    el_underwriting_investor_eligibility_texas_50a6_cashout boolean,
    el_underwriting_investor_eligibility_wells_fargo boolean,
    el_underwriting_investor_eligibility_chase_or_jp_morgan boolean,
    el_mers_registration_date timestamp,
    el_mers_min_number text,
    el_rate_lock_most_recent_sell_side_investor_mers_number numeric(20,9),
    el_uldd_pool_id text,
    el_uldd_property_valuation_effective_date timestamp,
    el_uldd_first_unit_bedrooms integer,
    el_uldd_first_unit_subject_property_gross_rent_amount numeric(17,2),
    el_loan_estimate_most_recent_issued_date timestamp,
    el_appraisal_retrieval_work_completed_date timestamp,
    el_current_milestone_name text,
    el_current_milestone_datetime timestamp,
    el_disclosure_mode_date timestamp,
    el_current_loan_status_date timestamp,
    el_underwriting_clear_to_close_date timestamp,
    el_estimated_closing_date timestamp,
    el_closing_scheduled_date timestamp,
    el_closing_document_signed_milestone_date timestamp,
    el_closing_docs_delivered_datetime timestamp,
    el_total_wire_transfer_amount numeric(17,2),
    el_closed_date timestamp,
    el_closing_docs_regz_loan_info_disbursement_date timestamp,
    el_loan_folder_name text,
    el_buyer_agent_company_name text,
    el_buyer_agent_fmls text,
    el_buyer_agent_email text,
    el_originator_fmls text,
    el_processor_fmls text,
    el_funder_fmls text,
    el_closing_document_specialist_fmls text,
    el_originator_nmls_id text,
    el_processing_resub_worker_assigned_datetime timestamp,
    el_loan_team_member_name_uw_conditions text,
    el_underwriter_unparsed_name text,
    el_appraisal_onhold_estimated_release_date timestamp,
    el_appraisal_onhold_datetime timestamp,
    el_appraisal_cleared_datetime timestamp,
    el_refinance_type text,
    el_trans_details_purchaser_type text,
    el_trans_details_hoepa_status text,
    el_loan_info_channel text,
    el_closing_disclosure_sent_date timestamp,
    el_closing_disclosure_received_date timestamp,
    el_revised_closing_disclosure_sent_date timestamp,
    el_revised_closing_disclosure_received_date timestamp,
    el_total_broker_fees_collected_amount numeric(17,2),
    el_total_lender_fees_collected numeric(17,2),
    el_purchasing_beneficiary_investor_name text
);

alter table loan.encompass_loan owner to deployer;

create index idx__encompass_loan__elr_loan_number
    on loan.encompass_loan (el_loan_number);

create index idx__encompass_loan__elr_loan_create_datetime
    on loan.encompass_loan (el_loan_create_datetime);

grant select on loan.encompass_loan to readonly;

grant delete, insert, select, truncate, update on loan.encompass_loan to encompass_sp6;

create table star_common.date_dim
(
    dwid integer not null
        constraint date_dim_pkey
            primary key,
    value date,
    date_format_iso_8601 char(10),
    date_format_us char(10),
    day_of_month_suffix varchar(4),
    day_chronological integer,
    weekday_chronological integer,
    day_of_year smallint,
    day_of_quarter smallint,
    day_of_month smallint,
    day_of_week smallint,
    is_first_day_of_year boolean,
    is_last_day_of_year boolean,
    is_first_day_of_quarter boolean,
    is_last_day_of_quarter boolean,
    is_first_day_of_month boolean,
    is_last_day_of_month boolean,
    is_first_day_of_week boolean,
    is_last_day_of_week boolean,
    is_weekday boolean,
    is_weekend boolean,
    day_of_week_name varchar(9),
    day_of_week_name_short char(3),
    day_of_week_name_letter char,
    is_leap_year boolean,
    is_leap_day boolean,
    week_of_year smallint,
    quarter_of_year smallint,
    quarter_chronological integer,
    quarter_name char(6),
    year smallint,
    month_of_year smallint,
    days_in_month smallint,
    first_day_of_month date,
    last_day_of_month date,
    first_day_of_week date,
    week_name text,
    week_format_iso_8601 varchar(3)
);

alter table star_common.date_dim owner to deployer;

create index idx_date_dim__value
    on star_common.date_dim (value);

grant select on star_common.date_dim to readonly;

grant select on star_common.date_dim to svc_looker_operations;

grant select on star_common.date_dim to etl_loan;

create table star_common.data_source
(
    dwid bigserial not null
        constraint data_source_pk
            primary key,
    name text not null
);

alter table star_common.data_source owner to deployer;

grant select on star_common.data_source to readonly;

grant select on star_common.data_source to svc_looker_operations;

grant select on star_common.data_source to etl_loan;

create table staging_octane.account_event_type
(
    code varchar(128) not null
        constraint account_event_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.account_event_type owner to deployer;

grant select on staging_octane.account_event_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.account_event_type to dms_octane_writer;

grant select on staging_octane.account_event_type to etl_loan;

create table staging_octane.account_id_sequence
(
    ais_id bigint not null
        constraint account_id_sequence_pkey
            primary key
);

alter table staging_octane.account_id_sequence owner to deployer;

grant select on staging_octane.account_id_sequence to readonly;

grant delete, insert, select, truncate, update on staging_octane.account_id_sequence to dms_octane_writer;

grant select on staging_octane.account_id_sequence to etl_loan;

create table staging_octane.account_status_type
(
    code varchar(128) not null
        constraint account_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.account_status_type owner to deployer;

grant select on staging_octane.account_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.account_status_type to dms_octane_writer;

grant select on staging_octane.account_status_type to etl_loan;

create table staging_octane.account
(
    a_pid bigint not null
        constraint account_pkey
            primary key,
    a_version integer,
    a_account_id bigint,
    a_account_name varchar(128),
    a_gfe_interest_rate_expiration_days integer,
    a_gfe_lock_duration_days integer,
    a_gfe_lock_before_settlement_days integer,
    a_proposal_expiration_days integer,
    a_uw_expiration_days integer,
    a_conditional_commitment_expiration_days integer,
    a_account_from_date date,
    a_account_status_type varchar(128),
    a_account_through_date date,
    a_initial_los_loan_id bigint,
    a_uuts_master_contact_name varchar(128),
    a_uuts_master_contact_title varchar(128),
    a_uuts_master_office_phone varchar(16),
    a_uuts_master_office_phone_extension varchar(32),
    a_account_borrower_site_id varchar(128),
    a_originator_borrower_sites_enabled boolean,
    a_company_borrower_site_enabled boolean,
    a_discount_included_in_origination_fee boolean,
    a_uuts_use_master_contact boolean,
    a_borrower_job_gap_lookback_years integer,
    a_borrower_job_gap_minimum_days integer,
    a_lender_app_host varchar(256),
    a_lender_app_ip_address varchar(32),
    a_advance_period_days integer,
    a_account_destroy_mode boolean,
    a_paid_through_current_month_required_day_of_month integer,
    a_disclosure_change_threshold_cash_to_close numeric(15,2),
    a_disclosure_change_threshold_monthly_payment numeric(15,2),
    a_disclosure_action_required_days integer,
    a_le_to_cd_seasoning_days integer,
    a_disclosure_max_arm_apr_change_percent numeric(11,9),
    a_disclosure_max_non_arm_apr_change_percent numeric(11,9),
    a_initial_le_delivered_mailed_seasoning_days integer,
    a_revised_le_delivered_mailed_seasoning_days integer,
    a_revised_le_received_signed_seasoning_days integer,
    a_significant_cd_delivered_mailed_seasoning_days integer,
    a_significant_cd_received_signed_seasoning_days integer,
    a_supported_states text
);

alter table staging_octane.account owner to deployer;

create index idx_account__pid_version
    on staging_octane.account (a_pid, a_version);

grant select on staging_octane.account to readonly;

grant delete, insert, select, truncate, update on staging_octane.account to dms_octane_writer;

grant select on staging_octane.account to etl_loan;

create table staging_octane.account_event
(
    ae_pid bigint not null
        constraint account_event_pkey
            primary key,
    ae_version integer,
    ae_account_pid bigint,
    ae_create_datetime timestamp,
    ae_account_event_type varchar(128),
    ae_detail varchar(16000),
    ae_source_unparsed_name varchar(128),
    ae_ip_address varchar(32),
    ae_client_agent varchar(256),
    ae_event_date date
);

alter table staging_octane.account_event owner to deployer;

create index idx_account_event__pid_version
    on staging_octane.account_event (ae_pid, ae_version);

grant select on staging_octane.account_event to readonly;

grant delete, insert, select, truncate, update on staging_octane.account_event to dms_octane_writer;

grant select on staging_octane.account_event to etl_loan;

create table staging_octane.admin_user_event_type
(
    code varchar(128) not null
        constraint admin_user_event_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.admin_user_event_type owner to deployer;

grant select on staging_octane.admin_user_event_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.admin_user_event_type to dms_octane_writer;

grant select on staging_octane.admin_user_event_type to etl_loan;

create table staging_octane.admin_user_event
(
    aue_pid bigint not null
        constraint admin_user_event_pkey
            primary key,
    aue_version integer,
    aue_create_datetime timestamp,
    aue_detail varchar(16000),
    aue_source_unparsed_name varchar(128),
    aue_admin_user_event_type varchar(128),
    aue_ip_address varchar(32),
    aue_client_agent varchar(256)
);

alter table staging_octane.admin_user_event owner to deployer;

create index idx_admin_user_event__pid_version
    on staging_octane.admin_user_event (aue_pid, aue_version);

grant select on staging_octane.admin_user_event to readonly;

grant delete, insert, select, truncate, update on staging_octane.admin_user_event to dms_octane_writer;

grant select on staging_octane.admin_user_event to etl_loan;

create table staging_octane.admin_user_status_type
(
    code varchar(128) not null
        constraint admin_user_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.admin_user_status_type owner to deployer;

grant select on staging_octane.admin_user_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.admin_user_status_type to dms_octane_writer;

grant select on staging_octane.admin_user_status_type to etl_loan;

create table staging_octane.agency_type
(
    code varchar(128) not null
        constraint agency_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.agency_type owner to deployer;

grant select on staging_octane.agency_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.agency_type to dms_octane_writer;

grant select on staging_octane.agency_type to etl_loan;

create table staging_octane.agent_type
(
    code varchar(128) not null
        constraint agent_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.agent_type owner to deployer;

grant select on staging_octane.agent_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.agent_type to dms_octane_writer;

grant select on staging_octane.agent_type to etl_loan;

create table staging_octane.announcement
(
    ann_pid bigint not null
        constraint announcement_pkey
            primary key,
    ann_version integer,
    ann_lender_text varchar(1024),
    ann_borrower_text varchar(1024),
    ann_from_datetime timestamp,
    ann_to_datetime timestamp
);

alter table staging_octane.announcement owner to deployer;

create index idx_announcement__pid_version
    on staging_octane.announcement (ann_pid, ann_version);

grant select on staging_octane.announcement to readonly;

grant delete, insert, select, truncate, update on staging_octane.announcement to dms_octane_writer;

grant select on staging_octane.announcement to etl_loan;

create table staging_octane.annual_monthly_type
(
    code varchar(128) not null
        constraint annual_monthly_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.annual_monthly_type owner to deployer;

grant select on staging_octane.annual_monthly_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.annual_monthly_type to dms_octane_writer;

grant select on staging_octane.annual_monthly_type to etl_loan;

create table staging_octane.applicant_role_type
(
    code varchar(128) not null
        constraint applicant_role_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.applicant_role_type owner to deployer;

grant select on staging_octane.applicant_role_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.applicant_role_type to dms_octane_writer;

grant select on staging_octane.applicant_role_type to etl_loan;

create table staging_octane.application_taken_method_type
(
    code varchar(128) not null
        constraint application_taken_method_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.application_taken_method_type owner to deployer;

grant select on staging_octane.application_taken_method_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.application_taken_method_type to dms_octane_writer;

grant select on staging_octane.application_taken_method_type to etl_loan;

create table staging_octane.application_type
(
    code varchar(128) not null
        constraint application_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.application_type owner to deployer;

grant select on staging_octane.application_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.application_type to dms_octane_writer;

grant select on staging_octane.application_type to etl_loan;

create table staging_octane.appraisal_condition_type
(
    code varchar(128) not null
        constraint appraisal_condition_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.appraisal_condition_type owner to deployer;

grant select on staging_octane.appraisal_condition_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.appraisal_condition_type to dms_octane_writer;

grant select on staging_octane.appraisal_condition_type to etl_loan;

create table staging_octane.appraisal_entry_contact_type
(
    code varchar(128) not null
        constraint appraisal_entry_contact_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.appraisal_entry_contact_type owner to deployer;

grant select on staging_octane.appraisal_entry_contact_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.appraisal_entry_contact_type to dms_octane_writer;

grant select on staging_octane.appraisal_entry_contact_type to etl_loan;

create table staging_octane.appraisal_file_type
(
    code varchar(128) not null
        constraint appraisal_file_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.appraisal_file_type owner to deployer;

grant select on staging_octane.appraisal_file_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.appraisal_file_type to dms_octane_writer;

grant select on staging_octane.appraisal_file_type to etl_loan;

create table staging_octane.appraisal_form_type
(
    code varchar(128) not null
        constraint appraisal_form_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.appraisal_form_type owner to deployer;

grant select on staging_octane.appraisal_form_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.appraisal_form_type to dms_octane_writer;

grant select on staging_octane.appraisal_form_type to etl_loan;

create table staging_octane.appraisal_hold_reason_type
(
    code varchar(128) not null
        constraint appraisal_hold_reason_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.appraisal_hold_reason_type owner to deployer;

grant select on staging_octane.appraisal_hold_reason_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.appraisal_hold_reason_type to dms_octane_writer;

grant select on staging_octane.appraisal_hold_reason_type to etl_loan;

create table staging_octane.appraisal_hold_type
(
    code varchar(128) not null
        constraint appraisal_hold_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.appraisal_hold_type owner to deployer;

grant select on staging_octane.appraisal_hold_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.appraisal_hold_type to dms_octane_writer;

grant select on staging_octane.appraisal_hold_type to etl_loan;

create table staging_octane.appraisal_management_company_type
(
    code varchar(128) not null
        constraint appraisal_management_company_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.appraisal_management_company_type owner to deployer;

grant select on staging_octane.appraisal_management_company_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.appraisal_management_company_type to dms_octane_writer;

grant select on staging_octane.appraisal_management_company_type to etl_loan;

create table staging_octane.appraisal_order_coarse_status_type
(
    code varchar(128) not null
        constraint appraisal_order_coarse_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.appraisal_order_coarse_status_type owner to deployer;

grant select on staging_octane.appraisal_order_coarse_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.appraisal_order_coarse_status_type to dms_octane_writer;

grant select on staging_octane.appraisal_order_coarse_status_type to etl_loan;

create table staging_octane.appraisal_order_request_file_type
(
    code varchar(128) not null
        constraint appraisal_order_request_file_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.appraisal_order_request_file_type owner to deployer;

grant select on staging_octane.appraisal_order_request_file_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.appraisal_order_request_file_type to dms_octane_writer;

grant select on staging_octane.appraisal_order_request_file_type to etl_loan;

create table staging_octane.appraisal_order_request_type
(
    code varchar(128) not null
        constraint appraisal_order_request_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.appraisal_order_request_type owner to deployer;

grant select on staging_octane.appraisal_order_request_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.appraisal_order_request_type to dms_octane_writer;

grant select on staging_octane.appraisal_order_request_type to etl_loan;

create table staging_octane.appraisal_order_status_type
(
    code varchar(128) not null
        constraint appraisal_order_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.appraisal_order_status_type owner to deployer;

grant select on staging_octane.appraisal_order_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.appraisal_order_status_type to dms_octane_writer;

grant select on staging_octane.appraisal_order_status_type to etl_loan;

create table staging_octane.appraisal_purpose_type
(
    code varchar(128) not null
        constraint appraisal_purpose_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.appraisal_purpose_type owner to deployer;

grant select on staging_octane.appraisal_purpose_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.appraisal_purpose_type to dms_octane_writer;

grant select on staging_octane.appraisal_purpose_type to etl_loan;

create table staging_octane.appraisal_source_type
(
    code varchar(128) not null
        constraint appraisal_source_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.appraisal_source_type owner to deployer;

grant select on staging_octane.appraisal_source_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.appraisal_source_type to dms_octane_writer;

grant select on staging_octane.appraisal_source_type to etl_loan;

create table staging_octane.appraisal_underwriter_type
(
    code varchar(128) not null
        constraint appraisal_underwriter_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.appraisal_underwriter_type owner to deployer;

grant select on staging_octane.appraisal_underwriter_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.appraisal_underwriter_type to dms_octane_writer;

grant select on staging_octane.appraisal_underwriter_type to etl_loan;

create table staging_octane.area_median_income_table
(
    amit_pid bigint not null
        constraint area_median_income_table_pkey
            primary key,
    amit_version integer,
    amit_account_pid bigint,
    amit_from_date date,
    amit_uploader_unparsed_name varchar(128),
    amit_upload_datetime timestamp
);

alter table staging_octane.area_median_income_table owner to deployer;

create index idx_area_median_income_table__pid_version
    on staging_octane.area_median_income_table (amit_pid, amit_version);

grant select on staging_octane.area_median_income_table to readonly;

grant delete, insert, select, truncate, update on staging_octane.area_median_income_table to dms_octane_writer;

grant select on staging_octane.area_median_income_table to etl_loan;

create table staging_octane.arm_index_type
(
    code varchar(128) not null
        constraint arm_index_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.arm_index_type owner to deployer;

grant select on staging_octane.arm_index_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.arm_index_type to dms_octane_writer;

grant select on staging_octane.arm_index_type to etl_loan;

create table staging_octane.arm_index_rate
(
    air_pid bigint not null
        constraint arm_index_rate_pkey
            primary key,
    air_version integer,
    air_arm_index_type varchar(128),
    air_effective_datetime timestamp,
    air_rate numeric(11,9)
);

alter table staging_octane.arm_index_rate owner to deployer;

create index idx_arm_index_rate__pid_version
    on staging_octane.arm_index_rate (air_pid, air_version);

grant select on staging_octane.arm_index_rate to readonly;

grant delete, insert, select, truncate, update on staging_octane.arm_index_rate to dms_octane_writer;

grant select on staging_octane.arm_index_rate to etl_loan;

create table staging_octane.asset_account_holder_type
(
    code varchar(128) not null
        constraint asset_account_holder_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.asset_account_holder_type owner to deployer;

grant select on staging_octane.asset_account_holder_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.asset_account_holder_type to dms_octane_writer;

grant select on staging_octane.asset_account_holder_type to etl_loan;

create table staging_octane.asset_type
(
    code varchar(128) not null
        constraint asset_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.asset_type owner to deployer;

grant select on staging_octane.asset_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.asset_type to dms_octane_writer;

grant select on staging_octane.asset_type to etl_loan;

create table staging_octane.aus_credit_service_type
(
    code varchar(128) not null
        constraint aus_credit_service_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.aus_credit_service_type owner to deployer;

grant select on staging_octane.aus_credit_service_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.aus_credit_service_type to dms_octane_writer;

grant select on staging_octane.aus_credit_service_type to etl_loan;

create table staging_octane.aus_type
(
    code varchar(128) not null
        constraint aus_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.aus_type owner to deployer;

grant select on staging_octane.aus_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.aus_type to dms_octane_writer;

grant select on staging_octane.aus_type to etl_loan;

create table staging_octane.backfill_status_type
(
    code varchar(128) not null
        constraint backfill_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.backfill_status_type owner to deployer;

grant select on staging_octane.backfill_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.backfill_status_type to dms_octane_writer;

grant select on staging_octane.backfill_status_type to etl_loan;

create table staging_octane.bankruptcy_exception_type
(
    code varchar(128) not null
        constraint bankruptcy_exception_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.bankruptcy_exception_type owner to deployer;

grant select on staging_octane.bankruptcy_exception_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.bankruptcy_exception_type to dms_octane_writer;

grant select on staging_octane.bankruptcy_exception_type to etl_loan;

create table staging_octane.bid_pool_status_type
(
    code varchar(128) not null
        constraint bid_pool_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.bid_pool_status_type owner to deployer;

grant select on staging_octane.bid_pool_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.bid_pool_status_type to dms_octane_writer;

grant select on staging_octane.bid_pool_status_type to etl_loan;

create table staging_octane.bid_pool
(
    bp_pid bigint not null
        constraint bid_pool_pkey
            primary key,
    bp_version integer,
    bp_account_pid bigint,
    bp_bid_pool_name varchar(32),
    bp_bid_pool_status_type varchar(128),
    bp_create_datetime date
);

alter table staging_octane.bid_pool owner to deployer;

create index idx_bid_pool__pid_version
    on staging_octane.bid_pool (bp_pid, bp_version);

grant select on staging_octane.bid_pool to readonly;

grant delete, insert, select, truncate, update on staging_octane.bid_pool to dms_octane_writer;

grant select on staging_octane.bid_pool to etl_loan;

create table staging_octane.borrower_associated_address_explanation_type
(
    code varchar(128) not null
        constraint borrower_associated_address_explanation_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.borrower_associated_address_explanation_type owner to deployer;

grant select on staging_octane.borrower_associated_address_explanation_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower_associated_address_explanation_type to dms_octane_writer;

grant select on staging_octane.borrower_associated_address_explanation_type to etl_loan;

create table staging_octane.borrower_associated_address_source_type
(
    code varchar(128) not null
        constraint borrower_associated_address_source_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.borrower_associated_address_source_type owner to deployer;

grant select on staging_octane.borrower_associated_address_source_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower_associated_address_source_type to dms_octane_writer;

grant select on staging_octane.borrower_associated_address_source_type to etl_loan;

create table staging_octane.borrower_income_category_type
(
    code varchar(128) not null
        constraint borrower_income_category_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.borrower_income_category_type owner to deployer;

grant select on staging_octane.borrower_income_category_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower_income_category_type to dms_octane_writer;

grant select on staging_octane.borrower_income_category_type to etl_loan;

create table staging_octane.borrower_relationship_type
(
    code varchar(128) not null
        constraint borrower_relationship_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.borrower_relationship_type owner to deployer;

grant select on staging_octane.borrower_relationship_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower_relationship_type to dms_octane_writer;

grant select on staging_octane.borrower_relationship_type to etl_loan;

create table staging_octane.borrower_residency_basis_type
(
    code varchar(128) not null
        constraint borrower_residency_basis_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.borrower_residency_basis_type owner to deployer;

grant select on staging_octane.borrower_residency_basis_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower_residency_basis_type to dms_octane_writer;

grant select on staging_octane.borrower_residency_basis_type to etl_loan;

create table staging_octane.borrower_tiny_id_type
(
    code varchar(128) not null
        constraint borrower_tiny_id_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.borrower_tiny_id_type owner to deployer;

grant select on staging_octane.borrower_tiny_id_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower_tiny_id_type to dms_octane_writer;

grant select on staging_octane.borrower_tiny_id_type to etl_loan;

create table staging_octane.borrower_user_account_status_type
(
    code varchar(128) not null
        constraint borrower_user_account_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.borrower_user_account_status_type owner to deployer;

grant select on staging_octane.borrower_user_account_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower_user_account_status_type to dms_octane_writer;

grant select on staging_octane.borrower_user_account_status_type to etl_loan;

create table staging_octane.borrower_user_deal_access_type
(
    code varchar(128) not null
        constraint borrower_user_deal_access_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.borrower_user_deal_access_type owner to deployer;

grant select on staging_octane.borrower_user_deal_access_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower_user_deal_access_type to dms_octane_writer;

grant select on staging_octane.borrower_user_deal_access_type to etl_loan;

create table staging_octane.branch_status_type
(
    code varchar(128) not null
        constraint branch_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.branch_status_type owner to deployer;

grant select on staging_octane.branch_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.branch_status_type to dms_octane_writer;

grant select on staging_octane.branch_status_type to etl_loan;

create table staging_octane.building_status_type
(
    code varchar(128) not null
        constraint building_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.building_status_type owner to deployer;

grant select on staging_octane.building_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.building_status_type to dms_octane_writer;

grant select on staging_octane.building_status_type to etl_loan;

create table staging_octane.business_disposition_type
(
    code varchar(128) not null
        constraint business_disposition_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.business_disposition_type owner to deployer;

grant select on staging_octane.business_disposition_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.business_disposition_type to dms_octane_writer;

grant select on staging_octane.business_disposition_type to etl_loan;

create table staging_octane.business_income_type
(
    code varchar(128) not null
        constraint business_income_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.business_income_type owner to deployer;

grant select on staging_octane.business_income_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.business_income_type to dms_octane_writer;

grant select on staging_octane.business_income_type to etl_loan;

create table staging_octane.business_ownership_type
(
    code varchar(128) not null
        constraint business_ownership_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.business_ownership_type owner to deployer;

grant select on staging_octane.business_ownership_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.business_ownership_type to dms_octane_writer;

grant select on staging_octane.business_ownership_type to etl_loan;

create table staging_octane.buydown_base_date_type
(
    code varchar(128) not null
        constraint buydown_base_date_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.buydown_base_date_type owner to deployer;

grant select on staging_octane.buydown_base_date_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.buydown_base_date_type to dms_octane_writer;

grant select on staging_octane.buydown_base_date_type to etl_loan;

create table staging_octane.buydown_contributor_type
(
    code varchar(128) not null
        constraint buydown_contributor_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.buydown_contributor_type owner to deployer;

grant select on staging_octane.buydown_contributor_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.buydown_contributor_type to dms_octane_writer;

grant select on staging_octane.buydown_contributor_type to etl_loan;

create table staging_octane.buydown_schedule_type
(
    code varchar(128) not null
        constraint buydown_schedule_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.buydown_schedule_type owner to deployer;

grant select on staging_octane.buydown_schedule_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.buydown_schedule_type to dms_octane_writer;

grant select on staging_octane.buydown_schedule_type to etl_loan;

create table staging_octane.buydown_subsidy_calculation_type
(
    code varchar(128) not null
        constraint buydown_subsidy_calculation_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.buydown_subsidy_calculation_type owner to deployer;

grant select on staging_octane.buydown_subsidy_calculation_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.buydown_subsidy_calculation_type to dms_octane_writer;

grant select on staging_octane.buydown_subsidy_calculation_type to etl_loan;

create table staging_octane.calendar_rule_type
(
    code varchar(128) not null
        constraint calendar_rule_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.calendar_rule_type owner to deployer;

grant select on staging_octane.calendar_rule_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.calendar_rule_type to dms_octane_writer;

grant select on staging_octane.calendar_rule_type to etl_loan;

create table staging_octane.challenge_question_type
(
    code varchar(128) not null
        constraint challenge_question_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.challenge_question_type owner to deployer;

grant select on staging_octane.challenge_question_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.challenge_question_type to dms_octane_writer;

grant select on staging_octane.challenge_question_type to etl_loan;

create table staging_octane.channel_type
(
    code varchar(128) not null
        constraint channel_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.channel_type owner to deployer;

grant select on staging_octane.channel_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.channel_type to dms_octane_writer;

grant select on staging_octane.channel_type to etl_loan;

create table staging_octane.channel
(
    ch_pid bigint not null
        constraint channel_pkey
            primary key,
    ch_version integer,
    ch_account_pid bigint,
    ch_id varchar(32),
    ch_name varchar(128),
    ch_channel_type varchar(128)
);

alter table staging_octane.channel owner to deployer;

create index idx_channel__pid_version
    on staging_octane.channel (ch_pid, ch_version);

grant select on staging_octane.channel to readonly;

grant delete, insert, select, truncate, update on staging_octane.channel to dms_octane_writer;

grant select on staging_octane.channel to etl_loan;

create table staging_octane.charge_input_type
(
    code varchar(128) not null
        constraint charge_input_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.charge_input_type owner to deployer;

grant select on staging_octane.charge_input_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.charge_input_type to dms_octane_writer;

grant select on staging_octane.charge_input_type to etl_loan;

create table staging_octane.charge_payee_type
(
    code varchar(128) not null
        constraint charge_payee_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.charge_payee_type owner to deployer;

grant select on staging_octane.charge_payee_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.charge_payee_type to dms_octane_writer;

grant select on staging_octane.charge_payee_type to etl_loan;

create table staging_octane.charge_payer_type
(
    code varchar(128) not null
        constraint charge_payer_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.charge_payer_type owner to deployer;

grant select on staging_octane.charge_payer_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.charge_payer_type to dms_octane_writer;

grant select on staging_octane.charge_payer_type to etl_loan;

create table staging_octane.charge_source_type
(
    code varchar(128) not null
        constraint charge_source_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.charge_source_type owner to deployer;

grant select on staging_octane.charge_source_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.charge_source_type to dms_octane_writer;

grant select on staging_octane.charge_source_type to etl_loan;

create table staging_octane.charge_wire_action_type
(
    code varchar(128) not null
        constraint charge_wire_action_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.charge_wire_action_type owner to deployer;

grant select on staging_octane.charge_wire_action_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.charge_wire_action_type to dms_octane_writer;

grant select on staging_octane.charge_wire_action_type to etl_loan;

create table staging_octane.circumstance_change_type
(
    code varchar(128) not null
        constraint circumstance_change_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.circumstance_change_type owner to deployer;

grant select on staging_octane.circumstance_change_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.circumstance_change_type to dms_octane_writer;

grant select on staging_octane.circumstance_change_type to etl_loan;

create table staging_octane.citizenship_residency_type
(
    code varchar(128) not null
        constraint citizenship_residency_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.citizenship_residency_type owner to deployer;

grant select on staging_octane.citizenship_residency_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.citizenship_residency_type to dms_octane_writer;

grant select on staging_octane.citizenship_residency_type to etl_loan;

create table staging_octane.clg_flood_cert_status_type
(
    code varchar(128) not null
        constraint clg_flood_cert_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.clg_flood_cert_status_type owner to deployer;

grant select on staging_octane.clg_flood_cert_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.clg_flood_cert_status_type to dms_octane_writer;

grant select on staging_octane.clg_flood_cert_status_type to etl_loan;

create table staging_octane.coarse_event_type
(
    code varchar(128) not null
        constraint coarse_event_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.coarse_event_type owner to deployer;

grant select on staging_octane.coarse_event_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.coarse_event_type to dms_octane_writer;

grant select on staging_octane.coarse_event_type to etl_loan;

create table staging_octane.community_lending_type
(
    code varchar(128) not null
        constraint community_lending_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.community_lending_type owner to deployer;

grant select on staging_octane.community_lending_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.community_lending_type to dms_octane_writer;

grant select on staging_octane.community_lending_type to etl_loan;

create table staging_octane.company_admin_event_entity_type
(
    code varchar(128) not null
        constraint company_admin_event_entity_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.company_admin_event_entity_type owner to deployer;

grant select on staging_octane.company_admin_event_entity_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.company_admin_event_entity_type to dms_octane_writer;

grant select on staging_octane.company_admin_event_entity_type to etl_loan;

create table staging_octane.company_admin_event
(
    cae_pid bigint not null
        constraint company_admin_event_pkey
            primary key,
    cae_version integer,
    cae_account_pid bigint,
    cae_company_admin_event_entity_type varchar(128),
    cae_message varchar(256),
    cae_diff_list text,
    cae_unparsed_name varchar(128),
    cae_event_date date,
    cae_event_datetime timestamp,
    cae_target_entity_pid bigint
);

alter table staging_octane.company_admin_event owner to deployer;

create index idx_company_admin_event__pid_version
    on staging_octane.company_admin_event (cae_pid, cae_version);

grant select on staging_octane.company_admin_event to readonly;

grant delete, insert, select, truncate, update on staging_octane.company_admin_event to dms_octane_writer;

grant select on staging_octane.company_admin_event to etl_loan;

create table staging_octane.company_state_license_type
(
    code varchar(128) not null
        constraint company_state_license_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.company_state_license_type owner to deployer;

grant select on staging_octane.company_state_license_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.company_state_license_type to dms_octane_writer;

grant select on staging_octane.company_state_license_type to etl_loan;

create table staging_octane.config_export_permission_type
(
    code varchar(128) not null
        constraint config_export_permission_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.config_export_permission_type owner to deployer;

grant select on staging_octane.config_export_permission_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.config_export_permission_type to dms_octane_writer;

grant select on staging_octane.config_export_permission_type to etl_loan;

create table staging_octane.construction_cost_category_type
(
    code varchar(128) not null
        constraint construction_cost_category_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.construction_cost_category_type owner to deployer;

grant select on staging_octane.construction_cost_category_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.construction_cost_category_type to dms_octane_writer;

grant select on staging_octane.construction_cost_category_type to etl_loan;

create table staging_octane.construction_cost_funding_type
(
    code varchar(128) not null
        constraint construction_cost_funding_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.construction_cost_funding_type owner to deployer;

grant select on staging_octane.construction_cost_funding_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.construction_cost_funding_type to dms_octane_writer;

grant select on staging_octane.construction_cost_funding_type to etl_loan;

create table staging_octane.construction_cost_payee_type
(
    code varchar(128) not null
        constraint construction_cost_payee_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.construction_cost_payee_type owner to deployer;

grant select on staging_octane.construction_cost_payee_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.construction_cost_payee_type to dms_octane_writer;

grant select on staging_octane.construction_cost_payee_type to etl_loan;

create table staging_octane.construction_cost_status_type
(
    code varchar(128) not null
        constraint construction_cost_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.construction_cost_status_type owner to deployer;

grant select on staging_octane.construction_cost_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.construction_cost_status_type to dms_octane_writer;

grant select on staging_octane.construction_cost_status_type to etl_loan;

create table staging_octane.construction_draw_status_type
(
    code varchar(128) not null
        constraint construction_draw_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.construction_draw_status_type owner to deployer;

grant select on staging_octane.construction_draw_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.construction_draw_status_type to dms_octane_writer;

grant select on staging_octane.construction_draw_status_type to etl_loan;

create table staging_octane.construction_draw_type
(
    code varchar(128) not null
        constraint construction_draw_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.construction_draw_type owner to deployer;

grant select on staging_octane.construction_draw_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.construction_draw_type to dms_octane_writer;

grant select on staging_octane.construction_draw_type to etl_loan;

create table staging_octane.construction_lot_ownership_status_type
(
    code varchar(128) not null
        constraint construction_lot_ownership_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.construction_lot_ownership_status_type owner to deployer;

grant select on staging_octane.construction_lot_ownership_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.construction_lot_ownership_status_type to dms_octane_writer;

grant select on staging_octane.construction_lot_ownership_status_type to etl_loan;

create table staging_octane.consumer_privacy_request_type
(
    code varchar(128) not null
        constraint consumer_privacy_request_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.consumer_privacy_request_type owner to deployer;

grant select on staging_octane.consumer_privacy_request_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.consumer_privacy_request_type to dms_octane_writer;

grant select on staging_octane.consumer_privacy_request_type to etl_loan;

create table staging_octane.country_type
(
    code varchar(128) not null
        constraint country_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.country_type owner to deployer;

grant select on staging_octane.country_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.country_type to dms_octane_writer;

grant select on staging_octane.country_type to etl_loan;

create table staging_octane.account_contact
(
    ac_pid bigint not null
        constraint account_contact_pkey
            primary key,
    ac_version integer,
    ac_account_pid bigint,
    ac_unparsed_name varchar(128),
    ac_note varchar(256),
    ac_search_text varchar(256),
    ac_tags varchar(256),
    ac_first_name varchar(32),
    ac_middle_name varchar(32),
    ac_last_name varchar(32),
    ac_name_suffix varchar(32),
    ac_company_name varchar(128),
    ac_title varchar(128),
    ac_office_phone varchar(32),
    ac_office_phone_extension varchar(16),
    ac_mobile_phone varchar(32),
    ac_email varchar(256),
    ac_fax varchar(32),
    ac_address_street1 varchar(128),
    ac_address_street2 varchar(128),
    ac_address_city varchar(128),
    ac_address_state varchar(128),
    ac_address_postal_code varchar(128),
    ac_address_country varchar(128),
    ac_home_phone varchar(32),
    ac_closing_document_email varchar(256),
    ac_license_number varchar(128),
    ac_supervisory_license_number varchar(128),
    ac_license_state varchar(128)
);

alter table staging_octane.account_contact owner to deployer;

create index idx_account_contact__pid_version
    on staging_octane.account_contact (ac_pid, ac_version);

grant select on staging_octane.account_contact to readonly;

grant delete, insert, select, truncate, update on staging_octane.account_contact to dms_octane_writer;

grant select on staging_octane.account_contact to etl_loan;

create table staging_octane.courier_type
(
    code varchar(128) not null
        constraint courier_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.courier_type owner to deployer;

grant select on staging_octane.courier_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.courier_type to dms_octane_writer;

grant select on staging_octane.courier_type to etl_loan;

create table staging_octane.credit_authorization_method_type
(
    code varchar(128) not null
        constraint credit_authorization_method_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.credit_authorization_method_type owner to deployer;

grant select on staging_octane.credit_authorization_method_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.credit_authorization_method_type to dms_octane_writer;

grant select on staging_octane.credit_authorization_method_type to etl_loan;

create table staging_octane.credit_bureau_type
(
    code varchar(128) not null
        constraint credit_bureau_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.credit_bureau_type owner to deployer;

grant select on staging_octane.credit_bureau_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.credit_bureau_type to dms_octane_writer;

grant select on staging_octane.credit_bureau_type to etl_loan;

create table staging_octane.credit_business_type
(
    code varchar(128) not null
        constraint credit_business_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.credit_business_type owner to deployer;

grant select on staging_octane.credit_business_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.credit_business_type to dms_octane_writer;

grant select on staging_octane.credit_business_type to etl_loan;

create table staging_octane.credit_inquiry_explanation_type
(
    code varchar(128) not null
        constraint credit_inquiry_explanation_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.credit_inquiry_explanation_type owner to deployer;

grant select on staging_octane.credit_inquiry_explanation_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.credit_inquiry_explanation_type to dms_octane_writer;

grant select on staging_octane.credit_inquiry_explanation_type to etl_loan;

create table staging_octane.credit_inquiry_result_type
(
    code varchar(128) not null
        constraint credit_inquiry_result_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.credit_inquiry_result_type owner to deployer;

grant select on staging_octane.credit_inquiry_result_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.credit_inquiry_result_type to dms_octane_writer;

grant select on staging_octane.credit_inquiry_result_type to etl_loan;

create table staging_octane.credit_limit_type
(
    code varchar(128) not null
        constraint credit_limit_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.credit_limit_type owner to deployer;

grant select on staging_octane.credit_limit_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.credit_limit_type to dms_octane_writer;

grant select on staging_octane.credit_limit_type to etl_loan;

create table staging_octane.credit_loan_type
(
    code varchar(128) not null
        constraint credit_loan_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.credit_loan_type owner to deployer;

grant select on staging_octane.credit_loan_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.credit_loan_type to dms_octane_writer;

grant select on staging_octane.credit_loan_type to etl_loan;

create table staging_octane.credit_report_request_action_type
(
    code varchar(128) not null
        constraint credit_report_request_action_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.credit_report_request_action_type owner to deployer;

grant select on staging_octane.credit_report_request_action_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.credit_report_request_action_type to dms_octane_writer;

grant select on staging_octane.credit_report_request_action_type to etl_loan;

create table staging_octane.credit_report_type
(
    code varchar(128) not null
        constraint credit_report_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.credit_report_type owner to deployer;

grant select on staging_octane.credit_report_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.credit_report_type to dms_octane_writer;

grant select on staging_octane.credit_report_type to etl_loan;

create table staging_octane.credit_request_status_type
(
    code varchar(128) not null
        constraint credit_request_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.credit_request_status_type owner to deployer;

grant select on staging_octane.credit_request_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.credit_request_status_type to dms_octane_writer;

grant select on staging_octane.credit_request_status_type to etl_loan;

create table staging_octane.credit_request_type
(
    code varchar(128) not null
        constraint credit_request_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.credit_request_type owner to deployer;

grant select on staging_octane.credit_request_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.credit_request_type to dms_octane_writer;

grant select on staging_octane.credit_request_type to etl_loan;

create table staging_octane.credit_request_via_type
(
    code varchar(128) not null
        constraint credit_request_via_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.credit_request_via_type owner to deployer;

grant select on staging_octane.credit_request_via_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.credit_request_via_type to dms_octane_writer;

grant select on staging_octane.credit_request_via_type to etl_loan;

create table staging_octane.credit_score_model_type
(
    code varchar(128) not null
        constraint credit_score_model_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.credit_score_model_type owner to deployer;

grant select on staging_octane.credit_score_model_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.credit_score_model_type to dms_octane_writer;

grant select on staging_octane.credit_score_model_type to etl_loan;

create table staging_octane.criteria
(
    cr_pid bigint not null
        constraint criteria_pkey
            primary key,
    cr_version integer,
    cr_account_pid bigint,
    cr_criteria_source varchar(16000),
    cr_criteria_sql varchar(16000),
    cr_criteria_owner_instance_name varchar(2048),
    cr_criteria_source_html text,
    cr_criteria_source_pretty_text text
);

alter table staging_octane.criteria owner to deployer;

create index idx_criteria__pid_version
    on staging_octane.criteria (cr_pid, cr_version);

grant select on staging_octane.criteria to readonly;

grant delete, insert, select, truncate, update on staging_octane.criteria to dms_octane_writer;

grant select on staging_octane.criteria to etl_loan;

create table staging_octane.criteria_owner_type
(
    code varchar(128) not null
        constraint criteria_owner_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.criteria_owner_type owner to deployer;

grant select on staging_octane.criteria_owner_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.criteria_owner_type to dms_octane_writer;

grant select on staging_octane.criteria_owner_type to etl_loan;

create table staging_octane.criteria_pid_operand_type
(
    code varchar(128) not null
        constraint criteria_pid_operand_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.criteria_pid_operand_type owner to deployer;

grant select on staging_octane.criteria_pid_operand_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.criteria_pid_operand_type to dms_octane_writer;

grant select on staging_octane.criteria_pid_operand_type to etl_loan;

create table staging_octane.custodian
(
    cu_pid bigint not null
        constraint custodian_pkey
            primary key,
    cu_version integer,
    cu_account_pid bigint,
    cu_custodian_id varchar(32),
    cu_custodian_name varchar(128),
    cu_address_street1 varchar(128),
    cu_address_street2 varchar(128),
    cu_address_city varchar(128),
    cu_address_state varchar(128),
    cu_address_postal_code varchar(128),
    cu_address_country varchar(128),
    cu_custodian_phone varchar(32),
    cu_custodian_mers_org_id varchar(7),
    cu_whole_loan_fin varchar(11),
    cu_mbs_loan_fin varchar(11),
    cu_register_with_mers boolean
);

alter table staging_octane.custodian owner to deployer;

create index idx_custodian__pid_version
    on staging_octane.custodian (cu_pid, cu_version);

grant select on staging_octane.custodian to readonly;

grant delete, insert, select, truncate, update on staging_octane.custodian to dms_octane_writer;

grant select on staging_octane.custodian to etl_loan;

create table staging_octane.days_per_year_type
(
    code varchar(128) not null
        constraint days_per_year_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.days_per_year_type owner to deployer;

grant select on staging_octane.days_per_year_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.days_per_year_type to dms_octane_writer;

grant select on staging_octane.days_per_year_type to etl_loan;

create table staging_octane.deal_cancel_reason_type
(
    code varchar(128) not null
        constraint deal_cancel_reason_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.deal_cancel_reason_type owner to deployer;

grant select on staging_octane.deal_cancel_reason_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_cancel_reason_type to dms_octane_writer;

grant select on staging_octane.deal_cancel_reason_type to etl_loan;

create table staging_octane.deal_change_updater_time
(
    dcut_pid bigint not null
        constraint deal_change_updater_time_pkey
            primary key,
    dcut_version integer,
    dcut_account_pid bigint,
    dcut_los_loan_id_main bigint,
    dcut_start_time timestamp,
    dcut_start_date date,
    dcut_overall_duration_ms bigint,
    dcut_deal_checks_ms bigint,
    dcut_deal_updates_ms bigint,
    dcut_proposal_updates_ms bigint,
    dcut_num_proposal_updates integer,
    dcut_application_updates_ms bigint,
    dcut_num_application_updates integer,
    dcut_borrower_updates_ms bigint,
    dcut_num_borrower_updates integer,
    dcut_place_updates_ms bigint,
    dcut_num_place_updates integer,
    dcut_loan_updates_ms bigint,
    dcut_num_loan_updates integer,
    dcut_proposal_updates_after_loan_updates_ms bigint,
    dcut_updates_after_proposal_updates_ms bigint,
    dcut_proposal_summary_updates_ms bigint,
    dcut_deal_updates_after_all_proposal_updates_ms bigint,
    dcut_smart_charge_update_ms bigint,
    dcut_circumstance_change_updates_ms bigint,
    dcut_num_circumstance_change_updates integer,
    dcut_tolerance_cure_update_ms bigint,
    dcut_proposal_summary_updates_after_smart_charge_updates_ms bigint,
    dcut_update_doc_sets_ms bigint,
    dcut_closing_funds_itemization_ms bigint,
    dcut_update_ribbon_for_deal_ms bigint,
    dcut_num_construction_draw_updates integer,
    dcut_construction_draw_updates_ms bigint
);

alter table staging_octane.deal_change_updater_time owner to deployer;

create index idx_deal_change_updater_time__pid_version
    on staging_octane.deal_change_updater_time (dcut_pid, dcut_version);

grant select on staging_octane.deal_change_updater_time to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_change_updater_time to dms_octane_writer;

grant select on staging_octane.deal_change_updater_time to etl_loan;

create table staging_octane.deal_check_severity_type
(
    code varchar(128) not null
        constraint deal_check_severity_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.deal_check_severity_type owner to deployer;

grant select on staging_octane.deal_check_severity_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_check_severity_type to dms_octane_writer;

grant select on staging_octane.deal_check_severity_type to etl_loan;

create table staging_octane.deal_check_type
(
    code varchar(128) not null
        constraint deal_check_type_pkey
            primary key,
    value varchar(1024),
    dct_id_num integer
);

alter table staging_octane.deal_check_type owner to deployer;

grant select on staging_octane.deal_check_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_check_type to dms_octane_writer;

grant select on staging_octane.deal_check_type to etl_loan;

create table staging_octane.deal_child_relationship_type
(
    code varchar(128) not null
        constraint deal_child_relationship_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.deal_child_relationship_type owner to deployer;

grant select on staging_octane.deal_child_relationship_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_child_relationship_type to dms_octane_writer;

grant select on staging_octane.deal_child_relationship_type to etl_loan;

create table staging_octane.deal_child_type
(
    code varchar(128) not null
        constraint deal_child_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.deal_child_type owner to deployer;

grant select on staging_octane.deal_child_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_child_type to dms_octane_writer;

grant select on staging_octane.deal_child_type to etl_loan;

create table staging_octane.criteria_snippet
(
    crs_pid bigint not null
        constraint criteria_snippet_pkey
            primary key,
    crs_version integer,
    crs_account_pid bigint,
    crs_name varchar(35),
    crs_criteria_pid bigint,
    crs_description varchar(16000),
    crs_deal_child_type varchar(128),
    crs_compatible_with_smart_charge_case boolean,
    crs_compatible_with_smart_req boolean,
    crs_compatible_with_stack_separator boolean,
    crs_compatible_with_investor_eligibility boolean,
    crs_compatible_with_wf_smart_task boolean,
    crs_compatible_with_wf_outcome boolean,
    crs_compatible_with_wf_smart_process boolean,
    crs_compatible_with_smart_doc boolean,
    crs_compatible_with_smart_doc_validity_date_case boolean,
    crs_compatible_with_smart_charge_apr boolean
);

alter table staging_octane.criteria_snippet owner to deployer;

create index idx_criteria_snippet__pid_version
    on staging_octane.criteria_snippet (crs_pid, crs_version);

grant select on staging_octane.criteria_snippet to readonly;

grant delete, insert, select, truncate, update on staging_octane.criteria_snippet to dms_octane_writer;

grant select on staging_octane.criteria_snippet to etl_loan;

create table staging_octane.deal_contact_role_type
(
    code varchar(128) not null
        constraint deal_contact_role_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.deal_contact_role_type owner to deployer;

grant select on staging_octane.deal_contact_role_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_contact_role_type to dms_octane_writer;

grant select on staging_octane.deal_contact_role_type to etl_loan;

create table staging_octane.deal_context_permission_type
(
    code varchar(128) not null
        constraint deal_context_permission_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.deal_context_permission_type owner to deployer;

grant select on staging_octane.deal_context_permission_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_context_permission_type to dms_octane_writer;

grant select on staging_octane.deal_context_permission_type to etl_loan;

create table staging_octane.deal_create_type
(
    code varchar(128) not null
        constraint deal_create_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.deal_create_type owner to deployer;

grant select on staging_octane.deal_create_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_create_type to dms_octane_writer;

grant select on staging_octane.deal_create_type to etl_loan;

create table staging_octane.deal_event_type
(
    code varchar(128) not null
        constraint deal_event_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.deal_event_type owner to deployer;

grant select on staging_octane.deal_event_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_event_type to dms_octane_writer;

grant select on staging_octane.deal_event_type to etl_loan;

create table staging_octane.deal_id_sequence
(
    dis_id bigint not null
        constraint deal_id_sequence_pkey
            primary key
);

alter table staging_octane.deal_id_sequence owner to deployer;

grant select on staging_octane.deal_id_sequence to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_id_sequence to dms_octane_writer;

grant select on staging_octane.deal_id_sequence to etl_loan;

create table staging_octane.deal_invoice_file_type
(
    code varchar(128) not null
        constraint deal_invoice_file_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.deal_invoice_file_type owner to deployer;

grant select on staging_octane.deal_invoice_file_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_invoice_file_type to dms_octane_writer;

grant select on staging_octane.deal_invoice_file_type to etl_loan;

create table staging_octane.deal_invoice_status_type
(
    code varchar(128) not null
        constraint deal_invoice_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.deal_invoice_status_type owner to deployer;

grant select on staging_octane.deal_invoice_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_invoice_status_type to dms_octane_writer;

grant select on staging_octane.deal_invoice_status_type to etl_loan;

create table staging_octane.deal_note_scope_type
(
    code varchar(128) not null
        constraint deal_note_scope_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.deal_note_scope_type owner to deployer;

grant select on staging_octane.deal_note_scope_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_note_scope_type to dms_octane_writer;

grant select on staging_octane.deal_note_scope_type to etl_loan;

create table staging_octane.deal_orphan_status_type
(
    code varchar(128) not null
        constraint deal_orphan_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.deal_orphan_status_type owner to deployer;

grant select on staging_octane.deal_orphan_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_orphan_status_type to dms_octane_writer;

grant select on staging_octane.deal_orphan_status_type to etl_loan;

create table staging_octane.deal_stage_type
(
    code varchar(128) not null
        constraint deal_stage_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.deal_stage_type owner to deployer;

grant select on staging_octane.deal_stage_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_stage_type to dms_octane_writer;

grant select on staging_octane.deal_stage_type to etl_loan;

create table staging_octane.deal_status_type
(
    code varchar(128) not null
        constraint deal_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.deal_status_type owner to deployer;

grant select on staging_octane.deal_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_status_type to dms_octane_writer;

grant select on staging_octane.deal_status_type to etl_loan;

create table staging_octane.deal_tag_access_type
(
    code varchar(128) not null
        constraint deal_tag_access_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.deal_tag_access_type owner to deployer;

grant select on staging_octane.deal_tag_access_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_tag_access_type to dms_octane_writer;

grant select on staging_octane.deal_tag_access_type to etl_loan;

create table staging_octane.deal_tag_level_type
(
    code varchar(128) not null
        constraint deal_tag_level_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.deal_tag_level_type owner to deployer;

grant select on staging_octane.deal_tag_level_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_tag_level_type to dms_octane_writer;

grant select on staging_octane.deal_tag_level_type to etl_loan;

create table staging_octane.deal_tag_definition
(
    dtd_pid bigint not null
        constraint deal_tag_definition_pkey
            primary key,
    dtd_version integer,
    dtd_account_pid bigint,
    dtd_tag_name varchar(32),
    dtd_deal_tag_level_type varchar(128),
    dtd_deal_tag_access_type varchar(128)
);

alter table staging_octane.deal_tag_definition owner to deployer;

create index idx_deal_tag_definition__pid_version
    on staging_octane.deal_tag_definition (dtd_pid, dtd_version);

grant select on staging_octane.deal_tag_definition to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_tag_definition to dms_octane_writer;

grant select on staging_octane.deal_tag_definition to etl_loan;

create table staging_octane.deal_task_status_type
(
    code varchar(128) not null
        constraint deal_task_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.deal_task_status_type owner to deployer;

grant select on staging_octane.deal_task_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_task_status_type to dms_octane_writer;

grant select on staging_octane.deal_task_status_type to etl_loan;

create table staging_octane.decision_credit_score_calc_type
(
    code varchar(128) not null
        constraint decision_credit_score_calc_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.decision_credit_score_calc_type owner to deployer;

grant select on staging_octane.decision_credit_score_calc_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.decision_credit_score_calc_type to dms_octane_writer;

grant select on staging_octane.decision_credit_score_calc_type to etl_loan;

create table staging_octane.delivery_aus_type
(
    code varchar(128) not null
        constraint delivery_aus_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.delivery_aus_type owner to deployer;

grant select on staging_octane.delivery_aus_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.delivery_aus_type to dms_octane_writer;

grant select on staging_octane.delivery_aus_type to etl_loan;

create table staging_octane.disaster_declaration_check_date_type
(
    code varchar(128) not null
        constraint disaster_declaration_check_date_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.disaster_declaration_check_date_type owner to deployer;

grant select on staging_octane.disaster_declaration_check_date_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.disaster_declaration_check_date_type to dms_octane_writer;

grant select on staging_octane.disaster_declaration_check_date_type to etl_loan;

create table staging_octane.doc_action_type
(
    code varchar(128) not null
        constraint doc_action_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.doc_action_type owner to deployer;

grant select on staging_octane.doc_action_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.doc_action_type to dms_octane_writer;

grant select on staging_octane.doc_action_type to etl_loan;

create table staging_octane.doc_approval_type
(
    code varchar(128) not null
        constraint doc_approval_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.doc_approval_type owner to deployer;

grant select on staging_octane.doc_approval_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.doc_approval_type to dms_octane_writer;

grant select on staging_octane.doc_approval_type to etl_loan;

create table staging_octane.doc_borrower_access_mode_type
(
    code varchar(128) not null
        constraint doc_borrower_access_mode_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.doc_borrower_access_mode_type owner to deployer;

grant select on staging_octane.doc_borrower_access_mode_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.doc_borrower_access_mode_type to dms_octane_writer;

grant select on staging_octane.doc_borrower_access_mode_type to etl_loan;

create table staging_octane.doc_category_type
(
    code varchar(128) not null
        constraint doc_category_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.doc_category_type owner to deployer;

grant select on staging_octane.doc_category_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.doc_category_type to dms_octane_writer;

grant select on staging_octane.doc_category_type to etl_loan;

create table staging_octane.doc_external_provider_type
(
    code varchar(128) not null
        constraint doc_external_provider_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.doc_external_provider_type owner to deployer;

grant select on staging_octane.doc_external_provider_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.doc_external_provider_type to dms_octane_writer;

grant select on staging_octane.doc_external_provider_type to etl_loan;

create table staging_octane.doc_file_source_type
(
    code varchar(128) not null
        constraint doc_file_source_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.doc_file_source_type owner to deployer;

grant select on staging_octane.doc_file_source_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.doc_file_source_type to dms_octane_writer;

grant select on staging_octane.doc_file_source_type to etl_loan;

create table staging_octane.doc_fulfill_status_type
(
    code varchar(128) not null
        constraint doc_fulfill_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.doc_fulfill_status_type owner to deployer;

grant select on staging_octane.doc_fulfill_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.doc_fulfill_status_type to dms_octane_writer;

grant select on staging_octane.doc_fulfill_status_type to etl_loan;

create table staging_octane.doc_key_date_type
(
    code varchar(128) not null
        constraint doc_key_date_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.doc_key_date_type owner to deployer;

grant select on staging_octane.doc_key_date_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.doc_key_date_type to dms_octane_writer;

grant select on staging_octane.doc_key_date_type to etl_loan;

create table staging_octane.doc_level_type
(
    code varchar(128) not null
        constraint doc_level_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.doc_level_type owner to deployer;

grant select on staging_octane.doc_level_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.doc_level_type to dms_octane_writer;

grant select on staging_octane.doc_level_type to etl_loan;

create table staging_octane.doc_package_canceled_reason_type
(
    code varchar(128) not null
        constraint doc_package_canceled_reason_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.doc_package_canceled_reason_type owner to deployer;

grant select on staging_octane.doc_package_canceled_reason_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.doc_package_canceled_reason_type to dms_octane_writer;

grant select on staging_octane.doc_package_canceled_reason_type to etl_loan;

create table staging_octane.doc_package_delivery_method_type
(
    code varchar(128) not null
        constraint doc_package_delivery_method_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.doc_package_delivery_method_type owner to deployer;

grant select on staging_octane.doc_package_delivery_method_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.doc_package_delivery_method_type to dms_octane_writer;

grant select on staging_octane.doc_package_delivery_method_type to etl_loan;

create table staging_octane.doc_package_status_type
(
    code varchar(128) not null
        constraint doc_package_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.doc_package_status_type owner to deployer;

grant select on staging_octane.doc_package_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.doc_package_status_type to dms_octane_writer;

grant select on staging_octane.doc_package_status_type to etl_loan;

create table staging_octane.doc_permission_type
(
    code varchar(128) not null
        constraint doc_permission_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.doc_permission_type owner to deployer;

grant select on staging_octane.doc_permission_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.doc_permission_type to dms_octane_writer;

grant select on staging_octane.doc_permission_type to etl_loan;

create table staging_octane.doc_set_type
(
    code varchar(128) not null
        constraint doc_set_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.doc_set_type owner to deployer;

grant select on staging_octane.doc_set_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.doc_set_type to dms_octane_writer;

grant select on staging_octane.doc_set_type to etl_loan;

create table staging_octane.doc_validity_type
(
    code varchar(128) not null
        constraint doc_validity_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.doc_validity_type owner to deployer;

grant select on staging_octane.doc_validity_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.doc_validity_type to dms_octane_writer;

grant select on staging_octane.doc_validity_type to etl_loan;

create table staging_octane.document_import_status_type
(
    code varchar(128) not null
        constraint document_import_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.document_import_status_type owner to deployer;

grant select on staging_octane.document_import_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.document_import_status_type to dms_octane_writer;

grant select on staging_octane.document_import_status_type to etl_loan;

create table staging_octane.document_import_vendor_type
(
    code varchar(128) not null
        constraint document_import_vendor_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.document_import_vendor_type owner to deployer;

grant select on staging_octane.document_import_vendor_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.document_import_vendor_type to dms_octane_writer;

grant select on staging_octane.document_import_vendor_type to etl_loan;

create table staging_octane.du_recommendation_type
(
    code varchar(128) not null
        constraint du_recommendation_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.du_recommendation_type owner to deployer;

grant select on staging_octane.du_recommendation_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.du_recommendation_type to dms_octane_writer;

grant select on staging_octane.du_recommendation_type to etl_loan;

create table staging_octane.du_request_status_type
(
    code varchar(128) not null
        constraint du_request_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.du_request_status_type owner to deployer;

grant select on staging_octane.du_request_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.du_request_status_type to dms_octane_writer;

grant select on staging_octane.du_request_status_type to etl_loan;

create table staging_octane.dw_export_request_status_type
(
    code varchar(128) not null
        constraint dw_export_request_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.dw_export_request_status_type owner to deployer;

grant select on staging_octane.dw_export_request_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.dw_export_request_status_type to dms_octane_writer;

grant select on staging_octane.dw_export_request_status_type to etl_loan;

create table staging_octane.ecoa_denial_reason_type
(
    code varchar(128) not null
        constraint ecoa_denial_reason_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.ecoa_denial_reason_type owner to deployer;

grant select on staging_octane.ecoa_denial_reason_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.ecoa_denial_reason_type to dms_octane_writer;

grant select on staging_octane.ecoa_denial_reason_type to etl_loan;

create table staging_octane.effective_property_value_explanation_type
(
    code varchar(128) not null
        constraint effective_property_value_explanation_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.effective_property_value_explanation_type owner to deployer;

grant select on staging_octane.effective_property_value_explanation_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.effective_property_value_explanation_type to dms_octane_writer;

grant select on staging_octane.effective_property_value_explanation_type to etl_loan;

create table staging_octane.effective_property_value_type
(
    code varchar(128) not null
        constraint effective_property_value_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.effective_property_value_type owner to deployer;

grant select on staging_octane.effective_property_value_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.effective_property_value_type to dms_octane_writer;

grant select on staging_octane.effective_property_value_type to etl_loan;

create table staging_octane.email_closing_type
(
    code varchar(128) not null
        constraint email_closing_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.email_closing_type owner to deployer;

grant select on staging_octane.email_closing_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.email_closing_type to dms_octane_writer;

grant select on staging_octane.email_closing_type to etl_loan;

create table staging_octane.ernst_deed_request_type
(
    code varchar(128) not null
        constraint ernst_deed_request_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.ernst_deed_request_type owner to deployer;

grant select on staging_octane.ernst_deed_request_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.ernst_deed_request_type to dms_octane_writer;

grant select on staging_octane.ernst_deed_request_type to etl_loan;

create table staging_octane.ernst_page_rec_type
(
    code varchar(128) not null
        constraint ernst_page_rec_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.ernst_page_rec_type owner to deployer;

grant select on staging_octane.ernst_page_rec_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.ernst_page_rec_type to dms_octane_writer;

grant select on staging_octane.ernst_page_rec_type to etl_loan;

create table staging_octane.ernst_request_status_type
(
    code varchar(128) not null
        constraint ernst_request_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.ernst_request_status_type owner to deployer;

grant select on staging_octane.ernst_request_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.ernst_request_status_type to dms_octane_writer;

grant select on staging_octane.ernst_request_status_type to etl_loan;

create table staging_octane.ernst_security_instrument_request_type
(
    code varchar(128) not null
        constraint ernst_security_instrument_request_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.ernst_security_instrument_request_type owner to deployer;

grant select on staging_octane.ernst_security_instrument_request_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.ernst_security_instrument_request_type to dms_octane_writer;

grant select on staging_octane.ernst_security_instrument_request_type to etl_loan;

create table staging_octane.esign_package_status_type
(
    code varchar(128) not null
        constraint esign_package_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.esign_package_status_type owner to deployer;

grant select on staging_octane.esign_package_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.esign_package_status_type to dms_octane_writer;

grant select on staging_octane.esign_package_status_type to etl_loan;

create table staging_octane.esign_vendor_type
(
    code varchar(128) not null
        constraint esign_vendor_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.esign_vendor_type owner to deployer;

grant select on staging_octane.esign_vendor_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.esign_vendor_type to dms_octane_writer;

grant select on staging_octane.esign_vendor_type to etl_loan;

create table staging_octane.export_permission_type
(
    code varchar(128) not null
        constraint export_permission_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.export_permission_type owner to deployer;

grant select on staging_octane.export_permission_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.export_permission_type to dms_octane_writer;

grant select on staging_octane.export_permission_type to etl_loan;

create table staging_octane.export_type
(
    code varchar(128) not null
        constraint export_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.export_type owner to deployer;

grant select on staging_octane.export_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.export_type to dms_octane_writer;

grant select on staging_octane.export_type to etl_loan;

create table staging_octane.external_entity_type
(
    code varchar(128) not null
        constraint external_entity_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.external_entity_type owner to deployer;

grant select on staging_octane.external_entity_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.external_entity_type to dms_octane_writer;

grant select on staging_octane.external_entity_type to etl_loan;

create table staging_octane.fault_tolerant_event_registration
(
    fter_message_id varchar(128) not null
        constraint fault_tolerant_event_registration_pkey
            primary key,
    fter_queue_name varchar(128),
    fter_event_type varchar(128),
    fter_create_datetime timestamp,
    fter_processed_datetime timestamp
);

alter table staging_octane.fault_tolerant_event_registration owner to deployer;

grant select on staging_octane.fault_tolerant_event_registration to readonly;

grant delete, insert, select, truncate, update on staging_octane.fault_tolerant_event_registration to dms_octane_writer;

grant select on staging_octane.fault_tolerant_event_registration to etl_loan;

create table staging_octane.fema_flood_zone_designation_type
(
    code varchar(128) not null
        constraint fema_flood_zone_designation_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.fema_flood_zone_designation_type owner to deployer;

grant select on staging_octane.fema_flood_zone_designation_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.fema_flood_zone_designation_type to dms_octane_writer;

grant select on staging_octane.fema_flood_zone_designation_type to etl_loan;

create table staging_octane.fha_non_arms_length_ltv_limit_exception_type
(
    code varchar(128) not null
        constraint fha_non_arms_length_ltv_limit_exception_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.fha_non_arms_length_ltv_limit_exception_type owner to deployer;

grant select on staging_octane.fha_non_arms_length_ltv_limit_exception_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.fha_non_arms_length_ltv_limit_exception_type to dms_octane_writer;

grant select on staging_octane.fha_non_arms_length_ltv_limit_exception_type to etl_loan;

create table staging_octane.fha_program_code_type
(
    code varchar(128) not null
        constraint fha_program_code_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.fha_program_code_type owner to deployer;

grant select on staging_octane.fha_program_code_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.fha_program_code_type to dms_octane_writer;

grant select on staging_octane.fha_program_code_type to etl_loan;

create table staging_octane.fha_rehab_program_type
(
    code varchar(128) not null
        constraint fha_rehab_program_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.fha_rehab_program_type owner to deployer;

grant select on staging_octane.fha_rehab_program_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.fha_rehab_program_type to dms_octane_writer;

grant select on staging_octane.fha_rehab_program_type to etl_loan;

create table staging_octane.fha_special_program_type
(
    code varchar(128) not null
        constraint fha_special_program_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.fha_special_program_type owner to deployer;

grant select on staging_octane.fha_special_program_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.fha_special_program_type to dms_octane_writer;

grant select on staging_octane.fha_special_program_type to etl_loan;

create table staging_octane.fha_va_bor_cert_sales_price_exceeds_type
(
    code varchar(128) not null
        constraint fha_va_bor_cert_sales_price_exceeds_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.fha_va_bor_cert_sales_price_exceeds_type owner to deployer;

grant select on staging_octane.fha_va_bor_cert_sales_price_exceeds_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.fha_va_bor_cert_sales_price_exceeds_type to dms_octane_writer;

grant select on staging_octane.fha_va_bor_cert_sales_price_exceeds_type to etl_loan;

create table staging_octane.field_type
(
    code varchar(128) not null
        constraint field_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.field_type owner to deployer;

grant select on staging_octane.field_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.field_type to dms_octane_writer;

grant select on staging_octane.field_type to etl_loan;

create table staging_octane.flood_cert_vendor_type
(
    code varchar(128) not null
        constraint flood_cert_vendor_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.flood_cert_vendor_type owner to deployer;

grant select on staging_octane.flood_cert_vendor_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.flood_cert_vendor_type to dms_octane_writer;

grant select on staging_octane.flood_cert_vendor_type to etl_loan;

create table staging_octane.flood_certificate_type
(
    code varchar(128) not null
        constraint flood_certificate_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.flood_certificate_type owner to deployer;

grant select on staging_octane.flood_certificate_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.flood_certificate_type to dms_octane_writer;

grant select on staging_octane.flood_certificate_type to etl_loan;

create table staging_octane.fnm_arm_plan_type
(
    code varchar(128) not null
        constraint fnm_arm_plan_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.fnm_arm_plan_type owner to deployer;

grant select on staging_octane.fnm_arm_plan_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.fnm_arm_plan_type to dms_octane_writer;

grant select on staging_octane.fnm_arm_plan_type to etl_loan;

create table staging_octane.fnm_community_lending_product_type
(
    code varchar(128) not null
        constraint fnm_community_lending_product_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.fnm_community_lending_product_type owner to deployer;

grant select on staging_octane.fnm_community_lending_product_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.fnm_community_lending_product_type to dms_octane_writer;

grant select on staging_octane.fnm_community_lending_product_type to etl_loan;

create table staging_octane.fnm_community_seconds_repayment_structure_type
(
    code varchar(128) not null
        constraint fnm_community_seconds_repayment_structure_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.fnm_community_seconds_repayment_structure_type owner to deployer;

grant select on staging_octane.fnm_community_seconds_repayment_structure_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.fnm_community_seconds_repayment_structure_type to dms_octane_writer;

grant select on staging_octane.fnm_community_seconds_repayment_structure_type to etl_loan;

create table staging_octane.fnm_investor_remittance_type
(
    code varchar(128) not null
        constraint fnm_investor_remittance_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.fnm_investor_remittance_type owner to deployer;

grant select on staging_octane.fnm_investor_remittance_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.fnm_investor_remittance_type to dms_octane_writer;

grant select on staging_octane.fnm_investor_remittance_type to etl_loan;

create table staging_octane.fnm_mbs_loan_default_loss_party_type
(
    code varchar(128) not null
        constraint fnm_mbs_loan_default_loss_party_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.fnm_mbs_loan_default_loss_party_type owner to deployer;

grant select on staging_octane.fnm_mbs_loan_default_loss_party_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.fnm_mbs_loan_default_loss_party_type to dms_octane_writer;

grant select on staging_octane.fnm_mbs_loan_default_loss_party_type to etl_loan;

create table staging_octane.fnm_mbs_reo_marketing_party_type
(
    code varchar(128) not null
        constraint fnm_mbs_reo_marketing_party_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.fnm_mbs_reo_marketing_party_type owner to deployer;

grant select on staging_octane.fnm_mbs_reo_marketing_party_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.fnm_mbs_reo_marketing_party_type to dms_octane_writer;

grant select on staging_octane.fnm_mbs_reo_marketing_party_type to etl_loan;

create table staging_octane.for_further_credit_type
(
    code varchar(128) not null
        constraint for_further_credit_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.for_further_credit_type owner to deployer;

grant select on staging_octane.for_further_credit_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.for_further_credit_type to dms_octane_writer;

grant select on staging_octane.for_further_credit_type to etl_loan;

create table staging_octane.fre_community_program_type
(
    code varchar(128) not null
        constraint fre_community_program_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.fre_community_program_type owner to deployer;

grant select on staging_octane.fre_community_program_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.fre_community_program_type to dms_octane_writer;

grant select on staging_octane.fre_community_program_type to etl_loan;

create table staging_octane.fre_ctp_closing_feature_type
(
    code varchar(128) not null
        constraint fre_ctp_closing_feature_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.fre_ctp_closing_feature_type owner to deployer;

grant select on staging_octane.fre_ctp_closing_feature_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.fre_ctp_closing_feature_type to dms_octane_writer;

grant select on staging_octane.fre_ctp_closing_feature_type to etl_loan;

create table staging_octane.fre_doc_level_description_type
(
    code varchar(128) not null
        constraint fre_doc_level_description_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.fre_doc_level_description_type owner to deployer;

grant select on staging_octane.fre_doc_level_description_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.fre_doc_level_description_type to dms_octane_writer;

grant select on staging_octane.fre_doc_level_description_type to etl_loan;

create table staging_octane.fre_purchase_eligibility_type
(
    code varchar(128) not null
        constraint fre_purchase_eligibility_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.fre_purchase_eligibility_type owner to deployer;

grant select on staging_octane.fre_purchase_eligibility_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.fre_purchase_eligibility_type to dms_octane_writer;

grant select on staging_octane.fre_purchase_eligibility_type to etl_loan;

create table staging_octane.fund_source_type
(
    code varchar(128) not null
        constraint fund_source_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.fund_source_type owner to deployer;

grant select on staging_octane.fund_source_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.fund_source_type to dms_octane_writer;

grant select on staging_octane.fund_source_type to etl_loan;

create table staging_octane.funding_status_type
(
    code varchar(128) not null
        constraint funding_status_type_pkey
            primary key,
    value varchar(1024),
    fst_ordinal integer
);

alter table staging_octane.funding_status_type owner to deployer;

grant select on staging_octane.funding_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.funding_status_type to dms_octane_writer;

grant select on staging_octane.funding_status_type to etl_loan;

create table staging_octane.gender_type
(
    code varchar(128) not null
        constraint gender_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.gender_type owner to deployer;

grant select on staging_octane.gender_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.gender_type to dms_octane_writer;

grant select on staging_octane.gender_type to etl_loan;

create table staging_octane.gift_funds_type
(
    code varchar(128) not null
        constraint gift_funds_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.gift_funds_type owner to deployer;

grant select on staging_octane.gift_funds_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.gift_funds_type to dms_octane_writer;

grant select on staging_octane.gift_funds_type to etl_loan;

create table staging_octane.account_grant_program
(
    agp_pid bigint not null
        constraint account_grant_program_pkey
            primary key,
    agp_version integer,
    agp_account_pid bigint,
    agp_from_date date,
    agp_through_date date,
    agp_program_id varchar(32),
    agp_program_name varchar(128),
    agp_program_funds_type varchar(128),
    agp_donor_name varchar(128),
    agp_donor_phone varchar(32),
    agp_address_street1 varchar(128),
    agp_address_street2 varchar(128),
    agp_address_city varchar(128),
    agp_address_state varchar(128),
    agp_address_postal_code varchar(128),
    agp_address_country varchar(128),
    agp_ein varchar(10),
    agp_wire_action_type varchar(128),
    agp_notes varchar(1024)
);

alter table staging_octane.account_grant_program owner to deployer;

create index idx_account_grant_program__pid_version
    on staging_octane.account_grant_program (agp_pid, agp_version);

grant select on staging_octane.account_grant_program to readonly;

grant delete, insert, select, truncate, update on staging_octane.account_grant_program to dms_octane_writer;

grant select on staging_octane.account_grant_program to etl_loan;

create table staging_octane.gse_version_type
(
    code varchar(128) not null
        constraint gse_version_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.gse_version_type owner to deployer;

grant select on staging_octane.gse_version_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.gse_version_type to dms_octane_writer;

grant select on staging_octane.gse_version_type to etl_loan;

create table staging_octane.heloc_cancel_fee_applicable_type
(
    code varchar(128) not null
        constraint heloc_cancel_fee_applicable_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.heloc_cancel_fee_applicable_type owner to deployer;

grant select on staging_octane.heloc_cancel_fee_applicable_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.heloc_cancel_fee_applicable_type to dms_octane_writer;

grant select on staging_octane.heloc_cancel_fee_applicable_type to etl_loan;

create table staging_octane.hmda_action_type
(
    code varchar(128) not null
        constraint hmda_action_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.hmda_action_type owner to deployer;

grant select on staging_octane.hmda_action_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.hmda_action_type to dms_octane_writer;

grant select on staging_octane.hmda_action_type to etl_loan;

create table staging_octane.hmda_agency_id_type
(
    code varchar(128) not null
        constraint hmda_agency_id_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.hmda_agency_id_type owner to deployer;

grant select on staging_octane.hmda_agency_id_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.hmda_agency_id_type to dms_octane_writer;

grant select on staging_octane.hmda_agency_id_type to etl_loan;

create table staging_octane.hmda_denial_reason_type
(
    code varchar(128) not null
        constraint hmda_denial_reason_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.hmda_denial_reason_type owner to deployer;

grant select on staging_octane.hmda_denial_reason_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.hmda_denial_reason_type to dms_octane_writer;

grant select on staging_octane.hmda_denial_reason_type to etl_loan;

create table staging_octane.hmda_ethnicity_2017_type
(
    code varchar(128) not null
        constraint hmda_ethnicity_2017_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.hmda_ethnicity_2017_type owner to deployer;

grant select on staging_octane.hmda_ethnicity_2017_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.hmda_ethnicity_2017_type to dms_octane_writer;

grant select on staging_octane.hmda_ethnicity_2017_type to etl_loan;

create table staging_octane.hmda_hoepa_status_type
(
    code varchar(128) not null
        constraint hmda_hoepa_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.hmda_hoepa_status_type owner to deployer;

grant select on staging_octane.hmda_hoepa_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.hmda_hoepa_status_type to dms_octane_writer;

grant select on staging_octane.hmda_hoepa_status_type to etl_loan;

create table staging_octane.hmda_purchaser_of_loan_2017_type
(
    code varchar(128) not null
        constraint hmda_purchaser_of_loan_2017_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.hmda_purchaser_of_loan_2017_type owner to deployer;

grant select on staging_octane.hmda_purchaser_of_loan_2017_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.hmda_purchaser_of_loan_2017_type to dms_octane_writer;

grant select on staging_octane.hmda_purchaser_of_loan_2017_type to etl_loan;

create table staging_octane.hmda_purchaser_of_loan_2018_type
(
    code varchar(128) not null
        constraint hmda_purchaser_of_loan_2018_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.hmda_purchaser_of_loan_2018_type owner to deployer;

grant select on staging_octane.hmda_purchaser_of_loan_2018_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.hmda_purchaser_of_loan_2018_type to dms_octane_writer;

grant select on staging_octane.hmda_purchaser_of_loan_2018_type to etl_loan;

create table staging_octane.hmda_race_2017_type
(
    code varchar(128) not null
        constraint hmda_race_2017_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.hmda_race_2017_type owner to deployer;

grant select on staging_octane.hmda_race_2017_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.hmda_race_2017_type to dms_octane_writer;

grant select on staging_octane.hmda_race_2017_type to etl_loan;

create table staging_octane.hoepa_thresholds
(
    ht_pid bigint not null
        constraint hoepa_thresholds_pkey
            primary key,
    ht_version integer,
    ht_effective_date date,
    ht_total_loan_amount_threshold numeric(15),
    ht_points_and_fees_threshold_amount numeric(15),
    ht_first_lien_rate_spread_threshold numeric(11,9),
    ht_subordinate_lien_rate_spread_threshold numeric(11,9),
    ht_max_points_and_fees_percent_over_threshold numeric(11,9),
    ht_max_points_and_fees_percent_under_threshold numeric(11,9)
);

alter table staging_octane.hoepa_thresholds owner to deployer;

create index idx_hoepa_thresholds__pid_version
    on staging_octane.hoepa_thresholds (ht_pid, ht_version);

grant select on staging_octane.hoepa_thresholds to readonly;

grant delete, insert, select, truncate, update on staging_octane.hoepa_thresholds to dms_octane_writer;

grant select on staging_octane.hoepa_thresholds to etl_loan;

create table staging_octane.homeownership_education_type
(
    code varchar(128) not null
        constraint homeownership_education_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.homeownership_education_type owner to deployer;

grant select on staging_octane.homeownership_education_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.homeownership_education_type to dms_octane_writer;

grant select on staging_octane.homeownership_education_type to etl_loan;

create table staging_octane.housing_counseling_agency_type
(
    code varchar(128) not null
        constraint housing_counseling_agency_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.housing_counseling_agency_type owner to deployer;

grant select on staging_octane.housing_counseling_agency_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.housing_counseling_agency_type to dms_octane_writer;

grant select on staging_octane.housing_counseling_agency_type to etl_loan;

create table staging_octane.housing_counseling_type
(
    code varchar(128) not null
        constraint housing_counseling_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.housing_counseling_type owner to deployer;

grant select on staging_octane.housing_counseling_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.housing_counseling_type to dms_octane_writer;

grant select on staging_octane.housing_counseling_type to etl_loan;

create table staging_octane.hud_fha_de_approval_type
(
    code varchar(128) not null
        constraint hud_fha_de_approval_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.hud_fha_de_approval_type owner to deployer;

grant select on staging_octane.hud_fha_de_approval_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.hud_fha_de_approval_type to dms_octane_writer;

grant select on staging_octane.hud_fha_de_approval_type to etl_loan;

create table staging_octane.hve_confidence_level_type
(
    code varchar(128) not null
        constraint hve_confidence_level_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.hve_confidence_level_type owner to deployer;

grant select on staging_octane.hve_confidence_level_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.hve_confidence_level_type to dms_octane_writer;

grant select on staging_octane.hve_confidence_level_type to etl_loan;

create table staging_octane.income_history_calc_method_type
(
    code varchar(128) not null
        constraint income_history_calc_method_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.income_history_calc_method_type owner to deployer;

grant select on staging_octane.income_history_calc_method_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.income_history_calc_method_type to dms_octane_writer;

grant select on staging_octane.income_history_calc_method_type to etl_loan;

create table staging_octane.intent_to_proceed_type
(
    code varchar(128) not null
        constraint intent_to_proceed_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.intent_to_proceed_type owner to deployer;

grant select on staging_octane.intent_to_proceed_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.intent_to_proceed_type to dms_octane_writer;

grant select on staging_octane.intent_to_proceed_type to etl_loan;

create table staging_octane.interest_only_type
(
    code varchar(128) not null
        constraint interest_only_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.interest_only_type owner to deployer;

grant select on staging_octane.interest_only_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.interest_only_type to dms_octane_writer;

grant select on staging_octane.interest_only_type to etl_loan;

create table staging_octane.interim_funder_mers_registration_type
(
    code varchar(128) not null
        constraint interim_funder_mers_registration_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.interim_funder_mers_registration_type owner to deployer;

grant select on staging_octane.interim_funder_mers_registration_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.interim_funder_mers_registration_type to dms_octane_writer;

grant select on staging_octane.interim_funder_mers_registration_type to etl_loan;

create table staging_octane.interim_funder
(
    if_pid bigint not null
        constraint interim_funder_pkey
            primary key,
    if_version integer,
    if_account_pid bigint,
    if_company_name varchar(128),
    if_company_contact_unparsed_name varchar(128),
    if_company_address_street1 varchar(128),
    if_company_address_street2 varchar(128),
    if_company_address_city varchar(128),
    if_company_address_state varchar(128),
    if_company_address_postal_code varchar(128),
    if_company_address_country varchar(128),
    if_company_office_phone varchar(32),
    if_company_office_phone_extension varchar(16),
    if_company_email varchar(256),
    if_company_fax varchar(32),
    if_company_mers_org_id varchar(7),
    if_remarks varchar(1024),
    if_from_date date,
    if_through_date date,
    if_custodian_pid bigint,
    if_reimbursement_wire_credit_to_name varchar(128),
    if_reimbursement_wire_attention_unparsed_name varchar(128),
    if_reimbursement_wire_authorized_signer_unparsed_name varchar(128),
    if_return_wire_credit_to_name varchar(128),
    if_return_wire_attention_unparsed_name varchar(128),
    if_return_wire_authorized_signer_unparsed_name varchar(128),
    if_fnm_payee_id varchar(9),
    if_interim_funder_mers_registration_type varchar(128),
    if_fnm_warehouse_lender_id varchar(32),
    if_fre_warehouse_lender_id varchar(32),
    if_funder_id varchar(32)
);

alter table staging_octane.interim_funder owner to deployer;

create index idx_interim_funder__pid_version
    on staging_octane.interim_funder (if_pid, if_version);

grant select on staging_octane.interim_funder to readonly;

grant delete, insert, select, truncate, update on staging_octane.interim_funder to dms_octane_writer;

grant select on staging_octane.interim_funder to etl_loan;

create table staging_octane.credit_limit
(
    cl_pid bigint not null
        constraint credit_limit_pkey
            primary key,
    cl_version integer,
    cl_interim_funder_pid bigint,
    cl_credit_limit_name varchar(128),
    cl_credit_limit_amount numeric(15,2),
    cl_credit_limit_type varchar(128),
    cl_from_date date,
    cl_through_date date
);

alter table staging_octane.credit_limit owner to deployer;

create index idx_credit_limit__pid_version
    on staging_octane.credit_limit (cl_pid, cl_version);

grant select on staging_octane.credit_limit to readonly;

grant delete, insert, select, truncate, update on staging_octane.credit_limit to dms_octane_writer;

grant select on staging_octane.credit_limit to etl_loan;

create table staging_octane.investor_group
(
    ig_pid bigint not null
        constraint investor_group_pkey
            primary key,
    ig_version integer,
    ig_account_pid bigint,
    ig_name varchar(128),
    ig_lender_group boolean
);

alter table staging_octane.investor_group owner to deployer;

create index idx_investor_group__pid_version
    on staging_octane.investor_group (ig_pid, ig_version);

grant select on staging_octane.investor_group to readonly;

grant delete, insert, select, truncate, update on staging_octane.investor_group to dms_octane_writer;

grant select on staging_octane.investor_group to etl_loan;

create table staging_octane.investor_hmda_purchaser_of_loan_type
(
    code varchar(128) not null
        constraint investor_hmda_purchaser_of_loan_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.investor_hmda_purchaser_of_loan_type owner to deployer;

grant select on staging_octane.investor_hmda_purchaser_of_loan_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.investor_hmda_purchaser_of_loan_type to dms_octane_writer;

grant select on staging_octane.investor_hmda_purchaser_of_loan_type to etl_loan;

create table staging_octane.investor_lock_status_type
(
    code varchar(128) not null
        constraint investor_lock_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.investor_lock_status_type owner to deployer;

grant select on staging_octane.investor_lock_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.investor_lock_status_type to dms_octane_writer;

grant select on staging_octane.investor_lock_status_type to etl_loan;

create table staging_octane.invoice_item_category_type
(
    code varchar(128) not null
        constraint invoice_item_category_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.invoice_item_category_type owner to deployer;

grant select on staging_octane.invoice_item_category_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.invoice_item_category_type to dms_octane_writer;

grant select on staging_octane.invoice_item_category_type to etl_loan;

create table staging_octane.invoice_payer_type
(
    code varchar(128) not null
        constraint invoice_payer_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.invoice_payer_type owner to deployer;

grant select on staging_octane.invoice_payer_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.invoice_payer_type to dms_octane_writer;

grant select on staging_octane.invoice_payer_type to etl_loan;

create table staging_octane.invoice_payment_submission_type
(
    code varchar(128) not null
        constraint invoice_payment_submission_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.invoice_payment_submission_type owner to deployer;

grant select on staging_octane.invoice_payment_submission_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.invoice_payment_submission_type to dms_octane_writer;

grant select on staging_octane.invoice_payment_submission_type to etl_loan;

create table staging_octane.ipc_calc_type
(
    code varchar(128) not null
        constraint ipc_calc_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.ipc_calc_type owner to deployer;

grant select on staging_octane.ipc_calc_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.ipc_calc_type to dms_octane_writer;

grant select on staging_octane.ipc_calc_type to etl_loan;

create table staging_octane.ipc_comparison_operator_type
(
    code varchar(128) not null
        constraint ipc_comparison_operator_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.ipc_comparison_operator_type owner to deployer;

grant select on staging_octane.ipc_comparison_operator_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.ipc_comparison_operator_type to dms_octane_writer;

grant select on staging_octane.ipc_comparison_operator_type to etl_loan;

create table staging_octane.ipc_property_usage_type
(
    code varchar(128) not null
        constraint ipc_property_usage_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.ipc_property_usage_type owner to deployer;

grant select on staging_octane.ipc_property_usage_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.ipc_property_usage_type to dms_octane_writer;

grant select on staging_octane.ipc_property_usage_type to etl_loan;

create table staging_octane.job_gap_reason_type
(
    code varchar(128) not null
        constraint job_gap_reason_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.job_gap_reason_type owner to deployer;

grant select on staging_octane.job_gap_reason_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.job_gap_reason_type to dms_octane_writer;

grant select on staging_octane.job_gap_reason_type to etl_loan;

create table staging_octane.key_creditor_type
(
    code varchar(128) not null
        constraint key_creditor_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.key_creditor_type owner to deployer;

grant select on staging_octane.key_creditor_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.key_creditor_type to dms_octane_writer;

grant select on staging_octane.key_creditor_type to etl_loan;

create table staging_octane.key_doc_type
(
    code varchar(128) not null
        constraint key_doc_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.key_doc_type owner to deployer;

grant select on staging_octane.key_doc_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.key_doc_type to dms_octane_writer;

grant select on staging_octane.key_doc_type to etl_loan;

create table staging_octane.key_package_type
(
    code varchar(128) not null
        constraint key_package_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.key_package_type owner to deployer;

grant select on staging_octane.key_package_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.key_package_type to dms_octane_writer;

grant select on staging_octane.key_package_type to etl_loan;

create table staging_octane.key_role_type
(
    code varchar(128) not null
        constraint key_role_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.key_role_type owner to deployer;

grant select on staging_octane.key_role_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.key_role_type to dms_octane_writer;

grant select on staging_octane.key_role_type to etl_loan;

create table staging_octane.lava_zone_type
(
    code varchar(128) not null
        constraint lava_zone_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lava_zone_type owner to deployer;

grant select on staging_octane.lava_zone_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lava_zone_type to dms_octane_writer;

grant select on staging_octane.lava_zone_type to etl_loan;

create table staging_octane.legacy_role_assignment_type
(
    code varchar(128) not null
        constraint legacy_role_assignment_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.legacy_role_assignment_type owner to deployer;

grant select on staging_octane.legacy_role_assignment_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.legacy_role_assignment_type to dms_octane_writer;

grant select on staging_octane.legacy_role_assignment_type to etl_loan;

create table staging_octane.legal_description_type
(
    code varchar(128) not null
        constraint legal_description_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.legal_description_type owner to deployer;

grant select on staging_octane.legal_description_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.legal_description_type to dms_octane_writer;

grant select on staging_octane.legal_description_type to etl_loan;

create table staging_octane.legal_entity_type
(
    code varchar(128) not null
        constraint legal_entity_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.legal_entity_type owner to deployer;

grant select on staging_octane.legal_entity_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.legal_entity_type to dms_octane_writer;

grant select on staging_octane.legal_entity_type to etl_loan;

create table staging_octane.lender_concession_request_status_type
(
    code varchar(128) not null
        constraint lender_concession_request_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lender_concession_request_status_type owner to deployer;

grant select on staging_octane.lender_concession_request_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_concession_request_status_type to dms_octane_writer;

grant select on staging_octane.lender_concession_request_status_type to etl_loan;

create table staging_octane.lender_concession_request_type
(
    code varchar(128) not null
        constraint lender_concession_request_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lender_concession_request_type owner to deployer;

grant select on staging_octane.lender_concession_request_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_concession_request_type to dms_octane_writer;

grant select on staging_octane.lender_concession_request_type to etl_loan;

create table staging_octane.lender_lock_id_ticker
(
    lltk_pid bigint not null
        constraint lender_lock_id_ticker_pkey
            primary key,
    lltk_version integer,
    lltk_account_pid bigint,
    lltk_next_lender_lock_id bigint
);

alter table staging_octane.lender_lock_id_ticker owner to deployer;

create index idx_lender_lock_id_ticker__pid_version
    on staging_octane.lender_lock_id_ticker (lltk_pid, lltk_version);

grant select on staging_octane.lender_lock_id_ticker to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_lock_id_ticker to dms_octane_writer;

grant select on staging_octane.lender_lock_id_ticker to etl_loan;

create table staging_octane.lender_lock_status_type
(
    code varchar(128) not null
        constraint lender_lock_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lender_lock_status_type owner to deployer;

grant select on staging_octane.lender_lock_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_lock_status_type to dms_octane_writer;

grant select on staging_octane.lender_lock_status_type to etl_loan;

create table staging_octane.lender_toolbox_permission_type
(
    code varchar(128) not null
        constraint lender_toolbox_permission_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lender_toolbox_permission_type owner to deployer;

grant select on staging_octane.lender_toolbox_permission_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_toolbox_permission_type to dms_octane_writer;

grant select on staging_octane.lender_toolbox_permission_type to etl_loan;

create table staging_octane.lender_trade_id_ticker
(
    lttk_pid bigint not null
        constraint lender_trade_id_ticker_pkey
            primary key,
    lttk_version integer,
    lttk_account_pid bigint,
    lttk_next_lender_trade_id bigint
);

alter table staging_octane.lender_trade_id_ticker owner to deployer;

create index idx_lender_trade_id_ticker__pid_version
    on staging_octane.lender_trade_id_ticker (lttk_pid, lttk_version);

grant select on staging_octane.lender_trade_id_ticker to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_trade_id_ticker to dms_octane_writer;

grant select on staging_octane.lender_trade_id_ticker to etl_loan;

create table staging_octane.lender_user_allowed_ip_status_type
(
    code varchar(128) not null
        constraint lender_user_allowed_ip_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lender_user_allowed_ip_status_type owner to deployer;

grant select on staging_octane.lender_user_allowed_ip_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_user_allowed_ip_status_type to dms_octane_writer;

grant select on staging_octane.lender_user_allowed_ip_status_type to etl_loan;

create table staging_octane.lender_user_interest
(
    lui_pid bigint not null
        constraint lender_user_interest_pkey
            primary key,
    lui_version integer,
    lui_lender_user_pid bigint,
    lui_lender_user_interest_type varchar(128)
);

alter table staging_octane.lender_user_interest owner to deployer;

create index idx_lender_user_interest__pid_version
    on staging_octane.lender_user_interest (lui_pid, lui_version);

grant select on staging_octane.lender_user_interest to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_user_interest to dms_octane_writer;

grant select on staging_octane.lender_user_interest to etl_loan;

create table staging_octane.lender_user_interest_type
(
    code varchar(128) not null
        constraint lender_user_interest_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lender_user_interest_type owner to deployer;

grant select on staging_octane.lender_user_interest_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_user_interest_type to dms_octane_writer;

grant select on staging_octane.lender_user_interest_type to etl_loan;

create table staging_octane.lender_user_language
(
    lul_pid bigint not null
        constraint lender_user_language_pkey
            primary key,
    lul_version integer,
    lul_lender_user_pid bigint,
    lul_lender_user_language_type varchar(128)
);

alter table staging_octane.lender_user_language owner to deployer;

create index idx_lender_user_language__pid_version
    on staging_octane.lender_user_language (lul_pid, lul_version);

grant select on staging_octane.lender_user_language to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_user_language to dms_octane_writer;

grant select on staging_octane.lender_user_language to etl_loan;

create table staging_octane.lender_user_language_type
(
    code varchar(128) not null
        constraint lender_user_language_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lender_user_language_type owner to deployer;

grant select on staging_octane.lender_user_language_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_user_language_type to dms_octane_writer;

grant select on staging_octane.lender_user_language_type to etl_loan;

create table staging_octane.lender_user_notice_type
(
    code varchar(128) not null
        constraint lender_user_notice_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lender_user_notice_type owner to deployer;

grant select on staging_octane.lender_user_notice_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_user_notice_type to dms_octane_writer;

grant select on staging_octane.lender_user_notice_type to etl_loan;

create table staging_octane.lender_user_reset_type
(
    code varchar(128) not null
        constraint lender_user_reset_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lender_user_reset_type owner to deployer;

grant select on staging_octane.lender_user_reset_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_user_reset_type to dms_octane_writer;

grant select on staging_octane.lender_user_reset_type to etl_loan;

create table staging_octane.lender_user_role_queue_type
(
    code varchar(128) not null
        constraint lender_user_role_queue_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lender_user_role_queue_type owner to deployer;

grant select on staging_octane.lender_user_role_queue_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_user_role_queue_type to dms_octane_writer;

grant select on staging_octane.lender_user_role_queue_type to etl_loan;

create table staging_octane.lender_user_status_type
(
    code varchar(128) not null
        constraint lender_user_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lender_user_status_type owner to deployer;

grant select on staging_octane.lender_user_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_user_status_type to dms_octane_writer;

grant select on staging_octane.lender_user_status_type to etl_loan;

create table staging_octane.lender_user_type
(
    code varchar(128) not null
        constraint lender_user_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lender_user_type owner to deployer;

grant select on staging_octane.lender_user_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_user_type to dms_octane_writer;

grant select on staging_octane.lender_user_type to etl_loan;

create table staging_octane.liability_account_ownership_type
(
    code varchar(128) not null
        constraint liability_account_ownership_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.liability_account_ownership_type owner to deployer;

grant select on staging_octane.liability_account_ownership_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.liability_account_ownership_type to dms_octane_writer;

grant select on staging_octane.liability_account_ownership_type to etl_loan;

create table staging_octane.liability_account_status_type
(
    code varchar(128) not null
        constraint liability_account_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.liability_account_status_type owner to deployer;

grant select on staging_octane.liability_account_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.liability_account_status_type to dms_octane_writer;

grant select on staging_octane.liability_account_status_type to etl_loan;

create table staging_octane.liability_current_rating_type
(
    code varchar(128) not null
        constraint liability_current_rating_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.liability_current_rating_type owner to deployer;

grant select on staging_octane.liability_current_rating_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.liability_current_rating_type to dms_octane_writer;

grant select on staging_octane.liability_current_rating_type to etl_loan;

create table staging_octane.liability_disposition_type
(
    code varchar(128) not null
        constraint liability_disposition_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.liability_disposition_type owner to deployer;

grant select on staging_octane.liability_disposition_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.liability_disposition_type to dms_octane_writer;

grant select on staging_octane.liability_disposition_type to etl_loan;

create table staging_octane.liability_energy_related_type
(
    code varchar(128) not null
        constraint liability_energy_related_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.liability_energy_related_type owner to deployer;

grant select on staging_octane.liability_energy_related_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.liability_energy_related_type to dms_octane_writer;

grant select on staging_octane.liability_energy_related_type to etl_loan;

create table staging_octane.liability_financing_type
(
    code varchar(128) not null
        constraint liability_financing_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.liability_financing_type owner to deployer;

grant select on staging_octane.liability_financing_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.liability_financing_type to dms_octane_writer;

grant select on staging_octane.liability_financing_type to etl_loan;

create table staging_octane.liability_foreclosure_exception_type
(
    code varchar(128) not null
        constraint liability_foreclosure_exception_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.liability_foreclosure_exception_type owner to deployer;

grant select on staging_octane.liability_foreclosure_exception_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.liability_foreclosure_exception_type to dms_octane_writer;

grant select on staging_octane.liability_foreclosure_exception_type to etl_loan;

create table staging_octane.liability_mi_type
(
    code varchar(128) not null
        constraint liability_mi_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.liability_mi_type owner to deployer;

grant select on staging_octane.liability_mi_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.liability_mi_type to dms_octane_writer;

grant select on staging_octane.liability_mi_type to etl_loan;

create table staging_octane.liability_type
(
    code varchar(128) not null
        constraint liability_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.liability_type owner to deployer;

grant select on staging_octane.liability_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.liability_type to dms_octane_writer;

grant select on staging_octane.liability_type to etl_loan;

create table staging_octane.license_type
(
    code varchar(128) not null
        constraint license_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.license_type owner to deployer;

grant select on staging_octane.license_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.license_type to dms_octane_writer;

grant select on staging_octane.license_type to etl_loan;

create table staging_octane.lien_priority_type
(
    code varchar(128) not null
        constraint lien_priority_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lien_priority_type owner to deployer;

grant select on staging_octane.lien_priority_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lien_priority_type to dms_octane_writer;

grant select on staging_octane.lien_priority_type to etl_loan;

create table staging_octane.loan_access_type
(
    code varchar(128) not null
        constraint loan_access_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.loan_access_type owner to deployer;

grant select on staging_octane.loan_access_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_access_type to dms_octane_writer;

grant select on staging_octane.loan_access_type to etl_loan;

create table staging_octane.loan_amortization_type
(
    code varchar(128) not null
        constraint loan_amortization_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.loan_amortization_type owner to deployer;

grant select on staging_octane.loan_amortization_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_amortization_type to dms_octane_writer;

grant select on staging_octane.loan_amortization_type to etl_loan;

create table staging_octane.apor
(
    ap_pid bigint not null
        constraint apor_pkey
            primary key,
    ap_version integer,
    ap_as_of_date date,
    ap_loan_amortization_type varchar(128),
    ap_term_years integer,
    ap_apor_percent numeric(11,9)
);

alter table staging_octane.apor owner to deployer;

create index idx_apor__pid_version
    on staging_octane.apor (ap_pid, ap_version);

grant select on staging_octane.apor to readonly;

grant delete, insert, select, truncate, update on staging_octane.apor to dms_octane_writer;

grant select on staging_octane.apor to etl_loan;

create table staging_octane.loan_benef_transfer_status_type
(
    code varchar(128) not null
        constraint loan_benef_transfer_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.loan_benef_transfer_status_type owner to deployer;

grant select on staging_octane.loan_benef_transfer_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_benef_transfer_status_type to dms_octane_writer;

grant select on staging_octane.loan_benef_transfer_status_type to etl_loan;

create table staging_octane.loan_file_delivery_method_type
(
    code varchar(128) not null
        constraint loan_file_delivery_method_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.loan_file_delivery_method_type owner to deployer;

grant select on staging_octane.loan_file_delivery_method_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_file_delivery_method_type to dms_octane_writer;

grant select on staging_octane.loan_file_delivery_method_type to etl_loan;

create table staging_octane.loan_limit_table_type
(
    code varchar(128) not null
        constraint loan_limit_table_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.loan_limit_table_type owner to deployer;

grant select on staging_octane.loan_limit_table_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_limit_table_type to dms_octane_writer;

grant select on staging_octane.loan_limit_table_type to etl_loan;

create table staging_octane.loan_limit_table
(
    llt_pid bigint not null
        constraint loan_limit_table_pkey
            primary key,
    llt_version integer,
    llt_account_pid bigint,
    llt_from_date date,
    llt_loan_limit_table_type varchar(128),
    llt_uploader_unparsed_name varchar(128),
    llt_upload_datetime timestamp
);

alter table staging_octane.loan_limit_table owner to deployer;

create index idx_loan_limit_table__pid_version
    on staging_octane.loan_limit_table (llt_pid, llt_version);

grant select on staging_octane.loan_limit_table to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_limit_table to dms_octane_writer;

grant select on staging_octane.loan_limit_table to etl_loan;

create table staging_octane.loan_limit_type
(
    code varchar(128) not null
        constraint loan_limit_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.loan_limit_type owner to deployer;

grant select on staging_octane.loan_limit_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_limit_type to dms_octane_writer;

grant select on staging_octane.loan_limit_type to etl_loan;

create table staging_octane.loan_position_type
(
    code varchar(128) not null
        constraint loan_position_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.loan_position_type owner to deployer;

grant select on staging_octane.loan_position_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_position_type to dms_octane_writer;

grant select on staging_octane.loan_position_type to etl_loan;

create table staging_octane.loan_purpose_type
(
    code varchar(128) not null
        constraint loan_purpose_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.loan_purpose_type owner to deployer;

grant select on staging_octane.loan_purpose_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_purpose_type to dms_octane_writer;

grant select on staging_octane.loan_purpose_type to etl_loan;

create table staging_octane.loan_safe_product_type
(
    code varchar(128) not null
        constraint loan_safe_product_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.loan_safe_product_type owner to deployer;

grant select on staging_octane.loan_safe_product_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_safe_product_type to dms_octane_writer;

grant select on staging_octane.loan_safe_product_type to etl_loan;

create table staging_octane.loans_toolbox_permission_type
(
    code varchar(128) not null
        constraint loans_toolbox_permission_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.loans_toolbox_permission_type owner to deployer;

grant select on staging_octane.loans_toolbox_permission_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.loans_toolbox_permission_type to dms_octane_writer;

grant select on staging_octane.loans_toolbox_permission_type to etl_loan;

create table staging_octane.lock_add_on_type
(
    code varchar(128) not null
        constraint lock_add_on_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lock_add_on_type owner to deployer;

grant select on staging_octane.lock_add_on_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lock_add_on_type to dms_octane_writer;

grant select on staging_octane.lock_add_on_type to etl_loan;

create table staging_octane.lock_commitment_type
(
    code varchar(128) not null
        constraint lock_commitment_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lock_commitment_type owner to deployer;

grant select on staging_octane.lock_commitment_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lock_commitment_type to dms_octane_writer;

grant select on staging_octane.lock_commitment_type to etl_loan;

create table staging_octane.lock_extension_status_type
(
    code varchar(128) not null
        constraint lock_extension_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lock_extension_status_type owner to deployer;

grant select on staging_octane.lock_extension_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lock_extension_status_type to dms_octane_writer;

grant select on staging_octane.lock_extension_status_type to etl_loan;

create table staging_octane.lock_term_setting
(
    lts_pid bigint not null
        constraint lock_term_setting_pkey
            primary key,
    lts_version integer,
    lts_account_pid bigint,
    lts_lock_duration_days integer,
    lts_lock_commitment_type varchar(128),
    lts_borrower_app_enabled boolean
);

alter table staging_octane.lock_term_setting owner to deployer;

create index idx_lock_term_setting__pid_version
    on staging_octane.lock_term_setting (lts_pid, lts_version);

grant select on staging_octane.lock_term_setting to readonly;

grant delete, insert, select, truncate, update on staging_octane.lock_term_setting to dms_octane_writer;

grant select on staging_octane.lock_term_setting to etl_loan;

create table staging_octane.los_loan_id_ticker
(
    ltk_pid bigint not null
        constraint los_loan_id_ticker_pkey
            primary key,
    ltk_version integer,
    ltk_account_pid bigint,
    ltk_next_los_loan_id bigint
);

alter table staging_octane.los_loan_id_ticker owner to deployer;

create index idx_los_loan_id_ticker__pid_version
    on staging_octane.los_loan_id_ticker (ltk_pid, ltk_version);

grant select on staging_octane.los_loan_id_ticker to readonly;

grant delete, insert, select, truncate, update on staging_octane.los_loan_id_ticker to dms_octane_writer;

grant select on staging_octane.los_loan_id_ticker to etl_loan;

create table staging_octane.lp_case_state_type
(
    code varchar(128) not null
        constraint lp_case_state_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lp_case_state_type owner to deployer;

grant select on staging_octane.lp_case_state_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lp_case_state_type to dms_octane_writer;

grant select on staging_octane.lp_case_state_type to etl_loan;

create table staging_octane.lp_credit_risk_classification_type
(
    code varchar(128) not null
        constraint lp_credit_risk_classification_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lp_credit_risk_classification_type owner to deployer;

grant select on staging_octane.lp_credit_risk_classification_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lp_credit_risk_classification_type to dms_octane_writer;

grant select on staging_octane.lp_credit_risk_classification_type to etl_loan;

create table staging_octane.lp_dtd_version_type
(
    code varchar(128) not null
        constraint lp_dtd_version_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lp_dtd_version_type owner to deployer;

grant select on staging_octane.lp_dtd_version_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lp_dtd_version_type to dms_octane_writer;

grant select on staging_octane.lp_dtd_version_type to etl_loan;

create table staging_octane.lp_evaluation_status_type
(
    code varchar(128) not null
        constraint lp_evaluation_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lp_evaluation_status_type owner to deployer;

grant select on staging_octane.lp_evaluation_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lp_evaluation_status_type to dms_octane_writer;

grant select on staging_octane.lp_evaluation_status_type to etl_loan;

create table staging_octane.lp_finding_message_type
(
    code varchar(128) not null
        constraint lp_finding_message_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lp_finding_message_type owner to deployer;

grant select on staging_octane.lp_finding_message_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lp_finding_message_type to dms_octane_writer;

grant select on staging_octane.lp_finding_message_type to etl_loan;

create table staging_octane.lp_interface_version_type
(
    code varchar(128) not null
        constraint lp_interface_version_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lp_interface_version_type owner to deployer;

grant select on staging_octane.lp_interface_version_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lp_interface_version_type to dms_octane_writer;

grant select on staging_octane.lp_interface_version_type to etl_loan;

create table staging_octane.lp_request_status_type
(
    code varchar(128) not null
        constraint lp_request_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lp_request_status_type owner to deployer;

grant select on staging_octane.lp_request_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lp_request_status_type to dms_octane_writer;

grant select on staging_octane.lp_request_status_type to etl_loan;

create table staging_octane.lp_submission_type
(
    code varchar(128) not null
        constraint lp_submission_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lp_submission_type owner to deployer;

grant select on staging_octane.lp_submission_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lp_submission_type to dms_octane_writer;

grant select on staging_octane.lp_submission_type to etl_loan;

create table staging_octane.lqa_purchase_eligibility_type
(
    code varchar(128) not null
        constraint lqa_purchase_eligibility_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lqa_purchase_eligibility_type owner to deployer;

grant select on staging_octane.lqa_purchase_eligibility_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lqa_purchase_eligibility_type to dms_octane_writer;

grant select on staging_octane.lqa_purchase_eligibility_type to etl_loan;

create table staging_octane.lura_file_repository_type
(
    code varchar(128) not null
        constraint lura_file_repository_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lura_file_repository_type owner to deployer;

grant select on staging_octane.lura_file_repository_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lura_file_repository_type to dms_octane_writer;

grant select on staging_octane.lura_file_repository_type to etl_loan;

create table staging_octane.lura_setting_type
(
    code varchar(128) not null
        constraint lura_setting_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.lura_setting_type owner to deployer;

grant select on staging_octane.lura_setting_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lura_setting_type to dms_octane_writer;

grant select on staging_octane.lura_setting_type to etl_loan;

create table staging_octane.manufactured_home_certificate_of_title_type
(
    code varchar(128) not null
        constraint manufactured_home_certificate_of_title_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.manufactured_home_certificate_of_title_type owner to deployer;

grant select on staging_octane.manufactured_home_certificate_of_title_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.manufactured_home_certificate_of_title_type to dms_octane_writer;

grant select on staging_octane.manufactured_home_certificate_of_title_type to etl_loan;

create table staging_octane.manufactured_home_leasehold_property_interest_type
(
    code varchar(128) not null
        constraint manufactured_home_leasehold_property_interest_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.manufactured_home_leasehold_property_interest_type owner to deployer;

grant select on staging_octane.manufactured_home_leasehold_property_interest_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.manufactured_home_leasehold_property_interest_type to dms_octane_writer;

grant select on staging_octane.manufactured_home_leasehold_property_interest_type to etl_loan;

create table staging_octane.manufactured_home_loan_purpose_type
(
    code varchar(128) not null
        constraint manufactured_home_loan_purpose_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.manufactured_home_loan_purpose_type owner to deployer;

grant select on staging_octane.manufactured_home_loan_purpose_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.manufactured_home_loan_purpose_type to dms_octane_writer;

grant select on staging_octane.manufactured_home_loan_purpose_type to etl_loan;

create table staging_octane.marital_status_type
(
    code varchar(128) not null
        constraint marital_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.marital_status_type owner to deployer;

grant select on staging_octane.marital_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.marital_status_type to dms_octane_writer;

grant select on staging_octane.marital_status_type to etl_loan;

create table staging_octane.master_property_insurance_type
(
    code varchar(128) not null
        constraint master_property_insurance_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.master_property_insurance_type owner to deployer;

grant select on staging_octane.master_property_insurance_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.master_property_insurance_type to dms_octane_writer;

grant select on staging_octane.master_property_insurance_type to etl_loan;

create table staging_octane.mcr_loan_status_type
(
    code varchar(128) not null
        constraint mcr_loan_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.mcr_loan_status_type owner to deployer;

grant select on staging_octane.mcr_loan_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.mcr_loan_status_type to dms_octane_writer;

grant select on staging_octane.mcr_loan_status_type to etl_loan;

create table staging_octane.mercury_client_group
(
    mcg_pid bigint not null
        constraint mercury_client_group_pkey
            primary key,
    mcg_version integer,
    mcg_account_pid bigint,
    mcg_mercury_client_group_name varchar(1024),
    mcg_mercury_client_group_id integer,
    mcg_active boolean
);

alter table staging_octane.mercury_client_group owner to deployer;

create index idx_mercury_client_group__pid_version
    on staging_octane.mercury_client_group (mcg_pid, mcg_version);

grant select on staging_octane.mercury_client_group to readonly;

grant delete, insert, select, truncate, update on staging_octane.mercury_client_group to dms_octane_writer;

grant select on staging_octane.mercury_client_group to etl_loan;

create table staging_octane.mercury_network_status_type
(
    code varchar(128) not null
        constraint mercury_network_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.mercury_network_status_type owner to deployer;

grant select on staging_octane.mercury_network_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.mercury_network_status_type to dms_octane_writer;

grant select on staging_octane.mercury_network_status_type to etl_loan;

create table staging_octane.mers_daily_report_import_status_type
(
    code varchar(128) not null
        constraint mers_daily_report_import_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.mers_daily_report_import_status_type owner to deployer;

grant select on staging_octane.mers_daily_report_import_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.mers_daily_report_import_status_type to dms_octane_writer;

grant select on staging_octane.mers_daily_report_import_status_type to etl_loan;

create table staging_octane.mers_registration_status_type
(
    code varchar(128) not null
        constraint mers_registration_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.mers_registration_status_type owner to deployer;

grant select on staging_octane.mers_registration_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.mers_registration_status_type to dms_octane_writer;

grant select on staging_octane.mers_registration_status_type to etl_loan;

create table staging_octane.mers_transfer_batch
(
    metb_pid bigint not null
        constraint mers_transfer_batch_pkey
            primary key,
    metb_version integer,
    metb_account_pid bigint,
    metb_create_datetime timestamp,
    metb_sent_datetime timestamp,
    metb_batch_id varchar(32)
);

alter table staging_octane.mers_transfer_batch owner to deployer;

create index idx_mers_transfer_batch__pid_version
    on staging_octane.mers_transfer_batch (metb_pid, metb_version);

grant select on staging_octane.mers_transfer_batch to readonly;

grant delete, insert, select, truncate, update on staging_octane.mers_transfer_batch to dms_octane_writer;

grant select on staging_octane.mers_transfer_batch to etl_loan;

create table staging_octane.mers_transfer_status_type
(
    code varchar(128) not null
        constraint mers_transfer_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.mers_transfer_status_type owner to deployer;

grant select on staging_octane.mers_transfer_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.mers_transfer_status_type to dms_octane_writer;

grant select on staging_octane.mers_transfer_status_type to etl_loan;

create table staging_octane.mi_calculated_rate_type
(
    code varchar(128) not null
        constraint mi_calculated_rate_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.mi_calculated_rate_type owner to deployer;

grant select on staging_octane.mi_calculated_rate_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.mi_calculated_rate_type to dms_octane_writer;

grant select on staging_octane.mi_calculated_rate_type to etl_loan;

create table staging_octane.mi_company_name_type
(
    code varchar(128) not null
        constraint mi_company_name_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.mi_company_name_type owner to deployer;

grant select on staging_octane.mi_company_name_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.mi_company_name_type to dms_octane_writer;

grant select on staging_octane.mi_company_name_type to etl_loan;

create table staging_octane.mi_initial_calculation_type
(
    code varchar(128) not null
        constraint mi_initial_calculation_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.mi_initial_calculation_type owner to deployer;

grant select on staging_octane.mi_initial_calculation_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.mi_initial_calculation_type to dms_octane_writer;

grant select on staging_octane.mi_initial_calculation_type to etl_loan;

create table staging_octane.mi_input_type
(
    code varchar(128) not null
        constraint mi_input_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.mi_input_type owner to deployer;

grant select on staging_octane.mi_input_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.mi_input_type to dms_octane_writer;

grant select on staging_octane.mi_input_type to etl_loan;

create table staging_octane.mi_integration_request_type
(
    code varchar(128) not null
        constraint mi_integration_request_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.mi_integration_request_type owner to deployer;

grant select on staging_octane.mi_integration_request_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.mi_integration_request_type to dms_octane_writer;

grant select on staging_octane.mi_integration_request_type to etl_loan;

create table staging_octane.mi_integration_vendor_request_status_type
(
    code varchar(128) not null
        constraint mi_integration_vendor_request_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.mi_integration_vendor_request_status_type owner to deployer;

grant select on staging_octane.mi_integration_vendor_request_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.mi_integration_vendor_request_status_type to dms_octane_writer;

grant select on staging_octane.mi_integration_vendor_request_status_type to etl_loan;

create table staging_octane.mi_payer_type
(
    code varchar(128) not null
        constraint mi_payer_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.mi_payer_type owner to deployer;

grant select on staging_octane.mi_payer_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.mi_payer_type to dms_octane_writer;

grant select on staging_octane.mi_payer_type to etl_loan;

create table staging_octane.mi_payment_type
(
    code varchar(128) not null
        constraint mi_payment_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.mi_payment_type owner to deployer;

grant select on staging_octane.mi_payment_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.mi_payment_type to dms_octane_writer;

grant select on staging_octane.mi_payment_type to etl_loan;

create table staging_octane.mi_premium_refundable_type
(
    code varchar(128) not null
        constraint mi_premium_refundable_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.mi_premium_refundable_type owner to deployer;

grant select on staging_octane.mi_premium_refundable_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.mi_premium_refundable_type to dms_octane_writer;

grant select on staging_octane.mi_premium_refundable_type to etl_loan;

create table staging_octane.mi_renewal_calculation_type
(
    code varchar(128) not null
        constraint mi_renewal_calculation_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.mi_renewal_calculation_type owner to deployer;

grant select on staging_octane.mi_renewal_calculation_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.mi_renewal_calculation_type to dms_octane_writer;

grant select on staging_octane.mi_renewal_calculation_type to etl_loan;

create table staging_octane.mi_submission_type
(
    code varchar(128) not null
        constraint mi_submission_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.mi_submission_type owner to deployer;

grant select on staging_octane.mi_submission_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.mi_submission_type to dms_octane_writer;

grant select on staging_octane.mi_submission_type to etl_loan;

create table staging_octane.military_branch_type
(
    code varchar(128) not null
        constraint military_branch_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.military_branch_type owner to deployer;

grant select on staging_octane.military_branch_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.military_branch_type to dms_octane_writer;

grant select on staging_octane.military_branch_type to etl_loan;

create table staging_octane.military_service_type
(
    code varchar(128) not null
        constraint military_service_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.military_service_type owner to deployer;

grant select on staging_octane.military_service_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.military_service_type to dms_octane_writer;

grant select on staging_octane.military_service_type to etl_loan;

create table staging_octane.military_status_type
(
    code varchar(128) not null
        constraint military_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.military_status_type owner to deployer;

grant select on staging_octane.military_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.military_status_type to dms_octane_writer;

grant select on staging_octane.military_status_type to etl_loan;

create table staging_octane.mismo_version_type
(
    code varchar(128) not null
        constraint mismo_version_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.mismo_version_type owner to deployer;

grant select on staging_octane.mismo_version_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.mismo_version_type to dms_octane_writer;

grant select on staging_octane.mismo_version_type to etl_loan;

create table staging_octane.mortech_account
(
    ma_pid bigint not null
        constraint mortech_account_pkey
            primary key,
    ma_version integer,
    ma_account_pid bigint,
    ma_name varchar(128),
    ma_mortech_customer_id varchar(128)
);

alter table staging_octane.mortech_account owner to deployer;

create index idx_mortech_account__pid_version
    on staging_octane.mortech_account (ma_pid, ma_version);

grant select on staging_octane.mortech_account to readonly;

grant delete, insert, select, truncate, update on staging_octane.mortech_account to dms_octane_writer;

grant select on staging_octane.mortech_account to etl_loan;

create table staging_octane.lead_source
(
    lds_pid bigint not null
        constraint lead_source_pkey
            primary key,
    lds_version integer,
    lds_account_pid bigint,
    lds_channel_pid bigint,
    lds_lead_source_name varchar(128),
    lds_mortech_lead_source_id varchar(16),
    lds_lead_source_id varchar(32),
    lds_active boolean,
    lds_lead_id_required boolean,
    lds_zero_margin_allowed boolean,
    lds_mortech_account_pid bigint,
    lds_training_only boolean,
    lds_broker_compensation_type varchar(128)
);

alter table staging_octane.lead_source owner to deployer;

create index idx_lead_source__pid_version
    on staging_octane.lead_source (lds_pid, lds_version);

grant select on staging_octane.lead_source to readonly;

grant delete, insert, select, truncate, update on staging_octane.lead_source to dms_octane_writer;

grant select on staging_octane.lead_source to etl_loan;

create table staging_octane.lead_campaign
(
    ldc_pid bigint not null
        constraint lead_campaign_pkey
            primary key,
    ldc_version integer,
    ldc_account_pid bigint,
    ldc_lead_source_pid bigint,
    ldc_campaign_id varchar(32),
    ldc_campaign_name varchar(128),
    ldc_velocify_campaign_title varchar(32)
);

alter table staging_octane.lead_campaign owner to deployer;

create index idx_lead_campaign__pid_version
    on staging_octane.lead_campaign (ldc_pid, ldc_version);

grant select on staging_octane.lead_campaign to readonly;

grant delete, insert, select, truncate, update on staging_octane.lead_campaign to dms_octane_writer;

grant select on staging_octane.lead_campaign to etl_loan;

create table staging_octane.lead_supplemental_margin_table
(
    lsmt_pid bigint not null
        constraint lead_supplemental_margin_table_pkey
            primary key,
    lsmt_version integer,
    lsmt_lead_source_pid bigint,
    lsmt_effective_datetime timestamp
);

alter table staging_octane.lead_supplemental_margin_table owner to deployer;

create index idx_lead_supplemental_margin_table__pid_version
    on staging_octane.lead_supplemental_margin_table (lsmt_pid, lsmt_version);

grant select on staging_octane.lead_supplemental_margin_table to readonly;

grant delete, insert, select, truncate, update on staging_octane.lead_supplemental_margin_table to dms_octane_writer;

grant select on staging_octane.lead_supplemental_margin_table to etl_loan;

create table staging_octane.lead_supplemental_margin_row
(
    lsmr_pid bigint not null
        constraint lead_supplemental_margin_row_pkey
            primary key,
    lsmr_version integer,
    lsmr_lead_supplemental_margin_table_pid bigint,
    lsmr_over_anchor_rate_percent numeric(11,9),
    lsmr_company_supplemental_margin_percent numeric(11,9),
    lsmr_branch_supplemental_margin_percent numeric(11,9)
);

alter table staging_octane.lead_supplemental_margin_row owner to deployer;

create index idx_lead_supplemental_margin_row__pid_version
    on staging_octane.lead_supplemental_margin_row (lsmr_pid, lsmr_version);

grant select on staging_octane.lead_supplemental_margin_row to readonly;

grant delete, insert, select, truncate, update on staging_octane.lead_supplemental_margin_row to dms_octane_writer;

grant select on staging_octane.lead_supplemental_margin_row to etl_loan;

create table staging_octane.mortgage_credit_certificate_issuer
(
    mcci_pid bigint not null
        constraint mortgage_credit_certificate_issuer_pkey
            primary key,
    mcci_version integer,
    mcci_account_pid bigint,
    mcci_from_date date,
    mcci_through_date date,
    mcci_issuer_name varchar(128),
    mcci_credit_rate_percent numeric(11,9),
    mcci_ein varchar(10),
    mcci_contact_name varchar(128),
    mcci_contact_phone varchar(128),
    mcci_address_street1 varchar(128),
    mcci_address_street2 varchar(128),
    mcci_address_city varchar(128),
    mcci_address_state varchar(128),
    mcci_address_postal_code varchar(128),
    mcci_contact_email varchar(256),
    mcci_web_url varchar(256),
    mcci_notes varchar(1024)
);

alter table staging_octane.mortgage_credit_certificate_issuer owner to deployer;

create index idx_mortgage_credit_certificate_issuer__pid_version
    on staging_octane.mortgage_credit_certificate_issuer (mcci_pid, mcci_version);

grant select on staging_octane.mortgage_credit_certificate_issuer to readonly;

grant delete, insert, select, truncate, update on staging_octane.mortgage_credit_certificate_issuer to dms_octane_writer;

grant select on staging_octane.mortgage_credit_certificate_issuer to etl_loan;

create table staging_octane.mortgage_type
(
    code varchar(128) not null
        constraint mortgage_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.mortgage_type owner to deployer;

grant select on staging_octane.mortgage_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.mortgage_type to dms_octane_writer;

grant select on staging_octane.mortgage_type to etl_loan;

create table staging_octane.native_american_lands_type
(
    code varchar(128) not null
        constraint native_american_lands_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.native_american_lands_type owner to deployer;

grant select on staging_octane.native_american_lands_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.native_american_lands_type to dms_octane_writer;

grant select on staging_octane.native_american_lands_type to etl_loan;

create table staging_octane.negative_amortization_type
(
    code varchar(128) not null
        constraint negative_amortization_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.negative_amortization_type owner to deployer;

grant select on staging_octane.negative_amortization_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.negative_amortization_type to dms_octane_writer;

grant select on staging_octane.negative_amortization_type to etl_loan;

create table staging_octane.neighborhood_location_type
(
    code varchar(128) not null
        constraint neighborhood_location_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.neighborhood_location_type owner to deployer;

grant select on staging_octane.neighborhood_location_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.neighborhood_location_type to dms_octane_writer;

grant select on staging_octane.neighborhood_location_type to etl_loan;

create table staging_octane.net_tangible_benefit_type
(
    code varchar(128) not null
        constraint net_tangible_benefit_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.net_tangible_benefit_type owner to deployer;

grant select on staging_octane.net_tangible_benefit_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.net_tangible_benefit_type to dms_octane_writer;

grant select on staging_octane.net_tangible_benefit_type to etl_loan;

create table staging_octane.nfip_community_participation_status_type
(
    code varchar(128) not null
        constraint nfip_community_participation_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.nfip_community_participation_status_type owner to deployer;

grant select on staging_octane.nfip_community_participation_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.nfip_community_participation_status_type to dms_octane_writer;

grant select on staging_octane.nfip_community_participation_status_type to etl_loan;

create table staging_octane.obligation_amount_input_type
(
    code varchar(128) not null
        constraint obligation_amount_input_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.obligation_amount_input_type owner to deployer;

grant select on staging_octane.obligation_amount_input_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.obligation_amount_input_type to dms_octane_writer;

grant select on staging_octane.obligation_amount_input_type to etl_loan;

create table staging_octane.obligation_charge_input_type
(
    code varchar(128) not null
        constraint obligation_charge_input_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.obligation_charge_input_type owner to deployer;

grant select on staging_octane.obligation_charge_input_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.obligation_charge_input_type to dms_octane_writer;

grant select on staging_octane.obligation_charge_input_type to etl_loan;

create table staging_octane.obligation_type
(
    code varchar(128) not null
        constraint obligation_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.obligation_type owner to deployer;

grant select on staging_octane.obligation_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.obligation_type to dms_octane_writer;

grant select on staging_octane.obligation_type to etl_loan;

create table staging_octane.offering_group
(
    ofg_pid bigint not null
        constraint offering_group_pkey
            primary key,
    ofg_version integer,
    ofg_account_pid bigint,
    ofg_name varchar(128)
);

alter table staging_octane.offering_group owner to deployer;

create index idx_offering_group__pid_version
    on staging_octane.offering_group (ofg_pid, ofg_version);

grant select on staging_octane.offering_group to readonly;

grant delete, insert, select, truncate, update on staging_octane.offering_group to dms_octane_writer;

grant select on staging_octane.offering_group to etl_loan;

create table staging_octane.offering
(
    of_pid bigint not null
        constraint offering_pkey
            primary key,
    of_version integer,
    of_account_pid bigint,
    of_offering_name varchar(128),
    of_offering_id varchar(32),
    of_from_date date,
    of_through_date date,
    of_mortech_product_id varchar(16),
    of_offering_group_pid bigint,
    of_adverse_action_offering boolean
);

alter table staging_octane.offering owner to deployer;

create index idx_offering__pid_version
    on staging_octane.offering (of_pid, of_version);

grant select on staging_octane.offering to readonly;

grant delete, insert, select, truncate, update on staging_octane.offering to dms_octane_writer;

grant select on staging_octane.offering to etl_loan;

create table staging_octane.origination_source_type
(
    code varchar(128) not null
        constraint origination_source_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.origination_source_type owner to deployer;

grant select on staging_octane.origination_source_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.origination_source_type to dms_octane_writer;

grant select on staging_octane.origination_source_type to etl_loan;

create table staging_octane.other_income_type
(
    code varchar(128) not null
        constraint other_income_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.other_income_type owner to deployer;

grant select on staging_octane.other_income_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.other_income_type to dms_octane_writer;

grant select on staging_octane.other_income_type to etl_loan;

create table staging_octane.partial_payment_policy_type
(
    code varchar(128) not null
        constraint partial_payment_policy_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.partial_payment_policy_type owner to deployer;

grant select on staging_octane.partial_payment_policy_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.partial_payment_policy_type to dms_octane_writer;

grant select on staging_octane.partial_payment_policy_type to etl_loan;

create table staging_octane.payment_adjustment_calculation_type
(
    code varchar(128) not null
        constraint payment_adjustment_calculation_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.payment_adjustment_calculation_type owner to deployer;

grant select on staging_octane.payment_adjustment_calculation_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.payment_adjustment_calculation_type to dms_octane_writer;

grant select on staging_octane.payment_adjustment_calculation_type to etl_loan;

create table staging_octane.payment_frequency_type
(
    code varchar(128) not null
        constraint payment_frequency_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.payment_frequency_type owner to deployer;

grant select on staging_octane.payment_frequency_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.payment_frequency_type to dms_octane_writer;

grant select on staging_octane.payment_frequency_type to etl_loan;

create table staging_octane.payment_fulfill_type
(
    code varchar(128) not null
        constraint payment_fulfill_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.payment_fulfill_type owner to deployer;

grant select on staging_octane.payment_fulfill_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.payment_fulfill_type to dms_octane_writer;

grant select on staging_octane.payment_fulfill_type to etl_loan;

create table staging_octane.payment_processing_company_type
(
    code varchar(128) not null
        constraint payment_processing_company_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.payment_processing_company_type owner to deployer;

grant select on staging_octane.payment_processing_company_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.payment_processing_company_type to dms_octane_writer;

grant select on staging_octane.payment_processing_company_type to etl_loan;

create table staging_octane.payment_request_type
(
    code varchar(128) not null
        constraint payment_request_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.payment_request_type owner to deployer;

grant select on staging_octane.payment_request_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.payment_request_type to dms_octane_writer;

grant select on staging_octane.payment_request_type to etl_loan;

create table staging_octane.payment_structure_type
(
    code varchar(128) not null
        constraint payment_structure_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.payment_structure_type owner to deployer;

grant select on staging_octane.payment_structure_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.payment_structure_type to dms_octane_writer;

grant select on staging_octane.payment_structure_type to etl_loan;

create table staging_octane.payment_type
(
    code varchar(128) not null
        constraint payment_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.payment_type owner to deployer;

grant select on staging_octane.payment_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.payment_type to dms_octane_writer;

grant select on staging_octane.payment_type to etl_loan;

create table staging_octane.payoff_request_delivery_type
(
    code varchar(128) not null
        constraint payoff_request_delivery_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.payoff_request_delivery_type owner to deployer;

grant select on staging_octane.payoff_request_delivery_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.payoff_request_delivery_type to dms_octane_writer;

grant select on staging_octane.payoff_request_delivery_type to etl_loan;

create table staging_octane.performer_team
(
    ptm_pid bigint not null
        constraint performer_team_pkey
            primary key,
    ptm_version integer,
    ptm_account_pid bigint,
    ptm_name varchar(128)
);

alter table staging_octane.performer_team owner to deployer;

create index idx_performer_team__pid_version
    on staging_octane.performer_team (ptm_pid, ptm_version);

grant select on staging_octane.performer_team to readonly;

grant delete, insert, select, truncate, update on staging_octane.performer_team to dms_octane_writer;

grant select on staging_octane.performer_team to etl_loan;

create table staging_octane.polling_interval_type
(
    code varchar(128) not null
        constraint polling_interval_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.polling_interval_type owner to deployer;

grant select on staging_octane.polling_interval_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.polling_interval_type to dms_octane_writer;

grant select on staging_octane.polling_interval_type to etl_loan;

create table staging_octane.prepaid_interest_rate_type
(
    code varchar(128) not null
        constraint prepaid_interest_rate_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.prepaid_interest_rate_type owner to deployer;

grant select on staging_octane.prepaid_interest_rate_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.prepaid_interest_rate_type to dms_octane_writer;

grant select on staging_octane.prepaid_interest_rate_type to etl_loan;

create table staging_octane.prepay_penalty_schedule_type
(
    code varchar(128) not null
        constraint prepay_penalty_schedule_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.prepay_penalty_schedule_type owner to deployer;

grant select on staging_octane.prepay_penalty_schedule_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.prepay_penalty_schedule_type to dms_octane_writer;

grant select on staging_octane.prepay_penalty_schedule_type to etl_loan;

create table staging_octane.prepay_penalty_type
(
    code varchar(128) not null
        constraint prepay_penalty_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.prepay_penalty_type owner to deployer;

grant select on staging_octane.prepay_penalty_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.prepay_penalty_type to dms_octane_writer;

grant select on staging_octane.prepay_penalty_type to etl_loan;

create table staging_octane.price_processing_time
(
    ppt_pid bigint not null
        constraint price_processing_time_pkey
            primary key,
    ppt_version integer,
    ppt_account_pid bigint,
    ppt_los_loan_id_main bigint,
    ppt_start_time timestamp,
    ppt_start_date date,
    ppt_overall_duration_ms bigint,
    ppt_pre_mortech_time_ms bigint,
    ppt_post_mortech_time_ms bigint,
    ppt_num_of_mortech_requests integer,
    ppt_mortech_request_url_1 text,
    ppt_mortech_request_start_time_1 timestamp,
    ppt_mortech_request_time_ms_1 bigint,
    ppt_mortech_request_url_2 text,
    ppt_mortech_request_start_time_2 timestamp,
    ppt_mortech_request_time_ms_2 bigint,
    ppt_mortech_request_url_3 text,
    ppt_mortech_request_start_time_3 timestamp,
    ppt_mortech_request_time_ms_3 bigint,
    ppt_mortech_request_url_4 text,
    ppt_mortech_request_start_time_4 timestamp,
    ppt_mortech_request_time_ms_4 bigint,
    ppt_mortech_request_url_5 text,
    ppt_mortech_request_start_time_5 timestamp,
    ppt_mortech_request_time_ms_5 bigint,
    ppt_mortech_request_url_6 text,
    ppt_mortech_request_start_time_6 timestamp,
    ppt_mortech_request_time_ms_6 bigint,
    ppt_mortech_request_url_7 text,
    ppt_mortech_request_start_time_7 timestamp,
    ppt_mortech_request_time_ms_7 bigint,
    ppt_mortech_request_url_8 text,
    ppt_mortech_request_start_time_8 timestamp,
    ppt_mortech_request_time_ms_8 bigint
);

alter table staging_octane.price_processing_time owner to deployer;

create index idx_price_processing_time__pid_version
    on staging_octane.price_processing_time (ppt_pid, ppt_version);

grant select on staging_octane.price_processing_time to readonly;

grant delete, insert, select, truncate, update on staging_octane.price_processing_time to dms_octane_writer;

grant select on staging_octane.price_processing_time to etl_loan;

create table staging_octane.pricing_engine_type
(
    code varchar(128) not null
        constraint pricing_engine_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.pricing_engine_type owner to deployer;

grant select on staging_octane.pricing_engine_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.pricing_engine_type to dms_octane_writer;

grant select on staging_octane.pricing_engine_type to etl_loan;

create table staging_octane.prior_property_title_type
(
    code varchar(128) not null
        constraint prior_property_title_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.prior_property_title_type owner to deployer;

grant select on staging_octane.prior_property_title_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.prior_property_title_type to dms_octane_writer;

grant select on staging_octane.prior_property_title_type to etl_loan;

create table staging_octane.prior_to_type
(
    code varchar(128) not null
        constraint prior_to_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.prior_to_type owner to deployer;

grant select on staging_octane.prior_to_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.prior_to_type to dms_octane_writer;

grant select on staging_octane.prior_to_type to etl_loan;

create table staging_octane.product_appraisal_requirement_type
(
    code varchar(128) not null
        constraint product_appraisal_requirement_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.product_appraisal_requirement_type owner to deployer;

grant select on staging_octane.product_appraisal_requirement_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.product_appraisal_requirement_type to dms_octane_writer;

grant select on staging_octane.product_appraisal_requirement_type to etl_loan;

create table staging_octane.product_rule_domain_input_type
(
    code varchar(128) not null
        constraint product_rule_domain_input_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.product_rule_domain_input_type owner to deployer;

grant select on staging_octane.product_rule_domain_input_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.product_rule_domain_input_type to dms_octane_writer;

grant select on staging_octane.product_rule_domain_input_type to etl_loan;

create table staging_octane.product_side_type
(
    code varchar(128) not null
        constraint product_side_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.product_side_type owner to deployer;

grant select on staging_octane.product_side_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.product_side_type to dms_octane_writer;

grant select on staging_octane.product_side_type to etl_loan;

create table staging_octane.product_special_program_type
(
    code varchar(128) not null
        constraint product_special_program_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.product_special_program_type owner to deployer;

grant select on staging_octane.product_special_program_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.product_special_program_type to dms_octane_writer;

grant select on staging_octane.product_special_program_type to etl_loan;

create table staging_octane.profit_margin_type
(
    code varchar(128) not null
        constraint profit_margin_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.profit_margin_type owner to deployer;

grant select on staging_octane.profit_margin_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.profit_margin_type to dms_octane_writer;

grant select on staging_octane.profit_margin_type to etl_loan;

create table staging_octane.project_classification_type
(
    code varchar(128) not null
        constraint project_classification_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.project_classification_type owner to deployer;

grant select on staging_octane.project_classification_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.project_classification_type to dms_octane_writer;

grant select on staging_octane.project_classification_type to etl_loan;

create table staging_octane.project_design_type
(
    code varchar(128) not null
        constraint project_design_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.project_design_type owner to deployer;

grant select on staging_octane.project_design_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.project_design_type to dms_octane_writer;

grant select on staging_octane.project_design_type to etl_loan;

create table staging_octane.property_category_type
(
    code varchar(128) not null
        constraint property_category_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.property_category_type owner to deployer;

grant select on staging_octane.property_category_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.property_category_type to dms_octane_writer;

grant select on staging_octane.property_category_type to etl_loan;

create table staging_octane.property_repairs_holdback_calc_type
(
    code varchar(128) not null
        constraint property_repairs_holdback_calc_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.property_repairs_holdback_calc_type owner to deployer;

grant select on staging_octane.property_repairs_holdback_calc_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.property_repairs_holdback_calc_type to dms_octane_writer;

grant select on staging_octane.property_repairs_holdback_calc_type to etl_loan;

create table staging_octane.property_repairs_holdback_payer_type
(
    code varchar(128) not null
        constraint property_repairs_holdback_payer_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.property_repairs_holdback_payer_type owner to deployer;

grant select on staging_octane.property_repairs_holdback_payer_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.property_repairs_holdback_payer_type to dms_octane_writer;

grant select on staging_octane.property_repairs_holdback_payer_type to etl_loan;

create table staging_octane.property_repairs_required_type
(
    code varchar(128) not null
        constraint property_repairs_required_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.property_repairs_required_type owner to deployer;

grant select on staging_octane.property_repairs_required_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.property_repairs_required_type to dms_octane_writer;

grant select on staging_octane.property_repairs_required_type to etl_loan;

create table staging_octane.property_rights_type
(
    code varchar(128) not null
        constraint property_rights_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.property_rights_type owner to deployer;

grant select on staging_octane.property_rights_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.property_rights_type to dms_octane_writer;

grant select on staging_octane.property_rights_type to etl_loan;

create table staging_octane.property_usage_type
(
    code varchar(128) not null
        constraint property_usage_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.property_usage_type owner to deployer;

grant select on staging_octane.property_usage_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.property_usage_type to dms_octane_writer;

grant select on staging_octane.property_usage_type to etl_loan;

create table staging_octane.proposal_doc_file_type
(
    code varchar(128) not null
        constraint proposal_doc_file_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.proposal_doc_file_type owner to deployer;

grant select on staging_octane.proposal_doc_file_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.proposal_doc_file_type to dms_octane_writer;

grant select on staging_octane.proposal_doc_file_type to etl_loan;

create table staging_octane.proposal_review_status_type
(
    code varchar(128) not null
        constraint proposal_review_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.proposal_review_status_type owner to deployer;

grant select on staging_octane.proposal_review_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.proposal_review_status_type to dms_octane_writer;

grant select on staging_octane.proposal_review_status_type to etl_loan;

create table staging_octane.proposal_structure_type
(
    code varchar(128) not null
        constraint proposal_structure_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.proposal_structure_type owner to deployer;

grant select on staging_octane.proposal_structure_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.proposal_structure_type to dms_octane_writer;

grant select on staging_octane.proposal_structure_type to etl_loan;

create table staging_octane.proposal_type
(
    code varchar(128) not null
        constraint proposal_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.proposal_type owner to deployer;

grant select on staging_octane.proposal_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.proposal_type to dms_octane_writer;

grant select on staging_octane.proposal_type to etl_loan;

create table staging_octane.pte_request_status_type
(
    code varchar(128) not null
        constraint pte_request_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.pte_request_status_type owner to deployer;

grant select on staging_octane.pte_request_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.pte_request_status_type to dms_octane_writer;

grant select on staging_octane.pte_request_status_type to etl_loan;

create table staging_octane.pte_response_status_type
(
    code varchar(128) not null
        constraint pte_response_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.pte_response_status_type owner to deployer;

grant select on staging_octane.pte_response_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.pte_response_status_type to dms_octane_writer;

grant select on staging_octane.pte_response_status_type to etl_loan;

create table staging_octane.public_record_disposition_type
(
    code varchar(128) not null
        constraint public_record_disposition_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.public_record_disposition_type owner to deployer;

grant select on staging_octane.public_record_disposition_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.public_record_disposition_type to dms_octane_writer;

grant select on staging_octane.public_record_disposition_type to etl_loan;

create table staging_octane.public_record_type
(
    code varchar(128) not null
        constraint public_record_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.public_record_type owner to deployer;

grant select on staging_octane.public_record_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.public_record_type to dms_octane_writer;

grant select on staging_octane.public_record_type to etl_loan;

create table staging_octane.qualified_mortgage_status_type
(
    code varchar(128) not null
        constraint qualified_mortgage_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.qualified_mortgage_status_type owner to deployer;

grant select on staging_octane.qualified_mortgage_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.qualified_mortgage_status_type to dms_octane_writer;

grant select on staging_octane.qualified_mortgage_status_type to etl_loan;

create table staging_octane.qualified_mortgage_thresholds
(
    qmt_pid bigint not null
        constraint qualified_mortgage_thresholds_pkey
            primary key,
    qmt_version integer,
    qmt_effective_date date,
    qmt_first_total_loan_amount_threshold numeric(15),
    qmt_first_points_and_fees_threshold_percent numeric(11,9),
    qmt_second_total_loan_amount_threshold numeric(15),
    qmt_second_points_and_fees_threshold_amount numeric(15),
    qmt_third_total_loan_amount_threshold numeric(15),
    qmt_third_points_and_fees_threshold_percent numeric(11,9),
    qmt_fourth_total_loan_amount_threshold numeric(15),
    qmt_fourth_points_and_fees_threshold_amount numeric(15),
    qmt_ceiling_points_and_fees_threshold_percent numeric(11,9)
);

alter table staging_octane.qualified_mortgage_thresholds owner to deployer;

create index idx_qualified_mortgage_thresholds__pid_version
    on staging_octane.qualified_mortgage_thresholds (qmt_pid, qmt_version);

grant select on staging_octane.qualified_mortgage_thresholds to readonly;

grant delete, insert, select, truncate, update on staging_octane.qualified_mortgage_thresholds to dms_octane_writer;

grant select on staging_octane.qualified_mortgage_thresholds to etl_loan;

create table staging_octane.qualifying_monthly_payment_type
(
    code varchar(128) not null
        constraint qualifying_monthly_payment_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.qualifying_monthly_payment_type owner to deployer;

grant select on staging_octane.qualifying_monthly_payment_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.qualifying_monthly_payment_type to dms_octane_writer;

grant select on staging_octane.qualifying_monthly_payment_type to etl_loan;

create table staging_octane.qualifying_rate_type
(
    code varchar(128) not null
        constraint qualifying_rate_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.qualifying_rate_type owner to deployer;

grant select on staging_octane.qualifying_rate_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.qualifying_rate_type to dms_octane_writer;

grant select on staging_octane.qualifying_rate_type to etl_loan;

create table staging_octane.quarter_type
(
    code varchar(128) not null
        constraint quarter_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.quarter_type owner to deployer;

grant select on staging_octane.quarter_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.quarter_type to dms_octane_writer;

grant select on staging_octane.quarter_type to etl_loan;

create table staging_octane.mcr_snapshot
(
    mcrs_pid bigint not null
        constraint mcr_snapshot_pkey
            primary key,
    mcrs_version integer,
    mcrs_account_pid bigint,
    mcrs_year integer,
    mcrs_quarter_type varchar(128),
    mcrs_mcr_request_pid bigint
);

alter table staging_octane.mcr_snapshot owner to deployer;

create index idx_mcr_snapshot__pid_version
    on staging_octane.mcr_snapshot (mcrs_pid, mcrs_version);

grant select on staging_octane.mcr_snapshot to readonly;

grant delete, insert, select, truncate, update on staging_octane.mcr_snapshot to dms_octane_writer;

grant select on staging_octane.mcr_snapshot to etl_loan;

create table staging_octane.mcr_loan
(
    mcrl_pid bigint not null
        constraint mcr_loan_pkey
            primary key,
    mcrl_version integer,
    mcrl_loan_pid bigint,
    mcrl_mcr_snapshot_pid bigint,
    mcrl_los_loan_id bigint,
    mcrl_originator_nmls_id varchar(16),
    mcrl_loan_amount numeric(15,2),
    mcrl_lien_priority_type varchar(128),
    mcrl_mortgage_type varchar(128),
    mcrl_interest_only_type varchar(128),
    mcrl_prepay_penalty_schedule_type varchar(128),
    mcrl_ltv_ratio_percent numeric(11,9),
    mcrl_note_rate_percent numeric(11,9),
    mcrl_hmda_action_type varchar(128),
    mcrl_hmda_action_date date,
    mcrl_disclosure_mode_date date,
    mcrl_decision_credit_score integer,
    mcrl_property_usage_type varchar(128),
    mcrl_doc_level_type varchar(128),
    mcrl_loan_purpose_type varchar(128),
    mcrl_mi_required boolean,
    mcrl_proposal_structure_type varchar(128),
    mcrl_subject_property_state varchar(128),
    mcrl_property_category_type varchar(128),
    mcrl_cltv_ratio_percent numeric(11,9),
    mcrl_funding_status_type varchar(128),
    mcrl_funding_date date,
    mcrl_loan_amortization_type varchar(128),
    mcrl_product_special_program_type varchar(128),
    mcrl_non_conforming boolean,
    mcrl_initial_payment_adjustment_term_months integer,
    mcrl_subsequent_payment_adjustment_term_months integer,
    mcrl_fund_source_type varchar(128),
    mcrl_channel_type varchar(128),
    mcrl_financed_units_count integer,
    mcrl_cash_out_reason_home_improvement boolean,
    mcrl_hmda_hoepa_status_type varchar(128),
    mcrl_qualified_mortgage_status_type varchar(128),
    mcrl_lender_fee_total_amount numeric(15,2),
    mcrl_broker_fee_total_amount numeric(15,2),
    mcrl_investor_hmda_purchaser_of_loan_type varchar(128),
    mcrl_confirmed_release_datetime timestamp,
    mcrl_purchase_advice_date date,
    mcrl_purchasing_beneficiary_investor_pid bigint,
    mcrl_mcr_loan_status_type varchar(128),
    mcrl_servicing_transfer_type varchar(128),
    mcrl_financed_property_improvements_category_type varchar(128)
);

alter table staging_octane.mcr_loan owner to deployer;

create index idx_mcr_loan__pid_version
    on staging_octane.mcr_loan (mcrl_pid, mcrl_version);

grant select on staging_octane.mcr_loan to readonly;

grant delete, insert, select, truncate, update on staging_octane.mcr_loan to dms_octane_writer;

grant select on staging_octane.mcr_loan to etl_loan;

create table staging_octane.quote_filter_pivot_type
(
    code varchar(128) not null
        constraint quote_filter_pivot_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.quote_filter_pivot_type owner to deployer;

grant select on staging_octane.quote_filter_pivot_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.quote_filter_pivot_type to dms_octane_writer;

grant select on staging_octane.quote_filter_pivot_type to etl_loan;

create table staging_octane.realty_agent_scenario_type
(
    code varchar(128) not null
        constraint realty_agent_scenario_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.realty_agent_scenario_type owner to deployer;

grant select on staging_octane.realty_agent_scenario_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.realty_agent_scenario_type to dms_octane_writer;

grant select on staging_octane.realty_agent_scenario_type to etl_loan;

create table staging_octane.recording_district_type
(
    code varchar(128) not null
        constraint recording_district_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.recording_district_type owner to deployer;

grant select on staging_octane.recording_district_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.recording_district_type to dms_octane_writer;

grant select on staging_octane.recording_district_type to etl_loan;

create table staging_octane.refinance_improvements_type
(
    code varchar(128) not null
        constraint refinance_improvements_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.refinance_improvements_type owner to deployer;

grant select on staging_octane.refinance_improvements_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.refinance_improvements_type to dms_octane_writer;

grant select on staging_octane.refinance_improvements_type to etl_loan;

create table staging_octane.relock_fee_setting
(
    rfs_pid bigint not null
        constraint relock_fee_setting_pkey
            primary key,
    rfs_version integer,
    rfs_account_pid bigint,
    rfs_from_date date,
    rfs_relock_fee_percent numeric(11,9)
);

alter table staging_octane.relock_fee_setting owner to deployer;

create index idx_relock_fee_setting__pid_version
    on staging_octane.relock_fee_setting (rfs_pid, rfs_version);

grant select on staging_octane.relock_fee_setting to readonly;

grant delete, insert, select, truncate, update on staging_octane.relock_fee_setting to dms_octane_writer;

grant select on staging_octane.relock_fee_setting to etl_loan;

create table staging_octane.reo_disposition_status_type
(
    code varchar(128) not null
        constraint reo_disposition_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.reo_disposition_status_type owner to deployer;

grant select on staging_octane.reo_disposition_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.reo_disposition_status_type to dms_octane_writer;

grant select on staging_octane.reo_disposition_status_type to etl_loan;

create table staging_octane.report_request_status_type
(
    code varchar(128) not null
        constraint report_request_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.report_request_status_type owner to deployer;

grant select on staging_octane.report_request_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.report_request_status_type to dms_octane_writer;

grant select on staging_octane.report_request_status_type to etl_loan;

create table staging_octane.report_type
(
    code varchar(128) not null
        constraint report_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.report_type owner to deployer;

grant select on staging_octane.report_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.report_type to dms_octane_writer;

grant select on staging_octane.report_type to etl_loan;

create table staging_octane.report
(
    rp_pid bigint not null
        constraint report_pkey
            primary key,
    rp_version integer,
    rp_account_pid bigint,
    rp_name varchar(128),
    rp_description varchar(1024),
    rp_report_type varchar(128),
    rp_report_row_pid bigint,
    rp_criteria_pid bigint,
    rp_accessible_only boolean,
    rp_analysis_report boolean,
    rp_publish boolean,
    rp_test_data_report boolean,
    rp_allow_view boolean,
    rp_allow_excel_export boolean
);

alter table staging_octane.report owner to deployer;

create index idx_report__pid_version
    on staging_octane.report (rp_pid, rp_version);

grant select on staging_octane.report to readonly;

grant delete, insert, select, truncate, update on staging_octane.report to dms_octane_writer;

grant select on staging_octane.report to etl_loan;

create table staging_octane.report_row
(
    rprw_pid bigint not null
        constraint report_row_pkey
            primary key,
    rprw_version integer,
    rprw_account_pid bigint,
    rprw_report_type varchar(128),
    rprw_name varchar(128),
    rprw_description varchar(1024),
    rprw_formula_row boolean
);

alter table staging_octane.report_row owner to deployer;

create index idx_report_row__pid_version
    on staging_octane.report_row (rprw_pid, rprw_version);

grant select on staging_octane.report_row to readonly;

grant delete, insert, select, truncate, update on staging_octane.report_row to dms_octane_writer;

grant select on staging_octane.report_row to etl_loan;

create table staging_octane.formula_report_column
(
    frc_pid bigint not null
        constraint formula_report_column_pkey
            primary key,
    frc_version integer,
    frc_report_row_pid bigint,
    frc_header varchar(128),
    frc_formula varchar(1024),
    frc_field_type_1 varchar(128),
    frc_field_type_2 varchar(128),
    frc_field_type_3 varchar(128),
    frc_field_type_4 varchar(128),
    frc_field_type_5 varchar(128),
    frc_field_type_6 varchar(128),
    frc_ordinal integer
);

alter table staging_octane.formula_report_column owner to deployer;

create index idx_formula_report_column__pid_version
    on staging_octane.formula_report_column (frc_pid, frc_version);

grant select on staging_octane.formula_report_column to readonly;

grant delete, insert, select, truncate, update on staging_octane.formula_report_column to dms_octane_writer;

grant select on staging_octane.formula_report_column to etl_loan;

create table staging_octane.report_column
(
    rpc_pid bigint not null
        constraint report_column_pkey
            primary key,
    rpc_version integer,
    rpc_report_row_pid bigint,
    rpc_report_column_type varchar(128),
    rpc_ordinal integer
);

alter table staging_octane.report_column owner to deployer;

create index idx_report_column__pid_version
    on staging_octane.report_column (rpc_pid, rpc_version);

grant select on staging_octane.report_column to readonly;

grant delete, insert, select, truncate, update on staging_octane.report_column to dms_octane_writer;

grant select on staging_octane.report_column to etl_loan;

create table staging_octane.req_decision_status_type
(
    code varchar(128) not null
        constraint req_decision_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.req_decision_status_type owner to deployer;

grant select on staging_octane.req_decision_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.req_decision_status_type to dms_octane_writer;

grant select on staging_octane.req_decision_status_type to etl_loan;

create table staging_octane.req_fulfill_status_type
(
    code varchar(128) not null
        constraint req_fulfill_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.req_fulfill_status_type owner to deployer;

grant select on staging_octane.req_fulfill_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.req_fulfill_status_type to dms_octane_writer;

grant select on staging_octane.req_fulfill_status_type to etl_loan;

create table staging_octane.rescission_notification_type
(
    code varchar(128) not null
        constraint rescission_notification_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.rescission_notification_type owner to deployer;

grant select on staging_octane.rescission_notification_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.rescission_notification_type to dms_octane_writer;

grant select on staging_octane.rescission_notification_type to etl_loan;

create table staging_octane.respa_section_type
(
    code varchar(128) not null
        constraint respa_section_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.respa_section_type owner to deployer;

grant select on staging_octane.respa_section_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.respa_section_type to dms_octane_writer;

grant select on staging_octane.respa_section_type to etl_loan;

create table staging_octane.charge_type
(
    code varchar(128) not null
        constraint charge_type_pkey
            primary key,
    ct_respa_section_type varchar(128),
    value varchar(1024)
);

alter table staging_octane.charge_type owner to deployer;

grant select on staging_octane.charge_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.charge_type to dms_octane_writer;

grant select on staging_octane.charge_type to etl_loan;

create table staging_octane.road_type
(
    code varchar(128) not null
        constraint road_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.road_type owner to deployer;

grant select on staging_octane.road_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.road_type to dms_octane_writer;

grant select on staging_octane.road_type to etl_loan;

create table staging_octane.role
(
    r_pid bigint not null
        constraint role_pkey
            primary key,
    r_version integer,
    r_account_pid bigint,
    r_role_name varchar(32),
    r_borrower_viewable boolean,
    r_loan_access_type varchar(128),
    r_internal boolean,
    r_training_applicable boolean
);

alter table staging_octane.role owner to deployer;

create index idx_role__pid_version
    on staging_octane.role (r_pid, r_version);

grant select on staging_octane.role to readonly;

grant delete, insert, select, truncate, update on staging_octane.role to dms_octane_writer;

grant select on staging_octane.role to etl_loan;

create table staging_octane.key_role
(
    kr_pid bigint not null
        constraint key_role_pkey
            primary key,
    kr_version integer,
    kr_role_pid bigint,
    kr_account_pid bigint,
    kr_key_role_type varchar(128)
);

alter table staging_octane.key_role owner to deployer;

create index idx_key_role__pid_version
    on staging_octane.key_role (kr_pid, kr_version);

grant select on staging_octane.key_role to readonly;

grant delete, insert, select, truncate, update on staging_octane.key_role to dms_octane_writer;

grant select on staging_octane.key_role to etl_loan;

create table staging_octane.role_charge_permissions
(
    rcp_pid bigint not null
        constraint role_charge_permissions_pkey
            primary key,
    rcp_version integer,
    rcp_role_pid bigint,
    rcp_charge_type varchar(128),
    rcp_basic_editable boolean,
    rcp_financed_editable boolean,
    rcp_payer_non_lender_editable boolean,
    rcp_payer_lender_editable boolean,
    rcp_payee_editable boolean,
    rcp_apr_editable boolean,
    rcp_poc_editable boolean,
    rcp_wire_editable boolean
);

alter table staging_octane.role_charge_permissions owner to deployer;

create index idx_role_charge_permissions__pid_version
    on staging_octane.role_charge_permissions (rcp_pid, rcp_version);

grant select on staging_octane.role_charge_permissions to readonly;

grant delete, insert, select, truncate, update on staging_octane.role_charge_permissions to dms_octane_writer;

grant select on staging_octane.role_charge_permissions to etl_loan;

create table staging_octane.role_config_export_permission
(
    rcep_pid bigint not null
        constraint role_config_export_permission_pkey
            primary key,
    rcep_version integer,
    rcep_role_pid bigint,
    rcep_config_export_permission_type varchar(128)
);

alter table staging_octane.role_config_export_permission owner to deployer;

create index idx_role_config_export_permission__pid_version
    on staging_octane.role_config_export_permission (rcep_pid, rcep_version);

grant select on staging_octane.role_config_export_permission to readonly;

grant delete, insert, select, truncate, update on staging_octane.role_config_export_permission to dms_octane_writer;

grant select on staging_octane.role_config_export_permission to etl_loan;

create table staging_octane.role_deal_context
(
    rdc_pid bigint not null
        constraint role_deal_context_pkey
            primary key,
    rdc_version integer,
    rdc_role_pid bigint,
    rdc_deal_context_permission_type varchar(128)
);

alter table staging_octane.role_deal_context owner to deployer;

create index idx_role_deal_context__pid_version
    on staging_octane.role_deal_context (rdc_pid, rdc_version);

grant select on staging_octane.role_deal_context to readonly;

grant delete, insert, select, truncate, update on staging_octane.role_deal_context to dms_octane_writer;

grant select on staging_octane.role_deal_context to etl_loan;

create table staging_octane.role_export_permission
(
    rep_pid bigint not null
        constraint role_export_permission_pkey
            primary key,
    rep_version integer,
    rep_role_pid bigint,
    rep_export_permission_type varchar(128)
);

alter table staging_octane.role_export_permission owner to deployer;

create index idx_role_export_permission__pid_version
    on staging_octane.role_export_permission (rep_pid, rep_version);

grant select on staging_octane.role_export_permission to readonly;

grant delete, insert, select, truncate, update on staging_octane.role_export_permission to dms_octane_writer;

grant select on staging_octane.role_export_permission to etl_loan;

create table staging_octane.role_lender_toolbox
(
    rlet_pid bigint not null
        constraint role_lender_toolbox_pkey
            primary key,
    rlet_version integer,
    rlet_role_pid bigint,
    rlet_lender_toolbox_permission_type varchar(128)
);

alter table staging_octane.role_lender_toolbox owner to deployer;

create index idx_role_lender_toolbox__pid_version
    on staging_octane.role_lender_toolbox (rlet_pid, rlet_version);

grant select on staging_octane.role_lender_toolbox to readonly;

grant delete, insert, select, truncate, update on staging_octane.role_lender_toolbox to dms_octane_writer;

grant select on staging_octane.role_lender_toolbox to etl_loan;

create table staging_octane.role_loans_toolbox
(
    rlot_pid bigint not null
        constraint role_loans_toolbox_pkey
            primary key,
    rlot_version integer,
    rlot_role_pid bigint,
    rlot_loans_toolbox_permission_type varchar(128)
);

alter table staging_octane.role_loans_toolbox owner to deployer;

create index idx_role_loans_toolbox__pid_version
    on staging_octane.role_loans_toolbox (rlot_pid, rlot_version);

grant select on staging_octane.role_loans_toolbox to readonly;

grant delete, insert, select, truncate, update on staging_octane.role_loans_toolbox to dms_octane_writer;

grant select on staging_octane.role_loans_toolbox to etl_loan;

create table staging_octane.role_performer_assign
(
    rpa_pid bigint not null
        constraint role_performer_assign_pkey
            primary key,
    rpa_version integer,
    rpa_role_pid bigint,
    rpa_assignee_role_pid bigint
);

alter table staging_octane.role_performer_assign owner to deployer;

create index idx_role_performer_assign__pid_version
    on staging_octane.role_performer_assign (rpa_pid, rpa_version);

grant select on staging_octane.role_performer_assign to readonly;

grant delete, insert, select, truncate, update on staging_octane.role_performer_assign to dms_octane_writer;

grant select on staging_octane.role_performer_assign to etl_loan;

create table staging_octane.role_report
(
    rrp_pid bigint not null
        constraint role_report_pkey
            primary key,
    rrp_version integer,
    rrp_report_pid bigint,
    rrp_role_pid bigint
);

alter table staging_octane.role_report owner to deployer;

create index idx_role_report__pid_version
    on staging_octane.role_report (rrp_pid, rrp_version);

grant select on staging_octane.role_report to readonly;

grant delete, insert, select, truncate, update on staging_octane.role_report to dms_octane_writer;

grant select on staging_octane.role_report to etl_loan;

create table staging_octane.sanitation_type
(
    code varchar(128) not null
        constraint sanitation_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.sanitation_type owner to deployer;

grant select on staging_octane.sanitation_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.sanitation_type to dms_octane_writer;

grant select on staging_octane.sanitation_type to etl_loan;

create table staging_octane.sap_step_type
(
    code varchar(128) not null
        constraint sap_step_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.sap_step_type owner to deployer;

grant select on staging_octane.sap_step_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.sap_step_type to dms_octane_writer;

grant select on staging_octane.sap_step_type to etl_loan;

create table staging_octane.secondary_admin_event_entity_type
(
    code varchar(128) not null
        constraint secondary_admin_event_entity_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.secondary_admin_event_entity_type owner to deployer;

grant select on staging_octane.secondary_admin_event_entity_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.secondary_admin_event_entity_type to dms_octane_writer;

grant select on staging_octane.secondary_admin_event_entity_type to etl_loan;

create table staging_octane.secondary_admin_event
(
    sae_pid bigint not null
        constraint secondary_admin_event_pkey
            primary key,
    sae_version integer,
    sae_account_pid bigint,
    sae_secondary_admin_event_entity_type varchar(128),
    sae_message varchar(256),
    sae_diff_list text,
    sae_unparsed_name varchar(128),
    sae_event_date date,
    sae_event_datetime timestamp,
    sae_target_entity_pid bigint
);

alter table staging_octane.secondary_admin_event owner to deployer;

create index idx_secondary_admin_event__pid_version
    on staging_octane.secondary_admin_event (sae_pid, sae_version);

grant select on staging_octane.secondary_admin_event to readonly;

grant delete, insert, select, truncate, update on staging_octane.secondary_admin_event to dms_octane_writer;

grant select on staging_octane.secondary_admin_event to etl_loan;

create table staging_octane.section_of_act_coarse_type
(
    code varchar(128) not null
        constraint section_of_act_coarse_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.section_of_act_coarse_type owner to deployer;

grant select on staging_octane.section_of_act_coarse_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.section_of_act_coarse_type to dms_octane_writer;

grant select on staging_octane.section_of_act_coarse_type to etl_loan;

create table staging_octane.security_instrument_type
(
    code varchar(128) not null
        constraint security_instrument_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.security_instrument_type owner to deployer;

grant select on staging_octane.security_instrument_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.security_instrument_type to dms_octane_writer;

grant select on staging_octane.security_instrument_type to etl_loan;

create table staging_octane.senior_lien_restriction_type
(
    code varchar(128) not null
        constraint senior_lien_restriction_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.senior_lien_restriction_type owner to deployer;

grant select on staging_octane.senior_lien_restriction_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.senior_lien_restriction_type to dms_octane_writer;

grant select on staging_octane.senior_lien_restriction_type to etl_loan;

create table staging_octane.servicer_loan_id_assign_type
(
    code varchar(128) not null
        constraint servicer_loan_id_assign_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.servicer_loan_id_assign_type owner to deployer;

grant select on staging_octane.servicer_loan_id_assign_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.servicer_loan_id_assign_type to dms_octane_writer;

grant select on staging_octane.servicer_loan_id_assign_type to etl_loan;

create table staging_octane.servicer_loan_id_import_request_status_type
(
    code varchar(128) not null
        constraint servicer_loan_id_import_request_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.servicer_loan_id_import_request_status_type owner to deployer;

grant select on staging_octane.servicer_loan_id_import_request_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.servicer_loan_id_import_request_status_type to dms_octane_writer;

grant select on staging_octane.servicer_loan_id_import_request_status_type to etl_loan;

create table staging_octane.servicing_transfer_type
(
    code varchar(128) not null
        constraint servicing_transfer_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.servicing_transfer_type owner to deployer;

grant select on staging_octane.servicing_transfer_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.servicing_transfer_type to dms_octane_writer;

grant select on staging_octane.servicing_transfer_type to etl_loan;

create table staging_octane.settlement_agent
(
    sa_pid bigint not null
        constraint settlement_agent_pkey
            primary key,
    sa_version integer,
    sa_account_pid bigint,
    sa_active boolean,
    sa_admin_lock boolean,
    sa_license_id varchar(128),
    sa_company_name varchar(128),
    sa_preferred_vendor boolean
);

alter table staging_octane.settlement_agent owner to deployer;

create index idx_settlement_agent__pid_version
    on staging_octane.settlement_agent (sa_pid, sa_version);

grant select on staging_octane.settlement_agent to readonly;

grant delete, insert, select, truncate, update on staging_octane.settlement_agent to dms_octane_writer;

grant select on staging_octane.settlement_agent to etl_loan;

create table staging_octane.settlement_agent_office
(
    sao_pid bigint not null
        constraint settlement_agent_office_pkey
            primary key,
    sao_version integer,
    sao_settlement_agent_pid bigint,
    sao_active boolean,
    sao_address_street1 varchar(128),
    sao_address_street2 varchar(128),
    sao_address_city varchar(128),
    sao_address_state varchar(128),
    sao_address_postal_code varchar(128),
    sao_address_country varchar(128),
    sao_phone varchar(32),
    sao_fax varchar(32),
    sao_docs_email varchar(256),
    sao_fund_email varchar(256),
    sao_schedule_email varchar(256)
);

alter table staging_octane.settlement_agent_office owner to deployer;

create index idx_settlement_agent_office__pid_version
    on staging_octane.settlement_agent_office (sao_pid, sao_version);

grant select on staging_octane.settlement_agent_office to readonly;

grant delete, insert, select, truncate, update on staging_octane.settlement_agent_office to dms_octane_writer;

grant select on staging_octane.settlement_agent_office to etl_loan;

create table staging_octane.settlement_agent_wire
(
    saw_pid bigint not null
        constraint settlement_agent_wire_pkey
            primary key,
    saw_version integer,
    saw_settlement_agent_pid bigint,
    saw_active boolean,
    saw_create_datetime timestamp,
    saw_bank_name varchar(128),
    saw_address_street1 varchar(128),
    saw_address_street2 varchar(128),
    saw_address_city varchar(128),
    saw_address_state varchar(128),
    saw_address_postal_code varchar(128),
    saw_address_country varchar(128),
    saw_for_credit_to varchar(256),
    saw_for_further_credit_fixed_text varchar(256),
    saw_for_further_credit_prompt_text varchar(256),
    saw_verified_from_date date,
    saw_verified_through_date date,
    saw_verifier varchar(128),
    saw_notes varchar(1024),
    saw_for_further_credit_type varchar(128),
    saw_beneficiary_bank_name varchar(128),
    saw_beneficiary_address_street1 varchar(128),
    saw_beneficiary_address_street2 varchar(128),
    saw_beneficiary_address_city varchar(128),
    saw_beneficiary_address_state varchar(128),
    saw_beneficiary_address_postal_code varchar(128),
    saw_beneficiary_address_country varchar(128),
    saw_beneficiary_for_credit_to varchar(256),
    saw_beneficiary_for_further_credit_fixed_text varchar(256),
    saw_beneficiary_for_further_credit_prompt_text varchar(256),
    saw_beneficiary_for_further_credit_type varchar(128),
    saw_beneficiary_notes varchar(1024)
);

alter table staging_octane.settlement_agent_wire owner to deployer;

create index idx_settlement_agent_wire__pid_version
    on staging_octane.settlement_agent_wire (saw_pid, saw_version);

grant select on staging_octane.settlement_agent_wire to readonly;

grant delete, insert, select, truncate, update on staging_octane.settlement_agent_wire to dms_octane_writer;

grant select on staging_octane.settlement_agent_wire to etl_loan;

create table staging_octane.sheet_format_type
(
    code varchar(128) not null
        constraint sheet_format_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.sheet_format_type owner to deployer;

grant select on staging_octane.sheet_format_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.sheet_format_type to dms_octane_writer;

grant select on staging_octane.sheet_format_type to etl_loan;

create table staging_octane.google_sheet_export
(
    gse_pid bigint not null
        constraint google_sheet_export_pkey
            primary key,
    gse_version integer,
    gse_name varchar(128),
    gse_account_pid bigint,
    gse_export_type varchar(128),
    gse_stored_query_name varchar(128),
    gse_spreadsheet_id varchar(128),
    gse_control_sheet_id varchar(128),
    gse_results_sheet_id varchar(128),
    gse_cron_expression varchar(32),
    gse_format_type varchar(128)
);

alter table staging_octane.google_sheet_export owner to deployer;

create index idx_google_sheet_export__pid_version
    on staging_octane.google_sheet_export (gse_pid, gse_version);

grant select on staging_octane.google_sheet_export to readonly;

grant delete, insert, select, truncate, update on staging_octane.google_sheet_export to dms_octane_writer;

grant select on staging_octane.google_sheet_export to etl_loan;

create table staging_octane.signature_part_type
(
    code varchar(128) not null
        constraint signature_part_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.signature_part_type owner to deployer;

grant select on staging_octane.signature_part_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.signature_part_type to dms_octane_writer;

grant select on staging_octane.signature_part_type to etl_loan;

create table staging_octane.site_allowed_ip
(
    saip_pid bigint not null
        constraint site_allowed_ip_pkey
            primary key,
    saip_version integer,
    saip_account_pid bigint,
    saip_name varchar(128),
    saip_ip_address varchar(32)
);

alter table staging_octane.site_allowed_ip owner to deployer;

create index idx_site_allowed_ip__pid_version
    on staging_octane.site_allowed_ip (saip_pid, saip_version);

grant select on staging_octane.site_allowed_ip to readonly;

grant delete, insert, select, truncate, update on staging_octane.site_allowed_ip to dms_octane_writer;

grant select on staging_octane.site_allowed_ip to etl_loan;

create table staging_octane.smart_charge_apr_type
(
    code varchar(128) not null
        constraint smart_charge_apr_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.smart_charge_apr_type owner to deployer;

grant select on staging_octane.smart_charge_apr_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_charge_apr_type to dms_octane_writer;

grant select on staging_octane.smart_charge_apr_type to etl_loan;

create table staging_octane.smart_charge
(
    sc_pid bigint not null
        constraint smart_charge_pkey
            primary key,
    sc_version integer,
    sc_account_pid bigint,
    sc_charge_type varchar(128),
    sc_loan_position_type varchar(128),
    sc_name varchar(128),
    sc_smart_charge_apr_type varchar(128),
    sc_apr_criteria_pid bigint
);

alter table staging_octane.smart_charge owner to deployer;

create index idx_smart_charge__pid_version
    on staging_octane.smart_charge (sc_pid, sc_version);

grant select on staging_octane.smart_charge to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_charge to dms_octane_writer;

grant select on staging_octane.smart_charge to etl_loan;

create table staging_octane.smart_charge_group
(
    scg_pid bigint not null
        constraint smart_charge_group_pkey
            primary key,
    scg_version integer,
    scg_smart_charge_pid bigint,
    scg_group_name varchar(128)
);

alter table staging_octane.smart_charge_group owner to deployer;

create index idx_smart_charge_group__pid_version
    on staging_octane.smart_charge_group (scg_pid, scg_version);

grant select on staging_octane.smart_charge_group to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_charge_group to dms_octane_writer;

grant select on staging_octane.smart_charge_group to etl_loan;

create table staging_octane.smart_charge_group_case
(
    scgc_pid bigint not null
        constraint smart_charge_group_case_pkey
            primary key,
    scgc_version integer,
    scgc_smart_charge_group_pid bigint,
    scgc_from_date date,
    scgc_through_date date
);

alter table staging_octane.smart_charge_group_case owner to deployer;

create index idx_smart_charge_group_case__pid_version
    on staging_octane.smart_charge_group_case (scgc_pid, scgc_version);

grant select on staging_octane.smart_charge_group_case to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_charge_group_case to dms_octane_writer;

grant select on staging_octane.smart_charge_group_case to etl_loan;

create table staging_octane.smart_charge_case
(
    scc_pid bigint not null
        constraint smart_charge_case_pkey
            primary key,
    scc_version integer,
    scc_smart_charge_group_case_pid bigint,
    scc_case_name varchar(128),
    scc_ordinal integer,
    scc_criteria_pid bigint,
    scc_amount_description varchar(256),
    scc_charge_payer_type varchar(128),
    scc_charge_payee_type varchar(128),
    scc_paid_by varchar(128),
    scc_paid_to varchar(128),
    scc_base_amount numeric(16,3),
    scc_charge_input_type varchar(128),
    scc_charge_input_type_percent numeric(11,9),
    scc_charge_input_type_currency numeric(16,3),
    scc_financed boolean,
    scc_financed_auto_compute boolean,
    scc_poc boolean,
    scc_reduction_amount numeric(15),
    scc_subtract_lenders_title_insurance_amount boolean,
    scc_case_label varchar(108)
);

alter table staging_octane.smart_charge_case owner to deployer;

create index idx_smart_charge_case__pid_version
    on staging_octane.smart_charge_case (scc_pid, scc_version);

grant select on staging_octane.smart_charge_case to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_charge_case to dms_octane_writer;

grant select on staging_octane.smart_charge_case to etl_loan;

create table staging_octane.smart_message_delivery_type
(
    code varchar(128) not null
        constraint smart_message_delivery_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.smart_message_delivery_type owner to deployer;

grant select on staging_octane.smart_message_delivery_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_message_delivery_type to dms_octane_writer;

grant select on staging_octane.smart_message_delivery_type to etl_loan;

create table staging_octane.smart_message_email_recipient_type
(
    code varchar(128) not null
        constraint smart_message_email_recipient_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.smart_message_email_recipient_type owner to deployer;

grant select on staging_octane.smart_message_email_recipient_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_message_email_recipient_type to dms_octane_writer;

grant select on staging_octane.smart_message_email_recipient_type to etl_loan;

create table staging_octane.smart_message_recipient_type
(
    code varchar(128) not null
        constraint smart_message_recipient_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.smart_message_recipient_type owner to deployer;

grant select on staging_octane.smart_message_recipient_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_message_recipient_type to dms_octane_writer;

grant select on staging_octane.smart_message_recipient_type to etl_loan;

create table staging_octane.smart_message_source_type
(
    code varchar(128) not null
        constraint smart_message_source_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.smart_message_source_type owner to deployer;

grant select on staging_octane.smart_message_source_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_message_source_type to dms_octane_writer;

grant select on staging_octane.smart_message_source_type to etl_loan;

create table staging_octane.smart_mi
(
    sm_pid bigint not null
        constraint smart_mi_pkey
            primary key,
    sm_version integer,
    sm_account_pid bigint,
    sm_mi_company_name_type varchar(128)
);

alter table staging_octane.smart_mi owner to deployer;

create index idx_smart_mi__pid_version
    on staging_octane.smart_mi (sm_pid, sm_version);

grant select on staging_octane.smart_mi to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_mi to dms_octane_writer;

grant select on staging_octane.smart_mi to etl_loan;

create table staging_octane.smart_mi_eligibility_case
(
    smec_pid bigint not null
        constraint smart_mi_eligibility_case_pkey
            primary key,
    smec_version integer,
    smec_smart_mi_pid bigint,
    smec_criteria_pid bigint,
    smec_from_date date,
    smec_through_date date
);

alter table staging_octane.smart_mi_eligibility_case owner to deployer;

create index idx_smart_mi_eligibility_case__pid_version
    on staging_octane.smart_mi_eligibility_case (smec_pid, smec_version);

grant select on staging_octane.smart_mi_eligibility_case to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_mi_eligibility_case to dms_octane_writer;

grant select on staging_octane.smart_mi_eligibility_case to etl_loan;

create table staging_octane.smart_mi_rate_card
(
    smrca_pid bigint not null
        constraint smart_mi_rate_card_pkey
            primary key,
    smrca_version integer,
    smrca_from_date date,
    smrca_mi_payment_type varchar(128),
    smrca_mi_payer_type varchar(128),
    smrca_minimum_rate_percent numeric(11,9),
    smrca_smart_mi_pid bigint,
    smrca_maximum_renewal_rate_percent numeric(11,9)
);

alter table staging_octane.smart_mi_rate_card owner to deployer;

create index idx_smart_mi_rate_card__pid_version
    on staging_octane.smart_mi_rate_card (smrca_pid, smrca_version);

grant select on staging_octane.smart_mi_rate_card to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_mi_rate_card to dms_octane_writer;

grant select on staging_octane.smart_mi_rate_card to etl_loan;

create table staging_octane.smart_mi_rate_adjustment_case
(
    smrac_pid bigint not null
        constraint smart_mi_rate_adjustment_case_pkey
            primary key,
    smrac_version integer,
    smrac_smart_mi_rate_card_pid bigint,
    smrac_rate_adjustment_percent numeric(11,9),
    smrac_criteria_pid bigint
);

alter table staging_octane.smart_mi_rate_adjustment_case owner to deployer;

create index idx_smart_mi_rate_adjustment_case__pid_version
    on staging_octane.smart_mi_rate_adjustment_case (smrac_pid, smrac_version);

grant select on staging_octane.smart_mi_rate_adjustment_case to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_mi_rate_adjustment_case to dms_octane_writer;

grant select on staging_octane.smart_mi_rate_adjustment_case to etl_loan;

create table staging_octane.smart_mi_rate_case
(
    smrc_pid bigint not null
        constraint smart_mi_rate_case_pkey
            primary key,
    smrc_version integer,
    smrc_smart_mi_rate_card_pid bigint,
    smrc_ordinal integer,
    smrc_criteria_pid bigint,
    smrc_else_case boolean,
    smrc_amount_description varchar(256),
    smrc_upfront_percent numeric(11,9),
    smrc_initial_monthly_payment_annual_percent numeric(11,9),
    smrc_coverage_percent numeric(11,9),
    smrc_ltv_cutoff_percent numeric(11,9),
    smrc_midpoint_cutoff_required boolean,
    smrc_required_monthly_payment_count integer,
    smrc_initial_duration_months integer
);

alter table staging_octane.smart_mi_rate_case owner to deployer;

create index idx_smart_mi_rate_case__pid_version
    on staging_octane.smart_mi_rate_case (smrc_pid, smrc_version);

grant select on staging_octane.smart_mi_rate_case to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_mi_rate_case to dms_octane_writer;

grant select on staging_octane.smart_mi_rate_case to etl_loan;

create table staging_octane.smart_mi_surcharge
(
    sms_pid bigint not null
        constraint smart_mi_surcharge_pkey
            primary key,
    sms_version integer,
    sms_account_pid bigint,
    sms_from_date date
);

alter table staging_octane.smart_mi_surcharge owner to deployer;

create index idx_smart_mi_surcharge__pid_version
    on staging_octane.smart_mi_surcharge (sms_pid, sms_version);

grant select on staging_octane.smart_mi_surcharge to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_mi_surcharge to dms_octane_writer;

grant select on staging_octane.smart_mi_surcharge to etl_loan;

create table staging_octane.smart_mi_surcharge_case
(
    smsc_pid bigint not null
        constraint smart_mi_surcharge_case_pkey
            primary key,
    smsc_version integer,
    smsc_smart_mi_surcharge_pid bigint,
    smsc_criteria_pid bigint,
    smsc_government_surcharge_percent numeric(11,9),
    smsc_minimum_surcharge_amount numeric(15,2)
);

alter table staging_octane.smart_mi_surcharge_case owner to deployer;

create index idx_smart_mi_surcharge_case__pid_version
    on staging_octane.smart_mi_surcharge_case (smsc_pid, smsc_version);

grant select on staging_octane.smart_mi_surcharge_case to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_mi_surcharge_case to dms_octane_writer;

grant select on staging_octane.smart_mi_surcharge_case to etl_loan;

create table staging_octane.smart_stack
(
    ss_pid bigint not null
        constraint smart_stack_pkey
            primary key,
    ss_version integer,
    ss_account_pid bigint,
    ss_name varchar(128)
);

alter table staging_octane.smart_stack owner to deployer;

create index idx_smart_stack__pid_version
    on staging_octane.smart_stack (ss_pid, ss_version);

grant select on staging_octane.smart_stack to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_stack to dms_octane_writer;

grant select on staging_octane.smart_stack to etl_loan;

create table staging_octane.smart_stack_doc_set_include_option_type
(
    code varchar(128) not null
        constraint smart_stack_doc_set_include_option_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.smart_stack_doc_set_include_option_type owner to deployer;

grant select on staging_octane.smart_stack_doc_set_include_option_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_stack_doc_set_include_option_type to dms_octane_writer;

grant select on staging_octane.smart_stack_doc_set_include_option_type to etl_loan;

create table staging_octane.smart_doc_set
(
    sdst_pid bigint not null
        constraint smart_doc_set_pkey
            primary key,
    sdst_version integer,
    sdst_account_pid bigint,
    sdst_name varchar(128),
    sdst_doc_set_type varchar(128),
    sdst_active boolean,
    sdst_smart_stack_doc_set_include_option_type varchar(128)
);

alter table staging_octane.smart_doc_set owner to deployer;

create index idx_smart_doc_set__pid_version
    on staging_octane.smart_doc_set (sdst_pid, sdst_version);

grant select on staging_octane.smart_doc_set to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_doc_set to dms_octane_writer;

grant select on staging_octane.smart_doc_set to etl_loan;

create table staging_octane.key_package
(
    kp_pid bigint not null
        constraint key_package_pkey
            primary key,
    kp_version integer,
    kp_account_pid bigint,
    kp_smart_doc_set_pid bigint,
    kp_key_package_type varchar(128)
);

alter table staging_octane.key_package owner to deployer;

create index idx_key_package__pid_version
    on staging_octane.key_package (kp_pid, kp_version);

grant select on staging_octane.key_package to readonly;

grant delete, insert, select, truncate, update on staging_octane.key_package to dms_octane_writer;

grant select on staging_octane.key_package to etl_loan;

create table staging_octane.smart_stack_doc_set_include_type
(
    code varchar(128) not null
        constraint smart_stack_doc_set_include_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.smart_stack_doc_set_include_type owner to deployer;

grant select on staging_octane.smart_stack_doc_set_include_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_stack_doc_set_include_type to dms_octane_writer;

grant select on staging_octane.smart_stack_doc_set_include_type to etl_loan;

create table staging_octane.solar_panel_type
(
    code varchar(128) not null
        constraint solar_panel_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.solar_panel_type owner to deployer;

grant select on staging_octane.solar_panel_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.solar_panel_type to dms_octane_writer;

grant select on staging_octane.solar_panel_type to etl_loan;

create table staging_octane.stack_doc_type
(
    code varchar(128) not null
        constraint stack_doc_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.stack_doc_type owner to deployer;

grant select on staging_octane.stack_doc_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.stack_doc_type to dms_octane_writer;

grant select on staging_octane.stack_doc_type to etl_loan;

create table staging_octane.stack_export_file_name_format_type
(
    code varchar(128) not null
        constraint stack_export_file_name_format_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.stack_export_file_name_format_type owner to deployer;

grant select on staging_octane.stack_export_file_name_format_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.stack_export_file_name_format_type to dms_octane_writer;

grant select on staging_octane.stack_export_file_name_format_type to etl_loan;

create table staging_octane.stack_export_file_type
(
    code varchar(128) not null
        constraint stack_export_file_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.stack_export_file_type owner to deployer;

grant select on staging_octane.stack_export_file_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.stack_export_file_type to dms_octane_writer;

grant select on staging_octane.stack_export_file_type to etl_loan;

create table staging_octane.stack_export_loan_name_format_type
(
    code varchar(128) not null
        constraint stack_export_loan_name_format_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.stack_export_loan_name_format_type owner to deployer;

grant select on staging_octane.stack_export_loan_name_format_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.stack_export_loan_name_format_type to dms_octane_writer;

grant select on staging_octane.stack_export_loan_name_format_type to etl_loan;

create table staging_octane.stack_export_request_loan_export_type
(
    code varchar(128) not null
        constraint stack_export_request_loan_export_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.stack_export_request_loan_export_type owner to deployer;

grant select on staging_octane.stack_export_request_loan_export_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.stack_export_request_loan_export_type to dms_octane_writer;

grant select on staging_octane.stack_export_request_loan_export_type to etl_loan;

create table staging_octane.stack_export_request_status_type
(
    code varchar(128) not null
        constraint stack_export_request_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.stack_export_request_status_type owner to deployer;

grant select on staging_octane.stack_export_request_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.stack_export_request_status_type to dms_octane_writer;

grant select on staging_octane.stack_export_request_status_type to etl_loan;

create table staging_octane.state_type
(
    code varchar(128) not null
        constraint state_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.state_type owner to deployer;

grant select on staging_octane.state_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.state_type to dms_octane_writer;

grant select on staging_octane.state_type to etl_loan;

create table staging_octane.county
(
    c_pid bigint not null
        constraint county_pkey
            primary key,
    c_version integer,
    c_name varchar(128),
    c_state_type varchar(128),
    c_county_fips varchar(16),
    c_recording_district_type varchar(128),
    c_torrens_available boolean,
    c_defunct boolean,
    c_mortech_name varchar(128)
);

alter table staging_octane.county owner to deployer;

create index idx_county__pid_version
    on staging_octane.county (c_pid, c_version);

grant select on staging_octane.county to readonly;

grant delete, insert, select, truncate, update on staging_octane.county to dms_octane_writer;

grant select on staging_octane.county to etl_loan;

create table staging_octane.area_median_income_row
(
    amir_pid bigint not null
        constraint area_median_income_row_pkey
            primary key,
    amir_version integer,
    amir_area_median_income_table_pid bigint,
    amir_state_type varchar(128),
    amir_county_pid bigint,
    amir_census_tract varchar(16),
    amir_area_median_income numeric(15,2)
);

alter table staging_octane.area_median_income_row owner to deployer;

create index idx_area_median_income_row__pid_version
    on staging_octane.area_median_income_row (amir_pid, amir_version);

grant select on staging_octane.area_median_income_row to readonly;

grant delete, insert, select, truncate, update on staging_octane.area_median_income_row to dms_octane_writer;

grant select on staging_octane.area_median_income_row to etl_loan;

create table staging_octane.county_city
(
    cci_pid bigint not null
        constraint county_city_pkey
            primary key,
    cci_version integer,
    cci_county_pid bigint,
    cci_city_name varchar(128)
);

alter table staging_octane.county_city owner to deployer;

create index idx_county_city__pid_version
    on staging_octane.county_city (cci_pid, cci_version);

grant select on staging_octane.county_city to readonly;

grant delete, insert, select, truncate, update on staging_octane.county_city to dms_octane_writer;

grant select on staging_octane.county_city to etl_loan;

create table staging_octane.county_sub_jurisdiction
(
    csju_pid bigint not null
        constraint county_sub_jurisdiction_pkey
            primary key,
    csju_version integer,
    csju_county_pid bigint,
    csju_sub_jurisdiction_name varchar(128)
);

alter table staging_octane.county_sub_jurisdiction owner to deployer;

create index idx_county_sub_jurisdiction__pid_version
    on staging_octane.county_sub_jurisdiction (csju_pid, csju_version);

grant select on staging_octane.county_sub_jurisdiction to readonly;

grant delete, insert, select, truncate, update on staging_octane.county_sub_jurisdiction to dms_octane_writer;

grant select on staging_octane.county_sub_jurisdiction to etl_loan;

create table staging_octane.disaster_declaration
(
    dd_pid bigint not null
        constraint disaster_declaration_pkey
            primary key,
    dd_version integer,
    dd_account_pid bigint,
    dd_fema_incident_id varchar(32),
    dd_state_type varchar(128),
    dd_county_pid bigint,
    dd_declared_disaster_date date,
    dd_last_processed_datetime timestamp
);

alter table staging_octane.disaster_declaration owner to deployer;

create index idx_disaster_declaration__pid_version
    on staging_octane.disaster_declaration (dd_pid, dd_version);

grant select on staging_octane.disaster_declaration to readonly;

grant delete, insert, select, truncate, update on staging_octane.disaster_declaration to dms_octane_writer;

grant select on staging_octane.disaster_declaration to etl_loan;

create table staging_octane.license_req
(
    mlr_pid bigint not null
        constraint license_req_pkey
            primary key,
    mlr_version integer,
    mlr_account_pid bigint,
    mlr_state_type varchar(128),
    mlr_license_type varchar(128)
);

alter table staging_octane.license_req owner to deployer;

create index idx_license_req__pid_version
    on staging_octane.license_req (mlr_pid, mlr_version);

grant select on staging_octane.license_req to readonly;

grant delete, insert, select, truncate, update on staging_octane.license_req to dms_octane_writer;

grant select on staging_octane.license_req to etl_loan;

create table staging_octane.loan_limit_row
(
    llr_pid bigint not null
        constraint loan_limit_row_pkey
            primary key,
    llr_version integer,
    llr_loan_limit_table_pid bigint,
    llr_loan_limit_type varchar(128),
    llr_state_type varchar(128),
    llr_county_pid bigint,
    llr_one_unit_limit_amount numeric(15,2),
    llr_two_unit_limit_amount numeric(15,2),
    llr_three_unit_limit_amount numeric(15,2),
    llr_four_unit_limit_amount numeric(15,2)
);

alter table staging_octane.loan_limit_row owner to deployer;

create index idx_loan_limit_row__pid_version
    on staging_octane.loan_limit_row (llr_pid, llr_version);

grant select on staging_octane.loan_limit_row to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_limit_row to dms_octane_writer;

grant select on staging_octane.loan_limit_row to etl_loan;

create table staging_octane.recording_city
(
    rc_pid bigint not null
        constraint recording_city_pkey
            primary key,
    rc_version integer,
    rc_city_name varchar(128),
    rc_state_type varchar(128),
    rc_recording_city_name varchar(128)
);

alter table staging_octane.recording_city owner to deployer;

create index idx_recording_city__pid_version
    on staging_octane.recording_city (rc_pid, rc_version);

grant select on staging_octane.recording_city to readonly;

grant delete, insert, select, truncate, update on staging_octane.recording_city to dms_octane_writer;

grant select on staging_octane.recording_city to etl_loan;

create table staging_octane.recording_district
(
    rdi_pid bigint not null
        constraint recording_district_pkey
            primary key,
    rdi_version integer,
    rdi_state_type varchar(128),
    rdi_district_name_with_qualifier varchar(128),
    rdi_district_name varchar(128)
);

alter table staging_octane.recording_district owner to deployer;

create index idx_recording_district__pid_version
    on staging_octane.recording_district (rdi_pid, rdi_version);

grant select on staging_octane.recording_district to readonly;

grant delete, insert, select, truncate, update on staging_octane.recording_district to dms_octane_writer;

grant select on staging_octane.recording_district to etl_loan;

create table staging_octane.county_recording_district
(
    crdi_pid bigint not null
        constraint county_recording_district_pkey
            primary key,
    crdi_version integer,
    crdi_county_pid bigint,
    crdi_recording_district_pid bigint
);

alter table staging_octane.county_recording_district owner to deployer;

create index idx_county_recording_district__pid_version
    on staging_octane.county_recording_district (crdi_pid, crdi_version);

grant select on staging_octane.county_recording_district to readonly;

grant delete, insert, select, truncate, update on staging_octane.county_recording_district to dms_octane_writer;

grant select on staging_octane.county_recording_district to etl_loan;

create table staging_octane.region_ernst_page_rec
(
    rerc_pid bigint not null
        constraint region_ernst_page_rec_pkey
            primary key,
    rerc_version integer,
    rerc_ernst_page_rec_type varchar(128),
    rerc_state_type varchar(128),
    rerc_county_pid bigint,
    rerc_county_city_pid bigint,
    rerc_recording_district_pid bigint,
    rerc_ernst_page_rec varchar(16)
);

alter table staging_octane.region_ernst_page_rec owner to deployer;

create index idx_region_ernst_page_rec__pid_version
    on staging_octane.region_ernst_page_rec (rerc_pid, rerc_version);

grant select on staging_octane.region_ernst_page_rec to readonly;

grant delete, insert, select, truncate, update on staging_octane.region_ernst_page_rec to dms_octane_writer;

grant select on staging_octane.region_ernst_page_rec to etl_loan;

create table staging_octane.street_links_product_type
(
    code varchar(128) not null
        constraint street_links_product_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.street_links_product_type owner to deployer;

grant select on staging_octane.street_links_product_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.street_links_product_type to dms_octane_writer;

grant select on staging_octane.street_links_product_type to etl_loan;

create table staging_octane.stripe_payment_status_type
(
    code varchar(128) not null
        constraint stripe_payment_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.stripe_payment_status_type owner to deployer;

grant select on staging_octane.stripe_payment_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.stripe_payment_status_type to dms_octane_writer;

grant select on staging_octane.stripe_payment_status_type to etl_loan;

create table staging_octane.stripe_payment
(
    stpm_pid bigint not null
        constraint stripe_payment_pkey
            primary key,
    stpm_version integer,
    stpm_account_pid bigint,
    stpm_submit_datetime timestamp,
    stpm_payer_unparsed_name varchar(128),
    stpm_invoice_amount numeric(15,2),
    stpm_payment_request_type varchar(128),
    stpm_stripe_payment_status_type varchar(128),
    stpm_payment_status_messages text,
    stpm_status_datetime timestamp,
    stpm_token varchar(128),
    stpm_receipt_email varchar(256),
    stpm_stripe_id varchar(128),
    stpm_refund_stripe_id varchar(128),
    stpm_receipt_url varchar(256)
);

alter table staging_octane.stripe_payment owner to deployer;

create index idx_stripe_payment__pid_version
    on staging_octane.stripe_payment (stpm_pid, stpm_version);

grant select on staging_octane.stripe_payment to readonly;

grant delete, insert, select, truncate, update on staging_octane.stripe_payment to dms_octane_writer;

grant select on staging_octane.stripe_payment to etl_loan;

create table staging_octane.tax_filing_status_type
(
    code varchar(128) not null
        constraint tax_filing_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.tax_filing_status_type owner to deployer;

grant select on staging_octane.tax_filing_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.tax_filing_status_type to dms_octane_writer;

grant select on staging_octane.tax_filing_status_type to etl_loan;

create table staging_octane.tax_transcript_request_status_type
(
    code varchar(128) not null
        constraint tax_transcript_request_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.tax_transcript_request_status_type owner to deployer;

grant select on staging_octane.tax_transcript_request_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.tax_transcript_request_status_type to dms_octane_writer;

grant select on staging_octane.tax_transcript_request_status_type to etl_loan;

create table staging_octane.taxpayer_identifier_type
(
    code varchar(128) not null
        constraint taxpayer_identifier_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.taxpayer_identifier_type owner to deployer;

grant select on staging_octane.taxpayer_identifier_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.taxpayer_identifier_type to dms_octane_writer;

grant select on staging_octane.taxpayer_identifier_type to etl_loan;

create table staging_octane.contractor
(
    ctr_pid bigint not null
        constraint contractor_pkey
            primary key,
    ctr_version integer,
    ctr_account_pid bigint,
    ctr_contractor_company_name varchar(128),
    ctr_max_construction_credit_amount numeric(15,2),
    ctr_taxpayer_identifier_type varchar(128),
    ctr_first_name varchar(128),
    ctr_last_name varchar(128),
    ctr_work_phone varchar(32),
    ctr_work_phone_extension varchar(16),
    ctr_mobile_phone varchar(32),
    ctr_fax varchar(32),
    ctr_email varchar(256),
    ctr_address_street1 varchar(128),
    ctr_address_street2 varchar(128),
    ctr_address_city varchar(128),
    ctr_address_state varchar(128),
    ctr_address_postal_code varchar(128),
    ctr_address_country varchar(128),
    ctr_notes varchar(1024),
    ctr_has_employees varchar(128),
    ctr_verified boolean,
    ctr_validation_status_type varchar(128)
);

alter table staging_octane.contractor owner to deployer;

create index idx_contractor__pid_version
    on staging_octane.contractor (ctr_pid, ctr_version);

grant select on staging_octane.contractor to readonly;

grant delete, insert, select, truncate, update on staging_octane.contractor to dms_octane_writer;

grant select on staging_octane.contractor to etl_loan;

create table staging_octane.contractor_license
(
    ctrl_pid bigint not null
        constraint contractor_license_pkey
            primary key,
    ctrl_version integer,
    ctrl_contractor_pid bigint,
    ctrl_state_type varchar(128),
    ctrl_license_number varchar(128),
    ctrl_from_date date,
    ctrl_through_date date,
    ctrl_note varchar(256)
);

alter table staging_octane.contractor_license owner to deployer;

create index idx_contractor_license__pid_version
    on staging_octane.contractor_license (ctrl_pid, ctrl_version);

grant select on staging_octane.contractor_license to readonly;

grant delete, insert, select, truncate, update on staging_octane.contractor_license to dms_octane_writer;

grant select on staging_octane.contractor_license to etl_loan;

create table staging_octane.third_party_community_second_program_eligibility_type
(
    code varchar(128) not null
        constraint third_party_community_second_program_eligibility_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.third_party_community_second_program_eligibility_type owner to deployer;

grant select on staging_octane.third_party_community_second_program_eligibility_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.third_party_community_second_program_eligibility_type to dms_octane_writer;

grant select on staging_octane.third_party_community_second_program_eligibility_type to etl_loan;

create table staging_octane.time_zone_type
(
    code varchar(128) not null
        constraint time_zone_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.time_zone_type owner to deployer;

grant select on staging_octane.time_zone_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.time_zone_type to dms_octane_writer;

grant select on staging_octane.time_zone_type to etl_loan;

create table staging_octane.admin_user
(
    au_pid bigint not null
        constraint admin_user_pkey
            primary key,
    au_version integer,
    au_create_date date,
    au_email varchar(256),
    au_first_name varchar(32),
    au_last_name varchar(32),
    au_unparsed_name varchar(128),
    au_office_phone varchar(32),
    au_office_phone_extension varchar(16),
    au_through_date date,
    au_time_zone varchar(128),
    au_title varchar(128),
    au_admin_user_status_type varchar(128),
    au_username varchar(32),
    au_admin_user_administrator boolean,
    au_customer_support boolean,
    au_engineering boolean,
    au_management boolean,
    au_force_password_change boolean,
    au_last_password_change_date timestamp,
    au_last_sign_on_datetime timestamp
);

alter table staging_octane.admin_user owner to deployer;

create index idx_admin_user__pid_version
    on staging_octane.admin_user (au_pid, au_version);

grant select on staging_octane.admin_user to readonly;

grant delete, insert, select, truncate, update on staging_octane.admin_user to dms_octane_writer;

grant select on staging_octane.admin_user to etl_loan;

create table staging_octane.borrower_user
(
    bu_pid bigint not null
        constraint borrower_user_pkey
            primary key,
    bu_version integer,
    bu_account_pid bigint,
    bu_create_datetime timestamp,
    bu_email varchar(256),
    bu_last_sign_on_datetime timestamp,
    bu_time_zone varchar(128),
    bu_first_name varchar(32),
    bu_middle_name varchar(32),
    bu_last_name varchar(32),
    bu_name_suffix varchar(32),
    bu_unparsed_name varchar(128),
    bu_borrower_activation_id varchar(128),
    bu_challenge_question_type varchar(128),
    bu_challenge_question_answer varchar(128),
    bu_borrower_user_account_status_type varchar(128),
    bu_public_quote_request_cache_id integer,
    bu_create_sap_on_activation boolean,
    bu_nickname varchar(32),
    bu_plain_text_email boolean,
    bu_preferred_first_name varchar(32)
);

alter table staging_octane.borrower_user owner to deployer;

create index idx_borrower_user__pid_version
    on staging_octane.borrower_user (bu_pid, bu_version);

grant select on staging_octane.borrower_user to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower_user to dms_octane_writer;

grant select on staging_octane.borrower_user to etl_loan;

create table staging_octane.timeout_time_zone_type
(
    code varchar(128) not null
        constraint timeout_time_zone_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.timeout_time_zone_type owner to deployer;

grant select on staging_octane.timeout_time_zone_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.timeout_time_zone_type to dms_octane_writer;

grant select on staging_octane.timeout_time_zone_type to etl_loan;

create table staging_octane.title_company
(
    tc_pid bigint not null
        constraint title_company_pkey
            primary key,
    tc_version integer,
    tc_account_pid bigint,
    tc_company_name varchar(128),
    tc_admin_lock boolean,
    tc_active boolean,
    tc_preferred_vendor boolean
);

alter table staging_octane.title_company owner to deployer;

create index idx_title_company__pid_version
    on staging_octane.title_company (tc_pid, tc_version);

grant select on staging_octane.title_company to readonly;

grant delete, insert, select, truncate, update on staging_octane.title_company to dms_octane_writer;

grant select on staging_octane.title_company to etl_loan;

create table staging_octane.title_company_office
(
    tco_pid bigint not null
        constraint title_company_office_pkey
            primary key,
    tco_version integer,
    tco_title_company_pid bigint,
    tco_address_street1 varchar(128),
    tco_address_street2 varchar(128),
    tco_address_city varchar(128),
    tco_address_state varchar(128),
    tco_address_postal_code varchar(128),
    tco_address_country varchar(128),
    tco_phone varchar(32),
    tco_fax varchar(32),
    tco_email varchar(256),
    tco_active boolean
);

alter table staging_octane.title_company_office owner to deployer;

create index idx_title_company_office__pid_version
    on staging_octane.title_company_office (tco_pid, tco_version);

grant select on staging_octane.title_company_office to readonly;

grant delete, insert, select, truncate, update on staging_octane.title_company_office to dms_octane_writer;

grant select on staging_octane.title_company_office to etl_loan;

create table staging_octane.preferred_settlement
(
    prs_pid bigint not null
        constraint preferred_settlement_pkey
            primary key,
    prs_version integer,
    prs_account_pid bigint,
    prs_state varchar(16),
    prs_from_date date,
    prs_title_company_pid bigint,
    prs_title_company_office_pid bigint,
    prs_settlement_agent_pid bigint,
    prs_settlement_agent_office_pid bigint,
    prs_settlement_agent_wire_pid bigint
);

alter table staging_octane.preferred_settlement owner to deployer;

create index idx_preferred_settlement__pid_version
    on staging_octane.preferred_settlement (prs_pid, prs_version);

grant select on staging_octane.preferred_settlement to readonly;

grant delete, insert, select, truncate, update on staging_octane.preferred_settlement to dms_octane_writer;

grant select on staging_octane.preferred_settlement to etl_loan;

create table staging_octane.title_manner_held_type
(
    code varchar(128) not null
        constraint title_manner_held_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.title_manner_held_type owner to deployer;

grant select on staging_octane.title_manner_held_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.title_manner_held_type to dms_octane_writer;

grant select on staging_octane.title_manner_held_type to etl_loan;

create table staging_octane.total_expert_account_type
(
    code varchar(128) not null
        constraint total_expert_account_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.total_expert_account_type owner to deployer;

grant select on staging_octane.total_expert_account_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.total_expert_account_type to dms_octane_writer;

grant select on staging_octane.total_expert_account_type to etl_loan;

create table staging_octane.trade_audit_type
(
    code varchar(128) not null
        constraint trade_audit_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.trade_audit_type owner to deployer;

grant select on staging_octane.trade_audit_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.trade_audit_type to dms_octane_writer;

grant select on staging_octane.trade_audit_type to etl_loan;

create table staging_octane.trade_fee_type
(
    tft_pid bigint not null
        constraint trade_fee_type_pkey
            primary key,
    tft_version integer,
    tft_account_pid bigint,
    tft_name varchar(128)
);

alter table staging_octane.trade_fee_type owner to deployer;

create index idx_trade_fee_type__pid_version
    on staging_octane.trade_fee_type (tft_pid, tft_version);

grant select on staging_octane.trade_fee_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.trade_fee_type to dms_octane_writer;

grant select on staging_octane.trade_fee_type to etl_loan;

create table staging_octane.trade_pricing_type
(
    code varchar(128) not null
        constraint trade_pricing_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.trade_pricing_type owner to deployer;

grant select on staging_octane.trade_pricing_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.trade_pricing_type to dms_octane_writer;

grant select on staging_octane.trade_pricing_type to etl_loan;

create table staging_octane.trade_status_type
(
    code varchar(128) not null
        constraint trade_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.trade_status_type owner to deployer;

grant select on staging_octane.trade_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.trade_status_type to dms_octane_writer;

grant select on staging_octane.trade_status_type to etl_loan;

create table staging_octane.trustee
(
    tru_pid bigint not null
        constraint trustee_pkey
            primary key,
    tru_version integer,
    tru_account_pid bigint,
    tru_name varchar(128),
    tru_address_street1 varchar(128),
    tru_address_street2 varchar(128),
    tru_address_city varchar(128),
    tru_address_state varchar(128),
    tru_address_postal_code varchar(128),
    tru_address_country varchar(128),
    tru_mers_org_id varchar(7),
    tru_from_date date,
    tru_through_date date,
    tru_phone_number varchar(32)
);

alter table staging_octane.trustee owner to deployer;

create index idx_trustee__pid_version
    on staging_octane.trustee (tru_pid, tru_version);

grant select on staging_octane.trustee to readonly;

grant delete, insert, select, truncate, update on staging_octane.trustee to dms_octane_writer;

grant select on staging_octane.trustee to etl_loan;

create table staging_octane.underwrite_disposition_type
(
    code varchar(128) not null
        constraint underwrite_disposition_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.underwrite_disposition_type owner to deployer;

grant select on staging_octane.underwrite_disposition_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.underwrite_disposition_type to dms_octane_writer;

grant select on staging_octane.underwrite_disposition_type to etl_loan;

create table staging_octane.underwrite_method_type
(
    code varchar(128) not null
        constraint underwrite_method_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.underwrite_method_type owner to deployer;

grant select on staging_octane.underwrite_method_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.underwrite_method_type to dms_octane_writer;

grant select on staging_octane.underwrite_method_type to etl_loan;

create table staging_octane.underwrite_risk_assessment_type
(
    code varchar(128) not null
        constraint underwrite_risk_assessment_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.underwrite_risk_assessment_type owner to deployer;

grant select on staging_octane.underwrite_risk_assessment_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.underwrite_risk_assessment_type to dms_octane_writer;

grant select on staging_octane.underwrite_risk_assessment_type to etl_loan;

create table staging_octane.unique_dwelling_type
(
    code varchar(128) not null
        constraint unique_dwelling_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.unique_dwelling_type owner to deployer;

grant select on staging_octane.unique_dwelling_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.unique_dwelling_type to dms_octane_writer;

grant select on staging_octane.unique_dwelling_type to etl_loan;

create table staging_octane.usda_rd_single_family_housing_type
(
    code varchar(128) not null
        constraint usda_rd_single_family_housing_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.usda_rd_single_family_housing_type owner to deployer;

grant select on staging_octane.usda_rd_single_family_housing_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.usda_rd_single_family_housing_type to dms_octane_writer;

grant select on staging_octane.usda_rd_single_family_housing_type to etl_loan;

create table staging_octane.uuts_loan_originator_type
(
    code varchar(128) not null
        constraint uuts_loan_originator_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.uuts_loan_originator_type owner to deployer;

grant select on staging_octane.uuts_loan_originator_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.uuts_loan_originator_type to dms_octane_writer;

grant select on staging_octane.uuts_loan_originator_type to etl_loan;

create table staging_octane.va_borrower_certification_occupancy_type
(
    code varchar(128) not null
        constraint va_borrower_certification_occupancy_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.va_borrower_certification_occupancy_type owner to deployer;

grant select on staging_octane.va_borrower_certification_occupancy_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.va_borrower_certification_occupancy_type to dms_octane_writer;

grant select on staging_octane.va_borrower_certification_occupancy_type to etl_loan;

create table staging_octane.va_entitlement_code_type
(
    code varchar(128) not null
        constraint va_entitlement_code_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.va_entitlement_code_type owner to deployer;

grant select on staging_octane.va_entitlement_code_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.va_entitlement_code_type to dms_octane_writer;

grant select on staging_octane.va_entitlement_code_type to etl_loan;

create table staging_octane.va_entitlement_restoration_type
(
    code varchar(128) not null
        constraint va_entitlement_restoration_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.va_entitlement_restoration_type owner to deployer;

grant select on staging_octane.va_entitlement_restoration_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.va_entitlement_restoration_type to dms_octane_writer;

grant select on staging_octane.va_entitlement_restoration_type to etl_loan;

create table staging_octane.va_notice_of_value_source_type
(
    code varchar(128) not null
        constraint va_notice_of_value_source_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.va_notice_of_value_source_type owner to deployer;

grant select on staging_octane.va_notice_of_value_source_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.va_notice_of_value_source_type to dms_octane_writer;

grant select on staging_octane.va_notice_of_value_source_type to etl_loan;

create table staging_octane.va_past_credit_record_type
(
    code varchar(128) not null
        constraint va_past_credit_record_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.va_past_credit_record_type owner to deployer;

grant select on staging_octane.va_past_credit_record_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.va_past_credit_record_type to dms_octane_writer;

grant select on staging_octane.va_past_credit_record_type to etl_loan;

create table staging_octane.va_regional_loan_center_type
(
    code varchar(128) not null
        constraint va_regional_loan_center_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.va_regional_loan_center_type owner to deployer;

grant select on staging_octane.va_regional_loan_center_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.va_regional_loan_center_type to dms_octane_writer;

grant select on staging_octane.va_regional_loan_center_type to etl_loan;

create table staging_octane.va_relative_relationship_type
(
    code varchar(128) not null
        constraint va_relative_relationship_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.va_relative_relationship_type owner to deployer;

grant select on staging_octane.va_relative_relationship_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.va_relative_relationship_type to dms_octane_writer;

grant select on staging_octane.va_relative_relationship_type to etl_loan;

create table staging_octane.vendor_credential_source_type
(
    code varchar(128) not null
        constraint vendor_credential_source_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.vendor_credential_source_type owner to deployer;

grant select on staging_octane.vendor_credential_source_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.vendor_credential_source_type to dms_octane_writer;

grant select on staging_octane.vendor_credential_source_type to etl_loan;

create table staging_octane.vendor_document_event_type
(
    code varchar(128) not null
        constraint vendor_document_event_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.vendor_document_event_type owner to deployer;

grant select on staging_octane.vendor_document_event_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.vendor_document_event_type to dms_octane_writer;

grant select on staging_octane.vendor_document_event_type to etl_loan;

create table staging_octane.vendor_import_document_type
(
    code varchar(128) not null
        constraint vendor_import_document_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.vendor_import_document_type owner to deployer;

grant select on staging_octane.vendor_import_document_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.vendor_import_document_type to dms_octane_writer;

grant select on staging_octane.vendor_import_document_type to etl_loan;

create table staging_octane.veteran_status_type
(
    code varchar(128) not null
        constraint veteran_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.veteran_status_type owner to deployer;

grant select on staging_octane.veteran_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.veteran_status_type to dms_octane_writer;

grant select on staging_octane.veteran_status_type to etl_loan;

create table staging_octane.voe_third_party_verifier_type
(
    code varchar(128) not null
        constraint voe_third_party_verifier_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.voe_third_party_verifier_type owner to deployer;

grant select on staging_octane.voe_third_party_verifier_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.voe_third_party_verifier_type to dms_octane_writer;

grant select on staging_octane.voe_third_party_verifier_type to etl_loan;

create table staging_octane.voe_verbal_verify_method_type
(
    code varchar(128) not null
        constraint voe_verbal_verify_method_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.voe_verbal_verify_method_type owner to deployer;

grant select on staging_octane.voe_verbal_verify_method_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.voe_verbal_verify_method_type to dms_octane_writer;

grant select on staging_octane.voe_verbal_verify_method_type to etl_loan;

create table staging_octane.voe_verify_method_type
(
    code varchar(128) not null
        constraint voe_verify_method_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.voe_verify_method_type owner to deployer;

grant select on staging_octane.voe_verify_method_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.voe_verify_method_type to dms_octane_writer;

grant select on staging_octane.voe_verify_method_type to etl_loan;

create table staging_octane.water_type
(
    code varchar(128) not null
        constraint water_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.water_type owner to deployer;

grant select on staging_octane.water_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.water_type to dms_octane_writer;

grant select on staging_octane.water_type to etl_loan;

create table staging_octane.wf_deal_process_status_type
(
    code varchar(128) not null
        constraint wf_deal_process_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.wf_deal_process_status_type owner to deployer;

grant select on staging_octane.wf_deal_process_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_deal_process_status_type to dms_octane_writer;

grant select on staging_octane.wf_deal_process_status_type to etl_loan;

create table staging_octane.wf_deal_step_status_type
(
    code varchar(128) not null
        constraint wf_deal_step_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.wf_deal_step_status_type owner to deployer;

grant select on staging_octane.wf_deal_step_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_deal_step_status_type to dms_octane_writer;

grant select on staging_octane.wf_deal_step_status_type to etl_loan;

create table staging_octane.wf_outcome_type
(
    code varchar(128) not null
        constraint wf_outcome_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.wf_outcome_type owner to deployer;

grant select on staging_octane.wf_outcome_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_outcome_type to dms_octane_writer;

grant select on staging_octane.wf_outcome_type to etl_loan;

create table staging_octane.wf_phase
(
    wph_pid bigint not null
        constraint wf_phase_pkey
            primary key,
    wph_version integer,
    wph_account_pid bigint,
    wph_phase_name varchar(128),
    wph_phase_number integer
);

alter table staging_octane.wf_phase owner to deployer;

create index idx_wf_phase__pid_version
    on staging_octane.wf_phase (wph_pid, wph_version);

grant select on staging_octane.wf_phase to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_phase to dms_octane_writer;

grant select on staging_octane.wf_phase to etl_loan;

create table staging_octane.wf_process_status_type
(
    code varchar(128) not null
        constraint wf_process_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.wf_process_status_type owner to deployer;

grant select on staging_octane.wf_process_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_process_status_type to dms_octane_writer;

grant select on staging_octane.wf_process_status_type to etl_loan;

create table staging_octane.wf_process_type
(
    code varchar(128) not null
        constraint wf_process_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.wf_process_type owner to deployer;

grant select on staging_octane.wf_process_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_process_type to dms_octane_writer;

grant select on staging_octane.wf_process_type to etl_loan;

create table staging_octane.wf_process
(
    wpr_pid bigint not null
        constraint wf_process_pkey
            primary key,
    wpr_version integer,
    wpr_account_pid bigint,
    wpr_name varchar(128),
    wpr_wf_process_type varchar(128),
    wpr_criteria_pid bigint,
    wpr_wf_process_status_type varchar(128)
);

alter table staging_octane.wf_process owner to deployer;

create index idx_wf_process__pid_version
    on staging_octane.wf_process (wpr_pid, wpr_version);

grant select on staging_octane.wf_process to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_process to dms_octane_writer;

grant select on staging_octane.wf_process to etl_loan;

create table staging_octane.wf_step_function_type
(
    code varchar(128) not null
        constraint wf_step_function_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.wf_step_function_type owner to deployer;

grant select on staging_octane.wf_step_function_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_step_function_type to dms_octane_writer;

grant select on staging_octane.wf_step_function_type to etl_loan;

create table staging_octane.wf_step_performer_assign_type
(
    code varchar(128) not null
        constraint wf_step_performer_assign_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.wf_step_performer_assign_type owner to deployer;

grant select on staging_octane.wf_step_performer_assign_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_step_performer_assign_type to dms_octane_writer;

grant select on staging_octane.wf_step_performer_assign_type to etl_loan;

create table staging_octane.wf_step_reassign_type
(
    code varchar(128) not null
        constraint wf_step_reassign_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.wf_step_reassign_type owner to deployer;

grant select on staging_octane.wf_step_reassign_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_step_reassign_type to dms_octane_writer;

grant select on staging_octane.wf_step_reassign_type to etl_loan;

create table staging_octane.wf_step_timeout_type
(
    code varchar(128) not null
        constraint wf_step_timeout_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.wf_step_timeout_type owner to deployer;

grant select on staging_octane.wf_step_timeout_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_step_timeout_type to dms_octane_writer;

grant select on staging_octane.wf_step_timeout_type to etl_loan;

create table staging_octane.wf_step_type
(
    code varchar(128) not null
        constraint wf_step_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.wf_step_type owner to deployer;

grant select on staging_octane.wf_step_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_step_type to dms_octane_writer;

grant select on staging_octane.wf_step_type to etl_loan;

create table staging_octane.wf_polling_time_slice
(
    wts_pid bigint not null
        constraint wf_wait_until_time_slice_pkey
            primary key,
    wts_version integer,
    wts_time_slice timestamp,
    wts_when_fired timestamp,
    wts_when_complete timestamp
);

alter table staging_octane.wf_polling_time_slice owner to deployer;

create index idx_wf_wait_until_time_slice__pid_version
    on staging_octane.wf_polling_time_slice (wts_pid, wts_version);

grant select on staging_octane.wf_polling_time_slice to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_polling_time_slice to dms_octane_writer;

grant select on staging_octane.wf_polling_time_slice to etl_loan;

create table staging_octane.yes_no_na_type
(
    code varchar(128) not null
        constraint yes_no_na_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.yes_no_na_type owner to deployer;

grant select on staging_octane.yes_no_na_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.yes_no_na_type to dms_octane_writer;

grant select on staging_octane.yes_no_na_type to etl_loan;

create table staging_octane.yes_no_na_unknown_type
(
    code varchar(128) not null
        constraint yes_no_na_unknown_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.yes_no_na_unknown_type owner to deployer;

grant select on staging_octane.yes_no_na_unknown_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.yes_no_na_unknown_type to dms_octane_writer;

grant select on staging_octane.yes_no_na_unknown_type to etl_loan;

create table staging_octane.yes_no_unknown_type
(
    code varchar(128) not null
        constraint yes_no_unknown_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.yes_no_unknown_type owner to deployer;

grant select on staging_octane.yes_no_unknown_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.yes_no_unknown_type to dms_octane_writer;

grant select on staging_octane.yes_no_unknown_type to etl_loan;

create table staging_octane.application
(
    apl_pid bigint not null
        constraint application_pkey
            primary key,
    apl_version integer,
    apl_application_name varchar(128),
    apl_primary_application boolean,
    apl_urla boolean,
    apl_proposal_pid bigint,
    apl_fha_borrower_certification_own_other_property varchar(128),
    apl_fha_borrower_certification_property_to_be_sold varchar(128),
    apl_fha_borrower_certification_sales_price_amount numeric(15),
    apl_fha_borrower_certification_mortgage_amount numeric(15),
    apl_address_street1 varchar(128),
    apl_address_street2 varchar(128),
    apl_address_city varchar(128),
    apl_address_state varchar(128),
    apl_address_postal_code varchar(128),
    apl_address_country varchar(128),
    apl_fha_borrower_certification_rental varchar(128),
    apl_fha_borrower_certification_rental_explain varchar(256),
    apl_fha_borrower_certification_more_than_four_dwellings varchar(128),
    apl_va_borrower_certification_occupancy_type varchar(128),
    apl_fha_va_bor_cert_sales_price_exceeds_type varchar(128)
);

alter table staging_octane.application owner to deployer;

create index idx_application__pid_version
    on staging_octane.application (apl_pid, apl_version);

grant select on staging_octane.application to readonly;

grant delete, insert, select, truncate, update on staging_octane.application to dms_octane_writer;

grant select on staging_octane.application to etl_loan;

create table staging_octane.asset
(
    as_pid bigint not null
        constraint asset_pkey
            primary key,
    as_version integer,
    as_aggregate_description varchar(256),
    as_application_pid bigint,
    as_asset_type varchar(128),
    as_automobile_make_description varchar(32),
    as_automobile_model_year integer,
    as_cash_or_market_value_amount numeric(15,2),
    as_description varchar(128),
    as_donor_city varchar(128),
    as_donor_country varchar(128),
    as_donor_postal_code varchar(128),
    as_donor_state varchar(128),
    as_donor_street1 varchar(128),
    as_donor_street2 varchar(128),
    as_gift_funds_donor_phone varchar(32),
    as_gift_funds_donor_relationship varchar(128),
    as_gift_funds_donor_unparsed_name varchar(128),
    as_gift_funds_other_type_description varchar(32),
    as_gift_funds_depository_asset_pid bigint,
    as_gift_amount numeric(15,2),
    as_gift_funds_source_account_type varchar(128),
    as_gift_funds_source_holder_name varchar(128),
    as_gift_funds_type varchar(128),
    as_holder_name varchar(128),
    as_holder_city varchar(128),
    as_holder_country varchar(128),
    as_holder_postal_code varchar(128),
    as_holder_state varchar(128),
    as_holder_street1 varchar(128),
    as_holder_street2 varchar(128),
    as_life_insurance_face_value_amount numeric(15,2),
    as_liquid_amount numeric(15,2),
    as_liquid_percent numeric(11,9),
    as_source_verification_required varchar(128),
    as_stock_bond_mutual_fund_share_count integer,
    as_earnest_money_deposit_source_pid bigint,
    as_available_amount numeric(15,2),
    as_down_payment_amount numeric(15),
    as_closing_costs_amount numeric(15,2),
    as_gift_funds_account_holder_type varchar(128),
    as_penalty_amount numeric(15,2),
    as_earnest_money_deposit_is_gift varchar(128),
    as_deposit_date date,
    as_gift_funds_ein varchar(16),
    as_snapshotted_pid bigint
);

alter table staging_octane.asset owner to deployer;

create index idx_asset__pid_version
    on staging_octane.asset (as_pid, as_version);

grant select on staging_octane.asset to readonly;

grant delete, insert, select, truncate, update on staging_octane.asset to dms_octane_writer;

grant select on staging_octane.asset to etl_loan;

create table staging_octane.asset_large_deposit
(
    ald_pid bigint not null
        constraint asset_large_deposit_pkey
            primary key,
    ald_version integer,
    ald_asset_pid bigint,
    ald_deposit_amount numeric(15,2),
    ald_deposit_date date,
    ald_snapshotted_pid bigint
);

alter table staging_octane.asset_large_deposit owner to deployer;

create index idx_asset_large_deposit__pid_version
    on staging_octane.asset_large_deposit (ald_pid, ald_version);

grant select on staging_octane.asset_large_deposit to readonly;

grant delete, insert, select, truncate, update on staging_octane.asset_large_deposit to dms_octane_writer;

grant select on staging_octane.asset_large_deposit to etl_loan;

create table staging_octane.creditor
(
    crd_pid bigint not null
        constraint creditor_pkey
            primary key,
    crd_version integer,
    crd_account_pid bigint,
    crd_payoff_request_delivery_type varchar(128),
    crd_name varchar(128),
    crd_payoff_phone_1 varchar(32),
    crd_payoff_phone_1_extension varchar(16),
    crd_payoff_phone_2 varchar(32),
    crd_payoff_phone_2_extension varchar(16),
    crd_payoff_fax varchar(32),
    crd_payoff_email varchar(256),
    crd_payoff_auto_teller varchar(128),
    crd_last_updated date,
    crd_last_updated_by varchar(128),
    crd_payoff_notes varchar(1024),
    crd_address_street1 varchar(128),
    crd_address_street2 varchar(128),
    crd_address_city varchar(128),
    crd_address_state varchar(128),
    crd_address_postal_code varchar(128),
    crd_address_country varchar(128),
    crd_key_creditor_type varchar(128)
);

alter table staging_octane.creditor owner to deployer;

create index idx_creditor__pid_version
    on staging_octane.creditor (crd_pid, crd_version);

grant select on staging_octane.creditor to readonly;

grant delete, insert, select, truncate, update on staging_octane.creditor to dms_octane_writer;

grant select on staging_octane.creditor to etl_loan;

create table staging_octane.creditor_lookup_name
(
    cln_pid bigint not null
        constraint creditor_lookup_name_pkey
            primary key,
    cln_version integer,
    cln_account_pid bigint,
    cln_creditor_pid bigint,
    cln_name varchar(128)
);

alter table staging_octane.creditor_lookup_name owner to deployer;

create index idx_creditor_lookup_name__pid_version
    on staging_octane.creditor_lookup_name (cln_pid, cln_version);

grant select on staging_octane.creditor_lookup_name to readonly;

grant delete, insert, select, truncate, update on staging_octane.creditor_lookup_name to dms_octane_writer;

grant select on staging_octane.creditor_lookup_name to etl_loan;

create table staging_octane.investor
(
    i_pid bigint not null
        constraint investor_pkey
            primary key,
    i_version integer,
    i_account_pid bigint,
    i_investor_id varchar(32),
    i_criteria_pid bigint,
    i_website_url varchar(256),
    i_investor_name varchar(128),
    i_investor_city varchar(128),
    i_investor_country varchar(128),
    i_investor_postal_code varchar(128),
    i_investor_state varchar(128),
    i_investor_street1 varchar(128),
    i_investor_street2 varchar(128),
    i_investor_county_pid bigint,
    i_beneficiary_name varchar(128),
    i_beneficiary_city varchar(128),
    i_beneficiary_country varchar(128),
    i_beneficiary_postal_code varchar(128),
    i_beneficiary_state varchar(128),
    i_beneficiary_street1 varchar(128),
    i_beneficiary_street2 varchar(128),
    i_beneficiary_county_pid bigint,
    i_loss_payee_name varchar(128),
    i_loss_payee_city varchar(128),
    i_loss_payee_country varchar(128),
    i_loss_payee_postal_code varchar(128),
    i_loss_payee_state varchar(128),
    i_loss_payee_street1 varchar(128),
    i_loss_payee_street2 varchar(128),
    i_loss_payee_county_pid bigint,
    i_loss_payee_assignee_name varchar(128),
    i_when_recorded_mail_to_name varchar(128),
    i_when_recorded_mail_to_city varchar(128),
    i_when_recorded_mail_to_country varchar(128),
    i_when_recorded_mail_to_postal_code varchar(128),
    i_when_recorded_mail_to_state varchar(128),
    i_when_recorded_mail_to_street1 varchar(128),
    i_when_recorded_mail_to_street2 varchar(128),
    i_when_recorded_mail_to_county_pid bigint,
    i_servicer_name varchar(128),
    i_servicer_address_street1 varchar(128),
    i_servicer_address_street2 varchar(128),
    i_servicer_address_city varchar(128),
    i_servicer_address_state varchar(128),
    i_servicer_address_postal_code varchar(128),
    i_servicer_address_country varchar(128),
    i_servicer_county_pid bigint,
    i_sub_servicer_name varchar(128),
    i_sub_servicer_address_street1 varchar(128),
    i_sub_servicer_address_street2 varchar(128),
    i_sub_servicer_address_city varchar(128),
    i_sub_servicer_address_state varchar(128),
    i_sub_servicer_address_postal_code varchar(128),
    i_sub_servicer_address_country varchar(128),
    i_sub_servicer_mers_org_id varchar(7),
    i_custodian_pid bigint,
    i_file_delivery_name varchar(128),
    i_file_delivery_address_street1 varchar(128),
    i_file_delivery_address_street2 varchar(128),
    i_file_delivery_address_city varchar(128),
    i_file_delivery_address_state varchar(128),
    i_file_delivery_address_postal_code varchar(128),
    i_file_delivery_address_country varchar(128),
    i_initial_beneficiary_candidate boolean,
    i_initial_servicer_candidate boolean,
    i_mers_org_member varchar(128),
    i_mers_org_id varchar(7),
    i_allonge_transfer_to_name varchar(128),
    i_lock_expiration_delivery_subtrahend_days integer,
    i_maximum_lock_extensions_allowed integer,
    i_maximum_lock_extension_days_allowed integer,
    i_mortech_investor_id varchar(16),
    i_fnma_servicer_id varchar(16),
    i_loan_file_delivery_method_type varchar(128),
    i_investor_group_pid bigint,
    i_mbs_investor boolean,
    i_investor_hmda_purchaser_of_loan_type varchar(128),
    i_lock_disable_time time,
    i_allow_weekend_holiday_locks boolean,
    i_nmls_id varchar(16),
    i_nmls_id_applicable varchar(128),
    i_fnm_investor_remittance_type varchar(128),
    i_fnm_mbs_investor_remittance_day_of_month integer,
    i_fnm_mbs_loan_default_loss_party_type varchar(128),
    i_fnm_mbs_reo_marketing_party_type varchar(128),
    i_offers_secondary_financing boolean,
    i_secondary_financing_source_type varchar(128),
    i_ein varchar(10)
);

alter table staging_octane.investor owner to deployer;

create index idx_investor__pid_version
    on staging_octane.investor (i_pid, i_version);

grant select on staging_octane.investor to readonly;

grant delete, insert, select, truncate, update on staging_octane.investor to dms_octane_writer;

grant select on staging_octane.investor to etl_loan;

create table staging_octane.company
(
    cm_pid bigint not null
        constraint company_pkey
            primary key,
    cm_version integer,
    cm_account_pid bigint,
    cm_origination_source_type varchar(128),
    cm_company_id varchar(32),
    cm_nmls_company_id varchar(16),
    cm_federal_tax_id varchar(32),
    cm_mers_org_id varchar(7),
    cm_mers_mom boolean,
    cm_company_name varchar(128),
    cm_company_mailing_address_name varchar(128),
    cm_company_name_for_header_and_footer varchar(128),
    cm_casual_company_name varchar(128),
    cm_company_address_street1 varchar(128),
    cm_company_address_street2 varchar(128),
    cm_company_address_city varchar(128),
    cm_company_address_state varchar(128),
    cm_company_address_postal_code varchar(128),
    cm_company_address_country varchar(128),
    cm_company_phone varchar(32),
    cm_customer_service_email varchar(256),
    cm_customer_service_phone varchar(32),
    cm_customer_service_phone_extension varchar(16),
    cm_borrower_app_company_host varchar(256),
    cm_borrower_app_company_ip_address varchar(32),
    cm_borrower_app_company_enabled boolean,
    cm_borrower_user_email_from varchar(256),
    cm_company_legal_entity_type varchar(128),
    cm_company_legal_entity_organization_state_type varchar(128),
    cm_broker_participating_with_less_than_four_lenders varchar(128),
    cm_broker_participating_lender_1 varchar(256),
    cm_broker_participating_lender_2 varchar(256),
    cm_broker_participating_lender_3 varchar(256),
    cm_correspondent_investor_pid bigint,
    cm_total_expert_account_type varchar(128)
);

alter table staging_octane.company owner to deployer;

create index idx_company__pid_version
    on staging_octane.company (cm_pid, cm_version);

grant select on staging_octane.company to readonly;

grant delete, insert, select, truncate, update on staging_octane.company to dms_octane_writer;

grant select on staging_octane.company to etl_loan;

create table staging_octane.branch
(
    br_pid bigint not null
        constraint branch_pkey
            primary key,
    br_version integer,
    br_company_pid bigint,
    br_branch_name varchar(128),
    br_fha_field_office_code varchar(16),
    br_branch_id varchar(16),
    br_branch_status_type varchar(128),
    br_nmls_branch_id varchar(16),
    br_uuts_loan_originator_type varchar(128),
    br_address_street1 varchar(128),
    br_address_street2 varchar(128),
    br_address_city varchar(128),
    br_address_state varchar(128),
    br_address_postal_code varchar(128),
    br_address_country varchar(128),
    br_office_phone varchar(32),
    br_office_phone_extension varchar(16),
    br_fax varchar(32),
    br_lp_lender_branch_id varchar(16),
    br_clg_flood_cert_internal_account_id varchar(16),
    br_street_links_branch_id varchar(32),
    br_fha_branch_id varchar(16),
    br_fha_branch_id_qualified varchar(16),
    br_lender_paid_broker_compensation_percent numeric(11,9),
    br_location_pid bigint
);

alter table staging_octane.branch owner to deployer;

create index idx_branch__pid_version
    on staging_octane.branch (br_pid, br_version);

grant select on staging_octane.branch to readonly;

grant delete, insert, select, truncate, update on staging_octane.branch to dms_octane_writer;

grant select on staging_octane.branch to etl_loan;

create table staging_octane.branch_license
(
    brml_pid bigint not null
        constraint branch_license_pkey
            primary key,
    brml_version integer,
    brml_branch_pid bigint,
    brml_license_type varchar(128),
    brml_state_type varchar(128),
    brml_license_number varchar(128),
    brml_from_date date,
    brml_through_date date,
    brml_note varchar(256),
    brml_company_pid bigint,
    brml_location_pid bigint
);

alter table staging_octane.branch_license owner to deployer;

create index idx_branch_license__pid_version
    on staging_octane.branch_license (brml_pid, brml_version);

grant select on staging_octane.branch_license to readonly;

grant delete, insert, select, truncate, update on staging_octane.branch_license to dms_octane_writer;

grant select on staging_octane.branch_license to etl_loan;

create table staging_octane.company_license
(
    cml_pid bigint not null
        constraint company_license_pkey
            primary key,
    cml_version integer,
    cml_company_pid bigint,
    cml_license_type varchar(128),
    cml_state_type varchar(128),
    cml_company_state_license_type varchar(128),
    cml_company_state_legal_name varchar(128),
    cml_use_state_specific_company_name boolean,
    cml_license_number varchar(128),
    cml_from_date date,
    cml_through_date date,
    cml_note varchar(256)
);

alter table staging_octane.company_license owner to deployer;

create index idx_company_license__pid_version
    on staging_octane.company_license (cml_pid, cml_version);

grant select on staging_octane.company_license to readonly;

grant delete, insert, select, truncate, update on staging_octane.company_license to dms_octane_writer;

grant select on staging_octane.company_license to etl_loan;

create table staging_octane.deal
(
    d_pid bigint not null
        constraint deal_pkey
            primary key,
    d_version integer,
    d_account_pid bigint,
    d_company_pid bigint,
    d_active_proposal_pid bigint,
    d_branch_pid bigint,
    d_deal_create_date date,
    d_deal_status_type varchar(128),
    d_velocify_lead_id varchar(32),
    d_lead_zillow_zq varchar(256),
    d_lead_tracking_id varchar(256),
    d_lead_reference_id varchar(256),
    d_los_loan_id_main bigint,
    d_los_loan_id_piggyback bigint,
    d_mers_min_main varchar(20),
    d_mers_min_piggyback varchar(20),
    d_external_loan_id_main varchar(32),
    d_external_loan_id_piggyback varchar(32),
    d_lead_source_pid bigint,
    d_disclosure_mode_date date,
    d_deal_status_date date,
    d_sap_deal boolean,
    d_hmda_action_date date,
    d_hmda_action_type varchar(128),
    d_hmda_denial_reason_type_1 varchar(128),
    d_hmda_denial_reason_type_2 varchar(128),
    d_hmda_denial_reason_type_3 varchar(128),
    d_hmda_denial_reason_type_4 varchar(128),
    d_borrower_esign boolean,
    d_application_type varchar(128),
    d_welcome_call_datetime timestamp,
    d_realty_agent_scenario_type varchar(128),
    d_test_loan boolean,
    d_charges_enabled_date date,
    d_credit_bureau_type varchar(128),
    d_performer_team_pid bigint,
    d_deal_create_type varchar(128),
    d_hmda_denial_reason_other_description varchar(255),
    d_effective_hmda_action_date date,
    d_copy_source_los_loan_id_main bigint,
    d_copy_source_los_loan_id_piggyback bigint,
    d_referred_by_name varchar(128),
    d_hmda_universal_loan_id_main varchar(45),
    d_hmda_universal_loan_id_piggyback varchar(45),
    d_calyx_loan_guid varchar(128),
    d_invoices_enabled_date date,
    d_invoices_enabled boolean,
    d_training_loan boolean,
    d_deal_orphan_status_type varchar(128),
    d_deal_orphan_earliest_check_date date,
    d_deal_create_date_time timestamp,
    d_early_wire_request boolean,
    d_enable_electronic_transaction boolean,
    d_initial_cancel_status_date date,
    d_license_location_pid bigint
);

alter table staging_octane.deal owner to deployer;

create index idx_deal__pid_version
    on staging_octane.deal (d_pid, d_version);

grant select on staging_octane.deal to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal to dms_octane_writer;

grant select on staging_octane.deal to etl_loan;

create table staging_octane.appraisal
(
    apr_pid bigint not null
        constraint appraisal_pkey
            primary key,
    apr_version integer,
    apr_appraised_value_amount bigint,
    apr_effective_date date,
    apr_deal_pid bigint,
    apr_decision_appraisal boolean,
    apr_appraisal_condition_type varchar(128),
    apr_appraiser_address_city varchar(128),
    apr_appraiser_address_country varchar(128),
    apr_appraiser_address_postal_code varchar(128),
    apr_appraiser_address_state varchar(128),
    apr_appraiser_address_street1 varchar(128),
    apr_appraiser_address_street2 varchar(128),
    apr_appraiser_company_name varchar(128),
    apr_appraiser_email varchar(256),
    apr_appraiser_fax varchar(32),
    apr_appraiser_first_name varchar(32),
    apr_appraiser_last_name varchar(32),
    apr_appraiser_middle_name varchar(32),
    apr_appraiser_mobile_phone varchar(32),
    apr_appraiser_name_suffix varchar(32),
    apr_appraiser_office_phone varchar(32),
    apr_appraiser_office_phone_extension varchar(16),
    apr_appraiser_title varchar(128),
    apr_appraiser_license_number varchar(128),
    apr_appraiser_supervisory_license_number varchar(128),
    apr_appraiser_license_state varchar(128),
    apr_appraisal_order_status_type varchar(128),
    apr_appraisal_order_id varchar(32),
    apr_appraisal_order_instructions varchar(1024),
    apr_property_address_city varchar(128),
    apr_property_address_country varchar(128),
    apr_property_address_postal_code varchar(128),
    apr_property_address_state varchar(128),
    apr_property_address_street1 varchar(128),
    apr_property_address_street2 varchar(128),
    apr_property_county_name varchar(128),
    apr_obtained_from_transfer boolean,
    apr_hud_provided boolean,
    apr_bedroom_count_unit_1 integer,
    apr_bedroom_count_unit_2 integer,
    apr_bedroom_count_unit_3 integer,
    apr_bedroom_count_unit_4 integer,
    apr_bathroom_count_unit_1 integer,
    apr_bathroom_count_unit_2 integer,
    apr_bathroom_count_unit_3 integer,
    apr_bathroom_count_unit_4 integer,
    apr_total_room_count_unit_1 integer,
    apr_total_room_count_unit_2 integer,
    apr_total_room_count_unit_3 integer,
    apr_total_room_count_unit_4 integer,
    apr_gross_living_area_square_feet_unit_1 integer,
    apr_gross_living_area_square_feet_unit_2 integer,
    apr_gross_living_area_square_feet_unit_3 integer,
    apr_gross_living_area_square_feet_unit_4 integer,
    apr_appraisal_underwriter_type varchar(128),
    apr_ucdp_doc_file_id varchar(10),
    apr_inspection_date date,
    apr_appraisal_reference_id varchar(32),
    apr_ucdp_ssr_id varchar(16),
    apr_sale_price_amount numeric(15),
    apr_property_tax_id varchar(128),
    apr_property_category_type varchar(128),
    apr_cost_to_build_new numeric(15),
    apr_monthly_hoa_amount numeric(15,2),
    apr_structure_built_year integer,
    apr_structure_built_month integer,
    apr_project_name varchar(128),
    apr_road_type varchar(128),
    apr_water_type varchar(128),
    apr_sanitation_type varchar(128),
    apr_neighborhood_location_type varchar(128),
    apr_site_area numeric(15),
    apr_due_date date,
    apr_order_date date,
    apr_payment_type varchar(128),
    apr_payment_received_date date,
    apr_appraisal_source_type varchar(128),
    apr_appraisal_purpose_type varchar(128),
    apr_exclude boolean,
    apr_order_appraisal varchar(128),
    apr_appraisal_id integer,
    apr_mortgage_type varchar(128),
    apr_remaining_economic_life_years integer,
    apr_deficient_economic_life_explanation varchar(1024),
    apr_hve_point_value_estimate_amount numeric(15,2),
    apr_hve_forecast_standard_deviation_percent numeric(11,9),
    apr_hve_confidence_level_type varchar(128),
    apr_hve_variance_percent numeric(11,9),
    apr_hve_excessive_value_message varchar(1024),
    apr_cu_risk_score numeric(10,2),
    apr_license_expiration_date date,
    apr_supervisor_required boolean,
    apr_supervisory_appraiser_first_name varchar(32),
    apr_supervisory_appraiser_middle_name varchar(32),
    apr_supervisory_appraiser_last_name varchar(32),
    apr_supervisory_appraiser_name_suffix varchar(32),
    apr_supervisory_license_state varchar(128),
    apr_supervisory_license_expiration_date date,
    apr_synthetic_unique boolean,
    apr_appraisal_invoice_amount numeric(17,2),
    apr_second_decision_appraisal boolean
);

alter table staging_octane.appraisal owner to deployer;

create index idx_appraisal__pid_version
    on staging_octane.appraisal (apr_pid, apr_version);

grant select on staging_octane.appraisal to readonly;

grant delete, insert, select, truncate, update on staging_octane.appraisal to dms_octane_writer;

grant select on staging_octane.appraisal to etl_loan;

create table staging_octane.appraisal_form
(
    aprfm_pid bigint not null
        constraint appraisal_form_pkey
            primary key,
    aprfm_version integer,
    aprfm_appraisal_pid bigint,
    aprfm_appraisal_source_type varchar(128),
    aprfm_appraisal_form_type varchar(128)
);

alter table staging_octane.appraisal_form owner to deployer;

create index idx_appraisal_form__pid_version
    on staging_octane.appraisal_form (aprfm_pid, aprfm_version);

grant select on staging_octane.appraisal_form to readonly;

grant delete, insert, select, truncate, update on staging_octane.appraisal_form to dms_octane_writer;

grant select on staging_octane.appraisal_form to etl_loan;

create table staging_octane.appraisal_id_ticker
(
    aprtk_pid bigint not null
        constraint appraisal_id_ticker_pkey
            primary key,
    aprtk_version integer,
    aprtk_deal_pid bigint,
    aprtk_next_id integer
);

alter table staging_octane.appraisal_id_ticker owner to deployer;

create index idx_appraisal_id_ticker__pid_version
    on staging_octane.appraisal_id_ticker (aprtk_pid, aprtk_version);

grant select on staging_octane.appraisal_id_ticker to readonly;

grant delete, insert, select, truncate, update on staging_octane.appraisal_id_ticker to dms_octane_writer;

grant select on staging_octane.appraisal_id_ticker to etl_loan;

create table staging_octane.deal_appraisal
(
    dappr_pid bigint not null
        constraint deal_appraisal_pkey
            primary key,
    dappr_version integer,
    dappr_deal_pid bigint,
    dappr_door_lock_combination boolean,
    dappr_appraisal_entry_contact_type varchar(128),
    dappr_appraisal_hold_type varchar(128),
    dappr_appraisal_hold_reason_type varchar(128),
    dappr_hold_release_date date,
    dappr_rush_request boolean,
    dappr_transfer_specified boolean,
    dappr_calculated_appraisal_required boolean,
    dappr_override_calculated_appraisal_required boolean,
    dappr_override_calculated_appraisal_required_reason varchar(16000),
    dappr_borrower_requires_appraisal varchar(128),
    dappr_lender_requires_appraisal boolean,
    dappr_product_requires_appraisal boolean,
    dappr_appraisal_required boolean
);

alter table staging_octane.deal_appraisal owner to deployer;

create index idx_deal_appraisal__pid_version
    on staging_octane.deal_appraisal (dappr_pid, dappr_version);

grant select on staging_octane.deal_appraisal to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_appraisal to dms_octane_writer;

grant select on staging_octane.deal_appraisal to etl_loan;

create table staging_octane.deal_contact
(
    dc_pid bigint not null
        constraint deal_contact_pkey
            primary key,
    dc_version integer,
    dc_address_city varchar(128),
    dc_address_country varchar(128),
    dc_address_postal_code varchar(128),
    dc_address_state varchar(128),
    dc_address_street1 varchar(128),
    dc_address_street2 varchar(128),
    dc_company_name varchar(128),
    dc_deal_pid bigint,
    dc_email varchar(256),
    dc_fax varchar(32),
    dc_first_name varchar(32),
    dc_last_name varchar(32),
    dc_middle_name varchar(32),
    dc_mobile_phone varchar(32),
    dc_name_suffix varchar(32),
    dc_office_phone varchar(32),
    dc_office_phone_extension varchar(16),
    dc_role_type varchar(128),
    dc_title varchar(128),
    dc_company_license_id varchar(128)
);

alter table staging_octane.deal_contact owner to deployer;

create index idx_deal_contact__pid_version
    on staging_octane.deal_contact (dc_pid, dc_version);

grant select on staging_octane.deal_contact to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_contact to dms_octane_writer;

grant select on staging_octane.deal_contact to etl_loan;

create table staging_octane.deal_disaster_declaration
(
    ddd_pid bigint not null
        constraint deal_disaster_declaration_pkey
            primary key,
    ddd_version integer,
    ddd_deal_pid bigint,
    ddd_disaster_declaration_pid bigint
);

alter table staging_octane.deal_disaster_declaration owner to deployer;

create index idx_deal_disaster_declaration__pid_version
    on staging_octane.deal_disaster_declaration (ddd_pid, ddd_version);

grant select on staging_octane.deal_disaster_declaration to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_disaster_declaration to dms_octane_writer;

grant select on staging_octane.deal_disaster_declaration to etl_loan;

create table staging_octane.deal_du
(
    ddu_pid bigint not null
        constraint deal_du_pkey
            primary key,
    ddu_version integer,
    ddu_deal_pid bigint,
    ddu_du_casefile_id varchar(32),
    ddu_du_institution_id varchar(16)
);

alter table staging_octane.deal_du owner to deployer;

create index idx_deal_du__pid_version
    on staging_octane.deal_du (ddu_pid, ddu_version);

grant select on staging_octane.deal_du to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_du to dms_octane_writer;

grant select on staging_octane.deal_du to etl_loan;

create table staging_octane.deal_event
(
    de_pid bigint not null
        constraint deal_event_pkey
            primary key,
    de_version integer,
    de_create_datetime timestamp,
    de_deal_event_type varchar(128),
    de_deal_pid bigint,
    de_deal_task_pid bigint,
    de_deal_note_pid bigint,
    de_deal_message_log_pid bigint,
    de_proposal_doc_pid bigint,
    de_proposal_doc_file_pid bigint,
    de_wf_deal_step_pid bigint,
    de_proposal_pid bigint,
    de_detail varchar(16000),
    de_source_unparsed_name varchar(128),
    de_coarse_event_type varchar(128),
    de_borrower_text varchar(1024),
    de_create_nanoseconds integer
);

alter table staging_octane.deal_event owner to deployer;

create index idx_deal_event__pid_version
    on staging_octane.deal_event (de_pid, de_version);

grant select on staging_octane.deal_event to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_event to dms_octane_writer;

grant select on staging_octane.deal_event to etl_loan;

create table staging_octane.deal_housing_counselors_request
(
    dhcr_pid bigint not null
        constraint deal_housing_counselors_request_pkey
            primary key,
    dhcr_version integer,
    dhcr_deal_pid bigint,
    dhcr_centroid_address_street1 varchar(128),
    dhcr_centroid_address_street2 varchar(128),
    dhcr_centroid_address_city varchar(128),
    dhcr_centroid_address_state varchar(128),
    dhcr_centroid_address_postal_code varchar(128),
    dhcr_centroid_address_country varchar(128),
    dhcr_error_messages text
);

alter table staging_octane.deal_housing_counselors_request owner to deployer;

create index idx_deal_housing_counselors_request__pid_version
    on staging_octane.deal_housing_counselors_request (dhcr_pid, dhcr_version);

grant select on staging_octane.deal_housing_counselors_request to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_housing_counselors_request to dms_octane_writer;

grant select on staging_octane.deal_housing_counselors_request to etl_loan;

create table staging_octane.deal_housing_counselor_candidate
(
    dhcc_pid bigint not null
        constraint deal_housing_counselor_candidate_pkey
            primary key,
    dhcc_version integer,
    dhcc_deal_pid bigint,
    dhcc_deal_housing_counselors_request_pid bigint,
    dhcc_counseling_agency_id varchar(16),
    dhcc_office_name varchar(256),
    dhcc_office_address_street1 varchar(128),
    dhcc_office_address_street2 varchar(128),
    dhcc_office_address_city varchar(128),
    dhcc_office_address_state varchar(128),
    dhcc_office_address_postal_code varchar(128),
    dhcc_office_address_country varchar(128),
    dhcc_office_email varchar(256),
    dhcc_office_fax varchar(32),
    dhcc_office_phone1 varchar(32),
    dhcc_office_phone2 varchar(32),
    dhcc_mailing_address_street1 varchar(128),
    dhcc_mailing_address_street2 varchar(128),
    dhcc_mailing_address_city varchar(128),
    dhcc_mailing_address_state varchar(128),
    dhcc_mailing_address_postal_code varchar(128),
    dhcc_mailing_address_country varchar(128),
    dhcc_web_url varchar(256),
    dhcc_language_codes varchar(256),
    dhcc_address_latitude numeric(15,3),
    dhcc_address_longitude numeric(15,3),
    dhcc_service_codes varchar(1500),
    dhcc_county_name varchar(128),
    dhcc_faith_based boolean,
    dhcc_migrant_workers boolean,
    dhcc_colonias boolean,
    dhcc_parent_org_id varchar(16),
    dhcc_ordinal integer
);

alter table staging_octane.deal_housing_counselor_candidate owner to deployer;

create index idx_deal_housing_counselor_candidate__pid_version
    on staging_octane.deal_housing_counselor_candidate (dhcc_pid, dhcc_version);

grant select on staging_octane.deal_housing_counselor_candidate to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_housing_counselor_candidate to dms_octane_writer;

grant select on staging_octane.deal_housing_counselor_candidate to etl_loan;

create table staging_octane.deal_invoice
(
    di_pid bigint not null
        constraint deal_invoice_pkey
            primary key,
    di_version integer,
    di_deal_pid bigint,
    di_create_datetime timestamp,
    di_invoice_amount numeric(15,2),
    di_refund_amount numeric(15,2),
    di_smart_invoice boolean,
    di_invoice_status_type varchar(128),
    di_description varchar(256),
    di_internal_notes varchar(1024)
);

alter table staging_octane.deal_invoice owner to deployer;

create index idx_deal_invoice__pid_version
    on staging_octane.deal_invoice (di_pid, di_version);

grant select on staging_octane.deal_invoice to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_invoice to dms_octane_writer;

grant select on staging_octane.deal_invoice to etl_loan;

create table staging_octane.deal_invoice_item
(
    dii_pid bigint not null
        constraint deal_invoice_item_pkey
            primary key,
    dii_version integer,
    dii_deal_invoice_pid bigint,
    dii_charge_type varchar(128),
    dii_item_amount numeric(15,2),
    dii_smart_item boolean,
    dii_adjustment boolean
);

alter table staging_octane.deal_invoice_item owner to deployer;

create index idx_deal_invoice_item__pid_version
    on staging_octane.deal_invoice_item (dii_pid, dii_version);

grant select on staging_octane.deal_invoice_item to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_invoice_item to dms_octane_writer;

grant select on staging_octane.deal_invoice_item to etl_loan;

create table staging_octane.deal_lender_user_event
(
    dlue_pid bigint not null
        constraint deal_lender_user_event_pkey
            primary key,
    dlue_version integer,
    dlue_deal_pid bigint,
    dlue_subject_lender_user_pid bigint,
    dlue_role_pid bigint,
    dlue_create_datetime timestamp,
    dlue_unparsed_text varchar(1024)
);

alter table staging_octane.deal_lender_user_event owner to deployer;

create index idx_deal_lender_user_event__pid_version
    on staging_octane.deal_lender_user_event (dlue_pid, dlue_version);

grant select on staging_octane.deal_lender_user_event to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_lender_user_event to dms_octane_writer;

grant select on staging_octane.deal_lender_user_event to etl_loan;

create table staging_octane.deal_lp
(
    dlp_pid bigint not null
        constraint deal_lp_pkey
            primary key,
    dlp_version integer,
    dlp_deal_pid bigint,
    dlp_lp_loan_id varchar(32),
    dlp_lp_key_id varchar(32)
);

alter table staging_octane.deal_lp owner to deployer;

create index idx_deal_lp__pid_version
    on staging_octane.deal_lp (dlp_pid, dlp_version);

grant select on staging_octane.deal_lp to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_lp to dms_octane_writer;

grant select on staging_octane.deal_lp to etl_loan;

create table staging_octane.deal_performer_team
(
    dptm_pid bigint not null
        constraint deal_performer_team_pkey
            primary key,
    dptm_version integer,
    dptm_deal_pid bigint,
    dptm_performer_team_pid bigint
);

alter table staging_octane.deal_performer_team owner to deployer;

create index idx_deal_performer_team__pid_version
    on staging_octane.deal_performer_team (dptm_pid, dptm_version);

grant select on staging_octane.deal_performer_team to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_performer_team to dms_octane_writer;

grant select on staging_octane.deal_performer_team to etl_loan;

create table staging_octane.deal_real_estate_agent
(
    drea_pid bigint not null
        constraint deal_real_estate_agent_pkey
            primary key,
    drea_version integer,
    drea_deal_pid bigint,
    drea_first_name varchar(32),
    drea_middle_name varchar(32),
    drea_last_name varchar(32),
    drea_name_suffix varchar(32),
    drea_company_name varchar(128),
    drea_title varchar(128),
    drea_office_phone varchar(32),
    drea_office_phone_extension varchar(16),
    drea_mobile_phone varchar(32),
    drea_email varchar(256),
    drea_fax varchar(32),
    drea_street_1 varchar(128),
    drea_street_2 varchar(128),
    drea_city varchar(128),
    drea_state varchar(128),
    drea_country varchar(128),
    drea_postal_code varchar(128),
    drea_license_id varchar(128),
    drea_company_license_id varchar(128),
    drea_agency_type varchar(128)
);

alter table staging_octane.deal_real_estate_agent owner to deployer;

create index idx_deal_real_estate_agent__pid_version
    on staging_octane.deal_real_estate_agent (drea_pid, drea_version);

grant select on staging_octane.deal_real_estate_agent to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_real_estate_agent to dms_octane_writer;

grant select on staging_octane.deal_real_estate_agent to etl_loan;

create table staging_octane.deal_settlement
(
    dsmt_pid bigint not null
        constraint deal_settlement_pkey
            primary key,
    dsmt_version integer,
    dsmt_account_pid bigint,
    dsmt_deal_pid bigint,
    dsmt_borrower_elected_preferred_settlement varchar(128),
    dsmt_settlement_agent_escrow_id varchar(64),
    dsmt_title_company_reference_id varchar(32),
    dsmt_settlement_agent_pid bigint,
    dsmt_settlement_agent_office_pid bigint,
    dsmt_settlement_agent_wire_pid bigint,
    dsmt_settlement_agent_first_name varchar(128),
    dsmt_settlement_agent_last_name varchar(128),
    dsmt_settlement_agent_phone varchar(32),
    dsmt_settlement_agent_phone_extension varchar(16),
    dsmt_settlement_agent_email varchar(256),
    dsmt_settlement_agent_contact_license_id varchar(128),
    dsmt_settlement_agent_preferred_vendor boolean,
    dsmt_for_further_credit varchar(128),
    dsmt_beneficiary_for_further_credit varchar(128),
    dsmt_title_company_pid bigint,
    dsmt_title_company_office_pid bigint,
    dsmt_title_company_first_name varchar(128),
    dsmt_title_company_last_name varchar(128),
    dsmt_title_company_phone varchar(32),
    dsmt_title_company_phone_extension varchar(16),
    dsmt_title_company_email varchar(256),
    dsmt_title_company_contact_license_id varchar(128),
    dsmt_title_company_preferred_vendor boolean,
    dsmt_title_insurance_underwriter_company_name varchar(256),
    dsmt_title_insurance_attorney_first_name varchar(32),
    dsmt_title_insurance_attorney_middle_name varchar(32),
    dsmt_title_insurance_attorney_last_name varchar(32),
    dsmt_title_insurance_attorney_name_suffix varchar(32),
    dsmt_title_insurance_attorney_license_number varchar(64)
);

alter table staging_octane.deal_settlement owner to deployer;

create index idx_deal_settlement__pid_version
    on staging_octane.deal_settlement (dsmt_pid, dsmt_version);

grant select on staging_octane.deal_settlement to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_settlement to dms_octane_writer;

grant select on staging_octane.deal_settlement to etl_loan;

create table staging_octane.deal_signer
(
    dsi_pid bigint not null
        constraint deal_signer_pkey
            primary key,
    dsi_version integer,
    dsi_deal_pid bigint,
    dsi_email varchar(256),
    dsi_first_name varchar(32),
    dsi_middle_name varchar(32),
    dsi_last_name varchar(32),
    dsi_name_suffix varchar(32),
    dsi_signer_id varchar(256)
);

alter table staging_octane.deal_signer owner to deployer;

create index idx_deal_signer__pid_version
    on staging_octane.deal_signer (dsi_pid, dsi_version);

grant select on staging_octane.deal_signer to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_signer to dms_octane_writer;

grant select on staging_octane.deal_signer to etl_loan;

create table staging_octane.deal_stage
(
    dst_pid bigint not null
        constraint deal_stage_pkey
            primary key,
    dst_version integer,
    dst_deal_pid bigint,
    dst_deal_stage_type varchar(128),
    dst_from_date date,
    dst_from_datetime timestamp,
    dst_through_date date,
    dst_through_datetime timestamp,
    dst_duration_seconds bigint,
    dst_business_hours_duration_seconds bigint
);

alter table staging_octane.deal_stage owner to deployer;

create index idx_deal_stage__pid_version
    on staging_octane.deal_stage (dst_pid, dst_version);

grant select on staging_octane.deal_stage to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_stage to dms_octane_writer;

grant select on staging_octane.deal_stage to etl_loan;

create table staging_octane.deal_summary
(
    ds_pid bigint not null
        constraint deal_summary_pkey
            primary key,
    ds_version integer,
    ds_deal_pid bigint,
    ds_lender_lock_expiration_datetime_main timestamp,
    ds_lender_lock_expiration_datetime_piggyback timestamp,
    ds_lender_lock_status_type_main varchar(128),
    ds_lender_lock_status_type_piggyback varchar(128),
    ds_decision_appraisal_condition_type varchar(128),
    ds_funding_status_type_main varchar(128),
    ds_funding_status_type_piggyback varchar(128),
    ds_purchase_advice_date_main date,
    ds_purchase_advice_date_piggyback date,
    ds_last_wf_phase_number integer,
    ds_last_wf_phase_name varchar(128),
    ds_eligible_investor_ids_main varchar(16000),
    ds_eligible_investor_ids_piggyback varchar(16000),
    ds_decision_appraisal_cu_risk_score numeric(10,2),
    ds_deal_stage_type varchar(128),
    ds_deal_stage_from_datetime timestamp,
    ds_funded_main boolean,
    ds_funded_piggyback boolean,
    ds_most_recent_user_update_date date,
    ds_lock_vintage_date_main date,
    ds_lock_vintage_date_piggyback date,
    ds_lender_lock_datetime_main timestamp,
    ds_lender_lock_datetime_piggyback timestamp,
    ds_any_unrequested_packages boolean
);

alter table staging_octane.deal_summary owner to deployer;

create index idx_deal_summary__pid_version
    on staging_octane.deal_summary (ds_pid, ds_version);

grant select on staging_octane.deal_summary to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_summary to dms_octane_writer;

grant select on staging_octane.deal_summary to etl_loan;

create table staging_octane.investor_lock_extension_setting
(
    iles_pid bigint not null
        constraint investor_lock_extension_setting_pkey
            primary key,
    iles_version integer,
    iles_investor_pid bigint,
    iles_from_date date,
    iles_through_date date,
    iles_extension_days integer,
    iles_price_adjustment_percent numeric(11,9),
    iles_auto_confirm boolean
);

alter table staging_octane.investor_lock_extension_setting owner to deployer;

create index idx_investor_lock_extension_setting__pid_version
    on staging_octane.investor_lock_extension_setting (iles_pid, iles_version);

grant select on staging_octane.investor_lock_extension_setting to readonly;

grant delete, insert, select, truncate, update on staging_octane.investor_lock_extension_setting to dms_octane_writer;

grant select on staging_octane.investor_lock_extension_setting to etl_loan;

create table staging_octane.lead
(
    ld_pid bigint not null
        constraint lead_pkey
            primary key,
    ld_version integer,
    ld_deal_pid bigint,
    ld_lead_datetime varchar(32),
    ld_velocify_campaign_id varchar(32),
    ld_velocify_campaign_title varchar(32),
    ld_originator_email varchar(256),
    ld_customer_service_rep_name varchar(128),
    ld_velocify_lead_id varchar(32),
    ld_tracking_id varchar(256),
    ld_zillow_zq varchar(256),
    ld_reference_id varchar(256),
    ld_apr_percent varchar(16),
    ld_interest_rate varchar(16),
    ld_rate_type varchar(32),
    ld_fico_score varchar(16),
    ld_loan_type varchar(32),
    ld_notes varchar(1024),
    ld_loan_purpose_type varchar(32),
    ld_purchase_price varchar(32),
    ld_existing_home_value varchar(32),
    ld_loan_amount varchar(32),
    ld_property_use varchar(32),
    ld_subject_property_street varchar(128),
    ld_subject_property_city varchar(128),
    ld_subject_property_state varchar(128),
    ld_subject_property_postal_code varchar(128),
    ld_subject_property_type varchar(32),
    ld_borrower_first_name varchar(32),
    ld_borrower_last_name varchar(32),
    ld_borrower_home_phone varchar(32),
    ld_borrower_mobile_phone varchar(32),
    ld_borrower_email varchar(256),
    ld_borrower_birth_date varchar(32),
    ld_borrower_residence_street varchar(128),
    ld_borrower_residence_city varchar(128),
    ld_borrower_residence_state varchar(128),
    ld_borrower_residence_postal_code varchar(128),
    ld_coborrower_first_name varchar(32),
    ld_coborrower_middle_name varchar(32),
    ld_coborrower_last_name varchar(32),
    ld_coborrower_email varchar(256),
    ld_coborrower_birth_date varchar(32),
    ld_borrower_current_job_employer_name varchar(128),
    ld_borrower_current_job_position varchar(32),
    ld_borrower_years_on_job varchar(16),
    ld_borrower_gross_monthly_income varchar(32)
);

alter table staging_octane.lead owner to deployer;

create index idx_lead__pid_version
    on staging_octane.lead (ld_pid, ld_version);

grant select on staging_octane.lead to readonly;

grant delete, insert, select, truncate, update on staging_octane.lead to dms_octane_writer;

grant select on staging_octane.lead to etl_loan;

create table staging_octane.lender_user
(
    lu_pid bigint not null
        constraint lender_user_pkey
            primary key,
    lu_version integer,
    lu_branch_pid bigint,
    lu_account_owner boolean,
    lu_account_pid bigint,
    lu_create_date date,
    lu_first_name varchar(32),
    lu_last_name varchar(32),
    lu_middle_name varchar(32),
    lu_name_suffix varchar(32),
    lu_company_name varchar(128),
    lu_title varchar(128),
    lu_office_phone varchar(32),
    lu_office_phone_extension varchar(16),
    lu_email varchar(256),
    lu_fax varchar(32),
    lu_city varchar(128),
    lu_country varchar(128),
    lu_postal_code varchar(128),
    lu_state varchar(128),
    lu_street1 varchar(128),
    lu_street2 varchar(128),
    lu_office_phone_use_branch boolean,
    lu_fax_use_branch boolean,
    lu_address_use_branch boolean,
    lu_start_date date,
    lu_through_date date,
    lu_time_zone varchar(128),
    lu_unparsed_name varchar(128),
    lu_lender_user_status_type varchar(128),
    lu_username varchar(32),
    lu_nmls_loan_originator_id varchar(16),
    lu_fha_chums_id varchar(16),
    lu_va_agent_id varchar(32),
    lu_search_text varchar(256),
    lu_company_user_id varchar(32),
    lu_force_password_change boolean,
    lu_last_password_change_date timestamp,
    lu_challenge_question_type varchar(128),
    lu_allow_external_ip boolean,
    lu_total_workload_cap integer,
    lu_schedule_once_booking_page_id varchar(128),
    lu_performer_team_pid bigint,
    lu_esign_only boolean,
    lu_work_step_start_notices_enabled boolean,
    lu_smart_app_enabled boolean,
    lu_default_lead_source_pid bigint,
    lu_default_credit_bureau_type varchar(128),
    lu_originator_id varchar(32),
    lu_name_qualifier varchar(16),
    lu_training_mode boolean,
    lu_about_me varchar(2000),
    lu_lender_user_type varchar(128),
    lu_hire_date date,
    lu_mercury_client_group_pid bigint,
    lu_nickname varchar(32),
    lu_preferred_first_name varchar(32),
    lu_hub_directory boolean,
    lu_email_signature_title varchar(128),
    lu_termination_date date,
    lu_marketing_details_enabled boolean,
    lu_marketing_details_featured_review varchar(1024)
);

alter table staging_octane.lender_user owner to deployer;

create index idx_lender_user__pid_version
    on staging_octane.lender_user (lu_pid, lu_version);

grant select on staging_octane.lender_user to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_user to dms_octane_writer;

grant select on staging_octane.lender_user to etl_loan;

create table staging_octane.backfill_status
(
    bfs_pid bigint not null
        constraint backfill_status_pkey
            primary key,
    bfs_version integer,
    bfs_account_pid bigint,
    bfs_batch_id varchar(128),
    bfs_name varchar(128),
    bfs_lender_user_pid bigint,
    bfs_submit_datetime timestamp,
    bfs_completed_datetime timestamp,
    bfs_num_loans integer,
    bfs_backfill_status_type varchar(128),
    bfs_failure_info varchar(16000),
    bfs_raw_header_row varchar(16000)
);

alter table staging_octane.backfill_status owner to deployer;

create index idx_backfill_status__pid_version
    on staging_octane.backfill_status (bfs_pid, bfs_version);

grant select on staging_octane.backfill_status to readonly;

grant delete, insert, select, truncate, update on staging_octane.backfill_status to dms_octane_writer;

grant select on staging_octane.backfill_status to etl_loan;

create table staging_octane.backfill_loan_status
(
    bfls_pid bigint not null
        constraint backfill_loan_status_pkey
            primary key,
    bfls_version integer,
    bfls_backfill_status_pid bigint,
    bfls_los_loan_id varchar(32),
    bfls_started_datetime timestamp,
    bfls_completed_datetime timestamp,
    bfls_backfill_status_type varchar(128),
    bfls_failure_info varchar(16000),
    bfls_raw_loan_row varchar(16000),
    bfls_warning_info varchar(16000)
);

alter table staging_octane.backfill_loan_status owner to deployer;

create index idx_backfill_loan_status__pid_version
    on staging_octane.backfill_loan_status (bfls_pid, bfls_version);

grant select on staging_octane.backfill_loan_status to readonly;

grant delete, insert, select, truncate, update on staging_octane.backfill_loan_status to dms_octane_writer;

grant select on staging_octane.backfill_loan_status to etl_loan;

create table staging_octane.bid_pool_note
(
    bpn_pid bigint not null
        constraint bid_pool_note_pkey
            primary key,
    bpn_version integer,
    bpn_bid_pool_pid bigint,
    bpn_create_datetime timestamp,
    bpn_content varchar(16000),
    bpn_author_lender_user_pid bigint,
    bpn_author_unparsed_name varchar(128)
);

alter table staging_octane.bid_pool_note owner to deployer;

create index idx_bid_pool_note__pid_version
    on staging_octane.bid_pool_note (bpn_pid, bpn_version);

grant select on staging_octane.bid_pool_note to readonly;

grant delete, insert, select, truncate, update on staging_octane.bid_pool_note to dms_octane_writer;

grant select on staging_octane.bid_pool_note to etl_loan;

create table staging_octane.bid_pool_note_comment
(
    bpnc_pid bigint not null
        constraint bid_pool_note_comment_pkey
            primary key,
    bpnc_version integer,
    bpnc_bid_pool_note_pid bigint,
    bpnc_create_datetime timestamp,
    bpnc_content varchar(16000),
    bpnc_author_lender_user_pid bigint,
    bpnc_author_unparsed_name varchar(128)
);

alter table staging_octane.bid_pool_note_comment owner to deployer;

create index idx_bid_pool_note_comment__pid_version
    on staging_octane.bid_pool_note_comment (bpnc_pid, bpnc_version);

grant select on staging_octane.bid_pool_note_comment to readonly;

grant delete, insert, select, truncate, update on staging_octane.bid_pool_note_comment to dms_octane_writer;

grant select on staging_octane.bid_pool_note_comment to etl_loan;

create table staging_octane.bid_pool_note_monitor
(
    bpnm_pid bigint not null
        constraint bid_pool_note_monitor_pkey
            primary key,
    bpnm_version integer,
    bpnm_bid_pool_note_pid bigint,
    bpnm_lender_user_pid bigint
);

alter table staging_octane.bid_pool_note_monitor owner to deployer;

create index idx_bid_pool_note_monitor__pid_version
    on staging_octane.bid_pool_note_monitor (bpnm_pid, bpnm_version);

grant select on staging_octane.bid_pool_note_monitor to readonly;

grant delete, insert, select, truncate, update on staging_octane.bid_pool_note_monitor to dms_octane_writer;

grant select on staging_octane.bid_pool_note_monitor to etl_loan;

create table staging_octane.branch_account_executive
(
    brae_pid bigint not null
        constraint branch_account_executive_pkey
            primary key,
    brae_version integer,
    brae_branch_pid bigint,
    brae_lender_user_pid bigint,
    brae_from_date date
);

alter table staging_octane.branch_account_executive owner to deployer;

create index idx_branch_account_executive__pid_version
    on staging_octane.branch_account_executive (brae_pid, brae_version);

grant select on staging_octane.branch_account_executive to readonly;

grant delete, insert, select, truncate, update on staging_octane.branch_account_executive to dms_octane_writer;

grant select on staging_octane.branch_account_executive to etl_loan;

create table staging_octane.deal_invoice_payment_method
(
    dipm_pid bigint not null
        constraint deal_invoice_payment_method_pkey
            primary key,
    dipm_version integer,
    dipm_deal_invoice_pid bigint,
    dipm_payer_type varchar(128),
    dipm_configured_payer_type varchar(128),
    dipm_payer_unparsed_name varchar(128),
    dipm_payment_fulfill_type varchar(128),
    dipm_payment_transfer_los_loan_id_main bigint,
    dipm_payment_processing_company_type varchar(128),
    dipm_stripe_payment_pid bigint,
    dipm_stripe_payment_refund_pid bigint,
    dipm_requester_agent_type varchar(128),
    dipm_requester_lender_user_pid bigint,
    dipm_requester_unparsed_name varchar(128),
    dipm_payment_submission_type varchar(128),
    dipm_payment_completed_date date
);

alter table staging_octane.deal_invoice_payment_method owner to deployer;

create index idx_deal_invoice_payment_method__pid_version
    on staging_octane.deal_invoice_payment_method (dipm_pid, dipm_version);

grant select on staging_octane.deal_invoice_payment_method to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_invoice_payment_method to dms_octane_writer;

grant select on staging_octane.deal_invoice_payment_method to etl_loan;

create table staging_octane.deal_key_roles
(
    dkrs_pid bigint not null
        constraint deal_key_roles_pkey
            primary key,
    dkrs_version integer,
    dkrs_deal_pid bigint,
    dkrs_originator_lender_user_pid bigint,
    dkrs_originator_first_name varchar(32),
    dkrs_originator_last_name varchar(32),
    dkrs_originator_middle_name varchar(32),
    dkrs_originator_fmls_basic varchar(128),
    dkrs_originator_nmls_id varchar(16),
    dkrs_supplemental_originator_lender_user_pid bigint,
    dkrs_supplemental_originator_fmls varchar(128),
    dkrs_account_executive_lender_user_pid bigint,
    dkrs_account_executive_fmls varchar(128),
    dkrs_investor_conditions_lender_user_pid bigint,
    dkrs_investor_conditions_fmls varchar(128),
    dkrs_investor_stack_to_investor_lender_user_pid bigint,
    dkrs_investor_stack_to_investor_fmls varchar(128),
    dkrs_collateral_to_custodian_lender_user_pid bigint,
    dkrs_collateral_to_custodian_fmls varchar(128),
    dkrs_collateral_to_investor_lender_user_pid bigint,
    dkrs_collateral_to_investor_fmls varchar(128),
    dkrs_transaction_assistant_lender_user_pid bigint,
    dkrs_transaction_assistant_fmls varchar(128),
    dkrs_final_documents_to_investor_lender_user_pid bigint,
    dkrs_final_documents_to_investor_fmls varchar(128),
    dkrs_government_insurance_lender_user_pid bigint,
    dkrs_government_insurance_fmls varchar(128),
    dkrs_funder_lender_user_pid bigint,
    dkrs_funder_fmls varchar(128),
    dkrs_processor_lender_user_pid bigint,
    dkrs_processor_fmls varchar(128),
    dkrs_underwriter_lender_user_pid bigint,
    dkrs_underwriter_fmls varchar(128),
    dkrs_project_underwriter_lender_user_pid bigint,
    dkrs_project_underwriter_fmls varchar(128),
    dkrs_closing_doc_specialist_lender_user_pid bigint,
    dkrs_closing_doc_specialist_fmls varchar(128),
    dkrs_wholesale_client_advocate_lender_user_pid bigint,
    dkrs_wholesale_client_advocate_fmls varchar(128),
    dkrs_closing_scheduler_lender_user_pid bigint,
    dkrs_closing_scheduler_fmls varchar(128),
    dkrs_collateral_underwriter_lender_user_pid bigint,
    dkrs_collateral_underwriter_fmls varchar(128),
    dkrs_correspondent_client_advocate_lender_user_pid bigint,
    dkrs_correspondent_client_advocate_fmls varchar(128),
    dkrs_flood_insurance_specialist_lender_user_pid bigint,
    dkrs_flood_insurance_specialist_fmls varchar(128),
    dkrs_hoa_specialist_lender_user_pid bigint,
    dkrs_hoa_specialist_fmls varchar(128),
    dkrs_hoi_specialist_lender_user_pid bigint,
    dkrs_hoi_specialist_fmls varchar(128),
    dkrs_ho6_specialist_lender_user_pid bigint,
    dkrs_ho6_specialist_fmls varchar(128),
    dkrs_hud_va_lender_officer_lender_user_pid bigint,
    dkrs_hud_va_lender_officer_fmls varchar(128),
    dkrs_loan_officer_assistant_lender_user_pid bigint,
    dkrs_loan_officer_assistant_fmls varchar(128),
    dkrs_loan_payoff_specialist_lender_user_pid bigint,
    dkrs_loan_payoff_specialist_fmls varchar(128),
    dkrs_subordination_specialist_lender_user_pid bigint,
    dkrs_subordination_specialist_fmls varchar(128),
    dkrs_title_specialist_lender_user_pid bigint,
    dkrs_title_specialist_fmls varchar(128),
    dkrs_underwriting_manager_lender_user_pid bigint,
    dkrs_underwriting_manager_fmls varchar(128),
    dkrs_va_specialist_lender_user_pid bigint,
    dkrs_va_specialist_fmls varchar(128),
    dkrs_verbal_voe_specialist_lender_user_pid bigint,
    dkrs_verbal_voe_specialist_fmls varchar(128),
    dkrs_voe_specialist_lender_user_pid bigint,
    dkrs_voe_specialist_fmls varchar(128),
    dkrs_wire_specialist_lender_user_pid bigint,
    dkrs_wire_specialist_fmls varchar(128),
    dkrs_internal_construction_manager_lender_user_pid bigint,
    dkrs_internal_construction_manager_fmls varchar(128),
    dkrs_review_requester_1_lender_user_pid bigint,
    dkrs_review_requester_1_fmls varchar(128),
    dkrs_review_requester_2_lender_user_pid bigint,
    dkrs_review_requester_2_fmls varchar(128),
    dkrs_review_requester_3_lender_user_pid bigint,
    dkrs_review_requester_3_fmls varchar(128),
    dkrs_review_requester_4_lender_user_pid bigint,
    dkrs_review_requester_4_fmls varchar(128),
    dkrs_review_requester_5_lender_user_pid bigint,
    dkrs_review_requester_5_fmls varchar(128)
);

alter table staging_octane.deal_key_roles owner to deployer;

create index idx_deal_key_roles__pid_version
    on staging_octane.deal_key_roles (dkrs_pid, dkrs_version);

grant select on staging_octane.deal_key_roles to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_key_roles to dms_octane_writer;

grant select on staging_octane.deal_key_roles to etl_loan;

create table staging_octane.deal_lender_user
(
    dlu_pid bigint not null
        constraint deal_lender_user_pkey
            primary key,
    dlu_version integer,
    dlu_deal_pid bigint,
    dlu_lender_user_pid bigint,
    dlu_role_pid bigint,
    dlu_loan_access_type varchar(128),
    dlu_legacy_role_assignment_type varchar(128),
    dlu_legacy_role_assignment_date date,
    dlu_synthetic_unique varchar(32)
);

alter table staging_octane.deal_lender_user owner to deployer;

create index idx_deal_lender_user__pid_version
    on staging_octane.deal_lender_user (dlu_pid, dlu_version);

grant select on staging_octane.deal_lender_user to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_lender_user to dms_octane_writer;

grant select on staging_octane.deal_lender_user to etl_loan;

create table staging_octane.deal_performer_team_user
(
    dptu_pid bigint not null
        constraint deal_performer_team_user_pkey
            primary key,
    dptu_version integer,
    dptu_deal_pid bigint,
    dptu_performer_team_pid bigint,
    dptu_user_pid bigint
);

alter table staging_octane.deal_performer_team_user owner to deployer;

create index idx_deal_performer_team_user__pid_version
    on staging_octane.deal_performer_team_user (dptu_pid, dptu_version);

grant select on staging_octane.deal_performer_team_user to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_performer_team_user to dms_octane_writer;

grant select on staging_octane.deal_performer_team_user to etl_loan;

create table staging_octane.dw_export_request
(
    dwer_pid bigint not null
        constraint dw_export_request_pkey
            primary key,
    dwer_version integer,
    dwer_account_pid bigint,
    dwer_create_datetime timestamp,
    dwer_start_datetime timestamp,
    dwer_end_datetime timestamp,
    dwer_request_status_type varchar(128),
    dwer_request_status_messages text,
    dwer_requester_lender_user_pid bigint,
    dwer_requester_unparsed_name varchar(128),
    dwer_exported_deal_count integer,
    dwer_export_id varchar(16)
);

alter table staging_octane.dw_export_request owner to deployer;

create index idx_dw_export_request__pid_version
    on staging_octane.dw_export_request (dwer_pid, dwer_version);

grant select on staging_octane.dw_export_request to readonly;

grant delete, insert, select, truncate, update on staging_octane.dw_export_request to dms_octane_writer;

grant select on staging_octane.dw_export_request to etl_loan;

create table staging_octane.lender_settings
(
    lss_pid bigint not null
        constraint lender_settings_pkey
            primary key,
    lss_version integer,
    lss_account_pid bigint,
    lss_company_time_zone_type varchar(128),
    lss_fha_home_office_branch_pid bigint,
    lss_fnma_seller_id varchar(16),
    lss_fre_seller_id varchar(16),
    lss_lp_submission_type varchar(128),
    lss_lender_user_email_from varchar(256),
    lss_hmda_contact_pid bigint,
    lss_hmda_legal_entity_id varchar(20),
    lss_hmda_respondent_id varchar(32),
    lss_hmda_agency_id_type varchar(128),
    lss_prequalification_program boolean,
    lss_preapproval_program boolean,
    lss_pest_inspector_company_name varchar(128),
    lss_pest_inspector_phone varchar(32),
    lss_pest_inspector_website_url varchar(256),
    lss_pest_inspector_address_street1 varchar(128),
    lss_pest_inspector_address_street2 varchar(128),
    lss_pest_inspector_address_city varchar(128),
    lss_pest_inspector_address_state varchar(128),
    lss_pest_inspector_address_postal_code varchar(128),
    lss_take_application_hours varchar(128),
    lss_originator_title varchar(128),
    lss_default_credit_bureau_type varchar(128),
    lss_sap_minimum_decision_credit_score integer,
    lss_default_standalone_lock_term_setting_pid bigint,
    lss_default_combo_lock_term_setting_pid bigint,
    lss_preferred_aus_type varchar(128),
    lss_borrower_quote_filter_pivot_type varchar(128),
    lss_borrower_quote_filter_pivot_lower_count integer,
    lss_borrower_quote_filter_pivot_higher_count integer,
    lss_equifax_submitting_party_name varchar(256),
    lss_factual_data_submitting_party_name varchar(256),
    lss_factual_data_submitting_party_id varchar(256),
    lss_meridian_link_submitting_party_id varchar(256)
);

alter table staging_octane.lender_settings owner to deployer;

create index idx_lender_settings__pid_version
    on staging_octane.lender_settings (lss_pid, lss_version);

grant select on staging_octane.lender_settings to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_settings to dms_octane_writer;

grant select on staging_octane.lender_settings to etl_loan;

create table staging_octane.lender_user_allowed_ip
(
    luip_pid bigint not null
        constraint lender_user_allowed_ip_pkey
            primary key,
    luip_version integer,
    luip_lender_user_pid bigint,
    luip_status varchar(128),
    luip_ip_address varchar(32),
    luip_request_id varchar(128),
    luip_request_expiration_datetime timestamp,
    luip_last_used_datetime timestamp,
    luip_first_used_datetime timestamp
);

alter table staging_octane.lender_user_allowed_ip owner to deployer;

create index idx_lender_user_allowed_ip__pid_version
    on staging_octane.lender_user_allowed_ip (luip_pid, luip_version);

grant select on staging_octane.lender_user_allowed_ip to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_user_allowed_ip to dms_octane_writer;

grant select on staging_octane.lender_user_allowed_ip to etl_loan;

create table staging_octane.lender_user_deal_visit
(
    ludv_pid bigint not null
        constraint lender_user_deal_visit_pkey
            primary key,
    ludv_version integer,
    ludv_deal_pid bigint,
    ludv_lender_user_pid bigint,
    ludv_visited_datetime timestamp
);

alter table staging_octane.lender_user_deal_visit owner to deployer;

create index idx_lender_user_deal_visit__pid_version
    on staging_octane.lender_user_deal_visit (ludv_pid, ludv_version);

grant select on staging_octane.lender_user_deal_visit to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_user_deal_visit to dms_octane_writer;

grant select on staging_octane.lender_user_deal_visit to etl_loan;

create table staging_octane.lender_user_lead_source
(
    lulds_pid bigint not null
        constraint lender_user_lead_source_pkey
            primary key,
    lulds_version integer,
    lulds_lender_user_pid bigint,
    lulds_lead_source_pid bigint
);

alter table staging_octane.lender_user_lead_source owner to deployer;

create index idx_lender_user_lead_source__pid_version
    on staging_octane.lender_user_lead_source (lulds_pid, lulds_version);

grant select on staging_octane.lender_user_lead_source to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_user_lead_source to dms_octane_writer;

grant select on staging_octane.lender_user_lead_source to etl_loan;

create table staging_octane.lender_user_license
(
    luml_pid bigint not null
        constraint lender_user_license_pkey
            primary key,
    luml_version integer,
    luml_lender_user_pid bigint,
    luml_license_type varchar(128),
    luml_state_type varchar(128),
    luml_license_number varchar(128),
    luml_from_date date,
    luml_through_date date,
    luml_note varchar(256)
);

alter table staging_octane.lender_user_license owner to deployer;

create index idx_lender_user_license__pid_version
    on staging_octane.lender_user_license (luml_pid, luml_version);

grant select on staging_octane.lender_user_license to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_user_license to dms_octane_writer;

grant select on staging_octane.lender_user_license to etl_loan;

create table staging_octane.lender_user_notice
(
    lun_pid bigint not null
        constraint lender_user_notice_pkey
            primary key,
    lun_version integer,
    lun_lender_user_pid bigint,
    lun_deal_pid bigint,
    lun_create_datetime timestamp,
    lun_lender_user_notice_type varchar(128),
    lun_detail varchar(16000),
    lun_source_unparsed_name varchar(128)
);

alter table staging_octane.lender_user_notice owner to deployer;

create index idx_lender_user_notice__pid_version
    on staging_octane.lender_user_notice (lun_pid, lun_version);

grant select on staging_octane.lender_user_notice to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_user_notice to dms_octane_writer;

grant select on staging_octane.lender_user_notice to etl_loan;

create table staging_octane.lender_user_role
(
    lur_pid bigint not null
        constraint lender_user_role_pkey
            primary key,
    lur_version integer,
    lur_lender_user_pid bigint,
    lur_role_pid bigint,
    lur_criteria_pid bigint,
    lur_workload_cap integer,
    lur_daily_cap integer,
    lur_assignment_gap_minutes integer,
    lur_secondary_role boolean,
    lur_subscribe_smart_messages boolean,
    lur_for_training_only boolean,
    lur_notes varchar(16000),
    lur_queue_type varchar(128),
    lur_queue_datetime timestamp
);

alter table staging_octane.lender_user_role owner to deployer;

create index idx_lender_user_role__pid_version
    on staging_octane.lender_user_role (lur_pid, lur_version);

grant select on staging_octane.lender_user_role to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_user_role to dms_octane_writer;

grant select on staging_octane.lender_user_role to etl_loan;

create table staging_octane.exclusive_assignment
(
    ea_pid bigint not null
        constraint exclusive_assignment_pkey
            primary key,
    ea_version integer,
    ea_lender_user_role_pid bigint,
    ea_criteria_pid bigint,
    ea_priority integer,
    ea_name varchar(128)
);

alter table staging_octane.exclusive_assignment owner to deployer;

create index idx_exclusive_assignment__pid_version
    on staging_octane.exclusive_assignment (ea_pid, ea_version);

grant select on staging_octane.exclusive_assignment to readonly;

grant delete, insert, select, truncate, update on staging_octane.exclusive_assignment to dms_octane_writer;

grant select on staging_octane.exclusive_assignment to etl_loan;

create table staging_octane.lender_user_role_addendum
(
    lura_pid bigint not null
        constraint lender_user_role_addendum_pkey
            primary key,
    lura_version integer,
    lura_lender_user_pid bigint,
    lura_lender_user_role_pid bigint,
    lura_role_pid bigint
);

alter table staging_octane.lender_user_role_addendum owner to deployer;

create index idx_lender_user_role_addendum__pid_version
    on staging_octane.lender_user_role_addendum (lura_pid, lura_version);

grant select on staging_octane.lender_user_role_addendum to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_user_role_addendum to dms_octane_writer;

grant select on staging_octane.lender_user_role_addendum to etl_loan;

create table staging_octane.lender_user_sign_on
(
    luso_pid bigint not null
        constraint lender_user_sign_on_pkey
            primary key,
    luso_version integer,
    luso_lender_user_pid bigint,
    luso_last_sign_on_datetime timestamp
);

alter table staging_octane.lender_user_sign_on owner to deployer;

create index idx_lender_user_sign_on__pid_version
    on staging_octane.lender_user_sign_on (luso_pid, luso_version);

grant select on staging_octane.lender_user_sign_on to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_user_sign_on to dms_octane_writer;

grant select on staging_octane.lender_user_sign_on to etl_loan;

create table staging_octane.lender_user_unavailable
(
    luu_pid bigint not null
        constraint lender_user_unavailable_pkey
            primary key,
    luu_version integer,
    luu_lender_user_pid bigint,
    luu_from_date date,
    luu_through_date date
);

alter table staging_octane.lender_user_unavailable owner to deployer;

create index idx_lender_user_unavailable__pid_version
    on staging_octane.lender_user_unavailable (luu_pid, luu_version);

grant select on staging_octane.lender_user_unavailable to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_user_unavailable to dms_octane_writer;

grant select on staging_octane.lender_user_unavailable to etl_loan;

create table staging_octane.mercury_network_status_request
(
    mnsr_pid bigint not null
        constraint mercury_network_status_request_pkey
            primary key,
    mnsr_version integer,
    mnsr_deal_pid bigint,
    mnsr_mercury_network_order_id varchar(128),
    mnsr_mercury_network_status_type varchar(128),
    mnsr_status_message varchar(16000)
);

alter table staging_octane.mercury_network_status_request owner to deployer;

create index idx_mercury_network_status_request__pid_version
    on staging_octane.mercury_network_status_request (mnsr_pid, mnsr_version);

grant select on staging_octane.mercury_network_status_request to readonly;

grant delete, insert, select, truncate, update on staging_octane.mercury_network_status_request to dms_octane_writer;

grant select on staging_octane.mercury_network_status_request to etl_loan;

create table staging_octane.performer_assignment
(
    pa_pid bigint not null
        constraint performer_assignment_pkey
            primary key,
    pa_version integer,
    pa_role_pid bigint,
    pa_lender_user_pid bigint,
    pa_last_assign_datetime timestamp
);

alter table staging_octane.performer_assignment owner to deployer;

create index idx_performer_assignment__pid_version
    on staging_octane.performer_assignment (pa_pid, pa_version);

grant select on staging_octane.performer_assignment to readonly;

grant delete, insert, select, truncate, update on staging_octane.performer_assignment to dms_octane_writer;

grant select on staging_octane.performer_assignment to etl_loan;

create table staging_octane.product
(
    p_pid bigint not null
        constraint product_pkey
            primary key,
    p_version integer,
    p_account_pid bigint,
    p_investor_pid bigint,
    p_fund_source_type varchar(128),
    p_investor_product_id varchar(32),
    p_investor_product_name varchar(128),
    p_from_date date,
    p_through_date date,
    p_fnm_product_name varchar(15),
    p_lock_auto_confirm boolean,
    p_description varchar(1024),
    p_product_side_type varchar(128),
    p_parent_product_pid bigint
);

alter table staging_octane.product owner to deployer;

create index idx_product__pid_version
    on staging_octane.product (p_pid, p_version);

grant select on staging_octane.product to readonly;

grant delete, insert, select, truncate, update on staging_octane.product to dms_octane_writer;

grant select on staging_octane.product to etl_loan;

create table staging_octane.offering_product
(
    ofp_pid bigint not null
        constraint offering_product_pkey
            primary key,
    ofp_version integer,
    ofp_offering_pid bigint,
    ofp_product_pid bigint,
    ofp_from_date date,
    ofp_through_date date,
    ofp_price_adjustment_percent numeric(11,9)
);

alter table staging_octane.offering_product owner to deployer;

create index idx_offering_product__pid_version
    on staging_octane.offering_product (ofp_pid, ofp_version);

grant select on staging_octane.offering_product to readonly;

grant delete, insert, select, truncate, update on staging_octane.offering_product to dms_octane_writer;

grant select on staging_octane.offering_product to etl_loan;

create table staging_octane.product_add_on
(
    pao_pid bigint not null
        constraint product_add_on_pkey
            primary key,
    pao_version integer,
    pao_product_pid bigint,
    pao_from_date date
);

alter table staging_octane.product_add_on owner to deployer;

create index idx_product_add_on__pid_version
    on staging_octane.product_add_on (pao_pid, pao_version);

grant select on staging_octane.product_add_on to readonly;

grant delete, insert, select, truncate, update on staging_octane.product_add_on to dms_octane_writer;

grant select on staging_octane.product_add_on to etl_loan;

create table staging_octane.product_add_on_rule
(
    par_pid bigint not null
        constraint product_add_on_rule_pkey
            primary key,
    par_version integer,
    par_product_add_on_pid bigint,
    par_summary varchar(16000),
    par_note varchar(256),
    par_rate_adjustment_percent numeric(11,9),
    par_investor_price_adjustment_percent numeric(11,9),
    par_account_price_adjustment_percent numeric(11,9),
    par_arm_margin_adjustment_percent numeric(11,9),
    par_loan_purpose_input_type varchar(128),
    par_property_usage_input_type varchar(128),
    par_doc_level_input_type varchar(128),
    par_property_category_input_type varchar(128),
    par_first_time_homebuyer_input_type varchar(128),
    par_self_employed_input_type varchar(128),
    par_amortization_input_type varchar(128),
    par_non_resident_alien_input_type varchar(128),
    par_hazardous_lava_zone_input_type varchar(128),
    par_property_rights_input_type varchar(128),
    par_property_acres_input_type varchar(128),
    par_arms_length_input_type varchar(128),
    par_state_input_type varchar(128),
    par_escrow_waiver_input_type varchar(128),
    par_subordinate_financing_input_type varchar(128),
    par_minimum_credit_score_input boolean,
    par_maximum_credit_score_input boolean,
    par_minimum_loan_amount_input boolean,
    par_maximum_loan_amount_input boolean,
    par_minimum_ltv_ratio_input boolean,
    par_maximum_ltv_ratio_input boolean,
    par_minimum_cltv_ratio_input boolean,
    par_maximum_cltv_ratio_input boolean,
    par_maximum_housing_ratio_input boolean,
    par_minimum_debt_ratio_input boolean,
    par_maximum_debt_ratio_input boolean,
    par_loan_purpose_purchase boolean,
    par_loan_purpose_change_in_rate_term boolean,
    par_loan_purpose_cash_out boolean,
    par_property_usage_primary_residence boolean,
    par_property_usage_second_home boolean,
    par_property_usage_investment boolean,
    par_doc_level_full boolean,
    par_doc_level_lite boolean,
    par_doc_level_limited boolean,
    par_doc_level_streamline_refinance boolean,
    par_property_category_detached boolean,
    par_property_category_attached boolean,
    par_property_category_condo_hotel boolean,
    par_property_category_duplex boolean,
    par_property_category_triplex boolean,
    par_property_category_fourplex boolean,
    par_property_category_commercial_residential boolean,
    par_property_category_condo_1_to_4_story boolean,
    par_property_category_condo_5_over_story boolean,
    par_property_category_manufactured_multi_wide boolean,
    par_property_category_manufactured_single_wide boolean,
    par_property_category_townhouse_rowhouse boolean,
    par_property_category_land_and_lots boolean,
    par_property_category_farm boolean,
    par_first_time_homebuyer boolean,
    par_not_first_time_homebuyer boolean,
    par_self_employed boolean,
    par_not_self_employed boolean,
    par_amortization_fully boolean,
    par_amortization_interest_only boolean,
    par_non_resident_alien boolean,
    par_not_non_resident_alien boolean,
    par_arms_length boolean,
    par_not_arms_length boolean,
    par_hazardous_lava_zone boolean,
    par_not_hazardous_lava_zone boolean,
    par_property_rights_fee_simple boolean,
    par_property_rights_leasehold boolean,
    par_under_10_acres boolean,
    par_not_under_10_acres boolean,
    par_escrow_waiver boolean,
    par_not_escrow_waiver boolean,
    par_subordinate_financing boolean,
    par_not_subordinate_financing boolean,
    par_minimum_credit_score integer,
    par_maximum_credit_score integer,
    par_minimum_loan_amount numeric(15),
    par_maximum_loan_amount numeric(15),
    par_minimum_ltv_ratio_percent numeric(11,9),
    par_maximum_ltv_ratio_percent numeric(11,9),
    par_minimum_cltv_ratio_percent numeric(11,9),
    par_maximum_cltv_ratio_percent numeric(11,9),
    par_maximum_housing_ratio_percent numeric(11,9),
    par_minimum_debt_ratio_percent numeric(11,9),
    par_maximum_debt_ratio_percent numeric(11,9),
    par_state_al boolean,
    par_state_ak boolean,
    par_state_az boolean,
    par_state_ar boolean,
    par_state_ca boolean,
    par_state_co boolean,
    par_state_ct boolean,
    par_state_de boolean,
    par_state_dc boolean,
    par_state_fl boolean,
    par_state_ga boolean,
    par_state_gu boolean,
    par_state_hi boolean,
    par_state_id boolean,
    par_state_il boolean,
    par_state_in boolean,
    par_state_ia boolean,
    par_state_ks boolean,
    par_state_ky boolean,
    par_state_la boolean,
    par_state_me boolean,
    par_state_md boolean,
    par_state_ma boolean,
    par_state_mi boolean,
    par_state_mn boolean,
    par_state_ms boolean,
    par_state_mo boolean,
    par_state_mt boolean,
    par_state_ne boolean,
    par_state_nv boolean,
    par_state_nh boolean,
    par_state_nj boolean,
    par_state_nm boolean,
    par_state_ny boolean,
    par_state_nc boolean,
    par_state_nd boolean,
    par_state_oh boolean,
    par_state_ok boolean,
    par_state_or boolean,
    par_state_pa boolean,
    par_state_pr boolean,
    par_state_ri boolean,
    par_state_sc boolean,
    par_state_sd boolean,
    par_state_tn boolean,
    par_state_tx boolean,
    par_state_ut boolean,
    par_state_vt boolean,
    par_state_va boolean,
    par_state_vi boolean,
    par_state_wa boolean,
    par_state_wv boolean,
    par_state_wi boolean,
    par_state_wy boolean
);

alter table staging_octane.product_add_on_rule owner to deployer;

create index idx_product_add_on_rule__pid_version
    on staging_octane.product_add_on_rule (par_pid, par_version);

grant select on staging_octane.product_add_on_rule to readonly;

grant delete, insert, select, truncate, update on staging_octane.product_add_on_rule to dms_octane_writer;

grant select on staging_octane.product_add_on_rule to etl_loan;

create table staging_octane.product_branch
(
    pbr_pid bigint not null
        constraint product_branch_pkey
            primary key,
    pbr_version integer,
    pbr_product_pid bigint,
    pbr_branch_pid bigint,
    pbr_from_date date,
    pbr_through_date date,
    pbr_price_adjustment_percent numeric(11,9)
);

alter table staging_octane.product_branch owner to deployer;

create index idx_product_branch__pid_version
    on staging_octane.product_branch (pbr_pid, pbr_version);

grant select on staging_octane.product_branch to readonly;

grant delete, insert, select, truncate, update on staging_octane.product_branch to dms_octane_writer;

grant select on staging_octane.product_branch to etl_loan;

create table staging_octane.product_deal_check_exclusion
(
    pdce_pid bigint not null
        constraint product_deal_check_exclusion_pkey
            primary key,
    pdce_version integer,
    pdce_product_pid bigint,
    pdce_deal_check_type varchar(128)
);

alter table staging_octane.product_deal_check_exclusion owner to deployer;

create index idx_product_deal_check_exclusion__pid_version
    on staging_octane.product_deal_check_exclusion (pdce_pid, pdce_version);

grant select on staging_octane.product_deal_check_exclusion to readonly;

grant delete, insert, select, truncate, update on staging_octane.product_deal_check_exclusion to dms_octane_writer;

grant select on staging_octane.product_deal_check_exclusion to etl_loan;

create table staging_octane.product_eligibility
(
    pe_pid bigint not null
        constraint product_eligibility_pkey
            primary key,
    pe_version integer,
    pe_product_pid bigint,
    pe_from_date date
);

alter table staging_octane.product_eligibility owner to deployer;

create index idx_product_eligibility__pid_version
    on staging_octane.product_eligibility (pe_pid, pe_version);

grant select on staging_octane.product_eligibility to readonly;

grant delete, insert, select, truncate, update on staging_octane.product_eligibility to dms_octane_writer;

grant select on staging_octane.product_eligibility to etl_loan;

create table staging_octane.product_eligibility_rule
(
    per_pid bigint not null
        constraint product_eligibility_rule_pkey
            primary key,
    per_version integer,
    per_product_eligibility_pid bigint,
    per_summary varchar(16000),
    per_note varchar(256),
    per_group_id integer,
    per_loan_purpose_input_type varchar(128),
    per_property_usage_input_type varchar(128),
    per_doc_level_input_type varchar(128),
    per_property_category_input_type varchar(128),
    per_first_time_homebuyer_input_type varchar(128),
    per_self_employed_input_type varchar(128),
    per_amortization_input_type varchar(128),
    per_non_resident_alien_input_type varchar(128),
    per_hazardous_lava_zone_input_type varchar(128),
    per_property_rights_input_type varchar(128),
    per_property_acres_input_type varchar(128),
    per_arms_length_input_type varchar(128),
    per_underwrite_accepted_input_type varchar(128),
    per_state_input_type varchar(128),
    per_escrow_waiver_input_type varchar(128),
    per_minimum_credit_score_input boolean,
    per_minimum_loan_amount_input boolean,
    per_maximum_loan_amount_input boolean,
    per_maximum_ltv_ratio_input boolean,
    per_newly_built_maximum_ltv_ratio_input boolean,
    per_subordinate_maximum_ltv_ratio_input boolean,
    per_maximum_cltv_ratio_input boolean,
    per_maximum_housing_ratio_input boolean,
    per_maximum_debt_ratio_input boolean,
    per_lp_risk_assessment_accepted boolean,
    per_du_risk_assessment_accepted boolean,
    per_manual_risk_assessment_accepted boolean,
    per_loan_purpose_purchase boolean,
    per_loan_purpose_change_in_rate_term boolean,
    per_loan_purpose_cash_out boolean,
    per_property_usage_primary_residence boolean,
    per_property_usage_second_home boolean,
    per_property_usage_investment boolean,
    per_doc_level_full boolean,
    per_doc_level_lite boolean,
    per_doc_level_limited boolean,
    per_doc_level_streamline_refinance boolean,
    per_property_category_detached boolean,
    per_property_category_attached boolean,
    per_property_category_condo_hotel boolean,
    per_property_category_duplex boolean,
    per_property_category_triplex boolean,
    per_property_category_fourplex boolean,
    per_property_category_commercial_residential boolean,
    per_property_category_condo_1_to_4_story boolean,
    per_property_category_condo_5_over_story boolean,
    per_property_category_manufactured_multi_wide boolean,
    per_property_category_manufactured_single_wide boolean,
    per_property_category_townhouse_rowhouse boolean,
    per_property_category_land_and_lots boolean,
    per_property_category_farm boolean,
    per_first_time_homebuyer boolean,
    per_not_first_time_homebuyer boolean,
    per_self_employed boolean,
    per_not_self_employed boolean,
    per_amortization_fully boolean,
    per_amortization_interest_only boolean,
    per_non_resident_alien boolean,
    per_not_non_resident_alien boolean,
    per_arms_length boolean,
    per_not_arms_length boolean,
    per_hazardous_lava_zone boolean,
    per_not_hazardous_lava_zone boolean,
    per_property_rights_fee_simple boolean,
    per_property_rights_leasehold boolean,
    per_under_10_acres boolean,
    per_not_under_10_acres boolean,
    per_escrow_waiver boolean,
    per_not_escrow_waiver boolean,
    per_minimum_credit_score integer,
    per_minimum_loan_amount numeric(15),
    per_maximum_loan_amount numeric(15),
    per_maximum_ltv_ratio_percent numeric(11,9),
    per_newly_built_maximum_ltv_ratio_percent numeric(11,9),
    per_subordinate_maximum_ltv_ratio_percent numeric(11,9),
    per_maximum_cltv_ratio_percent numeric(11,9),
    per_maximum_housing_ratio_percent numeric(11,9),
    per_maximum_debt_ratio_percent numeric(11,9),
    per_state_al boolean,
    per_state_ak boolean,
    per_state_az boolean,
    per_state_ar boolean,
    per_state_ca boolean,
    per_state_co boolean,
    per_state_ct boolean,
    per_state_de boolean,
    per_state_dc boolean,
    per_state_fl boolean,
    per_state_ga boolean,
    per_state_gu boolean,
    per_state_hi boolean,
    per_state_id boolean,
    per_state_il boolean,
    per_state_in boolean,
    per_state_ia boolean,
    per_state_ks boolean,
    per_state_ky boolean,
    per_state_la boolean,
    per_state_me boolean,
    per_state_md boolean,
    per_state_ma boolean,
    per_state_mi boolean,
    per_state_mn boolean,
    per_state_ms boolean,
    per_state_mo boolean,
    per_state_mt boolean,
    per_state_ne boolean,
    per_state_nv boolean,
    per_state_nh boolean,
    per_state_nj boolean,
    per_state_nm boolean,
    per_state_ny boolean,
    per_state_nc boolean,
    per_state_nd boolean,
    per_state_oh boolean,
    per_state_ok boolean,
    per_state_or boolean,
    per_state_pa boolean,
    per_state_pr boolean,
    per_state_ri boolean,
    per_state_sc boolean,
    per_state_sd boolean,
    per_state_tn boolean,
    per_state_tx boolean,
    per_state_ut boolean,
    per_state_vt boolean,
    per_state_va boolean,
    per_state_vi boolean,
    per_state_wa boolean,
    per_state_wv boolean,
    per_state_wi boolean,
    per_state_wy boolean
);

alter table staging_octane.product_eligibility_rule owner to deployer;

create index idx_product_eligibility_rule__pid_version
    on staging_octane.product_eligibility_rule (per_pid, per_version);

grant select on staging_octane.product_eligibility_rule to readonly;

grant delete, insert, select, truncate, update on staging_octane.product_eligibility_rule to dms_octane_writer;

grant select on staging_octane.product_eligibility_rule to etl_loan;

create table staging_octane.product_lock_term
(
    plt_pid bigint not null
        constraint product_lock_term_pkey
            primary key,
    plt_version integer,
    plt_product_pid bigint,
    plt_lock_term_setting_pid bigint,
    plt_from_date date,
    plt_through_date date,
    plt_price_adjustment_percent numeric(11,9)
);

alter table staging_octane.product_lock_term owner to deployer;

create index idx_product_lock_term__pid_version
    on staging_octane.product_lock_term (plt_pid, plt_version);

grant select on staging_octane.product_lock_term to readonly;

grant delete, insert, select, truncate, update on staging_octane.product_lock_term to dms_octane_writer;

grant select on staging_octane.product_lock_term to etl_loan;

create table staging_octane.product_maximum_investor_price
(
    pmip_pid bigint not null
        constraint product_maximum_investor_price_pkey
            primary key,
    pmip_version integer,
    pmip_product_pid bigint,
    pmip_from_date date,
    pmip_maximum_investor_price_percent numeric(11,9),
    pmip_maximum_includes_srp boolean,
    pmip_loan_amount_min numeric(15),
    pmip_loan_amount_max numeric(15)
);

alter table staging_octane.product_maximum_investor_price owner to deployer;

create index idx_product_maximum_investor_price__pid_version
    on staging_octane.product_maximum_investor_price (pmip_pid, pmip_version);

grant select on staging_octane.product_maximum_investor_price to readonly;

grant delete, insert, select, truncate, update on staging_octane.product_maximum_investor_price to dms_octane_writer;

grant select on staging_octane.product_maximum_investor_price to etl_loan;

create table staging_octane.product_maximum_rebate
(
    pmr_pid bigint not null
        constraint product_maximum_rebate_pkey
            primary key,
    pmr_version integer,
    pmr_product_pid bigint,
    pmr_from_date date,
    pmr_maximum_rebate_percent numeric(11,9)
);

alter table staging_octane.product_maximum_rebate owner to deployer;

create index idx_product_maximum_rebate__pid_version
    on staging_octane.product_maximum_rebate (pmr_pid, pmr_version);

grant select on staging_octane.product_maximum_rebate to readonly;

grant delete, insert, select, truncate, update on staging_octane.product_maximum_rebate to dms_octane_writer;

grant select on staging_octane.product_maximum_rebate to etl_loan;

create table staging_octane.product_minimum_investor_price
(
    pminip_pid bigint not null
        constraint product_minimum_investor_price_pkey
            primary key,
    pminip_version integer,
    pminip_product_pid bigint,
    pminip_from_date date,
    pminip_minimum_investor_price_percent numeric(11,9),
    pminip_minimum_includes_srp boolean,
    pminip_loan_amount_min numeric(15),
    pminip_loan_amount_max numeric(15)
);

alter table staging_octane.product_minimum_investor_price owner to deployer;

create index idx_product_minimum_investor_price__pid_version
    on staging_octane.product_minimum_investor_price (pminip_pid, pminip_version);

grant select on staging_octane.product_minimum_investor_price to readonly;

grant delete, insert, select, truncate, update on staging_octane.product_minimum_investor_price to dms_octane_writer;

grant select on staging_octane.product_minimum_investor_price to etl_loan;

create table staging_octane.product_originator
(
    po_pid bigint not null
        constraint product_originator_pkey
            primary key,
    po_version integer,
    po_product_pid bigint,
    po_lender_user_pid bigint,
    po_from_date date,
    po_through_date date,
    po_price_adjustment_percent numeric(11,9)
);

alter table staging_octane.product_originator owner to deployer;

create index idx_product_originator__pid_version
    on staging_octane.product_originator (po_pid, po_version);

grant select on staging_octane.product_originator to readonly;

grant delete, insert, select, truncate, update on staging_octane.product_originator to dms_octane_writer;

grant select on staging_octane.product_originator to etl_loan;

create table staging_octane.product_terms
(
    pt_pid bigint not null
        constraint product_terms_pkey
            primary key,
    pt_version integer,
    pt_amortization_term_months integer,
    pt_arm_index_type varchar(128),
    pt_arm_payment_adjustment_calculation_type varchar(128),
    pt_assumable boolean,
    pt_product_category varchar(128),
    pt_conditions_to_assumability boolean,
    pt_demand_feature boolean,
    pt_due_in_term_months integer,
    pt_escrow_cushion_months integer,
    pt_from_date date,
    pt_initial_payment_adjustment_term_months integer,
    pt_initial_rate_adjustment_cap_percent numeric(11,9),
    pt_initial_rate_adjustment_term_months integer,
    pt_lien_priority_type varchar(128),
    pt_loan_amortization_type varchar(128),
    pt_minimum_payment_rate_percent numeric(11,9),
    pt_minimum_rate_term_months integer,
    pt_mortgage_type varchar(128),
    pt_negative_amortization_type varchar(128),
    pt_negative_amortization_limit_percent numeric(11,9),
    pt_negative_amortization_recast_period_months integer,
    pt_payment_adjustment_lifetime_cap_percent numeric(11,9),
    pt_payment_adjustment_periodic_cap numeric(11,9),
    pt_payment_frequency_type varchar(128),
    pt_prepayment_finance_charge_refund boolean,
    pt_product_pid bigint,
    pt_rate_adjustment_lifetime_cap_percent numeric(11,9),
    pt_subsequent_payment_adjustment_term_months integer,
    pt_subsequent_rate_adjustment_cap_percent numeric(11,9),
    pt_subsequent_rate_adjustment_term_months integer,
    pt_prepay_penalty_type varchar(128),
    pt_lender_hazard_insurance_available boolean,
    pt_lender_hazard_insurance_premium_amount numeric(15,2),
    pt_lender_hazard_insurance_term_months integer,
    pt_loan_requires_hazard_insurance boolean,
    pt_arm_convertible boolean,
    pt_arm_convertible_from_month integer,
    pt_arm_convertible_through_month integer,
    pt_arm_floor_rate_percent numeric(11,9),
    pt_arm_lookback_period_days integer,
    pt_escrow_waiver_allowed boolean,
    pt_days_per_year_type varchar(128),
    pt_lp_risk_assessment_accepted boolean,
    pt_du_risk_assessment_accepted boolean,
    pt_manual_risk_assessment_accepted boolean,
    pt_internal_underwrite_accepted boolean,
    pt_external_fha_underwrite_accepted boolean,
    pt_external_va_underwrite_accepted boolean,
    pt_external_usda_underwrite_accepted boolean,
    pt_external_investor_underwrite_accepted boolean,
    pt_heloc_cancel_fee_applicable_type varchar(128),
    pt_heloc_cancel_fee_period_months integer,
    pt_heloc_cancel_fee_amount numeric(15,2),
    pt_heloc_draw_period_months integer,
    pt_heloc_repayment_period_duration_months integer,
    pt_heloc_maximum_initial_draw boolean,
    pt_heloc_maximum_initial_draw_amount numeric(15),
    pt_heloc_minimum_draw boolean,
    pt_heloc_minimum_draw_amount numeric(15),
    pt_gpm_adjustment_years integer,
    pt_gpm_adjustment_percent numeric(11,9),
    pt_qualifying_monthly_payment_type varchar(128),
    pt_qualifying_rate_type varchar(128),
    pt_qualifying_rate_input_percent numeric(11,9),
    pt_ipc_calc_type varchar(128),
    pt_ipc_limit_percent1 numeric(11,9),
    pt_ipc_property_usage_type1 varchar(128),
    pt_ipc_comparison_operator_type1 varchar(128),
    pt_ipc_cltv_ratio_percent1 numeric(11,9),
    pt_ipc_limit_percent2 numeric(11,9),
    pt_ipc_property_usage_type2 varchar(128),
    pt_ipc_comparison_operator_type2 varchar(128),
    pt_ipc_cltv_ratio_percent2 numeric(11,9),
    pt_ipc_limit_percent3 numeric(11,9),
    pt_ipc_property_usage_type3 varchar(128),
    pt_ipc_comparison_operator_type3 varchar(128),
    pt_ipc_cltv_ratio_percent3 numeric(11,9),
    pt_ipc_limit_percent4 numeric(11,9),
    pt_ipc_property_usage_type4 varchar(128),
    pt_ipc_comparison_operator_type4 varchar(128),
    pt_ipc_cltv_ratio_percent4 numeric(11,9),
    pt_buydown_base_date_type varchar(128),
    pt_buydown_subsidy_calculation_type varchar(128),
    pt_prepaid_interest_rate_type varchar(128),
    pt_fnm_arm_plan_type varchar(128),
    pt_credit_qualifying boolean,
    pt_product_special_program_type varchar(128),
    pt_section_of_act_coarse_type varchar(128),
    pt_fha_rehab_program_type varchar(128),
    pt_fha_special_program_type varchar(128),
    pt_third_party_grant_eligible boolean,
    pt_servicing_transfer_type varchar(128),
    pt_no_mi_product boolean,
    pt_mortgage_credit_certificate_eligible boolean,
    pt_fre_community_program_type varchar(128),
    pt_fnm_community_lending_product_type varchar(128),
    pt_zero_note_rate boolean,
    pt_third_party_community_second_program_eligibility_type varchar(128),
    pt_texas_veterans_land_board varchar(128),
    pt_security_instrument_page_count integer,
    pt_deed_page_count integer,
    pt_partial_payment_policy_type varchar(128),
    pt_payment_structure_type varchar(128),
    pt_deferred_payment_months integer,
    pt_always_current_market_price boolean,
    pt_rate_protect boolean,
    pt_non_conforming boolean,
    pt_allow_loan_amount_cents boolean,
    pt_product_appraisal_requirement_type varchar(128),
    pt_family_advantage boolean,
    pt_community_lending_type varchar(128),
    pt_high_balance varchar(128),
    pt_decision_credit_score_calc_type varchar(128),
    pt_new_york boolean,
    pt_maximum_number_of_construction_draws integer
);

alter table staging_octane.product_terms owner to deployer;

create index idx_product_terms__pid_version
    on staging_octane.product_terms (pt_pid, pt_version);

grant select on staging_octane.product_terms to readonly;

grant delete, insert, select, truncate, update on staging_octane.product_terms to dms_octane_writer;

grant select on staging_octane.product_terms to etl_loan;

create table staging_octane.product_buydown
(
    pbd_pid bigint not null
        constraint product_buydown_pkey
            primary key,
    pbd_version integer,
    pbd_product_terms_pid bigint,
    pbd_buydown_schedule_type varchar(128)
);

alter table staging_octane.product_buydown owner to deployer;

create index idx_product_buydown__pid_version
    on staging_octane.product_buydown (pbd_pid, pbd_version);

grant select on staging_octane.product_buydown to readonly;

grant delete, insert, select, truncate, update on staging_octane.product_buydown to dms_octane_writer;

grant select on staging_octane.product_buydown to etl_loan;

create table staging_octane.product_interest_only
(
    pio_pid bigint not null
        constraint product_interest_only_pkey
            primary key,
    pio_version integer,
    pio_product_terms_pid bigint,
    pio_interest_only_type varchar(128),
    pio_balloon_payment boolean
);

alter table staging_octane.product_interest_only owner to deployer;

create index idx_product_interest_only__pid_version
    on staging_octane.product_interest_only (pio_pid, pio_version);

grant select on staging_octane.product_interest_only to readonly;

grant delete, insert, select, truncate, update on staging_octane.product_interest_only to dms_octane_writer;

grant select on staging_octane.product_interest_only to etl_loan;

create table staging_octane.product_prepay_penalty
(
    ppp_pid bigint not null
        constraint product_prepay_penalty_pkey
            primary key,
    ppp_version integer,
    ppp_product_terms_pid bigint,
    ppp_prepay_penalty_schedule_type varchar(128)
);

alter table staging_octane.product_prepay_penalty owner to deployer;

create index idx_product_prepay_penalty__pid_version
    on staging_octane.product_prepay_penalty (ppp_pid, ppp_version);

grant select on staging_octane.product_prepay_penalty to readonly;

grant delete, insert, select, truncate, update on staging_octane.product_prepay_penalty to dms_octane_writer;

grant select on staging_octane.product_prepay_penalty to etl_loan;

create table staging_octane.rate_sheet
(
    rs_pid bigint not null
        constraint rate_sheet_pkey
            primary key,
    rs_version integer,
    rs_product_pid bigint,
    rs_from_datetime timestamp,
    rs_rate_sheet_group_pid bigint
);

alter table staging_octane.rate_sheet owner to deployer;

create index idx_rate_sheet__pid_version
    on staging_octane.rate_sheet (rs_pid, rs_version);

grant select on staging_octane.rate_sheet to readonly;

grant delete, insert, select, truncate, update on staging_octane.rate_sheet to dms_octane_writer;

grant select on staging_octane.rate_sheet to etl_loan;

create table staging_octane.rate_sheet_rate
(
    rsr_pid bigint not null
        constraint rate_sheet_rate_pkey
            primary key,
    rsr_version integer,
    rsr_rate_sheet_pid bigint,
    rsr_rate_percent numeric(11,9),
    rsr_arm_margin_percent numeric(11,9),
    rsr_available boolean
);

alter table staging_octane.rate_sheet_rate owner to deployer;

create index idx_rate_sheet_rate__pid_version
    on staging_octane.rate_sheet_rate (rsr_pid, rsr_version);

grant select on staging_octane.rate_sheet_rate to readonly;

grant delete, insert, select, truncate, update on staging_octane.rate_sheet_rate to dms_octane_writer;

grant select on staging_octane.rate_sheet_rate to etl_loan;

create table staging_octane.rate_sheet_price
(
    rsp_pid bigint not null
        constraint rate_sheet_price_pkey
            primary key,
    rsp_version integer,
    rsp_rate_sheet_rate_pid bigint,
    rsp_lock_duration_days integer,
    rsp_lock_commitment_type varchar(128),
    rsp_price_percent numeric(11,9)
);

alter table staging_octane.rate_sheet_price owner to deployer;

create index idx_rate_sheet_price__pid_version
    on staging_octane.rate_sheet_price (rsp_pid, rsp_version);

grant select on staging_octane.rate_sheet_price to readonly;

grant delete, insert, select, truncate, update on staging_octane.rate_sheet_price to dms_octane_writer;

grant select on staging_octane.rate_sheet_price to etl_loan;

create table staging_octane.repository_file
(
    rf_pid bigint not null
        constraint repository_file_pkey
            primary key,
    rf_version integer,
    rf_account_pid bigint,
    rf_repository_type varchar(128),
    rf_client_filename varchar(128),
    rf_repository_filename varchar(128),
    rf_upload_datetime timestamp,
    rf_uploader_name varchar(128),
    rf_uploader_agent_type varchar(128),
    rf_uploader_lender_user_pid bigint,
    rf_uploader_borrower_user_pid bigint,
    rf_description varchar(256),
    rf_file_size bigint,
    rf_mime_type varchar(128),
    rf_delete_datetime timestamp,
    rf_file_checksum varchar(128)
);

alter table staging_octane.repository_file owner to deployer;

create index idx_repository_file__pid_version
    on staging_octane.repository_file (rf_pid, rf_version);

grant select on staging_octane.repository_file to readonly;

grant delete, insert, select, truncate, update on staging_octane.repository_file to dms_octane_writer;

grant select on staging_octane.repository_file to etl_loan;

create table staging_octane.bid_pool_file
(
    bpf_pid bigint not null
        constraint bid_pool_file_pkey
            primary key,
    bpf_version integer,
    bpf_bid_pool_pid bigint,
    bpf_repository_file_pid bigint
);

alter table staging_octane.bid_pool_file owner to deployer;

create index idx_bid_pool_file__pid_version
    on staging_octane.bid_pool_file (bpf_pid, bpf_version);

grant select on staging_octane.bid_pool_file to readonly;

grant delete, insert, select, truncate, update on staging_octane.bid_pool_file to dms_octane_writer;

grant select on staging_octane.bid_pool_file to etl_loan;

create table staging_octane.compass_analytics_report_request
(
    carr_pid bigint not null
        constraint compass_analytics_report_request_pkey
            primary key,
    carr_version integer,
    carr_account_pid bigint,
    carr_create_datetime timestamp,
    carr_start_datetime timestamp,
    carr_end_datetime timestamp,
    carr_request_status_type varchar(128),
    carr_request_status_messages text,
    carr_requester_unparsed_name varchar(128),
    carr_exported_deal_count integer,
    carr_total_deal_count integer,
    carr_sold_from_date date,
    carr_sold_through_date date,
    carr_cancelled_from_date date,
    carr_cancelled_through_date date,
    carr_export_csv_repository_file_pid bigint,
    carr_error_file_pid bigint,
    carr_use_loan_hedge_data boolean
);

alter table staging_octane.compass_analytics_report_request owner to deployer;

create index idx_compass_analytics_report_request__pid_version
    on staging_octane.compass_analytics_report_request (carr_pid, carr_version);

grant select on staging_octane.compass_analytics_report_request to readonly;

grant delete, insert, select, truncate, update on staging_octane.compass_analytics_report_request to dms_octane_writer;

grant select on staging_octane.compass_analytics_report_request to etl_loan;

create table staging_octane.consumer_privacy_request
(
    cpr_pid bigint not null
        constraint consumer_privacy_request_pkey
            primary key,
    cpr_version integer,
    cpr_request_id integer,
    cpr_receiver_lender_user_pid bigint,
    cpr_account_pid bigint,
    cpr_borrower_last_name varchar(128),
    cpr_searched_email varchar(256),
    cpr_searched_phone varchar(32),
    cpr_searched_los_loan_id bigint,
    cpr_searched_subject_property_street varchar(128),
    cpr_searched_subject_property_city varchar(128),
    cpr_searched_subject_property_state_type varchar(128),
    cpr_received_date timestamp,
    cpr_know_datetime timestamp,
    cpr_delete_datetime timestamp,
    cpr_request_type varchar(128),
    cpr_request_todo varchar(128),
    cpr_know_repository_file_pid bigint,
    cpr_delete_repository_file_pid bigint
);

alter table staging_octane.consumer_privacy_request owner to deployer;

create index idx_consumer_privacy_request__pid_version
    on staging_octane.consumer_privacy_request (cpr_pid, cpr_version);

grant select on staging_octane.consumer_privacy_request to readonly;

grant delete, insert, select, truncate, update on staging_octane.consumer_privacy_request to dms_octane_writer;

grant select on staging_octane.consumer_privacy_request to etl_loan;

create table staging_octane.custom_form
(
    cf_pid bigint not null
        constraint custom_form_pkey
            primary key,
    cf_version integer,
    cf_account_pid bigint,
    cf_merge_form boolean,
    cf_repository_file_pid bigint
);

alter table staging_octane.custom_form owner to deployer;

create index idx_custom_form__pid_version
    on staging_octane.custom_form (cf_pid, cf_version);

grant select on staging_octane.custom_form to readonly;

grant delete, insert, select, truncate, update on staging_octane.custom_form to dms_octane_writer;

grant select on staging_octane.custom_form to etl_loan;

create table staging_octane.custom_form_merge_field
(
    cfmf_pid bigint not null
        constraint custom_form_merge_field_pkey
            primary key,
    cfmf_version integer,
    cfmf_custom_form_pid bigint,
    cfmf_field_type varchar(128)
);

alter table staging_octane.custom_form_merge_field owner to deployer;

create index idx_custom_form_merge_field__pid_version
    on staging_octane.custom_form_merge_field (cfmf_pid, cfmf_version);

grant select on staging_octane.custom_form_merge_field to readonly;

grant delete, insert, select, truncate, update on staging_octane.custom_form_merge_field to dms_octane_writer;

grant select on staging_octane.custom_form_merge_field to etl_loan;

create table staging_octane.deal_file
(
    df_pid bigint not null
        constraint deal_file_pkey
            primary key,
    df_version integer,
    df_deal_pid bigint,
    df_repository_file_pid bigint,
    df_archive boolean,
    df_borrower_uploaded boolean
);

alter table staging_octane.deal_file owner to deployer;

create index idx_deal_file__pid_version
    on staging_octane.deal_file (df_pid, df_version);

grant select on staging_octane.deal_file to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_file to dms_octane_writer;

grant select on staging_octane.deal_file to etl_loan;

create table staging_octane.appraisal_file
(
    aprf_pid bigint not null
        constraint appraisal_file_pkey
            primary key,
    aprf_version integer,
    aprf_appraisal_pid bigint,
    aprf_deal_file_pid bigint,
    aprf_appraisal_file_type varchar(128)
);

alter table staging_octane.appraisal_file owner to deployer;

create index idx_appraisal_file__pid_version
    on staging_octane.appraisal_file (aprf_pid, aprf_version);

grant select on staging_octane.appraisal_file to readonly;

grant delete, insert, select, truncate, update on staging_octane.appraisal_file to dms_octane_writer;

grant select on staging_octane.appraisal_file to etl_loan;

create table staging_octane.deal_dropbox_file
(
    ddf_pid bigint not null
        constraint deal_dropbox_file_pkey
            primary key,
    ddf_version integer,
    ddf_deal_file_pid bigint
);

alter table staging_octane.deal_dropbox_file owner to deployer;

create index idx_deal_dropbox_file__pid_version
    on staging_octane.deal_dropbox_file (ddf_pid, ddf_version);

grant select on staging_octane.deal_dropbox_file to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_dropbox_file to dms_octane_writer;

grant select on staging_octane.deal_dropbox_file to etl_loan;

create table staging_octane.deal_file_signature
(
    dfs_pid bigint not null
        constraint deal_file_signature_pkey
            primary key,
    dfs_version integer,
    dfs_deal_file_pid bigint,
    dfs_deal_signer_pid bigint,
    dfs_x numeric(15,7),
    dfs_y numeric(15,7),
    dfs_page_number integer,
    dfs_page_height numeric(15,7),
    dfs_signature_part_type varchar(128),
    dfs_charge_type varchar(128),
    dfs_charge_amount numeric(15,2)
);

alter table staging_octane.deal_file_signature owner to deployer;

create index idx_deal_file_signature__pid_version
    on staging_octane.deal_file_signature (dfs_pid, dfs_version);

grant select on staging_octane.deal_file_signature to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_file_signature to dms_octane_writer;

grant select on staging_octane.deal_file_signature to etl_loan;

create table staging_octane.deal_fraud_risk
(
    dfr_pid bigint not null
        constraint deal_fraud_risk_pkey
            primary key,
    dfr_version integer,
    dfr_deal_pid bigint,
    dfr_loan_safe_risk_manager_status_messages text,
    dfr_loan_safe_risk_manager_order_number varchar(128),
    dfr_loan_safe_risk_manager_html_deal_file_pid bigint,
    dfr_loan_safe_risk_manager_pdf_deal_file_pid bigint,
    dfr_loan_safe_fraud_risk_score integer,
    dfr_loan_safe_collateral_risk_score integer,
    dfr_loan_safe_product_type varchar(128)
);

alter table staging_octane.deal_fraud_risk owner to deployer;

create index idx_deal_fraud_risk__pid_version
    on staging_octane.deal_fraud_risk (dfr_pid, dfr_version);

grant select on staging_octane.deal_fraud_risk to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_fraud_risk to dms_octane_writer;

grant select on staging_octane.deal_fraud_risk to etl_loan;

create table staging_octane.deal_invoice_file
(
    dif_pid bigint not null
        constraint deal_invoice_file_pkey
            primary key,
    dif_version integer,
    dif_deal_invoice_file_type varchar(128),
    dif_deal_file_pid bigint,
    dif_deal_invoice_pid bigint,
    dif_create_datetime timestamp
);

alter table staging_octane.deal_invoice_file owner to deployer;

create index idx_deal_invoice_file__pid_version
    on staging_octane.deal_invoice_file (dif_pid, dif_version);

grant select on staging_octane.deal_invoice_file to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_invoice_file to dms_octane_writer;

grant select on staging_octane.deal_invoice_file to etl_loan;

create table staging_octane.deal_message_log
(
    dmlog_pid bigint not null
        constraint deal_message_log_pkey
            primary key,
    dmlog_version integer,
    dmlog_deal_pid bigint,
    dmlog_sent_datetime timestamp,
    dmlog_delivery_type varchar(128),
    dmlog_to_recipients varchar(16000),
    dmlog_email_reply_to varchar(256),
    dmlog_name varchar(256),
    dmlog_email_subject varchar(1024),
    dmlog_email_body text,
    dmlog_sent_securely boolean,
    dmlog_cover_letter_deal_file_pid bigint,
    dmlog_cc_recipients varchar(16000),
    dmlog_bcc_recipients varchar(16000),
    dmlog_plain_text boolean
);

alter table staging_octane.deal_message_log owner to deployer;

create index idx_deal_message_log__pid_version
    on staging_octane.deal_message_log (dmlog_pid, dmlog_version);

grant select on staging_octane.deal_message_log to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_message_log to dms_octane_writer;

grant select on staging_octane.deal_message_log to etl_loan;

create table staging_octane.deal_system_file
(
    dsf_pid bigint not null
        constraint deal_system_file_pkey
            primary key,
    dsf_version integer,
    dsf_deal_pid bigint,
    dsf_repository_file_pid bigint
);

alter table staging_octane.deal_system_file owner to deployer;

create index idx_deal_system_file__pid_version
    on staging_octane.deal_system_file (dsf_pid, dsf_version);

grant select on staging_octane.deal_system_file to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_system_file to dms_octane_writer;

grant select on staging_octane.deal_system_file to etl_loan;

create table staging_octane.appraisal_order_request
(
    aprq_pid bigint not null
        constraint appraisal_order_request_pkey
            primary key,
    aprq_version integer,
    aprq_deal_pid bigint,
    aprq_appraisal_pid bigint,
    aprq_mercury_network_status_request_pid bigint,
    aprq_appraisal_order_coarse_status_type varchar(128),
    aprq_order_id varchar(128),
    aprq_order_instructions varchar(1024),
    aprq_address_street1 varchar(128),
    aprq_address_street2 varchar(128),
    aprq_address_city varchar(128),
    aprq_address_state varchar(128),
    aprq_address_postal_code varchar(128),
    aprq_order_request_date date,
    aprq_response_xml_deal_system_file_pid bigint,
    aprq_mismo_xml_deal_system_file_pid bigint,
    aprq_appraisal_order_request_type varchar(128),
    aprq_status_check_datetime timestamp,
    aprq_appraisal_management_company_type varchar(128),
    aprq_requester_lender_user_pid bigint,
    aprq_requester_unparsed_name varchar(128),
    aprq_requester_agent_type varchar(128),
    aprq_vendor_status_unique_id varchar(128)
);

alter table staging_octane.appraisal_order_request owner to deployer;

create index idx_appraisal_order_request__pid_version
    on staging_octane.appraisal_order_request (aprq_pid, aprq_version);

grant select on staging_octane.appraisal_order_request to readonly;

grant delete, insert, select, truncate, update on staging_octane.appraisal_order_request to dms_octane_writer;

grant select on staging_octane.appraisal_order_request to etl_loan;

create table staging_octane.appraisal_order_request_file
(
    aorf_pid bigint not null
        constraint appraisal_order_request_file_pkey
            primary key,
    aorf_version integer,
    aorf_appraisal_order_request_pid bigint,
    aorf_deal_file_pid bigint,
    aorf_appraisal_order_request_file_type varchar(128),
    aorf_vendor_document_datetime timestamp,
    aorf_vendor_document_id varchar(128)
);

alter table staging_octane.appraisal_order_request_file owner to deployer;

create index idx_appraisal_order_request_file__pid_version
    on staging_octane.appraisal_order_request_file (aorf_pid, aorf_version);

grant select on staging_octane.appraisal_order_request_file to readonly;

grant delete, insert, select, truncate, update on staging_octane.appraisal_order_request_file to dms_octane_writer;

grant select on staging_octane.appraisal_order_request_file to etl_loan;

create table staging_octane.deal_file_thumbnail
(
    dft_pid bigint not null
        constraint deal_file_thumbnail_pkey
            primary key,
    dft_version integer,
    dft_deal_file_pid bigint,
    dft_deal_system_file_pid bigint,
    dft_page_number integer
);

alter table staging_octane.deal_file_thumbnail owner to deployer;

create index idx_deal_file_thumbnail__pid_version
    on staging_octane.deal_file_thumbnail (dft_pid, dft_version);

grant select on staging_octane.deal_file_thumbnail to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_file_thumbnail to dms_octane_writer;

grant select on staging_octane.deal_file_thumbnail to etl_loan;

create table staging_octane.du_request
(
    dur_pid bigint not null
        constraint du_request_pkey
            primary key,
    dur_version integer,
    dur_proposal_pid bigint,
    dur_proposal_snapshot_pid bigint,
    dur_uw_findings_html_deal_file_pid bigint,
    dur_uw_analysis_html_deal_file_pid bigint,
    dur_uw_findings_pdf_deal_file_pid bigint,
    dur_uw_findings_xml_provided boolean,
    dur_requester_agent_type varchar(128),
    dur_requester_lender_user_pid bigint,
    dur_requester_unparsed_name varchar(128),
    dur_create_datetime timestamp,
    dur_mismo_version_type varchar(128),
    dur_credit_bureau_type varchar(128),
    dur_globally_unique_id varchar(128),
    dur_response_deal_system_file_pid bigint,
    dur_du_casefile_id varchar(32),
    dur_du_request_status_type varchar(128),
    dur_status_message varchar(1024),
    dur_mp_status_log varchar(16000),
    dur_du_recommendation_type varchar(128),
    dur_du_version varchar(16),
    dur_du_submission_number integer,
    dur_loan_amount numeric(17,2),
    dur_initial_pi_amount numeric(15,2),
    dur_note_rate_percent numeric(11,9),
    dur_initial_note_rate_percent numeric(11,9),
    dur_ltv_ratio_percent numeric(11,9),
    dur_cltv_ratio_percent numeric(11,9),
    dur_housing_ratio_percent numeric(11,9),
    dur_debt_ratio_percent numeric(11,9),
    dur_du_ltv_ratio_percent numeric(11,9),
    dur_du_cltv_ratio_percent numeric(11,9),
    dur_du_housing_ratio_percent numeric(11,9),
    dur_du_debt_ratio_percent numeric(11,9),
    dur_aus_request_number integer,
    dur_cash_from_borrower_amount numeric(15,2),
    dur_aus_cash_from_borrower_amount numeric(15,2),
    dur_gse_version_type varchar(128)
);

alter table staging_octane.du_request owner to deployer;

create index idx_du_request__pid_version
    on staging_octane.du_request (dur_pid, dur_version);

grant select on staging_octane.du_request to readonly;

grant delete, insert, select, truncate, update on staging_octane.du_request to dms_octane_writer;

grant select on staging_octane.du_request to etl_loan;

create table staging_octane.du_request_credit
(
    durc_pid bigint not null
        constraint du_request_credit_pkey
            primary key,
    durc_version integer,
    durc_du_request_pid bigint,
    durc_du_casefile_id varchar(32),
    durc_create_datetime timestamp,
    durc_credit_report_create_datetime timestamp,
    durc_credit_bureau_type varchar(128),
    durc_credit_report_identifier varchar(32),
    durc_credit_report_name varchar(256),
    durc_aus_credit_service_type varchar(128),
    durc_borrower_1_borrower_tiny_id_type varchar(128),
    durc_borrower_2_borrower_tiny_id_type varchar(128)
);

alter table staging_octane.du_request_credit owner to deployer;

create index idx_du_request_credit__pid_version
    on staging_octane.du_request_credit (durc_pid, durc_version);

grant select on staging_octane.du_request_credit to readonly;

grant delete, insert, select, truncate, update on staging_octane.du_request_credit to dms_octane_writer;

grant select on staging_octane.du_request_credit to etl_loan;

create table staging_octane.du_special_feature_code
(
    dusfc_pid bigint not null
        constraint du_special_feature_code_pkey
            primary key,
    dusfc_version integer,
    dusfc_du_request_pid bigint,
    dusfc_special_feature_code varchar(32),
    dusfc_special_feature_description varchar(128)
);

alter table staging_octane.du_special_feature_code owner to deployer;

create index idx_du_special_feature_code__pid_version
    on staging_octane.du_special_feature_code (dusfc_pid, dusfc_version);

grant select on staging_octane.du_special_feature_code to readonly;

grant delete, insert, select, truncate, update on staging_octane.du_special_feature_code to dms_octane_writer;

grant select on staging_octane.du_special_feature_code to etl_loan;

create table staging_octane.flood_cert
(
    fc_pid bigint not null
        constraint flood_cert_pkey
            primary key,
    fc_version integer,
    fc_deal_pid bigint,
    fc_flood_certificate_type varchar(128),
    fc_flood_cert_vendor_type varchar(128),
    fc_flood_certification_reference_number varchar(32),
    fc_flood_cert_effective_date date,
    fc_nfip_community_name varchar(256),
    fc_nfip_counties varchar(256),
    fc_nfip_state varchar(2),
    fc_nfip_community_number varchar(16),
    fc_nfip_community_firm_date date,
    fc_nfip_community_participation_start_date date,
    fc_flood_partial varchar(128),
    fc_nfip_map_number varchar(8),
    fc_nfip_map_panel varchar(8),
    fc_nfip_map_panel_suffix varchar(8),
    fc_nfip_map_panel_date date,
    fc_nfip_map_exists varchar(128),
    fc_nfip_letter_of_map_date date,
    fc_nfip_letter_of_map_case_number varchar(32),
    fc_fema_flood_zone_designation_type varchar(128),
    fc_nfip_community_participation_status_type varchar(128),
    fc_protected_area varchar(128),
    fc_protected_area_designation_date date,
    fc_special_flood_hazard_area varchar(128),
    fc_property_county_fips varchar(32),
    fc_property_state_fips varchar(32),
    fc_flood_cert_deal_file_pid bigint,
    fc_property_address_city varchar(128),
    fc_property_address_country varchar(128),
    fc_property_address_postal_code varchar(128),
    fc_property_address_state varchar(128),
    fc_property_address_street1 varchar(128),
    fc_property_address_street2 varchar(128),
    fc_property_county_name varchar(128),
    fc_clg_flood_cert_messages text,
    fc_clg_flood_cert_status_type varchar(128),
    fc_clg_flood_cert_request_datetime timestamp,
    fc_clg_flood_cert_requester_agent_type varchar(128),
    fc_clg_flood_cert_requester_lender_user_pid bigint,
    fc_clg_flood_cert_requester_unparsed_name varchar(128)
);

alter table staging_octane.flood_cert owner to deployer;

create index idx_flood_cert__pid_version
    on staging_octane.flood_cert (fc_pid, fc_version);

grant select on staging_octane.flood_cert to readonly;

grant delete, insert, select, truncate, update on staging_octane.flood_cert to dms_octane_writer;

grant select on staging_octane.flood_cert to etl_loan;

create table staging_octane.hmda_report_request
(
    hrr_pid bigint not null
        constraint hmda_report_request_pkey
            primary key,
    hrr_version integer,
    hrr_account_pid bigint,
    hrr_create_datetime timestamp,
    hrr_start_datetime timestamp,
    hrr_end_datetime timestamp,
    hrr_request_status_type varchar(128),
    hrr_request_status_messages text,
    hrr_requester_unparsed_name varchar(128),
    hrr_row_count integer,
    hrr_from_date date,
    hrr_through_date date,
    hrr_error_protection boolean,
    hrr_error_limit integer,
    hrr_repository_file_pid bigint
);

alter table staging_octane.hmda_report_request owner to deployer;

create index idx_hmda_report_request__pid_version
    on staging_octane.hmda_report_request (hrr_pid, hrr_version);

grant select on staging_octane.hmda_report_request to readonly;

grant delete, insert, select, truncate, update on staging_octane.hmda_report_request to dms_octane_writer;

grant select on staging_octane.hmda_report_request to etl_loan;

create table staging_octane.lender_user_photo
(
    lup_pid bigint not null
        constraint lender_user_photo_pkey
            primary key,
    lup_version integer,
    lup_lender_user_pid bigint,
    lup_repository_file_pid bigint
);

alter table staging_octane.lender_user_photo owner to deployer;

create index idx_lender_user_photo__pid_version
    on staging_octane.lender_user_photo (lup_pid, lup_version);

grant select on staging_octane.lender_user_photo to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_user_photo to dms_octane_writer;

grant select on staging_octane.lender_user_photo to etl_loan;

create table staging_octane.lp_request
(
    lpr_pid bigint not null
        constraint lp_request_pkey
            primary key,
    lpr_version integer,
    lpr_proposal_pid bigint,
    lpr_proposal_snapshot_pid bigint,
    lpr_full_feedback_pdf_deal_file_pid bigint,
    lpr_hve_pdf_deal_file_pid bigint,
    lpr_requester_agent_type varchar(128),
    lpr_requester_lender_user_pid bigint,
    lpr_requester_unparsed_name varchar(128),
    lpr_create_datetime timestamp,
    lpr_lp_interface_version_type varchar(128),
    lpr_lp_dtd_version_type varchar(128),
    lpr_mismo_version_type varchar(128),
    lpr_fre_lp_transaction_id varchar(32),
    lpr_lp_transaction_id varchar(32),
    lpr_globally_unique_id varchar(128),
    lpr_lp_request_status_type varchar(128),
    lpr_lp_evaluation_status_type varchar(128),
    lpr_status_messages text,
    lpr_xml_response_deal_system_file_pid bigint,
    lpr_loan_amount numeric(17,2),
    lpr_initial_pi_amount numeric(15,2),
    lpr_note_rate_percent numeric(11,9),
    lpr_initial_note_rate_percent numeric(11,9),
    lpr_ltv_ratio_percent numeric(11,9),
    lpr_cltv_ratio_percent numeric(11,9),
    lpr_hcltv_ratio_percent numeric(11,9),
    lpr_hcltv_applicable boolean,
    lpr_housing_ratio_percent numeric(11,9),
    lpr_debt_ratio_percent numeric(11,9),
    lpr_lp_ltv_ratio_percent numeric(11,9),
    lpr_lp_total_ltv_ratio_percent numeric(11,9),
    lpr_lp_high_total_ltv_ratio_percent numeric(11,9),
    lpr_lp_housing_ratio_percent numeric(11,9),
    lpr_lp_debt_ratio_percent numeric(11,9),
    lpr_lp_submission_number integer,
    lpr_lp_credit_risk_classification_type varchar(128),
    lpr_fre_doc_level_description_type varchar(128),
    lpr_fre_purchase_eligibility_type varchar(128),
    lpr_lp_case_state_type varchar(128),
    lpr_lp_async_id varchar(128),
    lpr_lp_async_polling_interval integer,
    lpr_lp_total_funds_to_be_verified_amount numeric(15,2),
    lpr_lp_required_borrower_funds_amount numeric(15,2),
    lpr_lp_paid_off_debt_amount numeric(15,2),
    lpr_lp_required_reserves_amount numeric(15,2),
    lpr_lp_total_eligible_assets_amount numeric(15,2),
    lpr_lp_proceeds_from_subordinate_financing_amount numeric(15,2),
    lpr_lp_calculated_reserves_amount numeric(15,2),
    lpr_aus_request_number integer,
    lpr_cash_from_borrower_amount numeric(15,2),
    lpr_aus_cash_from_borrower_amount numeric(15,2),
    lpr_gse_version_type varchar(128)
);

alter table staging_octane.lp_request owner to deployer;

create index idx_lp_request__pid_version
    on staging_octane.lp_request (lpr_pid, lpr_version);

grant select on staging_octane.lp_request to readonly;

grant delete, insert, select, truncate, update on staging_octane.lp_request to dms_octane_writer;

grant select on staging_octane.lp_request to etl_loan;

create table staging_octane.credit_request
(
    crdr_pid bigint not null
        constraint credit_request_pkey
            primary key,
    crdr_version integer,
    crdr_deal_pid bigint,
    crdr_credit_report_file_pid bigint,
    crdr_credit_score_disclosure_file_pid bigint,
    crdr_create_datetime timestamp,
    crdr_requester_agent_type varchar(128),
    crdr_requester_lender_user_pid bigint,
    crdr_requester_unparsed_name varchar(128),
    crdr_credit_request_via_type varchar(128),
    crdr_lp_request_pid bigint,
    crdr_du_request_pid bigint,
    crdr_mismo_version_type varchar(128),
    crdr_credit_bureau_type varchar(128),
    crdr_credit_report_request_action_type varchar(128),
    crdr_credit_report_type varchar(128),
    crdr_credit_report_product_description varchar(32),
    crdr_credit_request_type varchar(128),
    crdr_credit_repositories_selected_count integer,
    crdr_equifax_included boolean,
    crdr_experian_included boolean,
    crdr_trans_union_included boolean,
    crdr_borrower1_first_name varchar(32),
    crdr_borrower1_middle_name varchar(32),
    crdr_borrower1_last_name varchar(32),
    crdr_borrower1_name_suffix varchar(32),
    crdr_borrower1_birth_date date,
    crdr_borrower1_residence_city varchar(128),
    crdr_borrower1_residence_country varchar(128),
    crdr_borrower1_residence_postal_code varchar(128),
    crdr_borrower1_residence_state varchar(128),
    crdr_borrower1_residence_street1 varchar(128),
    crdr_borrower1_residence_street2 varchar(128),
    crdr_borrower1_experian_credit_score integer,
    crdr_borrower1_equifax_credit_score integer,
    crdr_borrower1_trans_union_credit_score integer,
    crdr_borrower1_equifax_credit_score_model_type varchar(128),
    crdr_borrower1_experian_credit_score_model_type varchar(128),
    crdr_borrower1_trans_union_credit_score_model_type varchar(128),
    crdr_borrower2_first_name varchar(32),
    crdr_borrower2_middle_name varchar(32),
    crdr_borrower2_last_name varchar(32),
    crdr_borrower2_name_suffix varchar(32),
    crdr_borrower2_birth_date date,
    crdr_borrower2_residence_city varchar(128),
    crdr_borrower2_residence_country varchar(128),
    crdr_borrower2_residence_postal_code varchar(128),
    crdr_borrower2_residence_state varchar(128),
    crdr_borrower2_residence_street1 varchar(128),
    crdr_borrower2_residence_street2 varchar(128),
    crdr_borrower2_experian_credit_score integer,
    crdr_borrower2_equifax_credit_score integer,
    crdr_borrower2_trans_union_credit_score integer,
    crdr_borrower2_equifax_credit_score_model_type varchar(128),
    crdr_borrower2_experian_credit_score_model_type varchar(128),
    crdr_borrower2_trans_union_credit_score_model_type varchar(128),
    crdr_contains_importable_data boolean,
    crdr_credit_report_identifier varchar(32),
    crdr_credit_report_price numeric(15,2),
    crdr_credit_request_status_type varchar(128),
    crdr_request_error_messages text,
    crdr_bureau_status_messages text,
    crdr_bureau_credit_report_url varchar(1024),
    crdr_last_status_query_datetime timestamp,
    crdr_xml_response_file_pid bigint
);

alter table staging_octane.credit_request owner to deployer;

create index idx_credit_request__pid_version
    on staging_octane.credit_request (crdr_pid, crdr_version);

grant select on staging_octane.credit_request to readonly;

grant delete, insert, select, truncate, update on staging_octane.credit_request to dms_octane_writer;

grant select on staging_octane.credit_request to etl_loan;

create table staging_octane.borrower
(
    b_pid bigint not null
        constraint borrower_pkey
            primary key,
    b_version integer,
    b_alimony_child_support varchar(128),
    b_alimony_child_support_explanation varchar(128),
    b_application_pid bigint,
    b_application_signed_date date,
    b_application_taken_method_type varchar(128),
    b_bankruptcy varchar(128),
    b_bankruptcy_explanation varchar(128),
    b_birth_date date,
    b_borrowed_down_payment varchar(128),
    b_borrowed_down_payment_explanation varchar(128),
    b_applicant_role_type varchar(128),
    b_required_to_sign boolean,
    b_spousal_homestead varchar(128),
    b_has_no_ssn boolean,
    b_citizenship_residency_type varchar(128),
    b_credit_request_pid bigint,
    b_credit_report_identifier varchar(32),
    b_credit_report_authorization boolean,
    b_has_dependents varchar(128),
    b_dependent_count integer,
    b_dependents_age_years varchar(32),
    b_email varchar(256),
    b_fax varchar(32),
    b_first_name varchar(32),
    b_nickname varchar(32),
    b_first_time_homebuyer boolean,
    b_lender_employee varchar(128),
    b_lender_employee_status_confirmed boolean,
    b_sex_refused varchar(128),
    b_sex_collected_visual_or_surname varchar(128),
    b_sex_male boolean,
    b_sex_female boolean,
    b_sex_not_obtainable boolean,
    b_ethnicity_refused varchar(128),
    b_ethnicity_collected_visual_or_surname varchar(128),
    b_ethnicity_hispanic_or_latino boolean,
    b_ethnicity_mexican boolean,
    b_ethnicity_puerto_rican boolean,
    b_ethnicity_cuban boolean,
    b_ethnicity_other_hispanic_or_latino boolean,
    b_ethnicity_other_hispanic_or_latino_description varchar(100),
    b_ethnicity_not_hispanic_or_latino boolean,
    b_ethnicity_not_obtainable boolean,
    b_homeowner_past_three_years varchar(128),
    b_home_phone varchar(32),
    b_intend_to_occupy varchar(128),
    b_last_name varchar(32),
    b_mailing_place_pid bigint,
    b_marital_status_type varchar(128),
    b_spouse_borrower_pid bigint,
    b_middle_name varchar(32),
    b_mobile_phone varchar(32),
    b_name_suffix varchar(32),
    b_note_endorser varchar(128),
    b_note_endorser_explanation varchar(128),
    b_obligated_loan_foreclosure varchar(128),
    b_obligated_loan_foreclosure_explanation varchar(128),
    b_office_phone varchar(32),
    b_office_phone_extension varchar(16),
    b_other_race_national_origin_description varchar(32),
    b_outstanding_judgements varchar(128),
    b_outstanding_judgments_explanation varchar(128),
    b_party_to_lawsuit varchar(128),
    b_party_to_lawsuit_explanation varchar(128),
    b_power_of_attorney varchar(128),
    b_power_of_attorney_signing_capacity varchar(1024),
    b_power_of_attorney_first_name varchar(32),
    b_power_of_attorney_last_name varchar(32),
    b_power_of_attorney_middle_name varchar(32),
    b_power_of_attorney_name_suffix varchar(32),
    b_power_of_attorney_company_name varchar(128),
    b_power_of_attorney_title varchar(128),
    b_power_of_attorney_office_phone varchar(32),
    b_power_of_attorney_office_phone_extension varchar(16),
    b_power_of_attorney_mobile_phone varchar(32),
    b_power_of_attorney_email varchar(256),
    b_power_of_attorney_fax varchar(32),
    b_power_of_attorney_city varchar(128),
    b_power_of_attorney_country varchar(128),
    b_power_of_attorney_postal_code varchar(128),
    b_power_of_attorney_state varchar(128),
    b_power_of_attorney_street1 varchar(128),
    b_power_of_attorney_street2 varchar(128),
    b_presently_delinquent varchar(128),
    b_presently_delinquent_explanation varchar(128),
    b_prior_property_title_type varchar(128),
    b_prior_property_usage_type varchar(128),
    b_property_foreclosure varchar(128),
    b_property_foreclosure_explanation varchar(128),
    b_race_refused varchar(128),
    b_race_collected_visual_or_surname varchar(128),
    b_race_american_indian_or_alaska_native boolean,
    b_race_other_american_indian_or_alaska_native_description varchar(100),
    b_race_asian boolean,
    b_race_asian_indian boolean,
    b_race_chinese boolean,
    b_race_filipino boolean,
    b_race_japanese boolean,
    b_race_korean boolean,
    b_race_vietnamese boolean,
    b_race_other_asian boolean,
    b_race_other_asian_description varchar(100),
    b_race_black_or_african_american boolean,
    b_race_information_not_provided boolean,
    b_race_national_origin_refusal boolean,
    b_race_native_hawaiian_or_other_pacific_islander boolean,
    b_race_native_hawaiian boolean,
    b_race_guamanian_or_chamorro boolean,
    b_race_samoan boolean,
    b_race_other_pacific_islander boolean,
    b_race_not_obtainable boolean,
    b_race_other_pacific_islander_description varchar(100),
    b_race_not_applicable boolean,
    b_race_white boolean,
    b_schooling_years integer,
    b_titleholder varchar(128),
    b_experian_credit_score integer,
    b_equifax_credit_score integer,
    b_trans_union_credit_score integer,
    b_decision_credit_score integer,
    b_borrower_tiny_id_type varchar(128),
    b_first_time_home_buyer_explain varchar(1024),
    b_first_time_home_buyer_auto_compute boolean,
    b_caivrs_id varchar(16),
    b_caivrs_messages text,
    b_on_ldp_list varchar(128),
    b_on_gsa_list varchar(128),
    b_monthly_job_federal_tax_amount numeric(15,2),
    b_monthly_job_state_tax_amount numeric(15,2),
    b_monthly_job_retirement_tax_amount numeric(15,2),
    b_monthly_job_medicare_tax_amount numeric(15,2),
    b_monthly_job_state_disability_insurance_amount numeric(15,2),
    b_monthly_job_other_tax_1_amount numeric(15,2),
    b_monthly_job_other_tax_1_description varchar(128),
    b_monthly_job_other_tax_2_amount numeric(15,2),
    b_monthly_job_other_tax_2_description varchar(128),
    b_monthly_job_other_tax_3_amount numeric(15,2),
    b_monthly_job_other_tax_3_description varchar(128),
    b_monthly_job_total_tax_amount numeric(15,2),
    b_homeownership_education_type varchar(128),
    b_homeownership_education_agency_type varchar(128),
    b_homeownership_education_id varchar(128),
    b_homeownership_education_name varchar(128),
    b_homeownership_education_complete_date date,
    b_housing_counseling_type varchar(128),
    b_housing_counseling_agency_type varchar(128),
    b_housing_counseling_id varchar(128),
    b_housing_counseling_name varchar(128),
    b_housing_counseling_complete_date date,
    b_legal_entity_type varchar(128),
    b_credit_report_authorization_datetime timestamp,
    b_credit_report_authorization_method varchar(128),
    b_credit_report_authorization_obtained_by_unparsed_name varchar(128),
    b_disabled varchar(128),
    b_usda_annual_child_care_expenses numeric(15,2),
    b_usda_disability_expenses numeric(15,2),
    b_usda_medical_expenses numeric(15,2),
    b_usda_income_from_assets numeric(15,2),
    b_usda_moderate_income_limit numeric(15,2),
    b_hud_employee boolean,
    b_relationship_to_primary_borrower_type varchar(128),
    b_relationship_to_seller_type varchar(128),
    b_preferred_first_name varchar(32),
    b_domestic_relationship_state_type varchar(128),
    b_credit_report_required boolean,
    b_closing_disclosure_signer boolean,
    b_snapshotted_pid bigint
);

alter table staging_octane.borrower owner to deployer;

create index idx_borrower__pid_version
    on staging_octane.borrower (b_pid, b_version);

grant select on staging_octane.borrower to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower to dms_octane_writer;

grant select on staging_octane.borrower to etl_loan;

create table staging_octane.borrower_alias
(
    ba_pid bigint not null
        constraint borrower_alias_pkey
            primary key,
    ba_version integer,
    ba_account_number varchar(32),
    ba_borrower_pid bigint,
    ba_credit_request_pid bigint,
    ba_creditor_name varchar(32),
    ba_first_name varchar(32),
    ba_last_name varchar(32),
    ba_middle_name varchar(32),
    ba_name_suffix varchar(32),
    ba_credit_report_identifier varchar(32)
);

alter table staging_octane.borrower_alias owner to deployer;

create index idx_borrower_alias__pid_version
    on staging_octane.borrower_alias (ba_pid, ba_version);

grant select on staging_octane.borrower_alias to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower_alias to dms_octane_writer;

grant select on staging_octane.borrower_alias to etl_loan;

create table staging_octane.borrower_asset
(
    bas_pid bigint not null
        constraint borrower_asset_pkey
            primary key,
    bas_version integer,
    bas_borrower_pid bigint,
    bas_asset_pid bigint
);

alter table staging_octane.borrower_asset owner to deployer;

create index idx_borrower_asset__pid_version
    on staging_octane.borrower_asset (bas_pid, bas_version);

grant select on staging_octane.borrower_asset to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower_asset to dms_octane_writer;

grant select on staging_octane.borrower_asset to etl_loan;

create table staging_octane.borrower_associated_address
(
    baa_pid bigint not null
        constraint borrower_associated_address_pkey
            primary key,
    baa_version integer,
    baa_borrower_pid bigint,
    baa_credit_request_pid bigint,
    baa_credit_report_identifier varchar(32),
    baa_borrower_associated_address_source_type varchar(128),
    baa_reported_month integer,
    baa_reported_year integer,
    baa_reported_date_verified boolean,
    baa_reported_address_street1 varchar(128),
    baa_reported_address_street2 varchar(128),
    baa_reported_address_city varchar(128),
    baa_reported_address_state varchar(128),
    baa_reported_address_postal_code varchar(128),
    baa_reported_address_country varchar(16),
    baa_current varchar(128),
    baa_internal_note varchar(1024),
    baa_requires_explanation boolean,
    baa_force_requires_explanation boolean,
    baa_borrower_associated_address_explanation_type varchar(128),
    baa_explanation_type_other_explanation varchar(128),
    baa_typo_of_loan_app_address varchar(128),
    baa_known_to_borrower varchar(128),
    baa_owned_by_borrower varchar(128),
    baa_resided_at_address varchar(128),
    baa_used_as_mailing_address varchar(128),
    baa_current_mailing_address varchar(128),
    baa_current_residence varchar(128),
    baa_borrower_resided_at_address_after_date varchar(128)
);

alter table staging_octane.borrower_associated_address owner to deployer;

create index idx_borrower_associated_address__pid_version
    on staging_octane.borrower_associated_address (baa_pid, baa_version);

grant select on staging_octane.borrower_associated_address to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower_associated_address to dms_octane_writer;

grant select on staging_octane.borrower_associated_address to etl_loan;

create table staging_octane.borrower_dependent
(
    bd_pid bigint not null
        constraint borrower_dependent_pkey
            primary key,
    bd_version integer,
    bd_borrower_pid bigint,
    bd_first_name varchar(32),
    bd_last_name varchar(32),
    bd_age integer,
    bd_disabled varchar(128),
    bd_full_time_student varchar(128),
    bd_receives_income varchar(128),
    bd_income_source text,
    bd_income_amount numeric(15,2)
);

alter table staging_octane.borrower_dependent owner to deployer;

create index idx_borrower_dependent__pid_version
    on staging_octane.borrower_dependent (bd_pid, bd_version);

grant select on staging_octane.borrower_dependent to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower_dependent to dms_octane_writer;

grant select on staging_octane.borrower_dependent to etl_loan;

create table staging_octane.borrower_income
(
    bi_pid bigint not null
        constraint borrower_income_pkey
            primary key,
    bi_version integer,
    bi_borrower_pid bigint,
    bi_borrower_income_category_type varchar(128),
    bi_job_gap_reason_type varchar(128),
    bi_job_gap_reason_explanation varchar(1024),
    bi_business_ownership_type varchar(128),
    bi_from_date date,
    bi_through_date date,
    bi_current boolean,
    bi_primary boolean,
    bi_source_name varchar(128),
    bi_source_address_street1 varchar(128),
    bi_source_address_street2 varchar(128),
    bi_source_address_city varchar(128),
    bi_source_address_state varchar(128),
    bi_source_address_postal_code varchar(128),
    bi_source_address_country varchar(128),
    bi_source_phone varchar(32),
    bi_source_phone_extension varchar(16),
    bi_synthetic_unique boolean,
    bi_snapshotted_pid bigint
);

alter table staging_octane.borrower_income owner to deployer;

create index idx_borrower_income__pid_version
    on staging_octane.borrower_income (bi_pid, bi_version);

grant select on staging_octane.borrower_income to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower_income to dms_octane_writer;

grant select on staging_octane.borrower_income to etl_loan;

create table staging_octane.borrower_job_gap
(
    bjg_pid bigint not null
        constraint borrower_job_gap_pkey
            primary key,
    bjg_version integer,
    bjg_borrower_pid bigint,
    bjg_from_date date,
    bjg_through_date date,
    bjg_primary_job boolean
);

alter table staging_octane.borrower_job_gap owner to deployer;

create index idx_borrower_job_gap__pid_version
    on staging_octane.borrower_job_gap (bjg_pid, bjg_version);

grant select on staging_octane.borrower_job_gap to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower_job_gap to dms_octane_writer;

grant select on staging_octane.borrower_job_gap to etl_loan;

create table staging_octane.borrower_user_deal
(
    bud_pid bigint not null
        constraint borrower_user_deal_pkey
            primary key,
    bud_version integer,
    bud_borrower_user_pid bigint,
    bud_deal_pid bigint,
    bud_borrower_pid bigint,
    bud_borrower_user_deal_access_type varchar(128),
    bud_electronic_transaction_consent boolean,
    bud_electronic_transaction_consent_datetime timestamp,
    bud_electronic_transaction_consent_ip_address varchar(32),
    bud_create_datetime timestamp,
    bud_uuid varchar(36)
);

alter table staging_octane.borrower_user_deal owner to deployer;

create index idx_borrower_user_deal__pid_version
    on staging_octane.borrower_user_deal (bud_pid, bud_version);

grant select on staging_octane.borrower_user_deal to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower_user_deal to dms_octane_writer;

grant select on staging_octane.borrower_user_deal to etl_loan;

create table staging_octane.borrower_user_change_email
(
    buce_pid bigint not null
        constraint borrower_user_change_email_pkey
            primary key,
    buce_version integer,
    buce_borrower_user_pid bigint,
    buce_create_datetime timestamp,
    buce_change_email_id varchar(128),
    buce_email varchar(256),
    buce_borrower_user_deal_pid bigint
);

alter table staging_octane.borrower_user_change_email owner to deployer;

create index idx_borrower_user_change_email__pid_version
    on staging_octane.borrower_user_change_email (buce_pid, buce_version);

grant select on staging_octane.borrower_user_change_email to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower_user_change_email to dms_octane_writer;

grant select on staging_octane.borrower_user_change_email to etl_loan;

create table staging_octane.business_income
(
    bui_pid bigint not null
        constraint business_income_pkey
            primary key,
    bui_version integer,
    bui_borrower_income_pid bigint,
    bui_business_income_type varchar(128),
    bui_business_disposition_type varchar(128),
    bui_company_ein varchar(16),
    bui_estimated_net_income_amount numeric(15,2),
    bui_estimated_mode boolean,
    bui_worksheet_monthly_total_amount numeric(15,2),
    bui_monthly_total_amount numeric(15,2),
    bui_borrower_income_percent numeric(11,9),
    bui_calc_method_type varchar(128),
    bui_common_year1_year integer,
    bui_common_year1_year_include boolean,
    bui_common_year1_from_date date,
    bui_common_year1_through_date date,
    bui_common_year1_months numeric(4,2),
    bui_common_year1_annual_total_amount numeric(15,2),
    bui_common_year1_monthly_total_amount numeric(15,2),
    bui_common_year2_year integer,
    bui_common_year2_year_include boolean,
    bui_common_year2_from_date date,
    bui_common_year2_through_date date,
    bui_common_year2_months numeric(4,2),
    bui_common_year2_annual_total_amount numeric(15,2),
    bui_common_year2_monthly_total_amount numeric(15,2),
    bui_common_year3_year integer,
    bui_common_year3_year_include boolean,
    bui_common_year3_from_date date,
    bui_common_year3_through_date date,
    bui_common_year3_months numeric(4,2),
    bui_common_year3_annual_total_amount numeric(15,2),
    bui_common_year3_monthly_total_amount numeric(15,2),
    bui_sole_year1_gross_receipts numeric(15,2),
    bui_sole_year1_other_income_loss_exp numeric(15,2),
    bui_sole_year1_depletion numeric(15,2),
    bui_sole_year1_depreciation numeric(15,2),
    bui_sole_year1_meal_exclusions numeric(15,2),
    bui_sole_year1_business_use_home numeric(15,2),
    bui_sole_year1_amortization_loss numeric(15,2),
    bui_sole_year1_business_miles integer,
    bui_sole_year1_depreciation_mile numeric(11,9),
    bui_sole_year1_mileage_depreciation numeric(15,2),
    bui_sole_year2_gross_receipts numeric(15,2),
    bui_sole_year2_other_income_loss_exp numeric(15,2),
    bui_sole_year2_depletion numeric(15,2),
    bui_sole_year2_depreciation numeric(15,2),
    bui_sole_year2_meal_exclusions numeric(15,2),
    bui_sole_year2_business_use_home numeric(15,2),
    bui_sole_year2_amortization_loss numeric(15,2),
    bui_sole_year2_business_miles integer,
    bui_sole_year2_depreciation_mile numeric(11,9),
    bui_sole_year2_mileage_depreciation numeric(15,2),
    bui_sole_year3_gross_receipts numeric(15,2),
    bui_sole_year3_other_income_loss_exp numeric(15,2),
    bui_sole_year3_depletion numeric(15,2),
    bui_sole_year3_depreciation numeric(15,2),
    bui_sole_year3_meal_exclusions numeric(15,2),
    bui_sole_year3_business_use_home numeric(15,2),
    bui_sole_year3_amortization_loss numeric(15,2),
    bui_sole_year3_business_miles integer,
    bui_sole_year3_depreciation_mile numeric(11,9),
    bui_sole_year3_mileage_depreciation numeric(15,2),
    bui_partner_year1_amortization_loss numeric(15,2),
    bui_partner_year1_depletion numeric(15,2),
    bui_partner_year1_depreciation numeric(15,2),
    bui_partner_year1_guaranteed_payments numeric(15,2),
    bui_partner_year1_meals_exclusion numeric(15,2),
    bui_partner_year1_net_rental_income_loss numeric(15,2),
    bui_partner_year1_notes_payable_less_year numeric(15,2),
    bui_partner_year1_ordinary_income_loss numeric(15,2),
    bui_partner_year1_other_income_loss numeric(15,2),
    bui_partner_year1_ownership_percent numeric(11,9),
    bui_partner_year1_form_k_1_total numeric(15,2),
    bui_partner_year1_form_1065_subtotal numeric(15,2),
    bui_partner_year1_form_1065_total numeric(15,2),
    bui_partner_year2_amortization_loss numeric(15,2),
    bui_partner_year2_depletion numeric(15,2),
    bui_partner_year2_depreciation numeric(15,2),
    bui_partner_year2_guaranteed_payments numeric(15,2),
    bui_partner_year2_meals_exclusion numeric(15,2),
    bui_partner_year2_net_rental_income_loss numeric(15,2),
    bui_partner_year2_notes_payable_less_year numeric(15,2),
    bui_partner_year2_ordinary_income_loss numeric(15,2),
    bui_partner_year2_other_income_loss numeric(15,2),
    bui_partner_year2_ownership_percent numeric(11,9),
    bui_partner_year2_form_k_1_total numeric(15,2),
    bui_partner_year2_form_1065_subtotal numeric(15,2),
    bui_partner_year2_form_1065_total numeric(15,2),
    bui_partner_year3_amortization_loss numeric(15,2),
    bui_partner_year3_depletion numeric(15,2),
    bui_partner_year3_depreciation numeric(15,2),
    bui_partner_year3_guaranteed_payments numeric(15,2),
    bui_partner_year3_meals_exclusion numeric(15,2),
    bui_partner_year3_net_rental_income_loss numeric(15,2),
    bui_partner_year3_notes_payable_less_year numeric(15,2),
    bui_partner_year3_ordinary_income_loss numeric(15,2),
    bui_partner_year3_other_income_loss numeric(15,2),
    bui_partner_year3_ownership_percent numeric(11,9),
    bui_partner_year3_form_k_1_total numeric(15,2),
    bui_partner_year3_form_1065_subtotal numeric(15,2),
    bui_partner_year3_form_1065_total numeric(15,2),
    bui_form_1065_available boolean,
    bui_scorp_year1_ordinary_income_loss numeric(15,2),
    bui_scorp_year1_net_rental_income_loss numeric(15,2),
    bui_scorp_year1_other_income_loss numeric(15,2),
    bui_scorp_year1_depletion numeric(15,2),
    bui_scorp_year1_depreciation numeric(15,2),
    bui_scorp_year1_amortization_loss numeric(15,2),
    bui_scorp_year1_notes_payable_less_year numeric(15,2),
    bui_scorp_year1_meals_exclusion numeric(15,2),
    bui_scorp_year1_ownership_percent numeric(11,9),
    bui_scorp_year1_form_k_1_total numeric(15,2),
    bui_scorp_year1_form_1120s_subtotal numeric(15,2),
    bui_scorp_year1_form_1120s_total numeric(15,2),
    bui_scorp_year2_ordinary_income_loss numeric(15,2),
    bui_scorp_year2_net_rental_income_loss numeric(15,2),
    bui_scorp_year2_other_income_loss numeric(15,2),
    bui_scorp_year2_depletion numeric(15,2),
    bui_scorp_year2_depreciation numeric(15,2),
    bui_scorp_year2_amortization_loss numeric(15,2),
    bui_scorp_year2_notes_payable_less_year numeric(15,2),
    bui_scorp_year2_meals_exclusion numeric(15,2),
    bui_scorp_year2_ownership_percent numeric(11,9),
    bui_scorp_year2_form_k_1_total numeric(15,2),
    bui_scorp_year2_form_1120s_subtotal numeric(15,2),
    bui_scorp_year2_form_1120s_total numeric(15,2),
    bui_scorp_year3_ordinary_income_loss numeric(15,2),
    bui_scorp_year3_net_rental_income_loss numeric(15,2),
    bui_scorp_year3_other_income_loss numeric(15,2),
    bui_scorp_year3_depletion numeric(15,2),
    bui_scorp_year3_depreciation numeric(15,2),
    bui_scorp_year3_amortization_loss numeric(15,2),
    bui_scorp_year3_notes_payable_less_year numeric(15,2),
    bui_scorp_year3_meals_exclusion numeric(15,2),
    bui_scorp_year3_ownership_percent numeric(11,9),
    bui_scorp_year3_form_k_1_total numeric(15,2),
    bui_scorp_year3_form_1120s_subtotal numeric(15,2),
    bui_scorp_year3_form_1120s_total numeric(15,2),
    bui_form_1120s_available boolean,
    bui_corp_year1_taxable_income numeric(15,2),
    bui_corp_year1_total_tax numeric(15,2),
    bui_corp_year1_gain_loss numeric(15,2),
    bui_corp_year1_other_income_loss numeric(15,2),
    bui_corp_year1_depreciation numeric(15,2),
    bui_corp_year1_depletion numeric(15,2),
    bui_corp_year1_domestic_production_activities numeric(15,2),
    bui_corp_year1_other_deductions numeric(15,2),
    bui_corp_year1_net_operating_loss_special_deductions numeric(15,2),
    bui_corp_year1_notes_payable_less_one_year numeric(15,2),
    bui_corp_year1_meals_exclusion numeric(15,2),
    bui_corp_year1_dividends_paid_to_borrower numeric(15,2),
    bui_corp_year1_annual_subtotal numeric(15,2),
    bui_corp_year1_ownership_percent numeric(11,9),
    bui_corp_year1_annual_subtotal_ownership_applied numeric(15,2),
    bui_corp_year2_taxable_income numeric(15,2),
    bui_corp_year2_total_tax numeric(15,2),
    bui_corp_year2_gain_loss numeric(15,2),
    bui_corp_year2_other_income_loss numeric(15,2),
    bui_corp_year2_depreciation numeric(15,2),
    bui_corp_year2_depletion numeric(15,2),
    bui_corp_year2_domestic_production_activities numeric(15,2),
    bui_corp_year2_other_deductions numeric(15,2),
    bui_corp_year2_net_operating_loss_special_deductions numeric(15,2),
    bui_corp_year2_notes_payable_less_one_year numeric(15,2),
    bui_corp_year2_meals_exclusion numeric(15,2),
    bui_corp_year2_dividends_paid_to_borrower numeric(15,2),
    bui_corp_year2_annual_subtotal numeric(15,2),
    bui_corp_year2_ownership_percent numeric(11,9),
    bui_corp_year2_annual_subtotal_ownership_applied numeric(15,2),
    bui_corp_year3_taxable_income numeric(15,2),
    bui_corp_year3_total_tax numeric(15,2),
    bui_corp_year3_gain_loss numeric(15,2),
    bui_corp_year3_other_income_loss numeric(15,2),
    bui_corp_year3_depreciation numeric(15,2),
    bui_corp_year3_depletion numeric(15,2),
    bui_corp_year3_domestic_production_activities numeric(15,2),
    bui_corp_year3_other_deductions numeric(15,2),
    bui_corp_year3_net_operating_loss_special_deductions numeric(15,2),
    bui_corp_year3_notes_payable_less_one_year numeric(15,2),
    bui_corp_year3_meals_exclusion numeric(15,2),
    bui_corp_year3_dividends_paid_to_borrower numeric(15,2),
    bui_corp_year3_annual_subtotal numeric(15,2),
    bui_corp_year3_ownership_percent numeric(11,9),
    bui_corp_year3_annual_subtotal_ownership_applied numeric(15,2),
    bui_sch_f_year1_specific_income_loss numeric(15,2),
    bui_sch_f_year1_nonrecurring_income_loss numeric(15,2),
    bui_sch_f_year1_depreciation numeric(15,2),
    bui_sch_f_year1_amortization_loss_depletion numeric(15,2),
    bui_sch_f_year1_business_use_home numeric(15,2),
    bui_sch_f_year2_specific_income_loss numeric(15,2),
    bui_sch_f_year2_nonrecurring_income_loss numeric(15,2),
    bui_sch_f_year2_depreciation numeric(15,2),
    bui_sch_f_year2_amortization_loss_depletion numeric(15,2),
    bui_sch_f_year2_business_use_home numeric(15,2),
    bui_sch_f_year3_specific_income_loss numeric(15,2),
    bui_sch_f_year3_nonrecurring_income_loss numeric(15,2),
    bui_sch_f_year3_depreciation numeric(15,2),
    bui_sch_f_year3_amortization_loss_depletion numeric(15,2),
    bui_sch_f_year3_business_use_home numeric(15,2),
    bui_underwriter_comments varchar(1024)
);

alter table staging_octane.business_income owner to deployer;

create index idx_business_income__pid_version
    on staging_octane.business_income (bui_pid, bui_version);

grant select on staging_octane.business_income to readonly;

grant delete, insert, select, truncate, update on staging_octane.business_income to dms_octane_writer;

grant select on staging_octane.business_income to etl_loan;

create table staging_octane.consumer_privacy_affected_borrower
(
    cpab_pid bigint not null
        constraint consumer_privacy_affected_borrower_pkey
            primary key,
    cpab_version integer,
    cpab_consumer_privacy_request_pid bigint,
    cpab_deal_pid bigint,
    cpab_borrower_pid bigint
);

alter table staging_octane.consumer_privacy_affected_borrower owner to deployer;

create index idx_consumer_privacy_affected_borrower__pid_version
    on staging_octane.consumer_privacy_affected_borrower (cpab_pid, cpab_version);

grant select on staging_octane.consumer_privacy_affected_borrower to readonly;

grant delete, insert, select, truncate, update on staging_octane.consumer_privacy_affected_borrower to dms_octane_writer;

grant select on staging_octane.consumer_privacy_affected_borrower to etl_loan;

create table staging_octane.job_income
(
    ji_pid bigint not null
        constraint job_income_pkey
            primary key,
    ji_version integer,
    ji_borrower_income_pid bigint,
    ji_estimated_mode boolean,
    ji_line_of_work_years integer,
    ji_voe_written_required boolean,
    ji_voe_written_system boolean,
    ji_voe_written_forced boolean,
    ji_base_income_calc_method_type varchar(128),
    ji_monthly_base_unadjusted_amount numeric(15,2),
    ji_monthly_base_adjustment_amount numeric(15,2),
    ji_overtime_income_calc_method_type varchar(128),
    ji_monthly_overtime_unadjusted_amount numeric(15,2),
    ji_monthly_overtime_adjustment_amount numeric(15,2),
    ji_bonus_income_calc_method_type varchar(128),
    ji_monthly_bonus_unadjusted_amount numeric(15,2),
    ji_monthly_bonus_adjustment_amount numeric(15,2),
    ji_commissions_income_calc_method_type varchar(128),
    ji_monthly_commissions_unadjusted_amount numeric(15,2),
    ji_monthly_commissions_adjustment_amount numeric(15,2),
    ji_tip_income_calc_method_type varchar(128),
    ji_monthly_tip_unadjusted_amount numeric(15,2),
    ji_monthly_tip_adjustment_amount numeric(15,2),
    ji_adjustment_income_calc_method_type varchar(128),
    ji_monthly_adjustment_amount numeric(15,2),
    ji_position varchar(32),
    ji_employer_relative boolean,
    ji_employer_property_seller boolean,
    ji_employer_real_estate_broker boolean,
    ji_military_job boolean,
    ji_estimated_monthly_military_amount numeric(15,2),
    ji_monthly_military_base_pay_amount numeric(15,2),
    ji_monthly_military_clothes_allowance_ungrossed_amount numeric(15,2),
    ji_monthly_military_combat_pay_amount numeric(15,2),
    ji_monthly_military_flight_pay_amount numeric(15,2),
    ji_monthly_military_hazard_pay_amount numeric(15,2),
    ji_monthly_military_housing_allowance_ungrossed_amount numeric(15,2),
    ji_monthly_military_overseas_pay_amount numeric(15,2),
    ji_monthly_military_prop_pay_amount numeric(15,2),
    ji_monthly_military_quarters_allowance_ungrossed_amount numeric(15,2),
    ji_monthly_military_rations_allowance_ungrossed_amount numeric(15,2),
    ji_military_gross_up boolean,
    ji_military_gross_up_percent numeric(11,9),
    ji_monthly_military_clothes_allowance_amount numeric(15,2),
    ji_monthly_military_quarters_allowance_amount numeric(15,2),
    ji_monthly_military_rations_allowance_amount numeric(15,2),
    ji_monthly_military_housing_allowance_amount numeric(15,2),
    ji_military_pay_subtotal_amount numeric(15,2),
    ji_military_allowance_subtotal_amount numeric(15,2),
    ji_monthly_military_total_amount numeric(15,2),
    ji_annual_military_total_amount numeric(15,2),
    ji_job_year1_year integer,
    ji_job_year1_year_include boolean,
    ji_job_year1_from_date date,
    ji_job_year1_through_date date,
    ji_job_year1_months numeric(4,2),
    ji_job_year1_base_input_amount numeric(15,2),
    ji_job_year1_monthly_base_amount numeric(15,2),
    ji_job_year1_overtime_input_amount numeric(15,2),
    ji_job_year1_monthly_overtime_amount numeric(15,2),
    ji_job_year1_bonus_input_amount numeric(15,2),
    ji_job_year1_monthly_bonus_amount numeric(15,2),
    ji_job_year1_commissions_input_amount numeric(15,2),
    ji_job_year1_monthly_commissions_amount numeric(15,2),
    ji_job_year1_tip_input_amount numeric(15,2),
    ji_job_year1_monthly_tip_amount numeric(15,2),
    ji_job_year1_adjustment_input_amount numeric(15,2),
    ji_job_year1_monthly_adjustment_amount numeric(15,2),
    ji_job_year1_monthly_total_amount numeric(15,2),
    ji_job_year1_annual_total_amount numeric(15,2),
    ji_job_year1_monthly_total_commissions_percent numeric(11,9),
    ji_job_year2_year integer,
    ji_job_year2_year_include boolean,
    ji_job_year2_from_date date,
    ji_job_year2_through_date date,
    ji_job_year2_months numeric(4,2),
    ji_job_year2_base_input_amount numeric(15,2),
    ji_job_year2_monthly_base_amount numeric(15,2),
    ji_job_year2_overtime_input_amount numeric(15,2),
    ji_job_year2_monthly_overtime_amount numeric(15,2),
    ji_job_year2_bonus_input_amount numeric(15,2),
    ji_job_year2_monthly_bonus_amount numeric(15,2),
    ji_job_year2_commissions_input_amount numeric(15,2),
    ji_job_year2_monthly_commissions_amount numeric(15,2),
    ji_job_year2_tip_input_amount numeric(15,2),
    ji_job_year2_monthly_tip_amount numeric(15,2),
    ji_job_year2_adjustment_input_amount numeric(15,2),
    ji_job_year2_monthly_adjustment_amount numeric(15,2),
    ji_job_year2_monthly_total_amount numeric(15,2),
    ji_job_year2_annual_total_amount numeric(15,2),
    ji_job_year2_monthly_total_commissions_percent numeric(11,9),
    ji_job_year3_year integer,
    ji_job_year3_year_include boolean,
    ji_job_year3_from_date date,
    ji_job_year3_through_date date,
    ji_job_year3_months numeric(4,2),
    ji_job_year3_base_input_amount numeric(15,2),
    ji_job_year3_monthly_base_amount numeric(15,2),
    ji_job_year3_overtime_input_amount numeric(15,2),
    ji_job_year3_monthly_overtime_amount numeric(15,2),
    ji_job_year3_bonus_input_amount numeric(15,2),
    ji_job_year3_monthly_bonus_amount numeric(15,2),
    ji_job_year3_commissions_input_amount numeric(15,2),
    ji_job_year3_monthly_commissions_amount numeric(15,2),
    ji_job_year3_tip_input_amount numeric(15,2),
    ji_job_year3_monthly_tip_amount numeric(15,2),
    ji_job_year3_adjustment_input_amount numeric(15,2),
    ji_job_year3_monthly_adjustment_amount numeric(15,2),
    ji_job_year3_monthly_total_amount numeric(15,2),
    ji_job_year3_annual_total_amount numeric(15,2),
    ji_job_year3_monthly_total_commissions_percent numeric(11,9),
    ji_estimated_monthly_base_amount numeric(15,2),
    ji_estimated_monthly_bonus_amount numeric(15,2),
    ji_estimated_monthly_overtime_amount numeric(15,2),
    ji_estimated_monthly_commissions_amount numeric(15,2),
    ji_estimated_monthly_tip_amount numeric(15,2),
    ji_estimated_monthly_total_amount numeric(15,2),
    ji_estimated_annual_total_amount numeric(15,2),
    ji_estimated_monthly_total_commissions_percent numeric(11,9),
    ji_worksheet_monthly_base_amount numeric(15,2),
    ji_worksheet_monthly_bonus_amount numeric(15,2),
    ji_worksheet_monthly_overtime_amount numeric(15,2),
    ji_worksheet_monthly_commissions_amount numeric(15,2),
    ji_worksheet_monthly_tip_amount numeric(15,2),
    ji_worksheet_monthly_total_amount numeric(15,2),
    ji_worksheet_annual_total_amount numeric(15,2),
    ji_worksheet_monthly_total_commissions_percent numeric(11,9),
    ji_working_monthly_base_amount numeric(15,2),
    ji_working_monthly_bonus_amount numeric(15,2),
    ji_working_monthly_overtime_amount numeric(15,2),
    ji_working_monthly_commissions_amount numeric(15,2),
    ji_working_monthly_tip_amount numeric(15,2),
    ji_working_monthly_total_amount numeric(15,2),
    ji_working_annual_total_amount numeric(15,2),
    ji_working_monthly_total_commissions_percent numeric(11,9),
    ji_underwriter_comments varchar(1024),
    ji_foreign_income boolean,
    ji_seasonal_income boolean,
    ji_voe_third_party_verifier_order_id varchar(16),
    ji_employer_voe_name varchar(128),
    ji_employer_voe_title varchar(128),
    ji_employer_voe_phone varchar(32),
    ji_employer_voe_phone_extension varchar(16),
    ji_employer_voe_fax varchar(32),
    ji_employer_voe_email varchar(256),
    ji_phone_voe_verify_method_type varchar(128),
    ji_address_voe_verify_method_type varchar(128),
    ji_verified_date date,
    ji_verified_by varchar(128),
    ji_voe_verbal_verify_method_type varchar(128),
    ji_voe_third_party_verifier_type varchar(128),
    ji_employer_other_interested_party boolean,
    ji_employer_other_interested_party_description varchar(128),
    ji_line_of_work_months integer
);

alter table staging_octane.job_income owner to deployer;

create index idx_job_income__pid_version
    on staging_octane.job_income (ji_pid, ji_version);

grant select on staging_octane.job_income to readonly;

grant delete, insert, select, truncate, update on staging_octane.job_income to dms_octane_writer;

grant select on staging_octane.job_income to etl_loan;

create table staging_octane.lp_finding
(
    lpf_pid bigint not null
        constraint lp_finding_pkey
            primary key,
    lpf_version integer,
    lpf_lp_request_pid bigint,
    lpf_lp_finding_message_type varchar(128),
    lpf_finding_yes_no_unknown_type varchar(128),
    lpf_finding_value varchar(128)
);

alter table staging_octane.lp_finding owner to deployer;

create index idx_lp_finding__pid_version
    on staging_octane.lp_finding (lpf_pid, lpf_version);

grant select on staging_octane.lp_finding to readonly;

grant delete, insert, select, truncate, update on staging_octane.lp_finding to dms_octane_writer;

grant select on staging_octane.lp_finding to etl_loan;

create table staging_octane.lp_request_credit
(
    lprc_pid bigint not null
        constraint lp_request_credit_pkey
            primary key,
    lprc_version integer,
    lprc_lp_request_pid bigint,
    lprc_create_datetime timestamp,
    lprc_credit_report_create_datetime timestamp,
    lprc_credit_bureau_type varchar(128),
    lprc_credit_report_identifier varchar(32),
    lprc_credit_report_name varchar(256),
    lprc_aus_credit_service_type varchar(128),
    lprc_borrower_1_borrower_tiny_id_type varchar(128),
    lprc_borrower_2_borrower_tiny_id_type varchar(128)
);

alter table staging_octane.lp_request_credit owner to deployer;

create index idx_lp_request_credit__pid_version
    on staging_octane.lp_request_credit (lprc_pid, lprc_version);

grant select on staging_octane.lp_request_credit to readonly;

grant delete, insert, select, truncate, update on staging_octane.lp_request_credit to dms_octane_writer;

grant select on staging_octane.lp_request_credit to etl_loan;

create table staging_octane.mers_daily_report
(
    medr_pid bigint not null
        constraint mers_daily_report_pkey
            primary key,
    medr_version integer,
    medr_account_pid bigint,
    medr_create_datetime timestamp,
    medr_report_date date,
    medr_import_status_type varchar(128),
    medr_import_status_messages text,
    medr_import_attempt_count integer,
    medr_imported_loan_count integer,
    medr_consolidated_report_text_repository_file_pid bigint
);

alter table staging_octane.mers_daily_report owner to deployer;

create index idx_mers_daily_report__pid_version
    on staging_octane.mers_daily_report (medr_pid, medr_version);

grant select on staging_octane.mers_daily_report to readonly;

grant delete, insert, select, truncate, update on staging_octane.mers_daily_report to dms_octane_writer;

grant select on staging_octane.mers_daily_report to etl_loan;

create table staging_octane.military_service
(
    ms_pid bigint not null
        constraint military_service_pkey
            primary key,
    ms_version integer,
    ms_borrower_pid bigint,
    ms_from_date date,
    ms_through_date date,
    ms_name_used_during_service varchar(128),
    ms_service_number varchar(32),
    ms_military_branch_type varchar(128),
    ms_military_service_type varchar(128),
    ms_military_status_type varchar(128)
);

alter table staging_octane.military_service owner to deployer;

create index idx_military_service__pid_version
    on staging_octane.military_service (ms_pid, ms_version);

grant select on staging_octane.military_service to readonly;

grant delete, insert, select, truncate, update on staging_octane.military_service to dms_octane_writer;

grant select on staging_octane.military_service to etl_loan;

create table staging_octane.other_income
(
    oi_pid bigint not null
        constraint other_income_pkey
            primary key,
    oi_version integer,
    oi_other_income_type varchar(128),
    oi_borrower_income_pid bigint,
    oi_estimated_net_income_amount numeric(15,2),
    oi_estimated_mode boolean,
    oi_worksheet_monthly_total_amount numeric(15,2),
    oi_monthly_total_amount numeric(15,2),
    oi_borrower_income_percent numeric(11,9),
    oi_description varchar(128),
    oi_calc_method_type varchar(128),
    oi_common_year1_year integer,
    oi_common_year1_year_include boolean,
    oi_common_year1_from_date date,
    oi_common_year1_through_date date,
    oi_common_year1_months numeric(4,2),
    oi_common_year1_annual_total_amount numeric(15,2),
    oi_common_year1_monthly_total_amount numeric(15,2),
    oi_common_year2_year integer,
    oi_common_year2_year_include boolean,
    oi_common_year2_from_date date,
    oi_common_year2_through_date date,
    oi_common_year2_months numeric(4,2),
    oi_common_year2_annual_total_amount numeric(15,2),
    oi_common_year2_monthly_total_amount numeric(15,2),
    oi_common_year3_year integer,
    oi_common_year3_year_include boolean,
    oi_common_year3_from_date date,
    oi_common_year3_through_date date,
    oi_common_year3_months numeric(4,2),
    oi_common_year3_annual_total_amount numeric(15,2),
    oi_common_year3_monthly_total_amount numeric(15,2),
    oi_simple_year1_unadjusted_amount numeric(15,2),
    oi_simple_year1_income_federal_tax_exempt boolean,
    oi_simple_year1_tax_exempt_tax_rate_percent numeric(11,9),
    oi_simple_year1_tax_exempt_amount numeric(15,2),
    oi_simple_year2_unadjusted_amount numeric(15,2),
    oi_simple_year2_income_federal_tax_exempt boolean,
    oi_simple_year2_tax_exempt_tax_rate_percent numeric(11,9),
    oi_simple_year2_tax_exempt_amount numeric(15,2),
    oi_simple_year3_unadjusted_amount numeric(15,2),
    oi_simple_year3_income_federal_tax_exempt boolean,
    oi_simple_year3_tax_exempt_tax_rate_percent numeric(11,9),
    oi_simple_year3_tax_exempt_amount numeric(15,2),
    oi_simple_unadjusted_monthly_amount numeric(15,2),
    oi_simple_income_federal_tax_exempt boolean,
    oi_simple_tax_exempt_tax_rate_percent numeric(11,9),
    oi_simple_tax_exempt_amount numeric(15,2),
    oi_simple_calculated_monthly_amount numeric(15,2),
    oi_underwriter_comments varchar(1024),
    oi_mortgage_credit_certificate_issuer_pid bigint,
    oi_mcc_reservation_number varchar(128),
    oi_mcc_reservation_date date,
    oi_mcc_reservation_expiration_date date,
    oi_mcc_commitment_number varchar(128),
    oi_mcc_underwriting_certification_deadline_date date,
    oi_mcc_delivered_by_date date,
    oi_unadjusted_monthly_total_amount numeric(15,2),
    oi_simple_year1_unadjusted_monthly_amount numeric(15,2),
    oi_simple_year2_unadjusted_monthly_amount numeric(15,2),
    oi_simple_year3_unadjusted_monthly_amount numeric(15,2)
);

alter table staging_octane.other_income owner to deployer;

create index idx_other_income__pid_version
    on staging_octane.other_income (oi_pid, oi_version);

grant select on staging_octane.other_income to readonly;

grant delete, insert, select, truncate, update on staging_octane.other_income to dms_octane_writer;

grant select on staging_octane.other_income to etl_loan;

create table staging_octane.proposal
(
    prp_pid bigint not null
        constraint proposal_pkey
            primary key,
    prp_version integer,
    prp_decision_lp_request_pid bigint,
    prp_decision_du_request_pid bigint,
    prp_proposal_type varchar(128),
    prp_description varchar(256),
    prp_doc_level_type varchar(128),
    prp_loan_purpose_type varchar(128),
    prp_name varchar(128),
    prp_create_datetime timestamp,
    prp_effective_funding_date date,
    prp_estimated_funding_date date,
    prp_calculated_earliest_allowed_consummation_date date,
    prp_overridden_earliest_allowed_consummation_date date,
    prp_effective_earliest_allowed_consummation_date date,
    prp_earliest_allowed_consummation_date_override_reason text,
    prp_last_requested_disclosure_date date,
    prp_closing_document_sign_datetime timestamp,
    prp_scheduled_closing_document_sign_datetime timestamp,
    prp_rescission_through_date date,
    prp_rescission_notification_date date,
    prp_rescission_notification_by varchar(256),
    prp_rescission_notification_type varchar(128),
    prp_rescission_effective_date date,
    prp_first_payment_date date,
    prp_first_payment_date_auto_compute boolean,
    prp_property_usage_type varchar(128),
    prp_estimated_property_value_amount numeric(15),
    prp_smart_charges_enabled boolean,
    prp_charges_updated_datetime timestamp,
    prp_smart_docs_enabled boolean,
    prp_docs_enabled_datetime timestamp,
    prp_request_fha_mip_refund_required boolean,
    prp_request_recording_fees_required boolean,
    prp_request_property_taxes_required boolean,
    prp_property_tax_request_error_messages text,
    prp_fha_mip_refund_request_input_error boolean,
    prp_recording_fees_request_input_error boolean,
    prp_property_taxes_request_input_error boolean,
    prp_publish boolean,
    prp_publish_date date,
    prp_ipc_auto_compute boolean,
    prp_ipc_limit_percent numeric(11,9),
    prp_ipc_maximum_amount_allowed numeric(15,2),
    prp_ipc_amount numeric(15,2),
    prp_ipc_percent numeric(11,9),
    prp_ipc_financing_concession_amount numeric(15,2),
    prp_ipc_non_cash_concession_amount numeric(15,2),
    prp_sale_price_amount numeric(15),
    prp_structure_type varchar(128),
    prp_deal_pid bigint,
    prp_gfe_interest_rate_expiration_date date,
    prp_gfe_lock_duration_days integer,
    prp_gfe_lock_before_settlement_days integer,
    prp_proposal_expiration_date date,
    prp_uuts_master_contact_name varchar(128),
    prp_uuts_master_contact_title varchar(128),
    prp_uuts_master_office_phone varchar(32),
    prp_uuts_master_office_phone_extension varchar(16),
    prp_underwrite_risk_assessment_type varchar(128),
    prp_underwriting_comments varchar(1024),
    prp_reserves_auto_compute boolean,
    prp_reserves_amount numeric(15,2),
    prp_reserves_months integer,
    prp_underwrite_disposition_type varchar(128),
    prp_underwrite_publish_date date,
    prp_underwrite_expiration_date date,
    prp_usda_gsa_sam_exclusion varchar(128),
    prp_usda_gsa_sam_checked_date date,
    prp_usda_rd_single_family_housing_type varchar(128),
    prp_underwrite_method_type varchar(128),
    prp_mi_required boolean,
    prp_decision_credit_score_borrower_pid bigint,
    prp_decision_credit_score integer,
    prp_estimated_credit_score integer,
    prp_effective_credit_score integer,
    prp_mortgagee_builder_seller_relationship varchar(128),
    prp_fha_prior_agency_case_id varchar(32),
    prp_fha_prior_agency_case_endorsement_date date,
    prp_fha_refinance_authorization_number varchar(16),
    prp_fha_refinance_authorization_expiration_date date,
    prp_fhac_refinance_authorization_messages text,
    prp_hud_fha_de_approval_type varchar(128),
    prp_owner_occupancy_not_required boolean,
    prp_va_monthly_utilities_included varchar(128),
    prp_va_maintenance_utilities_auto_compute boolean,
    prp_va_monthly_maintenance_utilities_amount numeric(15,2),
    prp_va_maintenance_utilities_per_square_feet_amount numeric(15,2),
    prp_household_size_count integer,
    prp_va_past_credit_record_type varchar(128),
    prp_va_meets_credit_standards varchar(128),
    prp_va_prior_paid_in_full_loan_number varchar(32),
    prp_note_date date,
    prp_security_instrument_type varchar(128),
    prp_trustee_pid bigint,
    prp_trustee_name varchar(128),
    prp_trustee_address_street1 varchar(128),
    prp_trustee_address_street2 varchar(128),
    prp_trustee_address_city varchar(128),
    prp_trustee_address_state varchar(128),
    prp_trustee_address_postal_code varchar(128),
    prp_trustee_address_country varchar(128),
    prp_trustee_mers_org_id varchar(7),
    prp_trustee_phone_number varchar(32),
    prp_fre_ctp_closing_feature_type varchar(128),
    prp_fre_ctp_first_payment_due_date date,
    prp_purchase_contract_date date,
    prp_purchase_contract_financing_contingency_date date,
    prp_purchase_contract_funding_date date,
    prp_effective_property_value_type varchar(128),
    prp_effective_property_value_amount numeric(15),
    prp_decision_appraised_value_amount numeric(15),
    prp_fha_va_reasonable_value_amount numeric(15),
    prp_cd_clear_date date,
    prp_disaster_declaration_check_date_type varchar(128),
    prp_disaster_declaration_check_date date,
    prp_any_disaster_declaration_before_appraisal boolean,
    prp_any_disaster_declaration_after_appraisal boolean,
    prp_any_disaster_declaration boolean,
    prp_early_first_payment varchar(128),
    prp_property_acquired_through_inheritance varchar(128),
    prp_property_acquired_through_ancillary_relief varchar(128),
    prp_delayed_financing_exception_guidelines_applicable boolean,
    prp_delayed_financing_exception_verified boolean,
    prp_effective_property_value_explanation_type varchar(128),
    prp_taxes_escrowed varchar(128),
    prp_flood_insurance_applicable varchar(128),
    prp_windstorm_insurance_applicable varchar(128),
    prp_earthquake_insurance_applicable varchar(128),
    prp_arms_length varchar(128),
    prp_fha_non_arms_length_ltv_exception_type varchar(128),
    prp_fha_non_arms_length_ltv_exception_verified boolean,
    prp_escrow_cushion_months integer,
    prp_escrow_cushion_months_auto_compute boolean,
    prp_fha_eligible_maximum_financing varchar(128),
    prp_hazard_insurance_applicable varchar(128),
    prp_property_repairs_required_type varchar(128),
    prp_property_repairs_description varchar(1024),
    prp_property_repairs_cost_amount numeric(15,2),
    prp_property_repairs_holdback_calc_type varchar(128),
    prp_property_repairs_holdback_amount numeric(15,2),
    prp_property_repairs_holdback_payer_type varchar(128),
    prp_property_repairs_holdback_administrator varchar(128),
    prp_property_repairs_holdback_required_completion_date date,
    prp_property_repairs_completed_notification_date date,
    prp_property_repairs_inspection_ordered_date date,
    prp_property_repairs_inspection_completed_date date,
    prp_property_repairs_funds_released_contractor_date date,
    prp_anti_steering_lowest_rate_option_rate_percent numeric(11,9),
    prp_anti_steering_lowest_rate_option_fee_amount numeric(15,2),
    prp_anti_steering_lowest_rate_wo_neg_option_rate_percent numeric(11,9),
    prp_anti_steering_lowest_rate_wo_neg_option_fee_amount numeric(15,2),
    prp_anti_steering_lowest_cost_option_rate_percent numeric(11,9),
    prp_anti_steering_lowest_cost_option_fee_amount numeric(15,2),
    prp_initial_uw_submit_datetime timestamp,
    prp_va_notice_of_value_source_type varchar(128),
    prp_va_notice_of_value_date date,
    prp_va_notice_of_value_estimated_reasonable_value_amount numeric(15),
    prp_sar_significant_adjustments boolean,
    prp_separate_transaction_for_land_acquisition varchar(128),
    prp_land_acquisition_transaction_date date,
    prp_land_acquisition_price numeric(15),
    prp_cash_out_reason_home_improvement boolean,
    prp_cash_out_reason_debt_or_debt_consolidation boolean,
    prp_cash_out_reason_personal_use boolean,
    prp_cash_out_reason_future_investment_not_under_contract boolean,
    prp_cash_out_reason_future_investment_under_contract boolean,
    prp_cash_out_reason_other boolean,
    prp_cash_out_reason_other_text varchar(128),
    prp_decision_veteran_borrower_pid bigint,
    prp_signed_closing_doc_received_datetime timestamp,
    prp_other_lender_requires_appraisal boolean,
    prp_other_lender_requires_appraisal_reason text,
    prp_texas_equity_determination_datetime timestamp,
    prp_texas_equity_conversion_determination_datetime timestamp,
    prp_texas_equity_determination_datetime_override boolean,
    prp_texas_equity_determination_datetime_override_reason text,
    prp_texas_equity_conversion_determination_datetime_override boolean,
    prp_texas_equity_conversion_determ_datetime_override_reason text,
    prp_cema varchar(128),
    prp_cema_borrower_savings numeric(15,2),
    prp_any_vesting_changes varchar(128),
    prp_vesting_change_titleholder_added varchar(128),
    prp_vesting_change_titleholder_removed varchar(128),
    prp_vesting_change_titleholder_name_change varchar(128),
    prp_deed_taxes_applicable boolean,
    prp_deed_taxes_applicable_explanation varchar(1024),
    prp_deed_taxes_auto_compute boolean,
    prp_deed_taxes_auto_compute_override_reason varchar(1024),
    prp_intent_to_proceed_date date,
    prp_intent_to_proceed_type varchar(128),
    prp_intent_to_proceed_provider_unparsed_name varchar(128),
    prp_intent_to_proceed_obtainer_unparsed_name varchar(128),
    prp_cash_out_reason_student_loans boolean,
    prp_household_income_exclusive_edit boolean,
    prp_purchase_contract_received_date date,
    prp_down_payment_percent_mode boolean,
    prp_lender_escrow_loan_amount numeric(15,2),
    prp_underwrite_disposition_note varchar(1024),
    prp_rescission_applicable boolean,
    prp_area_median_income numeric(15,2),
    prp_total_income_to_ami_ratio numeric(14,9),
    prp_cr_tracker_url varchar(1024),
    prp_construction_borrower_contribution_amount numeric(15,2),
    prp_construction_lot_ownership_status_type varchar(128),
    prp_intent_to_proceed_provided boolean,
    prp_effective_signing_location_state varchar(128),
    prp_effective_signing_location_city varchar(128),
    prp_va_required_guaranty_amount numeric(15,2),
    prp_va_amount_used_to_calculate_maximum_guaranty numeric(15,2),
    prp_va_actual_guaranty_amount numeric(15,2),
    prp_last_corrective_disclosure_processed_datetime timestamp,
    prp_user_entered_note_date date,
    prp_effective_note_date date,
    prp_lender_escrow_loan_due_date date,
    prp_va_maximum_base_loan_amount numeric(15,2),
    prp_va_maximum_funding_fee_amount numeric(15,2),
    prp_va_maximum_total_loan_amount numeric(15,2),
    prp_va_required_cash_amount numeric(15,2),
    prp_va_guaranty_percent numeric(11,9),
    prp_gse_version_type varchar(128),
    prp_minimum_household_income_amount numeric(15,2),
    prp_minimum_residual_income_amount numeric(15,2),
    prp_minimum_residual_income_auto_compute boolean,
    prp_financed_property_improvements_category_type varchar(128),
    prp_adjusted_as_is_value_amount numeric(15),
    prp_after_improved_value_amount numeric(15),
    prp_hud_consultant varchar(128),
    prp_disclosure_action_type varchar(128),
    prp_financed_property_improvements boolean,
    prp_estimated_hard_construction_cost_amount bigint,
    prp_initial_uw_disposition_datetime timestamp,
    prp_preapproval_uw_submit_datetime timestamp,
    prp_preapproval_uw_disposition_datetime timestamp,
    prp_down_payment_percent numeric(11,9),
    prp_cash_out_reason_investment_or_business_property boolean,
    prp_cash_out_reason_business_debt_or_debt_consolidation boolean,
    prp_non_business_cash_out_reason_acknowledged varchar(128),
    prp_va_energy_efficient_improvements_amount numeric(15,2),
    prp_proposed_additional_monthly_payment numeric(17,2),
    prp_term_borrower_intends_to_retain_property integer
);

alter table staging_octane.proposal owner to deployer;

create index idx_proposal__pid_version
    on staging_octane.proposal (prp_pid, prp_version);

grant select on staging_octane.proposal to readonly;

grant delete, insert, select, truncate, update on staging_octane.proposal to dms_octane_writer;

grant select on staging_octane.proposal to etl_loan;

create table staging_octane.aus_request_number_ticker
(
    arnt_pid bigint not null
        constraint aus_request_number_ticker_pkey
            primary key,
    arnt_version integer,
    arnt_proposal_pid bigint,
    arnt_next_aus_request_number integer
);

alter table staging_octane.aus_request_number_ticker owner to deployer;

create index idx_aus_request_number_ticker__pid_version
    on staging_octane.aus_request_number_ticker (arnt_pid, arnt_version);

grant select on staging_octane.aus_request_number_ticker to readonly;

grant delete, insert, select, truncate, update on staging_octane.aus_request_number_ticker to dms_octane_writer;

grant select on staging_octane.aus_request_number_ticker to etl_loan;

create table staging_octane.construction_draw
(
    cd_pid bigint not null
        constraint construction_draw_pkey
            primary key,
    cd_version integer,
    cd_proposal_pid bigint,
    cd_construction_draw_type varchar(128),
    cd_construction_draw_status_type varchar(128),
    cd_scheduled_disbursement_date date,
    cd_confirmation_datetime timestamp,
    cd_inspection_datetime timestamp,
    cd_disbursement_datetime timestamp,
    cd_boarded_datetime timestamp,
    cd_voided_datetime timestamp,
    cd_construction_draw_notes varchar(1024),
    cd_total_draw_amount numeric(15,2),
    cd_borrower_contribution_amount numeric(15,2),
    cd_lender_contribution_amount numeric(15,2),
    cd_construction_draw_number integer,
    cd_construction_draw_disbursed_at_closing boolean
);

alter table staging_octane.construction_draw owner to deployer;

create index idx_construction_draw__pid_version
    on staging_octane.construction_draw (cd_pid, cd_version);

grant select on staging_octane.construction_draw to readonly;

grant delete, insert, select, truncate, update on staging_octane.construction_draw to dms_octane_writer;

grant select on staging_octane.construction_draw to etl_loan;

create table staging_octane.construction_draw_number_ticker
(
    cdnt_pid bigint not null
        constraint construction_draw_number_ticker_pkey
            primary key,
    cdnt_version integer,
    cdnt_proposal_pid bigint,
    cdnt_next_construction_draw_number integer
);

alter table staging_octane.construction_draw_number_ticker owner to deployer;

create index idx_construction_draw_number_ticker__pid_version
    on staging_octane.construction_draw_number_ticker (cdnt_pid, cdnt_version);

grant select on staging_octane.construction_draw_number_ticker to readonly;

grant delete, insert, select, truncate, update on staging_octane.construction_draw_number_ticker to dms_octane_writer;

grant select on staging_octane.construction_draw_number_ticker to etl_loan;

create table staging_octane.credit_inquiry
(
    ci_pid bigint not null
        constraint credit_inquiry_pkey
            primary key,
    ci_version integer,
    ci_proposal_pid bigint,
    ci_credit_request_pid bigint,
    ci_inquiry_date date,
    ci_name varchar(128),
    ci_address_street1 varchar(128),
    ci_address_street2 varchar(128),
    ci_address_city varchar(128),
    ci_address_state varchar(128),
    ci_address_postal_code varchar(128),
    ci_address_country varchar(128),
    ci_phone varchar(32),
    ci_credit_inquiry_result_type varchar(128),
    ci_credit_business_type varchar(128),
    ci_credit_loan_type varchar(128),
    ci_equifax_included boolean,
    ci_experian_included boolean,
    ci_trans_union_included boolean,
    ci_explanation_type varchar(128),
    ci_explanation_info varchar(1024),
    ci_credit_report_identifier varchar(32),
    ci_inquiry_date_provided boolean
);

alter table staging_octane.credit_inquiry owner to deployer;

create index idx_credit_inquiry__pid_version
    on staging_octane.credit_inquiry (ci_pid, ci_version);

grant select on staging_octane.credit_inquiry to readonly;

grant delete, insert, select, truncate, update on staging_octane.credit_inquiry to dms_octane_writer;

grant select on staging_octane.credit_inquiry to etl_loan;

create table staging_octane.borrower_credit_inquiry
(
    bci_pid bigint not null
        constraint borrower_credit_inquiry_pkey
            primary key,
    bci_version integer,
    bci_credit_inquiry_pid bigint,
    bci_borrower_pid bigint
);

alter table staging_octane.borrower_credit_inquiry owner to deployer;

create index idx_borrower_credit_inquiry__pid_version
    on staging_octane.borrower_credit_inquiry (bci_pid, bci_version);

grant select on staging_octane.borrower_credit_inquiry to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower_credit_inquiry to dms_octane_writer;

grant select on staging_octane.borrower_credit_inquiry to etl_loan;

create table staging_octane.deal_snapshot
(
    desn_pid bigint not null
        constraint deal_snapshot_pkey
            primary key,
    desn_version integer,
    desn_snapshot_proposal_pid bigint,
    desn_decision_appraisal_condition_type varchar(128),
    desn_lender_lock_effective_expiration_datetime_main timestamp,
    desn_lender_lock_effective_expiration_datetime_piggyback timestamp,
    desn_lender_lock_status_type_main varchar(128),
    desn_lender_lock_status_type_piggyback varchar(128),
    desn_lender_lock_id_main varchar(11),
    desn_lender_lock_id_piggyback varchar(11),
    desn_preferred_vendor_used boolean,
    desn_lender_lock_start_datetime_main timestamp,
    desn_lender_lock_start_datetime_piggyback timestamp,
    desn_lender_lock_effective_duration_days_main integer,
    desn_lender_lock_effective_duration_days_piggyback integer,
    desn_lead_source_name varchar(128),
    desn_appraisal_rush_request boolean,
    desn_appraisal_transfer_specified boolean,
    desn_borrower_requires_appraisal boolean,
    desn_lender_requires_appraisal boolean,
    desn_product_requires_appraisal boolean,
    desn_override_calculated_appraisal_required boolean,
    desn_decision_appraisal_appraised_value_amount numeric(15),
    desn_appraisal_required boolean,
    desn_lender_concession_total_approved_amount_main numeric(15,2),
    desn_lender_concession_total_approved_amount_piggyback numeric(15,2),
    desn_relock_fee_gross_amount_main numeric(15,2),
    desn_relock_fee_gross_amount_piggyback numeric(15,2),
    desn_relock_fee_amount_less_concessions_main numeric(15,2),
    desn_relock_fee_amount_less_concessions_piggyback numeric(15,2),
    desn_relock_fee_amount_concessed_main numeric(15,2),
    desn_relock_fee_amount_concessed_piggyback numeric(15,2),
    desn_lock_extension_fee_gross_amount_main numeric(15,2),
    desn_lock_extension_fee_gross_amount_piggyback numeric(15,2),
    desn_lock_extension_fee_amount_less_concessions_main numeric(15,2),
    desn_lock_extension_fee_amount_less_concessions_piggyback numeric(15,2),
    desn_lock_extension_fee_amount_concessed_main numeric(15,2),
    desn_lock_extension_fee_amount_concessed_piggyback numeric(15,2),
    desn_lender_concession_remaining_amount_main numeric(15,2),
    desn_lender_concession_remaining_amount_piggyback numeric(15,2),
    desn_charge_credit_for_interest_rate_main numeric(15,2),
    desn_charge_credit_for_interest_rate_piggyback numeric(15,2)
);

alter table staging_octane.deal_snapshot owner to deployer;

create index idx_deal_snapshot__pid_version
    on staging_octane.deal_snapshot (desn_pid, desn_version);

grant select on staging_octane.deal_snapshot to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_snapshot to dms_octane_writer;

grant select on staging_octane.deal_snapshot to etl_loan;

create table staging_octane.docusign_package
(
    dcsp_pid bigint not null
        constraint docusign_package_pkey
            primary key,
    dcsp_version integer,
    dcsp_proposal_pid bigint,
    dcsp_envelope_id varchar(128),
    dcsp_esign_package_status_type varchar(128),
    dcsp_status_datetime timestamp
);

alter table staging_octane.docusign_package owner to deployer;

create index idx_docusign_package__pid_version
    on staging_octane.docusign_package (dcsp_pid, dcsp_version);

grant select on staging_octane.docusign_package to readonly;

grant delete, insert, select, truncate, update on staging_octane.docusign_package to dms_octane_writer;

grant select on staging_octane.docusign_package to etl_loan;

create table staging_octane.master_property_insurance
(
    mpi_pid bigint not null
        constraint master_property_insurance_pkey
            primary key,
    mpi_version integer,
    mpi_proposal_pid bigint,
    mpi_master_property_insurance_type varchar(128),
    mpi_policy_effective_date date,
    mpi_policy_expiration_date date,
    mpi_next_payment_date date,
    mpi_policy_property_coverage_amount numeric(15),
    mpi_policy_liability_coverage_amount numeric(15),
    mpi_policy_fidelity_coverage_amount numeric(15),
    mpi_policy_deductible_amount numeric(15),
    mpi_replacement_cost_amount numeric(15),
    mpi_coinsurance varchar(128),
    mpi_agreed_amount_endorsement varchar(128),
    mpi_company_name varchar(128),
    mpi_first_name varchar(32),
    mpi_middle_name varchar(32),
    mpi_last_name varchar(32),
    mpi_name_suffix varchar(32),
    mpi_title varchar(128),
    mpi_email varchar(256),
    mpi_mobile_phone varchar(32),
    mpi_office_phone varchar(32),
    mpi_office_phone_extension varchar(16),
    mpi_fax varchar(32),
    mpi_address_street1 varchar(128),
    mpi_address_street2 varchar(128),
    mpi_address_city varchar(128),
    mpi_address_state varchar(128),
    mpi_address_postal_code varchar(128),
    mpi_address_country varchar(16),
    mpi_policy_id varchar(128)
);

alter table staging_octane.master_property_insurance owner to deployer;

create index idx_master_property_insurance__pid_version
    on staging_octane.master_property_insurance (mpi_pid, mpi_version);

grant select on staging_octane.master_property_insurance to readonly;

grant delete, insert, select, truncate, update on staging_octane.master_property_insurance to dms_octane_writer;

grant select on staging_octane.master_property_insurance to etl_loan;

create table staging_octane.mi_integration_vendor_request
(
    mivr_pid bigint not null
        constraint mi_integration_vendor_request_pkey
            primary key,
    mivr_version integer,
    mivr_proposal_pid bigint,
    mivr_create_datetime timestamp,
    mivr_mi_company_name_type varchar(128),
    mivr_request_type varchar(128),
    mivr_mi_payment_type varchar(128),
    mivr_mi_payer_type varchar(128),
    mivr_mi_coverage_percentage numeric(11,9),
    mivr_mi_upfront_percentage numeric(11,9),
    mivr_mi_initial_monthly_annual_percentage numeric(11,9),
    mivr_mi_renewal_monthly_annual_percentage numeric(11,9),
    mivr_mi_initial_duration_months integer,
    mivr_mi_rate_quote_id varchar(128),
    mivr_mi_certificate_id varchar(128),
    mivr_request_status_type varchar(128),
    mivr_request_time_to_completion_ms bigint,
    mivr_eligible_mi_products boolean,
    mivr_input_errors text,
    mivr_service_errors text,
    mivr_internal_errors text,
    mivr_request_xml_pid bigint,
    mivr_response_xml_pid bigint,
    mivr_response_pdf_file_pid bigint
);

alter table staging_octane.mi_integration_vendor_request owner to deployer;

create index idx_mi_integration_vendor_request__pid_version
    on staging_octane.mi_integration_vendor_request (mivr_pid, mivr_version);

grant select on staging_octane.mi_integration_vendor_request to readonly;

grant delete, insert, select, truncate, update on staging_octane.mi_integration_vendor_request to dms_octane_writer;

grant select on staging_octane.mi_integration_vendor_request to etl_loan;

create table staging_octane.loan
(
    l_pid bigint not null
        constraint loan_pkey
            primary key,
    l_version integer,
    l_proposal_pid bigint,
    l_offering_pid bigint,
    l_product_terms_pid bigint,
    l_mortgage_type varchar(128),
    l_interest_only_type varchar(128),
    l_buydown_schedule_type varchar(128),
    l_prepay_penalty_schedule_type varchar(128),
    l_aus_type varchar(128),
    l_arm_index_datetime timestamp,
    l_arm_index_current_value_percent numeric(11,9),
    l_arm_margin_percent numeric(11,9),
    l_base_loan_amount numeric(17,2),
    l_buydown_contributor_type varchar(128),
    l_target_cash_out_amount numeric(15,2),
    l_heloc_maximum_balance_amount numeric(15),
    l_note_rate_percent numeric(11,9),
    l_initial_note_rate_percent numeric(11,9),
    l_lien_priority_type varchar(128),
    l_loan_amount numeric(17,2),
    l_financed_amount numeric(15),
    l_ltv_ratio_percent numeric(11,9),
    l_mi_requirement_ltv_ratio_percent numeric(11,9),
    l_mi_auto_compute boolean,
    l_mi_no_mi_product boolean,
    l_mi_input_type varchar(128),
    l_mi_company_name_type varchar(128),
    l_mi_certificate_id varchar(32),
    l_mi_premium_refundable_type varchar(128),
    l_mi_initial_calculation_type varchar(128),
    l_mi_renewal_calculation_type varchar(128),
    l_mi_payer_type varchar(128),
    l_mi_coverage_percent numeric(11,9),
    l_mi_ltv_cutoff_percent numeric(11,9),
    l_mi_midpoint_cutoff_required boolean,
    l_mi_required_monthly_payment_count integer,
    l_mi_actual_monthly_payment_count integer,
    l_mi_payment_type varchar(128),
    l_mi_upfront_amount numeric(15,2),
    l_mi_upfront_percent numeric(11,9),
    l_mi_initial_monthly_payment_amount numeric(15,2),
    l_mi_renewal_monthly_payment_annual_percent numeric(11,9),
    l_mi_renewal_monthly_payment_amount numeric(15,2),
    l_mi_initial_duration_months integer,
    l_mi_initial_monthly_payment_annual_percent numeric(11,9),
    l_mi_initial_calculated_rate_type varchar(128),
    l_mi_renewal_calculated_rate_type varchar(128),
    l_mi_base_rate_label varchar(16000),
    l_mi_base_monthly_payment_annual_percent numeric(11,9),
    l_mi_base_upfront_percent numeric(11,9),
    l_mi_base_monthly_payment_amount numeric(15,2),
    l_mi_base_upfront_payment_amount numeric(15,2),
    l_qualifying_rate_type varchar(128),
    l_qualifying_rate_input_percent numeric(11,9),
    l_qualifying_rate_percent numeric(11,9),
    l_fha_program_code_type varchar(128),
    l_fha_principal_write_down boolean,
    l_fhac_case_assignment_messages text,
    l_initial_pi_amount numeric(15,2),
    l_qualifying_pi_amount numeric(15,2),
    l_base_note_rate_percent numeric(11,9),
    l_base_arm_margin_percent numeric(11,9),
    l_base_price_percent numeric(11,9),
    l_lock_price_percent numeric(11,9),
    l_lock_duration_days integer,
    l_lock_commitment_type varchar(128),
    l_product_choice_datetime timestamp,
    l_hmda_purchaser_of_loan_2017_type varchar(128),
    l_hmda_purchaser_of_loan_2018_type varchar(128),
    l_texas_equity varchar(128),
    l_texas_equity_auto varchar(128),
    l_fnm_mbs_investor_contract_id varchar(6),
    l_base_guaranty_fee_basis_points numeric(15,2),
    l_guaranty_fee_basis_points numeric(15,2),
    l_guaranty_fee_after_alternate_payment_method_basis_points numeric(15,2),
    l_fnm_investor_product_plan_id varchar(5),
    l_uldd_loan_comment varchar(60),
    l_principal_curtailment_amount numeric(15,2),
    l_mi_lender_paid_rate_adjustment_percent numeric(11,9),
    l_apr numeric(11,9),
    l_finance_charge_amount numeric(15,2),
    l_apor_percent numeric(11,9),
    l_apor_date date,
    l_hmda_rate_spread_percent numeric(11,9),
    l_hoepa_apr numeric(11,9),
    l_hoepa_rate_spread numeric(11,9),
    l_hoepa_fees_dollar_amount numeric(15,2),
    l_hmda_hoepa_status_type varchar(128),
    l_rate_sheet_undiscounted_rate_percent numeric(11,9),
    l_effective_undiscounted_rate_percent numeric(11,9),
    l_last_unprocessed_changes_datetime timestamp,
    l_locked_price_change_percent numeric(11,9),
    l_interest_rate_fee_change_amount numeric(15,2),
    l_lender_concession_candidate boolean,
    l_durp_eligibility_opt_out boolean,
    l_qualified_mortgage_status_type varchar(128),
    l_qualified_mortgage boolean,
    l_lqa_purchase_eligibility_type varchar(128),
    l_student_loan_cash_out_refinance boolean,
    l_mi_rate_quote_id varchar(128),
    l_mi_integration_vendor_request_pid bigint,
    l_secondary_clear_to_commit boolean,
    l_qm_eligible boolean,
    l_fha_endorsement_date date,
    l_va_guaranty_date date,
    l_usda_guarantee_date date,
    l_hpml boolean,
    l_qualified_mortgage_rule_version_type varchar(128),
    l_qualified_mortgage_apr numeric(11,9),
    l_qualified_mortgage_max_allowed_rate_spread numeric(11,9),
    l_buyup_buydown_basis_points numeric(15,2),
    l_va_agency_case_id varchar(32),
    l_fha_agency_case_id varchar(32),
    l_usda_agency_case_id varchar(32),
    l_va_agency_case_id_assigned_date date,
    l_fha_agency_case_id_assigned_date date,
    l_usda_agency_case_id_assigned_date date,
    l_post_interest_only_first_payment_date date
);

alter table staging_octane.loan owner to deployer;

create index idx_loan__pid_version
    on staging_octane.loan (l_pid, l_version);

grant select on staging_octane.loan to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan to dms_octane_writer;

grant select on staging_octane.loan to etl_loan;

create table staging_octane.circumstance_change
(
    cc_pid bigint not null
        constraint circumstance_change_pkey
            primary key,
    cc_version integer,
    cc_loan_pid bigint,
    cc_create_datetime timestamp,
    cc_circumstance_change_type varchar(128),
    cc_source_unparsed_name varchar(128),
    cc_expired boolean,
    cc_previous_formatted_value varchar(1024),
    cc_to_formatted_value varchar(1024),
    cc_expiration_date date,
    cc_system_added boolean
);

alter table staging_octane.circumstance_change owner to deployer;

create index idx_circumstance_change__pid_version
    on staging_octane.circumstance_change (cc_pid, cc_version);

grant select on staging_octane.circumstance_change to readonly;

grant delete, insert, select, truncate, update on staging_octane.circumstance_change to dms_octane_writer;

grant select on staging_octane.circumstance_change to etl_loan;

create table staging_octane.ernst_request
(
    enst_pid bigint not null
        constraint ernst_request_pkey
            primary key,
    enst_version integer,
    enst_loan_pid bigint,
    enst_response_deal_system_file_pid bigint,
    enst_auto_compute boolean,
    enst_create_datetime timestamp,
    enst_ernst_request_status_type varchar(128),
    enst_error_messages text,
    enst_state varchar(2),
    enst_ernst_page_rec varchar(16),
    enst_sub_jurisdiction_name varchar(128),
    enst_torrens boolean,
    enst_security_instrument_request_type varchar(128),
    enst_security_instrument_index_fee_requested boolean,
    enst_security_instrument_index_fee_grantor_count integer,
    enst_security_instrument_index_fee_grantees_count integer,
    enst_security_instrument_index_fee_surnames_count integer,
    enst_security_instrument_index_fee_signatures_count integer,
    enst_security_instrument_page_count integer,
    enst_security_instrument_modification_amendment_page_count integer,
    enst_security_instrument_page_breakdown varchar(1024),
    enst_mortgage_new_debt_amount numeric(15),
    enst_mortgage_original_debt_amount numeric(15),
    enst_mortgage_unpaid_balance_amount numeric(15,2),
    enst_deed_request_type varchar(128),
    enst_deed_index_fee_requested boolean,
    enst_deed_index_fee_grantor_count integer,
    enst_deed_index_fee_grantees_count integer,
    enst_deed_index_fee_surnames_count integer,
    enst_deed_index_fee_signatures_count integer,
    enst_deed_page_count integer,
    enst_deed_page_breakdown varchar(256),
    enst_deed_consideration_amount numeric(15),
    enst_deed_amendment_page_count integer,
    enst_include_assignment boolean,
    enst_assign_index_fee_requested boolean,
    enst_assign_index_fee_grantor_count integer,
    enst_assign_index_fee_grantees_count integer,
    enst_assign_index_fee_surnames_count integer,
    enst_assign_index_fee_signatures_count integer,
    enst_assignment_page_count_per_doc integer,
    enst_assignment_count integer,
    enst_include_poa boolean,
    enst_poa_page_count integer,
    enst_include_subordination boolean,
    enst_subord_index_fee_requested boolean,
    enst_subord_index_fee_grantor_count integer,
    enst_subord_index_fee_grantees_count integer,
    enst_subord_index_fee_surnames_count integer,
    enst_subord_index_fee_signatures_count integer,
    enst_subordination_page_count_per_doc integer,
    enst_subordination_count integer,
    enst_loan_position_type varchar(128)
);

alter table staging_octane.ernst_request owner to deployer;

create index idx_ernst_request__pid_version
    on staging_octane.ernst_request (enst_pid, enst_version);

grant select on staging_octane.ernst_request to readonly;

grant delete, insert, select, truncate, update on staging_octane.ernst_request to dms_octane_writer;

grant select on staging_octane.ernst_request to etl_loan;

create table staging_octane.ernst_request_question
(
    enstq_pid bigint not null
        constraint ernst_request_question_pkey
            primary key,
    enstq_version integer,
    enstq_ernst_request_pid bigint,
    enstq_ernst_question_id varchar(8),
    enstq_question varchar(1024),
    enstq_yes_no_answer boolean,
    enstq_answer varchar(16)
);

alter table staging_octane.ernst_request_question owner to deployer;

create index idx_ernst_request_question__pid_version
    on staging_octane.ernst_request_question (enstq_pid, enstq_version);

grant select on staging_octane.ernst_request_question to readonly;

grant delete, insert, select, truncate, update on staging_octane.ernst_request_question to dms_octane_writer;

grant select on staging_octane.ernst_request_question to etl_loan;

create table staging_octane.loan_beneficiary
(
    lb_pid bigint not null
        constraint loan_beneficiary_pkey
            primary key,
    lb_version integer,
    lb_loan_pid bigint,
    lb_investor_pid bigint,
    lb_investor_loan_id varchar(32),
    lb_from_date date,
    lb_through_date date,
    lb_current boolean,
    lb_initial boolean,
    lb_loan_benef_transfer_status_type varchar(128),
    lb_loan_file_ship_date date,
    lb_approved_with_conditions_date date,
    lb_rejected_date date,
    lb_pending_wire_date date,
    lb_purchase_advice_amount numeric(15,2),
    lb_mers_mom boolean,
    lb_mers_transfer_status_type varchar(128),
    lb_mers_transfer_creation_date date,
    lb_mers_transfer_override boolean,
    lb_mers_transfer_batch_pid bigint,
    lb_loan_file_courier_type varchar(128),
    lb_loan_file_tracking_number varchar(32),
    lb_collateral_courier_type varchar(128),
    lb_collateral_tracking_number varchar(32),
    lb_loan_file_delivery_method_type varchar(128),
    lb_pool_id varchar(32),
    lb_mbs_final_purchaser_investor_pid bigint,
    lb_early_funding varchar(128),
    lb_early_funding_date date,
    lb_delivery_aus_type varchar(128),
    lb_synthetic_unique_current boolean,
    lb_synthetic_unique_initial boolean
);

alter table staging_octane.loan_beneficiary owner to deployer;

create index idx_loan_beneficiary__pid_version
    on staging_octane.loan_beneficiary (lb_pid, lb_version);

grant select on staging_octane.loan_beneficiary to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_beneficiary to dms_octane_writer;

grant select on staging_octane.loan_beneficiary to etl_loan;

create table staging_octane.loan_eligible_investor
(
    lei_pid bigint not null
        constraint loan_eligible_investor_pkey
            primary key,
    lei_version integer,
    lei_loan_pid bigint,
    lei_investor_pid bigint
);

alter table staging_octane.loan_eligible_investor owner to deployer;

create index idx_loan_eligible_investor__pid_version
    on staging_octane.loan_eligible_investor (lei_pid, lei_version);

grant select on staging_octane.loan_eligible_investor to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_eligible_investor to dms_octane_writer;

grant select on staging_octane.loan_eligible_investor to etl_loan;

create table staging_octane.loan_funding
(
    lf_pid bigint not null
        constraint loan_funding_pkey
            primary key,
    lf_version integer,
    lf_loan_pid bigint,
    lf_interim_funder_pid bigint,
    lf_proposal_snapshot_pid bigint,
    lf_interim_funder_loan_id varchar(32),
    lf_funding_status_type varchar(128),
    lf_requested_date date,
    lf_confirmed_release_datetime timestamp,
    lf_wire_amount numeric(15,2),
    lf_interim_funder_fee_amount numeric(15,2),
    lf_release_wire_federal_reference_number varchar(32),
    lf_disbursement_date date,
    lf_return_request_date date,
    lf_return_confirmed_date date,
    lf_funds_authorization_code varchar(32),
    lf_scheduled_release_date date,
    lf_funds_authorized_datetime timestamp,
    lf_funding_date date,
    lf_collateral_sent_date date,
    lf_collateral_tracking_number varchar(32),
    lf_collateral_courier_type varchar(128),
    lf_post_wire_adjustment_amount numeric(15,2),
    lf_net_wire_amount numeric(15,2),
    lf_early_wire_charge_day_count integer,
    lf_early_wire_daily_charge_amount numeric(15,2),
    lf_early_wire_total_charge_amount numeric(15,2),
    lf_scheduled_release_date_auto_compute boolean,
    lf_early_wire_request boolean,
    lf_synthetic_unique_active boolean
);

alter table staging_octane.loan_funding owner to deployer;

create index idx_loan_funding__pid_version
    on staging_octane.loan_funding (lf_pid, lf_version);

grant select on staging_octane.loan_funding to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_funding to dms_octane_writer;

grant select on staging_octane.loan_funding to etl_loan;

create table staging_octane.loan_hedge
(
    lh_pid bigint not null
        constraint loan_hedge_pkey
            primary key,
    lh_version integer,
    lh_loan_pid bigint,
    lh_update_datetime timestamp,
    lh_update_pending_datetime timestamp,
    lh_transaction_status_date date,
    lh_loan_number bigint,
    lh_product_code varchar(128),
    lh_note_rate numeric(11,9),
    lh_loan_amount numeric(17,2),
    lh_lock_date timestamp,
    lh_buy_side_lock_expires_date timestamp,
    lh_lock_expiration_date timestamp,
    lh_secondary_cost numeric(11,9),
    lh_total_cost_basis numeric(11,9),
    lh_total_lender_margin numeric(17,9),
    lh_stage varchar(128),
    lh_fund_date timestamp,
    lh_allocation_date timestamp,
    lh_estimated_fund_date date,
    lh_purchased_by_investor_date date,
    lh_commitment_number varchar(32),
    lh_property_occupancy varchar(128),
    lh_property_type varchar(128),
    lh_property_type_supplemental varchar(16),
    lh_property_state varchar(128),
    lh_property_zip varchar(128),
    lh_property_number_of_units integer,
    lh_purchase_price numeric(15),
    lh_appraised_value numeric(15),
    lh_purpose varchar(128),
    lh_refinance_type varchar(128),
    lh_lien_position varchar(128),
    lh_impounds varchar(16),
    lh_buydown_type varchar(128),
    lh_buydown varchar(8),
    lh_ltv numeric(11,9),
    lh_original_ltv numeric(11,9),
    lh_cltv numeric(11,9),
    lh_original_cltv numeric(11,9),
    lh_effective_credit_score integer,
    lh_doc_type varchar(128),
    lh_debt_to_income numeric(11,9),
    lh_prepayment_penalty boolean,
    lh_prepayment_penalty_term integer,
    lh_interest_only boolean,
    lh_lock_type varchar(128),
    lh_lock_period integer,
    lh_fees_collected_bps varchar(8),
    lh_channel varchar(32),
    lh_loan_officer varchar(128),
    lh_branch varchar(128),
    lh_broker varchar(8),
    lh_correspondent varchar(8),
    lh_origination_source varchar(32),
    lh_investor varchar(128),
    lh_investor_total_price numeric(11,9),
    lh_investor_base_price numeric(11,9),
    lh_investor_srp_paid varchar(8),
    lh_investor_loan_number varchar(32),
    lh_pmi boolean,
    lh_pmi_percent numeric(11,9),
    lh_mi_cert_number varchar(128),
    lh_srp_paid varchar(8),
    lh_discount_points varchar(8),
    lh_date_docs_back varchar(8),
    lh_note_date date,
    lh_close_date timestamp,
    lh_first_payment_date date,
    lh_last_payment_date date,
    lh_next_scheduled_payment_due_date varchar(8),
    lh_scheduled_principal_and_interest numeric(15,2),
    lh_current_principal_and_interest numeric(15,2),
    lh_minimum_principal_and_interest numeric(15,2),
    lh_current_unpaid_principal_balance numeric(17,2),
    lh_original_interest_rate numeric(11,9),
    lh_maturity_date date,
    lh_amortization_term integer,
    lh_yearly_payment_cap varchar(8),
    lh_arm_margin numeric(11,9),
    lh_arm_adjustment_date date,
    lh_first_arm_period integer,
    lh_first_arm_adjustment_cap numeric(11,9),
    lh_arm_life_floor numeric(11,9),
    lh_arm_life_ceiling numeric(11,9),
    lh_first_arm_payment_adjustment_date varchar(8),
    lh_arm_period_after_first varchar(8),
    lh_arm_adjustment_cap_after_first numeric(11,9),
    lh_first_payment_cap varchar(8),
    lh_payment_cap_option varchar(8),
    lh_neg_am_flag varchar(8),
    lh_maximum_negative_amortization varchar(8),
    lh_arm_convertible varchar(8),
    lh_arm_index varchar(8),
    lh_dual_loan_flag varchar(8),
    lh_other_loan_number varchar(8),
    lh_agency_extract_fields varchar(8),
    lh_warehouse_bank varchar(128),
    lh_wire_amount numeric(15,2),
    lh_credit_rating_agency_fields varchar(8),
    lh_levels_fields varchar(8),
    lh_data_fields varchar(8),
    lh_loan_status varchar(128),
    lh_suspense_yes_no varchar(8),
    lh_loan_type varchar(128),
    lh_hud_borr_paid_by_for_borr_other_amount varchar(8),
    lh_fees_line_user_def_fee_one_borr varchar(8),
    lh_uw_suspended_cleared_date varchar(8),
    lh_underwriting_suspended_date varchar(8),
    lh_line_orig_charge numeric(15,2),
    lh_amortization_type varchar(32),
    lh_milestone varchar(128),
    lh_msa varchar(8),
    lh_county_code varchar(8),
    lh_ship_date_to_investor date,
    lh_borrower_last_name varchar(32),
    lh_purchase_advice_suspense_fee varchar(8),
    lh_purchase_advice_early_delivery_amount varchar(8),
    lh_purchase_advice_llpa varchar(8),
    lh_purchase_advice_fmna varchar(8),
    lh_purchase_advice_rp varchar(8),
    lh_lock_info_relock_amount varchar(8),
    lh_lock_info_loan_basis numeric(11,9),
    lh_lock_info_lock_request_fulfilled_date_time varchar(8),
    lh_lock_info_rate_lock_request_rate_sheet_id varchar(8),
    lh_current_status_change_date date,
    lh_aus_type varchar(8),
    lh_buy_side_base_arm_margin varchar(8),
    lh_uldd_poolid varchar(32),
    lh_warehouse_co_name varchar(128),
    lh_underwriting_investor_eligibility_wells_fargo varchar(8),
    lh_underwriting_investor_eligibility_chase varchar(8),
    lh_du_fail_reason varchar(8),
    lh_lpmi_total_costs_on_lock varchar(8),
    lh_lpmi_after_lock_required varchar(8),
    lh_lpmi_after_lock_bps varchar(8),
    lh_mi_company_name_type varchar(128),
    lh_lpmi_frequency varchar(128),
    lh_lpmi_estimated_amount_of_lender_paid_mi varchar(8),
    lh_mortgage_insurance_premium_source_type varchar(16),
    lh_loan_amount_repeat numeric(17,2),
    lh_product_code_repeat varchar(128),
    lh_note_rate_repeat numeric(11,9),
    lh_loan_info_loan_id varchar(8),
    lh_salable_loan varchar(8),
    lh_sale_hold varchar(8),
    lh_sale_hold_comments varchar(8),
    lh_pf_disbursement_ledger_date date,
    lh_aus_eligibility varchar(8),
    lh_texas_cash_out boolean,
    lh_acceptable_du boolean,
    lh_acceptable_lp boolean,
    lh_financed_property_count integer,
    lh_payoff_primary_lien_holder_company varchar(8),
    lh_payoff_junior_lien_holder_company varchar(8),
    lh_base_loan_amount numeric(17,2),
    lh_funding_authorized varchar(32),
    lh_credit_committee_fico_exception varchar(8),
    lh_home_ready_eligibility varchar(8),
    lh_home_ready_borr_acceptance varchar(8),
    lh_home_ready_eligibility_review varchar(8),
    lh_home_possible_eligibility varchar(8),
    lh_home_possible_eligibility_review varchar(8),
    lh_piw varchar(8),
    lh_piw_fee varchar(8),
    lh_uw_investor_eligibility_fnma varchar(8),
    lh_uw_investor_eligibility_fhlmc varchar(8),
    lh_appraisal_form varchar(128),
    lh_ext_cos_total_amt varchar(8),
    lh_fnmcu_risk_score varchar(8),
    lh_borrower_income_verification varchar(8),
    lh_co_borrower_income_verification varchar(8),
    lh_day_one_income_verification_available varchar(8),
    lh_subject_property_estimated_value numeric(15),
    lh_transaction_status varchar(128),
    lh_buy_status varchar(128),
    lh_appraisal_exists boolean,
    lh_du_piw_eligible boolean,
    lh_lp_appraisal_waiver_eligible boolean,
    lh_borrower_first_name varchar(32),
    lh_co_borrower_first_name varchar(32),
    lh_co_borrower_last_name varchar(32),
    lh_total_borrower_income numeric(15,2),
    lh_subject_property_city varchar(128),
    lh_subject_property_county varchar(128),
    lh_subject_property_zip varchar(128),
    lh_borrower_decision_credit_score integer,
    lh_co_borrower_decision_credit_score integer,
    lh_underwriter_disposition varchar(128),
    lh_underwrite_risk_assessment_type varchar(128),
    lh_subject_property_address varchar(1024),
    lh_original_lock_date timestamp,
    lh_original_lock_period integer,
    lh_borrower_income_docs_required_count integer,
    lh_borrower_income_docs_fulfilled_count integer,
    lh_borrower_income_docs_approved_count integer,
    lh_borrower_asset_docs_required_count integer,
    lh_borrower_asset_docs_fulfilled_count integer,
    lh_borrower_asset_docs_approved_count integer,
    lh_borrower_credit_docs_required_count integer,
    lh_borrower_credit_docs_fulfilled_count integer,
    lh_borrower_credit_docs_approved_count integer,
    lh_initial_uw_submit_date_time timestamp,
    lh_cd_clear_date date,
    lh_lender_concession_total_approved_amount numeric(15,2),
    lh_relock_fee_gross_amount numeric(15,2),
    lh_relock_fee_amount_less_concessions numeric(15,2),
    lh_relock_fee_amount_concessed numeric(15,2),
    lh_lock_extension_fee_gross_amount numeric(15,2),
    lh_lock_extension_fee_amount_less_concessions numeric(15,2),
    lh_lock_extension_fee_amount_concessed numeric(15,2),
    lh_general_lender_concessions_amount_non_itemized numeric(15,2),
    lh_day_one_concessions numeric(15,2),
    lh_investor_lock_commitment_type varchar(128),
    lh_signed_closing_doc_received_datetime timestamp,
    lh_geocoding_msa_code varchar(32),
    lh_geocoding_state_code varchar(32),
    lh_geocoding_county_code varchar(32),
    lh_geocoding_census_tract varchar(32),
    lh_tolerance_cure_amount numeric(15,2),
    lh_self_employed_flag boolean,
    lh_first_time_homebuyer boolean,
    lh_mortgage_insurance_lpmi_rate_adjustment numeric(11,9),
    lh_eligible_for_qm_status boolean,
    lh_safe_harbor_test_passed boolean,
    lh_hpml boolean,
    lh_hoepa varchar(128),
    lh_funding_status varchar(128),
    lh_early_funding varchar(128),
    lh_early_funding_date date,
    lh_lqa_purchase_eligibility_type varchar(128),
    lh_transferred_appraisal boolean,
    lh_appraisal_cu_risk_score varchar(32),
    lh_mi_upfront_rate numeric(11,9),
    lh_loan_funding_requested_date date,
    lh_student_loan_cash_out boolean,
    lh_octane_high_balance boolean,
    lh_borrower_final_price numeric(11,9),
    lh_charge_credit_for_interest_rate numeric(15,2),
    lh_contract_processing_fee numeric(15,2),
    lh_escrow_holdback boolean,
    lh_appraiser_license_number varchar(128),
    lh_mcc_present boolean,
    lh_grant_present boolean,
    lh_cema varchar(128),
    lh_supplemental_margin_company numeric(15,2),
    lh_supplemental_margin_branch numeric(15,2),
    lh_supplemental_margin_total numeric(15,2),
    lh_concessions_renegotiations_amount numeric(15,2),
    lh_fund_source_type varchar(128),
    lh_purchase_contract_funding_date date,
    lh_product_id varchar(32),
    lh_community_second boolean,
    lh_current_taxes_and_insurance numeric(15,2),
    lh_multiple_applicants boolean,
    lh_community_second_liability boolean,
    lh_property_rights_type varchar(128),
    lh_mbs_final_purchaser varchar(128),
    lh_hmda_universal_loan_id varchar(45),
    lh_lp_ace_eligible boolean,
    lh_family_advantage_product boolean,
    lh_effective_rate_sheet_datetime timestamp,
    lh_debt_to_income_excluding_mi numeric(11,9),
    lh_clear_to_commit boolean,
    lh_b2_first_name varchar(32),
    lh_b2_last_name varchar(32),
    lh_c2_first_name varchar(32),
    lh_c2_last_name varchar(32),
    lh_b3_first_name varchar(32),
    lh_b3_last_name varchar(32),
    lh_c3_first_name varchar(32),
    lh_c3_last_name varchar(32),
    lh_b4_first_name varchar(32),
    lh_b4_last_name varchar(32),
    lh_c4_first_name varchar(32),
    lh_c4_last_name varchar(32),
    lh_b5_first_name varchar(32),
    lh_b5_last_name varchar(32),
    lh_c5_first_name varchar(32),
    lh_c5_last_name varchar(32),
    lh_texas_home_equity_conversion boolean,
    lh_interest_only_heloc boolean,
    lh_interest_only_term_months integer,
    lh_investor_lock_product_name varchar(128),
    lh_investor_lock_product_id varchar(32),
    lh_rebuttable_presumption boolean,
    lh_non_conforming boolean,
    lh_num_deal_updates_since_update_pending integer,
    lh_borrower_engagement_percent numeric(11,9),
    lh_loan_create_date date,
    lh_high_balance_hit_percent numeric(11,9),
    lh_new_york_payup_percent numeric(11,9),
    lh_ship_date_to_custodian date,
    lh_lock_vintage date,
    lh_lock_series integer,
    lh_investor_total numeric(11,9),
    lh_qualified_mortgage_status_type varchar(128),
    lh_charges_enabled_date date,
    lh_application_date date,
    lh_velocify_lead_id varchar(32),
    lh_collateral_tracking_number varchar(32)
);

alter table staging_octane.loan_hedge owner to deployer;

create index idx_loan_hedge__pid_version
    on staging_octane.loan_hedge (lh_pid, lh_version);

grant select on staging_octane.loan_hedge to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_hedge to dms_octane_writer;

grant select on staging_octane.loan_hedge to etl_loan;

create table staging_octane.loan_mi_rate_adjustment
(
    lmra_pid bigint not null
        constraint loan_mi_rate_adjustment_pkey
            primary key,
    lmra_version integer,
    lmra_loan_pid bigint,
    lmra_case_name varchar(16000),
    lmra_rate_adjustment_percent numeric(11,9)
);

alter table staging_octane.loan_mi_rate_adjustment owner to deployer;

create index idx_loan_mi_rate_adjustment__pid_version
    on staging_octane.loan_mi_rate_adjustment (lmra_pid, lmra_version);

grant select on staging_octane.loan_mi_rate_adjustment to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_mi_rate_adjustment to dms_octane_writer;

grant select on staging_octane.loan_mi_rate_adjustment to etl_loan;

create table staging_octane.loan_mi_surcharge
(
    lms_pid bigint not null
        constraint loan_mi_surcharge_pkey
            primary key,
    lms_version integer,
    lms_loan_pid bigint,
    lms_criteria_html varchar(16000),
    lms_government_surcharge_percent numeric(11,9),
    lms_government_surcharge_minimum_amount numeric(15,2)
);

alter table staging_octane.loan_mi_surcharge owner to deployer;

create index idx_loan_mi_surcharge__pid_version
    on staging_octane.loan_mi_surcharge (lms_pid, lms_version);

grant select on staging_octane.loan_mi_surcharge to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_mi_surcharge to dms_octane_writer;

grant select on staging_octane.loan_mi_surcharge to etl_loan;

create table staging_octane.loan_price_add_on
(
    lpa_pid bigint not null
        constraint loan_price_add_on_pkey
            primary key,
    lpa_version integer,
    lpa_loan_pid bigint,
    lpa_create_datetime timestamp,
    lpa_summary varchar(16000),
    lpa_rate_adjustment_percent numeric(11,9),
    lpa_price_adjustment_percent numeric(11,9),
    lpa_arm_margin_adjustment_percent numeric(11,9),
    lpa_lock_add_on_type varchar(128)
);

alter table staging_octane.loan_price_add_on owner to deployer;

create index idx_loan_price_add_on__pid_version
    on staging_octane.loan_price_add_on (lpa_pid, lpa_version);

grant select on staging_octane.loan_price_add_on to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_price_add_on to dms_octane_writer;

grant select on staging_octane.loan_price_add_on to etl_loan;

create table staging_octane.loan_recording
(
    lr_pid bigint not null
        constraint loan_recording_pkey
            primary key,
    lr_version integer,
    lr_loan_pid bigint,
    lr_recording_date date,
    lr_recording_instrument_number varchar(16),
    lr_recording_book_number varchar(16),
    lr_recording_volume_number varchar(16),
    lr_recording_page_number varchar(16),
    lr_recording_jurisdiction_name varchar(16),
    lr_recording_witness_unparsed_name varchar(16),
    lr_re_recording boolean,
    lr_mers_registration_status_type varchar(128),
    lr_mers_registration_date date,
    lr_mers_registration_errors text,
    lr_mers_registration_warnings text,
    lr_mers_transfer_errors text,
    lr_mers_transfer_warnings text
);

alter table staging_octane.loan_recording owner to deployer;

create index idx_loan_recording__pid_version
    on staging_octane.loan_recording (lr_pid, lr_version);

grant select on staging_octane.loan_recording to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_recording to dms_octane_writer;

grant select on staging_octane.loan_recording to etl_loan;

create table staging_octane.loan_servicer
(
    lsv_pid bigint not null
        constraint loan_servicer_pkey
            primary key,
    lsv_version integer,
    lsv_loan_pid bigint,
    lsv_investor_pid bigint,
    lsv_investor_loan_id varchar(32),
    lsv_initial boolean,
    lsv_from_date date,
    lsv_servicing_data_sent_date date,
    lsv_retain_notification_date date,
    lsv_release_notification_date date,
    lsv_servicing_docs_sent_date date,
    lsv_mers_transfer_status_type varchar(128),
    lsv_mers_transfer_creation_date date,
    lsv_mers_transfer_override boolean,
    lsv_mers_transfer_batch_pid bigint,
    lsv_loan_acquisition_scheduled_upb_amount numeric(15,2),
    lsv_last_paid_installment_due_date date,
    lsv_upb_amount numeric(15,2),
    lsv_delinquent_payments_over_past_twelve_months_count integer
);

alter table staging_octane.loan_servicer owner to deployer;

create index idx_loan_servicer__pid_version
    on staging_octane.loan_servicer (lsv_pid, lsv_version);

grant select on staging_octane.loan_servicer to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_servicer to dms_octane_writer;

grant select on staging_octane.loan_servicer to etl_loan;

create table staging_octane.lock_series
(
    lsr_pid bigint not null
        constraint lock_series_pkey
            primary key,
    lsr_loan_pid bigint,
    lsr_version integer,
    lsr_vintage_date date,
    lsr_series_id integer,
    lsr_org_lineage_pid bigint
);

alter table staging_octane.lock_series owner to deployer;

create index idx_lock_series__pid_version
    on staging_octane.lock_series (lsr_pid, lsr_version);

grant select on staging_octane.lock_series to readonly;

grant delete, insert, select, truncate, update on staging_octane.lock_series to dms_octane_writer;

grant select on staging_octane.lock_series to etl_loan;

create table staging_octane.lender_lock_major
(
    llmj_pid bigint not null
        constraint lender_lock_major_pkey
            primary key,
    llmj_version integer,
    llmj_major_version integer,
    llmj_lender_lock_id varchar(11),
    llmj_loan_pid bigint,
    llmj_lien_priority_type varchar(128),
    llmj_account_pid bigint,
    llmj_lock_datetime timestamp,
    llmj_initial_duration_days integer,
    llmj_initial_lock_expiration_datetime timestamp,
    llmj_requester_agent_type varchar(128),
    llmj_requester_lender_user_pid bigint,
    llmj_requester_unparsed_name varchar(128),
    llmj_request_datetime timestamp,
    llmj_confirm_datetime timestamp,
    llmj_confirm_lender_user_pid bigint,
    llmj_confirm_unparsed_name varchar(128),
    llmj_void_request_datetime timestamp,
    llmj_void_request_lender_user_pid bigint,
    llmj_void_request_unparsed_name varchar(128),
    llmj_void_datetime timestamp,
    llmj_void_lender_user_pid bigint,
    llmj_void_unparsed_name varchar(128),
    llmj_cancel_datetime timestamp,
    llmj_cancel_lender_user_pid bigint,
    llmj_cancel_unparsed_name varchar(128),
    llmj_auto_confirmed boolean,
    llmj_active boolean,
    llmj_relock_fee_percent numeric(11,9),
    llmj_notes varchar(16000),
    llmj_lender_concession_approved_amount numeric(15,2),
    llmj_clear_extension_fees_relock boolean,
    llmj_pricing_duration_days integer,
    llmj_pricing_commitment_type varchar(128),
    llmj_expired_lock_successor boolean,
    llmj_lock_series_pid bigint
);

alter table staging_octane.lender_lock_major owner to deployer;

create index idx_lender_lock_major__pid_version
    on staging_octane.lender_lock_major (llmj_pid, llmj_version);

grant select on staging_octane.lender_lock_major to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_lock_major to dms_octane_writer;

grant select on staging_octane.lender_lock_major to etl_loan;

create table staging_octane.bid_pool_lender_lock
(
    bpll_pid bigint not null
        constraint bid_pool_lender_lock_pkey
            primary key,
    bpll_version integer,
    bpll_bid_pool_pid bigint,
    bpll_lender_lock_major_pid bigint
);

alter table staging_octane.bid_pool_lender_lock owner to deployer;

create index idx_bid_pool_lender_lock__pid_version
    on staging_octane.bid_pool_lender_lock (bpll_pid, bpll_version);

grant select on staging_octane.bid_pool_lender_lock to readonly;

grant delete, insert, select, truncate, update on staging_octane.bid_pool_lender_lock to dms_octane_writer;

grant select on staging_octane.bid_pool_lender_lock to etl_loan;

create table staging_octane.lender_concession_request
(
    lcr_pid bigint not null
        constraint lender_concession_request_pkey
            primary key,
    lcr_version integer,
    lcr_loan_pid bigint,
    lcr_lender_lock_major_pid bigint,
    lcr_requested_amount numeric(15,2),
    lcr_approved_amount numeric(15,2),
    lcr_requested_reason varchar(128),
    lcr_approved_reason varchar(128),
    lcr_requested_datetime timestamp,
    lcr_decision_datetime timestamp,
    lcr_decision_notes varchar(1024),
    lcr_request_notes varchar(1024),
    lcr_requester_lender_user_pid bigint,
    lcr_requester_unparsed_name varchar(128),
    lcr_approver_lender_user_pid bigint,
    lcr_approver_unparsed_name varchar(128),
    lcr_lender_concession_request_status_type varchar(128),
    lcr_corporate_amount numeric(15,2),
    lcr_unallocated_amount numeric(15,2),
    lcr_lender_concession_request_number integer
);

alter table staging_octane.lender_concession_request owner to deployer;

create index idx_lender_concession_request__pid_version
    on staging_octane.lender_concession_request (lcr_pid, lcr_version);

grant select on staging_octane.lender_concession_request to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_concession_request to dms_octane_writer;

grant select on staging_octane.lender_concession_request to etl_loan;

create table staging_octane.lender_lock_extension
(
    lle_pid bigint not null
        constraint lender_lock_extension_pkey
            primary key,
    lle_version integer,
    lle_lender_lock_major_pid bigint,
    lle_creator_lender_user_pid bigint,
    lle_creator_unparsed_name varchar(128),
    lle_requester_lender_user_pid bigint,
    lle_requester_unparsed_name varchar(128),
    lle_requested_datetime timestamp,
    lle_confirm_lender_user_pid bigint,
    lle_confirm_unparsed_name varchar(128),
    lle_confirm_datetime timestamp,
    lle_auto_confirmed boolean,
    lle_reject_lender_user_pid bigint,
    lle_reject_datetime timestamp,
    lle_reject_explanation varchar(1024),
    lle_lock_extension_status_type varchar(128),
    lle_extension_days integer,
    lle_price_adjustment_percent numeric(11,9),
    lle_fee_applicable boolean
);

alter table staging_octane.lender_lock_extension owner to deployer;

create index idx_lender_lock_extension__pid_version
    on staging_octane.lender_lock_extension (lle_pid, lle_version);

grant select on staging_octane.lender_lock_extension to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_lock_extension to dms_octane_writer;

grant select on staging_octane.lender_lock_extension to etl_loan;

create table staging_octane.lender_lock_minor
(
    llmn_pid bigint not null
        constraint lender_lock_minor_pkey
            primary key,
    llmn_version integer,
    llmn_lender_lock_major_pid bigint,
    llmn_minor_version integer,
    llmn_latest_version boolean,
    llmn_lender_lock_status_type varchar(128),
    llmn_create_datetime timestamp,
    llmn_creator_agent_type varchar(128),
    llmn_creator_lender_user_pid bigint,
    llmn_creator_unparsed_name varchar(128),
    llmn_effective_lock_expiration_datetime timestamp,
    llmn_effective_duration_days integer,
    llmn_num_extensions integer,
    llmn_investor_base_note_rate_percent numeric(11,9),
    llmn_investor_base_arm_margin_percent numeric(11,9),
    llmn_investor_base_price_percent numeric(11,9),
    llmn_lock_note_rate_percent numeric(11,9),
    llmn_lock_initial_note_rate_percent numeric(11,9),
    llmn_lock_arm_margin_percent numeric(11,9),
    llmn_lock_price_percent numeric(11,9),
    llmn_lock_price_raw_percent numeric(11,9),
    llmn_maximum_rebate_percent numeric(11,9),
    llmn_maximum_investor_price_percent numeric(11,9),
    llmn_maximum_investor_price_includes_srp boolean,
    llmn_created_historic_price_delta numeric(11,9),
    llmn_profit_table_name varchar(128),
    llmn_total_profit_margin_percent numeric(11,9),
    llmn_base_note_rate_percent numeric(11,9),
    llmn_base_arm_margin_percent numeric(11,9),
    llmn_base_price_percent numeric(11,9),
    llmn_pricing_datetime timestamp,
    llmn_effective_rate_sheet_datetime timestamp,
    llmn_apor_date date,
    llmn_proposal_snapshot_pid bigint,
    llmn_loan_amount numeric(17,2),
    llmn_base_loan_amount numeric(17,2),
    llmn_lock_commitment_type varchar(128),
    llmn_offering_pid bigint,
    llmn_product_terms_pid bigint,
    llmn_mortgage_type varchar(128),
    llmn_interest_only_type varchar(128),
    llmn_buydown_schedule_type varchar(128),
    llmn_prepay_penalty_schedule_type varchar(128),
    llmn_aus_type varchar(128),
    llmn_high_balance_hit_percent numeric(11,9),
    llmn_new_york_payup_percent numeric(11,9)
);

alter table staging_octane.lender_lock_minor owner to deployer;

create index idx_lender_lock_minor__pid_version
    on staging_octane.lender_lock_minor (llmn_pid, llmn_version);

grant select on staging_octane.lender_lock_minor to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_lock_minor to dms_octane_writer;

grant select on staging_octane.lender_lock_minor to etl_loan;

create table staging_octane.lender_lock_add_on
(
    lla_pid bigint not null
        constraint lender_lock_add_on_pkey
            primary key,
    lla_version integer,
    lla_lender_lock_minor_pid bigint,
    lla_lock_add_on_type varchar(128),
    lla_investor_price_adjustment_percent numeric(11,9),
    lla_account_price_adjustment_percent numeric(11,9),
    lla_create_datetime timestamp,
    lla_creator_lender_user_pid bigint,
    lla_creator_unparsed_name varchar(128),
    lla_summary varchar(16000),
    lla_rate_adjustment_percent numeric(11,9),
    lla_price_adjustment_percent numeric(11,9),
    lla_arm_margin_adjustment_percent numeric(11,9)
);

alter table staging_octane.lender_lock_add_on owner to deployer;

create index idx_lender_lock_add_on__pid_version
    on staging_octane.lender_lock_add_on (lla_pid, lla_version);

grant select on staging_octane.lender_lock_add_on to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_lock_add_on to dms_octane_writer;

grant select on staging_octane.lender_lock_add_on to etl_loan;

create table staging_octane.net_tangible_benefit
(
    ntb_pid bigint not null
        constraint net_tangible_benefit_pkey
            primary key,
    ntb_version integer,
    ntb_net_tangible_benefit_type varchar(128),
    ntb_proposal_pid bigint
);

alter table staging_octane.net_tangible_benefit owner to deployer;

create index idx_net_tangible_benefit__pid_version
    on staging_octane.net_tangible_benefit (ntb_pid, ntb_version);

grant select on staging_octane.net_tangible_benefit to readonly;

grant delete, insert, select, truncate, update on staging_octane.net_tangible_benefit to dms_octane_writer;

grant select on staging_octane.net_tangible_benefit to etl_loan;

create table staging_octane.obligation
(
    ob_pid bigint not null
        constraint obligation_pkey
            primary key,
    ob_version integer,
    ob_proposal_pid bigint,
    ob_obligation_type varchar(128),
    ob_amount_input_type varchar(128),
    ob_factor_percent numeric(11,9),
    ob_factor_percent_base_amount numeric(15,2),
    ob_annual_payment_amount numeric(15,2),
    ob_monthly_payment_amount numeric(15,2),
    ob_pte_annual_tax_installment_amount numeric(15,2),
    ob_pte_annual_preferred_tax_amount numeric(15,2),
    ob_pte_annual_homeowner_occupied_estimated_tax_amount numeric(15,2),
    ob_pte_annual_exemption_free_estimated_tax_amount numeric(15,2),
    ob_payment_date_1 date,
    ob_payment_date_2 date,
    ob_payment_date_3 date,
    ob_payment_date_4 date,
    ob_payment_date_5 date,
    ob_payment_date_6 date,
    ob_payment_amount_1 numeric(15,2),
    ob_payment_amount_2 numeric(15,2),
    ob_payment_amount_3 numeric(15,2),
    ob_payment_amount_4 numeric(15,2),
    ob_payment_amount_5 numeric(15,2),
    ob_payment_amount_6 numeric(15,2),
    ob_total_dated_payment_amount numeric(15,2),
    ob_vendor_first_name varchar(32),
    ob_vendor_last_name varchar(32),
    ob_vendor_middle_name varchar(32),
    ob_vendor_name_suffix varchar(32),
    ob_vendor_company_name varchar(128),
    ob_vendor_title varchar(128),
    ob_vendor_office_phone varchar(32),
    ob_vendor_office_phone_extension varchar(16),
    ob_vendor_mobile_phone varchar(32),
    ob_vendor_email varchar(256),
    ob_vendor_fax varchar(32),
    ob_vendor_city varchar(128),
    ob_vendor_country varchar(128),
    ob_vendor_postal_code varchar(128),
    ob_vendor_state varchar(128),
    ob_vendor_street1 varchar(128),
    ob_vendor_street2 varchar(128),
    ob_vendor_reference_id varchar(128),
    ob_name varchar(128),
    ob_payment_amount_1_warning varchar(1024),
    ob_payment_amount_2_warning varchar(1024),
    ob_payment_amount_3_warning varchar(1024),
    ob_payment_amount_4_warning varchar(1024),
    ob_payment_amount_5_warning varchar(1024),
    ob_payment_amount_6_warning varchar(1024),
    ob_tax_auto_compute boolean,
    ob_policy_dwelling_coverage_amount numeric(15),
    ob_policy_extended_coverage_amount numeric(15),
    ob_policy_deductible_amount numeric(15),
    ob_policy_effective_date date,
    ob_policy_expiration_date date,
    ob_escrow_waiver varchar(128),
    ob_insurance_transferred boolean
);

alter table staging_octane.obligation owner to deployer;

create index idx_obligation__pid_version
    on staging_octane.obligation (ob_pid, ob_version);

grant select on staging_octane.obligation to readonly;

grant delete, insert, select, truncate, update on staging_octane.obligation to dms_octane_writer;

grant select on staging_octane.obligation to etl_loan;

create table staging_octane.loan_charge
(
    lc_pid bigint not null
        constraint loan_charge_pkey
            primary key,
    lc_version integer,
    lc_proposal_pid bigint,
    lc_obligation_pid bigint,
    lc_account_charge_ordinal integer,
    lc_loan_position_type varchar(128),
    lc_charge_type varchar(128),
    lc_name varchar(128),
    lc_charge_payee_type varchar(128),
    lc_paid_to varchar(128),
    lc_poc_applicable boolean,
    lc_reduction_amount numeric(15),
    lc_apr boolean,
    lc_base_amount numeric(16,3),
    lc_configured_total_amount numeric(15,2),
    lc_total_amount numeric(15,2),
    lc_charge_input_type varchar(128),
    lc_charge_input_type_base_amount numeric(16,3),
    lc_charge_input_type_percent numeric(11,9),
    lc_charge_input_type_currency numeric(16,3),
    lc_hud_section_number varchar(16),
    lc_hud_line_number varchar(16),
    lc_user_defined boolean,
    lc_months_auto_compute boolean,
    lc_months integer,
    lc_per_diem_amount numeric(15,2),
    lc_per_diem_rate numeric(11,9),
    lc_days integer,
    lc_financed boolean,
    lc_financed_auto_compute boolean,
    lc_financed_amount numeric(15),
    lc_auto_compute boolean,
    lc_charge_source_type varchar(128),
    lc_obligation_charge_input_type varchar(128),
    lc_from_date date,
    lc_through_date date,
    lc_smart_charge_config_warning varchar(1024),
    lc_reduction_amount_warning varchar(1024),
    lc_advance_amount_warning varchar(1024),
    lc_fha_mip_refund_warning varchar(1024),
    lc_aggregate_adjustment_compute_warning varchar(1024),
    lc_advance_obligation_compute_warning varchar(1024),
    lc_escrow_obligation_compute_warning varchar(1024),
    lc_excess_financing_concession_warning varchar(1024),
    lc_amount_exceeds_cap_warning varchar(1024),
    lc_subtract_lenders_title_insurance_amount boolean,
    lc_lender_insurance_exceeds_owner_insurance_warning varchar(1024),
    lc_manual_circumstance_change_type_1 varchar(128),
    lc_manual_circumstance_change_type_2 varchar(128),
    lc_configured_charge_payer_type varchar(128),
    lc_configured_charge_payee_type varchar(128),
    lc_configured_paid_by varchar(128),
    lc_configured_paid_to varchar(128),
    lc_configured_poc boolean,
    lc_configured_financed boolean
);

alter table staging_octane.loan_charge owner to deployer;

create index idx_loan_charge__pid_version
    on staging_octane.loan_charge (lc_pid, lc_version);

grant select on staging_octane.loan_charge to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_charge to dms_octane_writer;

grant select on staging_octane.loan_charge to etl_loan;

create table staging_octane.place
(
    pl_pid bigint not null
        constraint place_pkey
            primary key,
    pl_version integer,
    pl_proposal_pid bigint,
    pl_subject_property boolean,
    pl_acquisition_date date,
    pl_financed_units_count integer,
    pl_unit_count integer,
    pl_land_estimated_value_amount numeric(15),
    pl_land_original_cost_amount numeric(15),
    pl_leasehold_expiration_date date,
    pl_legal_description_type varchar(128),
    pl_legal_description varchar(32000),
    pl_property_tax_id varchar(64),
    pl_legal_lot varchar(64),
    pl_legal_block varchar(64),
    pl_legal_section varchar(64),
    pl_project_name varchar(128),
    pl_cpm_project_id varchar(128),
    pl_acquisition_cost_amount numeric(15),
    pl_county_pid bigint,
    pl_sub_jurisdiction_name varchar(128),
    pl_recording_district_name varchar(128),
    pl_project_classification_type varchar(128),
    pl_property_category_type varchar(128),
    pl_property_rights_type varchar(128),
    pl_structure_built_year integer,
    pl_structure_built_month integer,
    pl_title_manner_held_type varchar(128),
    pl_title_manner_held_description varchar(1024),
    pl_building_status_type varchar(128),
    pl_construction_conversion varchar(128),
    pl_native_american_lands_type varchar(128),
    pl_community_land_trust boolean,
    pl_inclusionary_zoning boolean,
    pl_unique_dwelling_type varchar(128),
    pl_living_unit_count integer,
    pl_project_design_type varchar(128),
    pl_city varchar(128),
    pl_country varchar(128),
    pl_postal_code varchar(128),
    pl_state varchar(128),
    pl_street1 varchar(128),
    pl_street2 varchar(128),
    pl_street_tbd boolean,
    pl_landlord_first_name varchar(32),
    pl_landlord_last_name varchar(32),
    pl_landlord_middle_name varchar(32),
    pl_landlord_name_suffix varchar(32),
    pl_landlord_company_name varchar(128),
    pl_landlord_title varchar(128),
    pl_landlord_office_phone varchar(32),
    pl_landlord_office_phone_extension varchar(16),
    pl_landlord_mobile_phone varchar(32),
    pl_landlord_email varchar(256),
    pl_landlord_fax varchar(32),
    pl_landlord_city varchar(128),
    pl_landlord_country varchar(128),
    pl_landlord_postal_code varchar(128),
    pl_landlord_state varchar(128),
    pl_landlord_street1 varchar(128),
    pl_landlord_street2 varchar(128),
    pl_management_first_name varchar(32),
    pl_management_last_name varchar(32),
    pl_management_middle_name varchar(32),
    pl_management_name_suffix varchar(32),
    pl_management_company_name varchar(128),
    pl_management_title varchar(128),
    pl_management_office_phone varchar(32),
    pl_management_office_phone_extension varchar(16),
    pl_management_mobile_phone varchar(32),
    pl_management_email varchar(256),
    pl_management_fax varchar(32),
    pl_management_city varchar(128),
    pl_management_country varchar(128),
    pl_management_postal_code varchar(128),
    pl_management_state varchar(128),
    pl_management_street1 varchar(128),
    pl_management_street2 varchar(128),
    pl_property_insurance_amount_input_type varchar(128),
    pl_property_tax_amount_input_type varchar(128),
    pl_annual_property_insurance_amount numeric(15,2),
    pl_annual_property_tax_amount numeric(15,2),
    pl_monthly_property_insurance_amount numeric(15,2),
    pl_monthly_hoa_amount numeric(15,2),
    pl_monthly_mi_amount numeric(15,2),
    pl_monthly_property_tax_amount numeric(15,2),
    pl_monthly_lease_ground_rent_amount numeric(15,2),
    pl_monthly_rent_amount numeric(15,2),
    pl_monthly_obligation_amount numeric(15,2),
    pl_use_proposed_property_usage boolean,
    pl_property_usage_type varchar(128),
    pl_property_value_amount numeric(15),
    pl_reo_disposition_status_type varchar(128),
    pl_auto_geocode boolean,
    pl_auto_geocode_exception varchar(1024),
    pl_msa_code varchar(32),
    pl_state_fips varchar(32),
    pl_county_fips varchar(32),
    pl_census_tract varchar(32),
    pl_mh_make varchar(32),
    pl_mh_model varchar(32),
    pl_mh_length integer,
    pl_mh_width integer,
    pl_mh_manufacturer varchar(32),
    pl_mh_serial_number varchar(128),
    pl_mh_hud_label_number varchar(128),
    pl_mh_certificate_of_title_issued varchar(128),
    pl_mh_certificate_of_title_number varchar(32),
    pl_mh_certificate_of_title_type varchar(128),
    pl_mh_loan_purpose_type varchar(128),
    pl_mh_anchored boolean,
    pl_coop_company_name varchar(128),
    pl_coop_building_name varchar(128),
    pl_coop_vacant_units integer,
    pl_coop_proprietary_lease_date date,
    pl_coop_assignment_lease_date date,
    pl_coop_existing_company_laws_state varchar(128),
    pl_coop_shares_being_purchased integer,
    pl_coop_attorney_in_fact varchar(128),
    pl_coop_stock_certificate_number varchar(32),
    pl_coop_apartment_unit varchar(32),
    pl_rental boolean,
    pl_underwriter_comments varchar(1024),
    pl_lava_zone_type varchar(128),
    pl_neighborhood_location_type varchar(128),
    pl_site_area numeric(15),
    pl_hud_reo varchar(128),
    pl_va_guaranteed_reo varchar(128),
    pl_va_loan_date date,
    pl_gross_building_area_square_feet integer,
    pl_project_dwelling_units_sold_count integer,
    pl_prior_owners_title boolean,
    pl_prior_owners_title_policy_amount numeric(15,2),
    pl_prior_owners_title_policy_effective_date date,
    pl_prior_lenders_title boolean,
    pl_prior_lenders_title_policy_amount numeric(15,2),
    pl_prior_lenders_title_policy_effective_date date,
    pl_bedroom_count_unit_1 integer,
    pl_bedroom_count_unit_2 integer,
    pl_bedroom_count_unit_3 integer,
    pl_bedroom_count_unit_4 integer,
    pl_rent_amount_unit_1 numeric(15,2),
    pl_rent_amount_unit_2 numeric(15,2),
    pl_rent_amount_unit_3 numeric(15,2),
    pl_rent_amount_unit_4 numeric(15,2),
    pl_listed_for_sale_in_last_6_months varchar(128),
    pl_property_in_borrower_trust varchar(128),
    pl_road_type varchar(128),
    pl_water_type varchar(128),
    pl_sanitation_type varchar(128),
    pl_survey_required varchar(128),
    pl_solar_panels_type varchar(128),
    pl_power_purchase_agreement varchar(128),
    pl_solar_panel_provider_name varchar(128),
    pl_seller_acquired_date date,
    pl_seller_original_cost_amount numeric(15),
    pl_remaining_economic_life_years integer,
    pl_bathroom_count_unit_1 integer,
    pl_bathroom_count_unit_2 integer,
    pl_bathroom_count_unit_3 integer,
    pl_bathroom_count_unit_4 integer,
    pl_total_room_count_unit_1 integer,
    pl_total_room_count_unit_2 integer,
    pl_total_room_count_unit_3 integer,
    pl_total_room_count_unit_4 integer,
    pl_gross_living_area_square_feet_unit_1 integer,
    pl_gross_living_area_square_feet_unit_2 integer,
    pl_gross_living_area_square_feet_unit_3 integer,
    pl_gross_living_area_square_feet_unit_4 integer,
    pl_mh_leasehold__property_interest_type varchar(128),
    pl_tribe_name varchar(128),
    pl_leasehold_begin_date date,
    pl_lease_number varchar(128),
    pl_property_inspection_required boolean,
    pl_hvac_inspection_required boolean,
    pl_pest_inspection_required boolean,
    pl_radon_inspection_required boolean,
    pl_septic_inspection_required boolean,
    pl_water_well_inspection_required boolean,
    pl_structural_inspection_required boolean,
    pl_pest_inspection_required_auto_compute boolean,
    pl_management_agent_federal_tax_id varchar(32),
    pl_mh_manufacturer_street_1 varchar(128),
    pl_mh_manufacturer_street_2 varchar(128),
    pl_mh_manufacturer_city varchar(128),
    pl_mh_manufacturer_state varchar(128),
    pl_mh_manufacturer_postal_code varchar(128),
    pl_mh_manufacturer_phone varchar(32),
    pl_mh_manufacturer_phone_extension varchar(16),
    pl_recording_city_name varchar(128),
    pl_abbreviated_legal_description varchar(1024),
    pl_geocode_service_disabled boolean,
    pl_vesting_confirmed boolean,
    pl_previous_title_manner_held_description varchar(1024),
    pl_legal_lot_na boolean,
    pl_legal_block_na boolean,
    pl_legal_section_na boolean,
    pl_legal_description_confirmed boolean,
    pl_lead_inspection_required varchar(128),
    pl_calculated_lead_inspection_required varchar(128),
    pl_geocode_system_error boolean,
    pl_mixed_use varchar(128),
    pl_mixed_use_verified boolean,
    pl_mixed_use_area_square_feet integer,
    pl_mixed_use_area_square_feet_verified boolean,
    pl_mixed_use_area_percent numeric(11,9),
    pl_trust_classification_type varchar(128),
    pl_additional_building_area_square_feet integer,
    pl_acquisition_date_verified boolean,
    pl_acquisition_cost_amount_verified boolean,
    pl_property_tax_id_verified boolean,
    pl_seller_acquired_date_verified boolean,
    pl_seller_original_cost_amount_verified boolean,
    pl_snapshotted_pid bigint
);

alter table staging_octane.place owner to deployer;

create index idx_place__pid_version
    on staging_octane.place (pl_pid, pl_version);

grant select on staging_octane.place to readonly;

grant delete, insert, select, truncate, update on staging_octane.place to dms_octane_writer;

grant select on staging_octane.place to etl_loan;

create table staging_octane.borrower_reo
(
    breo_pid bigint not null
        constraint borrower_reo_pkey
            primary key,
    breo_version integer,
    breo_borrower_pid bigint,
    breo_place_pid bigint,
    breo_ownership_percent numeric(11,9)
);

alter table staging_octane.borrower_reo owner to deployer;

create index idx_borrower_reo__pid_version
    on staging_octane.borrower_reo (breo_pid, breo_version);

grant select on staging_octane.borrower_reo to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower_reo to dms_octane_writer;

grant select on staging_octane.borrower_reo to etl_loan;

create table staging_octane.borrower_residence
(
    bres_pid bigint not null
        constraint borrower_residence_pkey
            primary key,
    bres_version integer,
    bres_borrower_pid bigint,
    bres_place_pid bigint,
    bres_current boolean,
    bres_borrower_residency_basis_type varchar(128),
    bres_from_date date,
    bres_through_date date,
    bres_verification_required boolean
);

alter table staging_octane.borrower_residence owner to deployer;

create index idx_borrower_residence__pid_version
    on staging_octane.borrower_residence (bres_pid, bres_version);

grant select on staging_octane.borrower_residence to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower_residence to dms_octane_writer;

grant select on staging_octane.borrower_residence to etl_loan;

create table staging_octane.borrower_tax_filing
(
    btf_pid bigint not null
        constraint borrower_tax_filing_pkey
            primary key,
    btf_version integer,
    btf_borrower_pid bigint,
    btf_place_pid bigint,
    btf_tax_filing_status_type varchar(128),
    btf_year integer,
    btf_joint_is_coborrower boolean,
    btf_joint_filer_first_name varchar(32),
    btf_joint_filer_middle_name varchar(32),
    btf_joint_filer_last_name varchar(32),
    btf_joint_filer_suffix varchar(32)
);

alter table staging_octane.borrower_tax_filing owner to deployer;

create index idx_borrower_tax_filing__pid_version
    on staging_octane.borrower_tax_filing (btf_pid, btf_version);

grant select on staging_octane.borrower_tax_filing to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower_tax_filing to dms_octane_writer;

grant select on staging_octane.borrower_tax_filing to etl_loan;

create table staging_octane.borrower_va
(
    bva_pid bigint not null
        constraint borrower_va_pkey
            primary key,
    bva_version integer,
    bva_borrower_pid bigint,
    bva_veteran_status_type varchar(128),
    bva_va_funding_fee_exempt boolean,
    bva_subsequent_use boolean,
    bva_claim_folder_number varchar(32),
    bva_benefit_related_indebtedness varchar(128),
    bva_available_entitlement_amount numeric(15,2),
    bva_va_entitlement_code_type varchar(128),
    bva_disability_benefits_prior_to_discharge varchar(128),
    bva_active_duty_following_separation varchar(128),
    bva_separated_from_service_due_to_disability varchar(128),
    bva_disability_payments varchar(128),
    bva_surviving_spouse_receiving_dic_payments varchar(128),
    bva_surviving_spouse_dic_claim_number varchar(128),
    bva_deceased_spouse_first_name varchar(32),
    bva_deceased_spouse_middle_name varchar(32),
    bva_deceased_spouse_last_name varchar(32),
    bva_deceased_spouse_name_suffix varchar(32),
    bva_deceased_spouse_claim_folder_number varchar(32),
    bva_deceased_spouse_claim_folder_location varchar(32),
    bva_deceased_spouse_service_number varchar(32),
    bva_deceased_spouse_military_branch_type varchar(128),
    bva_deceased_spouse_birth_date date,
    bva_deceased_spouse_death_date date,
    bva_deceased_spouse_service_from_date_1 date,
    bva_deceased_spouse_service_through_date_1 date,
    bva_deceased_spouse_service_from_date_2 date,
    bva_deceased_spouse_service_through_date_2 date,
    bva_deceased_spouse_service_from_date_3 date,
    bva_deceased_spouse_service_through_date_3 date,
    bva_previously_applied_for_eligibility varchar(128),
    bva_previously_secured_center_type varchar(128),
    bva_previously_applied_for_eligibility_center_type varchar(128),
    bva_previously_received_certificate_of_eligibility_center_type varchar(128),
    bva_previously_received_certificate_of_eligibility varchar(128),
    bva_previous_loan_address_street1 varchar(128),
    bva_previous_loan_address_street2 varchar(128),
    bva_previous_loan_address_city varchar(128),
    bva_previous_loan_address_state varchar(128),
    bva_previous_loan_address_postal_code varchar(128),
    bva_previous_loan_number varchar(128),
    bva_previous_loan_month integer,
    bva_previous_loan_year integer,
    bva_veteran_poa_verification_date date,
    bva_relative_first_name varchar(32),
    bva_relative_middle_name varchar(32),
    bva_relative_last_name varchar(32),
    bva_relative_name_suffix varchar(32),
    bva_relative_address_street1 varchar(128),
    bva_relative_address_street2 varchar(128),
    bva_relative_address_city varchar(128),
    bva_relative_address_state varchar(128),
    bva_relative_address_postal_code varchar(128),
    bva_relative_phone_number varchar(32),
    bva_va_relative_relationship_type varchar(128),
    bva_va_relative_relationship_other_description varchar(32),
    bva_service_related_disability boolean,
    bva_purple_heart_recipient boolean,
    bva_va_funding_fee_exemption_verified boolean,
    bva_entitlement_charged_amount numeric(15,2),
    bva_used_entitlement_amount numeric(15,2),
    bva_va_entitlement_restoration_type varchar(128),
    bva_previous_use_place_pid bigint,
    bva_entitled_to_military_based_facilities varchar(128),
    bva_one_hundred_percent_disabled_veteran varchar(128),
    bva_medal_of_honor_recipient boolean
);

alter table staging_octane.borrower_va owner to deployer;

create index idx_borrower_va__pid_version
    on staging_octane.borrower_va (bva_pid, bva_version);

grant select on staging_octane.borrower_va to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower_va to dms_octane_writer;

grant select on staging_octane.borrower_va to etl_loan;

create table staging_octane.profit_margin_detail
(
    pmd_pid bigint not null
        constraint profit_margin_detail_pkey
            primary key,
    pmd_version integer,
    pmd_lender_lock_minor_pid bigint,
    pmd_profit_margin_type varchar(128),
    pmd_description varchar(128),
    pmd_percent numeric(11,9),
    pmd_dollars numeric(15,2),
    pmd_adjustment_description varchar(16000)
);

alter table staging_octane.profit_margin_detail owner to deployer;

create index idx_profit_margin_detail__pid_version
    on staging_octane.profit_margin_detail (pmd_pid, pmd_version);

grant select on staging_octane.profit_margin_detail to readonly;

grant delete, insert, select, truncate, update on staging_octane.profit_margin_detail to dms_octane_writer;

grant select on staging_octane.profit_margin_detail to etl_loan;

create table staging_octane.proposal_contractor
(
    pctr_pid bigint not null
        constraint proposal_contractor_pkey
            primary key,
    pctr_version integer,
    pctr_proposal_pid bigint,
    pctr_contractor_pid bigint
);

alter table staging_octane.proposal_contractor owner to deployer;

create index idx_proposal_contractor__pid_version
    on staging_octane.proposal_contractor (pctr_pid, pctr_version);

grant select on staging_octane.proposal_contractor to readonly;

grant delete, insert, select, truncate, update on staging_octane.proposal_contractor to dms_octane_writer;

grant select on staging_octane.proposal_contractor to etl_loan;

create table staging_octane.construction_cost
(
    coc_pid bigint not null
        constraint construction_cost_pkey
            primary key,
    coc_version integer,
    coc_proposal_pid bigint,
    coc_construction_cost_category_type varchar(128),
    coc_construction_cost_funding_type varchar(128),
    coc_construction_cost_status_type varchar(128),
    coc_construction_cost_payee_type varchar(128),
    coc_create_datetime timestamp,
    coc_construction_cost_amount numeric(15,2),
    coc_construction_cost_notes varchar(1024),
    coc_proposal_contractor_pid bigint,
    coc_effective_construction_cost_calculation_percent numeric(11,9),
    coc_construction_cost_calculation_type varchar(128),
    coc_permit_pid bigint,
    coc_category_type_label varchar(256),
    coc_calculated_construction_cost_percent numeric(11,9),
    coc_overridden_construction_cost_percent numeric(11,9),
    coc_construction_cost_calculation_percent_override_reason varchar(1024),
    coc_calculated_construction_cost_months integer,
    coc_overridden_construction_cost_months integer,
    coc_effective_construction_cost_months integer,
    coc_construction_cost_months_override_reason varchar(1024),
    coc_charge_type varchar(128),
    coc_draw_discrepancy_text varchar(1024),
    coc_impeding_draw_discrepancy boolean,
    coc_borrower_pid bigint,
    coc_proposal_hud_consultant_pid bigint,
    coc_title_company_pid bigint,
    coc_payee_other_selected boolean,
    coc_payee_other_description varchar(128)
);

alter table staging_octane.construction_cost owner to deployer;

create index idx_construction_cost__pid_version
    on staging_octane.construction_cost (coc_pid, coc_version);

grant select on staging_octane.construction_cost to readonly;

grant delete, insert, select, truncate, update on staging_octane.construction_cost to dms_octane_writer;

grant select on staging_octane.construction_cost to etl_loan;

create table staging_octane.construction_draw_item
(
    cdi_pid bigint not null
        constraint construction_draw_item_pkey
            primary key,
    cdi_version integer,
    cdi_proposal_pid bigint,
    cdi_construction_cost_pid bigint,
    cdi_construction_draw_pid bigint,
    cdi_construction_draw_item_amount numeric(15,2),
    cdi_construction_draw_item_borrower_contribution_amount numeric(15,2),
    cdi_construction_draw_item_lender_contribution_amount numeric(15,2)
);

alter table staging_octane.construction_draw_item owner to deployer;

create index idx_construction_draw_item__pid_version
    on staging_octane.construction_draw_item (cdi_pid, cdi_version);

grant select on staging_octane.construction_draw_item to readonly;

grant delete, insert, select, truncate, update on staging_octane.construction_draw_item to dms_octane_writer;

grant select on staging_octane.construction_draw_item to etl_loan;

create table staging_octane.proposal_doc_set
(
    prpds_pid bigint not null
        constraint proposal_doc_set_pkey
            primary key,
    prpds_version integer,
    prpds_proposal_pid bigint,
    prpds_smart_doc_set_pid bigint,
    prpds_create_datetime timestamp,
    prpds_delivered_or_mailed_datetime timestamp,
    prpds_creator_agent_type varchar(128),
    prpds_creator_lender_user_pid bigint,
    prpds_creator_unparsed_name varchar(128),
    prpds_requested_datetime timestamp,
    prpds_requester_agent_type varchar(128),
    prpds_requester_lender_user_pid bigint,
    prpds_requester_unparsed_name varchar(128),
    prpds_signed_date date,
    prpds_delivery_method_type varchar(128),
    prpds_tracking_number varchar(32),
    prpds_affects_earliest_allowed_consummation_date boolean,
    prpds_name varchar(128),
    prpds_docusign_package_pid bigint,
    prpds_esign_vendor_type varchar(128),
    prpds_esign_evidence_deal_file_pid bigint,
    prpds_doc_package_status_type varchar(128),
    prpds_canceled_reason_type varchar(128),
    prpds_canceled_datetime timestamp,
    prpds_canceler_agent_type varchar(128),
    prpds_canceler_lender_user_pid bigint,
    prpds_canceler_unparsed_name varchar(128),
    prpds_canceled_reason varchar(16000),
    prpds_proposal_doc_set_id integer,
    prpds_docs_last_updated_datetime timestamp
);

alter table staging_octane.proposal_doc_set owner to deployer;

create index idx_proposal_doc_set__pid_version
    on staging_octane.proposal_doc_set (prpds_pid, prpds_version);

grant select on staging_octane.proposal_doc_set to readonly;

grant delete, insert, select, truncate, update on staging_octane.proposal_doc_set to dms_octane_writer;

grant select on staging_octane.proposal_doc_set to etl_loan;

create table staging_octane.proposal_doc_set_id_ticker
(
    pdstk_pid bigint not null
        constraint proposal_doc_set_id_ticker_pkey
            primary key,
    pdstk_version integer,
    pdstk_proposal_pid bigint,
    pdstk_smart_doc_set_pid bigint,
    pdstk_next_proposal_doc_set_id integer
);

alter table staging_octane.proposal_doc_set_id_ticker owner to deployer;

create index idx_proposal_doc_set_id_ticker__pid_version
    on staging_octane.proposal_doc_set_id_ticker (pdstk_pid, pdstk_version);

grant select on staging_octane.proposal_doc_set_id_ticker to readonly;

grant delete, insert, select, truncate, update on staging_octane.proposal_doc_set_id_ticker to dms_octane_writer;

grant select on staging_octane.proposal_doc_set_id_ticker to etl_loan;

create table staging_octane.proposal_doc_set_signer
(
    prpdss_pid bigint not null
        constraint proposal_doc_set_signer_pkey
            primary key,
    prpdss_version integer,
    prpdss_proposal_doc_set_pid bigint,
    prpdss_deal_signer_pid bigint,
    prpdss_esign_complete boolean,
    prpdss_received_datetime timestamp,
    prpdss_signed_datetime timestamp
);

alter table staging_octane.proposal_doc_set_signer owner to deployer;

create index idx_proposal_doc_set_signer__pid_version
    on staging_octane.proposal_doc_set_signer (prpdss_pid, prpdss_version);

grant select on staging_octane.proposal_doc_set_signer to readonly;

grant delete, insert, select, truncate, update on staging_octane.proposal_doc_set_signer to dms_octane_writer;

grant select on staging_octane.proposal_doc_set_signer to etl_loan;

create table staging_octane.proposal_doc_set_snapshot
(
    prpdssn_pid bigint not null
        constraint proposal_doc_set_snapshot_pkey
            primary key,
    prpdssn_version integer,
    prpdssn_proposal_doc_set_pid bigint,
    prpdssn_snapshot_proposal_pid bigint
);

alter table staging_octane.proposal_doc_set_snapshot owner to deployer;

create index idx_proposal_doc_set_snapshot__pid_version
    on staging_octane.proposal_doc_set_snapshot (prpdssn_pid, prpdssn_version);

grant select on staging_octane.proposal_doc_set_snapshot to readonly;

grant delete, insert, select, truncate, update on staging_octane.proposal_doc_set_snapshot to dms_octane_writer;

grant select on staging_octane.proposal_doc_set_snapshot to etl_loan;

create table staging_octane.proposal_engagement
(
    prpe_pid bigint not null
        constraint proposal_engagement_pkey
            primary key,
    prpe_version integer,
    prpe_proposal_pid bigint,
    prpe_borrower_engagement_percent numeric(11,9)
);

alter table staging_octane.proposal_engagement owner to deployer;

create index idx_proposal_engagement__pid_version
    on staging_octane.proposal_engagement (prpe_pid, prpe_version);

grant select on staging_octane.proposal_engagement to readonly;

grant delete, insert, select, truncate, update on staging_octane.proposal_engagement to dms_octane_writer;

grant select on staging_octane.proposal_engagement to etl_loan;

create table staging_octane.proposal_grant_program
(
    pgp_pid bigint not null
        constraint proposal_grant_program_pkey
            primary key,
    pgp_version integer,
    pgp_proposal_pid bigint,
    pgp_account_grant_program_pid bigint,
    pgp_grant_amount numeric(15,2),
    pgp_snapshotted_pid bigint
);

alter table staging_octane.proposal_grant_program owner to deployer;

create index idx_proposal_grant_program__pid_version
    on staging_octane.proposal_grant_program (pgp_pid, pgp_version);

grant select on staging_octane.proposal_grant_program to readonly;

grant delete, insert, select, truncate, update on staging_octane.proposal_grant_program to dms_octane_writer;

grant select on staging_octane.proposal_grant_program to etl_loan;

create table staging_octane.proposal_review
(
    prpre_pid bigint not null
        constraint proposal_review_pkey
            primary key,
    prpre_version integer,
    prpre_proposal_pid bigint,
    prpre_request_id integer,
    prpre_request_datetime timestamp,
    prpre_request_by_lender_user_pid bigint,
    prpre_request_summary text,
    prpre_proposal_review_status_type varchar(128),
    prpre_decision_datetime timestamp,
    prpre_decision_by_lender_user_pid bigint,
    prpre_decision_summary text
);

alter table staging_octane.proposal_review owner to deployer;

create index idx_proposal_review__pid_version
    on staging_octane.proposal_review (prpre_pid, prpre_version);

grant select on staging_octane.proposal_review to readonly;

grant delete, insert, select, truncate, update on staging_octane.proposal_review to dms_octane_writer;

grant select on staging_octane.proposal_review to etl_loan;

create table staging_octane.proposal_review_ticker
(
    prpret_pid bigint not null
        constraint proposal_review_ticker_pkey
            primary key,
    prpret_version integer,
    prpret_proposal_pid bigint,
    prpret_next_id integer
);

alter table staging_octane.proposal_review_ticker owner to deployer;

create index idx_proposal_review_ticker__pid_version
    on staging_octane.proposal_review_ticker (prpret_pid, prpret_version);

grant select on staging_octane.proposal_review_ticker to readonly;

grant delete, insert, select, truncate, update on staging_octane.proposal_review_ticker to dms_octane_writer;

grant select on staging_octane.proposal_review_ticker to etl_loan;

create table staging_octane.proposal_summary
(
    ps_pid bigint not null
        constraint proposal_summary_pkey
            primary key,
    ps_version integer,
    ps_proposal_pid bigint,
    ps_subject_property_city varchar(128),
    ps_subject_property_country varchar(128),
    ps_subject_property_postal_code varchar(128),
    ps_subject_property_state varchar(128),
    ps_subject_property_street1 varchar(128),
    ps_subject_property_street2 varchar(128),
    ps_note_rate_percent_main numeric(11,9),
    ps_note_rate_percent_piggyback numeric(11,9),
    ps_initial_note_rate_percent_main numeric(11,9),
    ps_initial_note_rate_percent_piggyback numeric(11,9),
    ps_base_loan_amount_main numeric(17,2),
    ps_base_loan_amount_piggyback numeric(17,2),
    ps_loan_amount_main numeric(17,2),
    ps_loan_amount_piggyback numeric(17,2),
    ps_product_special_program_type_main varchar(128),
    ps_product_special_program_type_piggyback varchar(128),
    ps_investor_pid_main bigint,
    ps_investor_pid_piggyback bigint,
    ps_product_fnm_community_lending_product_type_main varchar(128),
    ps_product_fnm_community_lending_product_type_piggyback varchar(128),
    ps_product_fre_community_program_type_main varchar(128),
    ps_product_fre_community_program_type_piggyback varchar(128),
    ps_mortgage_type_main varchar(128),
    ps_mortgage_type_piggyback varchar(128),
    ps_b1_first_name varchar(32),
    ps_c1_first_name varchar(32),
    ps_b2_first_name varchar(32),
    ps_b1_last_name varchar(32),
    ps_c1_last_name varchar(32),
    ps_b2_last_name varchar(32),
    ps_b1_middle_name varchar(32),
    ps_c1_middle_name varchar(32),
    ps_b2_middle_name varchar(32),
    ps_b1_preferred_first_name varchar(32),
    ps_b2_preferred_first_name varchar(32),
    ps_c1_preferred_first_name varchar(32),
    ps_b1_birth_date date,
    ps_c1_birth_date date,
    ps_b1_monthly_income numeric(15,2),
    ps_c1_monthly_income numeric(15,2),
    ps_b2_monthly_income numeric(15,2),
    ps_b1_has_business_income boolean,
    ps_c1_has_business_income boolean,
    ps_b2_has_business_income boolean,
    ps_b1_citizenship_residency_type varchar(128),
    ps_c1_citizenship_residency_type varchar(128),
    ps_b2_citizenship_residency_type varchar(128),
    ps_b1_hmda_ethnicity_2017_type varchar(128),
    ps_c1_hmda_ethnicity_2017_type varchar(128),
    ps_b2_hmda_ethnicity_2017_type varchar(128),
    ps_b1_decision_credit_score integer,
    ps_c1_decision_credit_score integer,
    ps_b2_decision_credit_score integer,
    ps_b1_gender_type varchar(128),
    ps_c1_gender_type varchar(128),
    ps_b2_gender_type varchar(128),
    ps_b1_hmda_race_2017_type varchar(128),
    ps_c1_hmda_race_2017_type varchar(128),
    ps_b2_hmda_race_2017_type varchar(128),
    ps_any_lender_employee_borrower boolean,
    ps_upfront_mi_percent_main numeric(11,9),
    ps_upfront_mi_percent_piggyback numeric(11,9),
    ps_primary_application_name varchar(128),
    ps_investor_loan_id_main varchar(32),
    ps_investor_loan_id_piggyback varchar(32),
    ps_initial_servicer_investor_loan_id_main varchar(32),
    ps_initial_servicer_investor_loan_id_piggyback varchar(32),
    ps_current_servicer_investor_loan_id_main varchar(32),
    ps_current_servicer_investor_loan_id_piggyback varchar(32),
    ps_offering_id_main varchar(32),
    ps_offering_id_piggyback varchar(32),
    ps_proposal_structure_type varchar(128),
    ps_loan_maturity_date_main date,
    ps_loan_maturity_date_piggyback date,
    ps_ltv_ratio_percent_main numeric(11,9),
    ps_ltv_ratio_percent_piggyback numeric(11,9),
    ps_cltv_ratio_percent numeric(11,9),
    ps_hcltv_ratio_percent numeric(11,9),
    ps_hcltv_applicable boolean,
    ps_debt_ratio_percent numeric(11,9),
    ps_housing_ratio_percent numeric(11,9),
    ps_property_category_type varchar(128),
    ps_any_first_time_home_buyer boolean,
    ps_primary_housing_expense_amount numeric(15,2),
    ps_non_primary_housing_expense_amount numeric(15,2),
    ps_income_monthly_total_amount numeric(15,2),
    ps_asset_total_amount numeric(15,2),
    ps_liquid_asset_total_amount numeric(15,2),
    ps_liability_unpaid_balance_total_amount numeric(15,2),
    ps_liability_monthly_payment_total_amount numeric(15,2),
    ps_monthly_pitia_amount numeric(15,2),
    ps_cash_from_borrower_amount_signed numeric(15,2),
    ps_proposed_monthly_housing_and_debt_amount numeric(15,2),
    ps_funding_date_main date,
    ps_funding_date_piggyback date,
    ps_interim_funder_company_name varchar(128),
    ps_interim_funder_mers_org_id varchar(7),
    ps_funding_scheduled_release_date_main date,
    ps_funding_scheduled_release_date_piggyback date,
    ps_uuts_aus_recommendation_description varchar(32),
    ps_interest_rate_fee_amount_signed numeric(15,2),
    ps_interest_rate_fee_amount_signed_main numeric(15,2),
    ps_interest_rate_fee_amount_signed_piggyback numeric(15,2),
    ps_origination_fees_amount_signed numeric(15,2),
    ps_origination_fees_amount_signed_main numeric(15,2),
    ps_origination_fees_amount_signed_piggyback numeric(15,2),
    ps_any_escrow_waived boolean,
    ps_initial_rate_adjustment_date_main date,
    ps_initial_rate_adjustment_date_piggyback date,
    ps_tolerance_cure_amount_signed numeric(15,2),
    ps_tolerance_cure_amount_signed_main numeric(15,2),
    ps_tolerance_cure_amount_signed_piggyback numeric(15,2),
    ps_subject_property_existing_subordinate_2nd boolean,
    ps_subject_property_subordinate_2nd_creditor_pid bigint,
    ps_subject_property_existing_subordinate_3rd boolean,
    ps_subject_property_subordinate_3rd_creditor_pid bigint,
    ps_total_monthly_solar_lease_payments_amount numeric(15,2),
    ps_total_debt_payoff_amount numeric(15,2),
    ps_total_new_subordinate_financing_amount numeric(15,2),
    ps_total_grant_amount numeric(15,2),
    ps_any_third_party_community_second boolean,
    ps_any_grant_program boolean,
    ps_initial_loan_estimate_loan_amount_main numeric(17,2),
    ps_initial_loan_estimate_loan_amount_piggyback numeric(17,2),
    ps_any_mortgage_credit_certificate boolean,
    ps_debt_ratio_excluding_mi_percent numeric(11,9),
    ps_fund_source_type_main varchar(128),
    ps_fund_source_type_piggyback varchar(128),
    ps_mortgage_credit_certificate_issuer_pid bigint,
    ps_subject_property_new_subordinate_2nd boolean,
    ps_subject_property_new_subordinate_3rd boolean,
    ps_any_borrower_self_employed boolean,
    ps_fha_section_of_act_coarse_type_main varchar(128),
    ps_fha_section_of_act_coarse_type_piggyback varchar(128),
    ps_fha_special_program_type_main varchar(128),
    ps_fha_special_program_type_piggyback varchar(128),
    ps_product_pid_main bigint,
    ps_product_pid_piggyback bigint,
    ps_net_origination_charge_main numeric(15,2),
    ps_net_origination_charge_piggyback numeric(15,2),
    ps_household_income_guideline_percent numeric(22,9),
    ps_applicant_count smallint,
    ps_early_wire_total_charge_amount_main numeric(15,2),
    ps_early_wire_total_charge_amount_piggyback numeric(15,2),
    ps_funding_scheduled_release_date_auto_compute_main boolean,
    ps_funding_scheduled_release_date_auto_compute_piggyback boolean,
    ps_any_hoa_certification_fee boolean,
    ps_effective_agency_case_id_main varchar(64),
    ps_effective_agency_case_id_piggyback varchar(64),
    ps_effective_agency_case_id_assigned_date_main date,
    ps_effective_agency_case_id_assigned_date_piggyback date
);

alter table staging_octane.proposal_summary owner to deployer;

create index idx_proposal_summary__pid_version
    on staging_octane.proposal_summary (ps_pid, ps_version);

grant select on staging_octane.proposal_summary to readonly;

grant delete, insert, select, truncate, update on staging_octane.proposal_summary to dms_octane_writer;

grant select on staging_octane.proposal_summary to etl_loan;

create table staging_octane.pte_request
(
    pter_pid bigint not null
        constraint pte_request_pkey
            primary key,
    pter_version integer,
    pter_proposal_pid bigint,
    pter_create_datetime timestamp,
    pter_pte_request_status_type varchar(128),
    pter_pte_response_status_type varchar(128),
    pter_pte_error_messages text,
    pter_address_street1 varchar(128),
    pter_address_street2 varchar(128),
    pter_address_city varchar(128),
    pter_address_state varchar(128),
    pter_address_postal_code varchar(128),
    pter_response_xml_pid bigint,
    pter_response_pdf_file_pid bigint,
    pter_submitting_party_order_id varchar(128),
    pter_responding_party_order_id varchar(32),
    pter_fulfillment_party_order_id varchar(32),
    pter_building_status_type varchar(128),
    pter_loan_purpose_type varchar(128),
    pter_effective_property_value_amount numeric(15),
    pter_property_usage_type varchar(128)
);

alter table staging_octane.pte_request owner to deployer;

create index idx_pte_request__pid_version
    on staging_octane.pte_request (pter_pid, pter_version);

grant select on staging_octane.pte_request to readonly;

grant delete, insert, select, truncate, update on staging_octane.pte_request to dms_octane_writer;

grant select on staging_octane.pte_request to etl_loan;

create table staging_octane.public_record
(
    pr_pid bigint not null
        constraint public_record_pkey
            primary key,
    pr_version integer,
    pr_proposal_pid bigint,
    pr_credit_request_pid bigint,
    pr_public_record_type varchar(128),
    pr_public_record_type_other_description varchar(32),
    pr_public_record_disposition_type varchar(128),
    pr_report_public_record_disposition_type varchar(128),
    pr_disposition_date date,
    pr_filed_date date,
    pr_reported_date date,
    pr_settled_date date,
    pr_paid_date date,
    pr_docket_id varchar(32),
    pr_bankruptcy_exception_type varchar(128),
    pr_bankruptcy_assets_amount numeric(15,2),
    pr_bankruptcy_exempt_amount numeric(15,2),
    pr_bankruptcy_liabilities_amount numeric(15,2),
    pr_legal_obligation_amount numeric(15,2),
    pr_court_name varchar(128),
    pr_plaintiff_name varchar(128),
    pr_defendant_name varchar(128),
    pr_attorney_name varchar(128),
    pr_comment varchar(16000),
    pr_note varchar(1024),
    pr_equifax_included boolean,
    pr_experian_included boolean,
    pr_trans_union_included boolean,
    pr_credit_report_identifier varchar(32)
);

alter table staging_octane.public_record owner to deployer;

create index idx_public_record__pid_version
    on staging_octane.public_record (pr_pid, pr_version);

grant select on staging_octane.public_record to readonly;

grant delete, insert, select, truncate, update on staging_octane.public_record to dms_octane_writer;

grant select on staging_octane.public_record to etl_loan;

create table staging_octane.borrower_public_record
(
    bpr_pid bigint not null
        constraint borrower_public_record_pkey
            primary key,
    bpr_version integer,
    bpr_borrower_pid bigint,
    bpr_public_record_pid bigint
);

alter table staging_octane.borrower_public_record owner to deployer;

create index idx_borrower_public_record__pid_version
    on staging_octane.borrower_public_record (bpr_pid, bpr_version);

grant select on staging_octane.borrower_public_record to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower_public_record to dms_octane_writer;

grant select on staging_octane.borrower_public_record to etl_loan;

create table staging_octane.rental_income
(
    ri_pid bigint not null
        constraint rental_income_pkey
            primary key,
    ri_version integer,
    ri_borrower_income_pid bigint,
    ri_place_pid bigint,
    ri_schedule_e_input boolean,
    ri_rental_income_estimated_mode boolean,
    ri_rental_income_estimated_gross_monthly_amount numeric(15,2),
    ri_simple_monthly_total_amount numeric(15,2),
    ri_schedule_e_calculated_gross_monthly_amount numeric(15,2),
    ri_schedule_e_proposed_monthly_expense_amount numeric(15,2),
    ri_schedule_e_net_monthly_amount numeric(15,2),
    ri_rental_income_monthly_total_amount numeric(15,2),
    ri_schedule_e_non_recurring_expense_1 varchar(128),
    ri_schedule_e_non_recurring_expense_2 varchar(128),
    ri_schedule_e_non_recurring_expense_3 varchar(128),
    ri_rental_income_calc_method varchar(128),
    ri_common_year1_year integer,
    ri_common_year1_year_include boolean,
    ri_common_year1_from_date date,
    ri_common_year1_through_date date,
    ri_common_year1_months numeric(4,2),
    ri_common_year1_annual_total_amount numeric(15,2),
    ri_common_year1_monthly_total_amount numeric(15,2),
    ri_common_year2_year integer,
    ri_common_year2_year_include boolean,
    ri_common_year2_from_date date,
    ri_common_year2_through_date date,
    ri_common_year2_months numeric(4,2),
    ri_common_year2_annual_total_amount numeric(15,2),
    ri_common_year2_monthly_total_amount numeric(15,2),
    ri_common_year3_year integer,
    ri_common_year3_year_include boolean,
    ri_common_year3_from_date date,
    ri_common_year3_through_date date,
    ri_common_year3_months numeric(4,2),
    ri_common_year3_annual_total_amount numeric(15,2),
    ri_common_year3_monthly_total_amount numeric(15,2),
    ri_schedule_e_year1_rent_received_amount numeric(15,2),
    ri_schedule_e_year1_advertising_expense_amount numeric(15,2),
    ri_schedule_e_year1_auto_travel_expense_amount numeric(15,2),
    ri_schedule_e_year1_cleaning_maintenance_expense_amount numeric(15,2),
    ri_schedule_e_year1_commissions_expense_amount numeric(15,2),
    ri_schedule_e_year1_insurance_expense_amount numeric(15,2),
    ri_schedule_e_year1_legal_professional_expense_amount numeric(15,2),
    ri_schedule_e_year1_management_expense_amount numeric(15,2),
    ri_schedule_e_year1_mortgage_interest_expense_amount numeric(15,2),
    ri_schedule_e_year1_other_interest_expense_amount numeric(15,2),
    ri_schedule_e_year1_repairs_expense_amount numeric(15,2),
    ri_schedule_e_year1_supplies_expense_amount numeric(15,2),
    ri_schedule_e_year1_taxes_expense_amount numeric(15,2),
    ri_schedule_e_year1_utilities_expense_amount numeric(15,2),
    ri_schedule_e_year1_depreciation_expense_amount numeric(15,2),
    ri_schedule_e_year1_other_expense_amount numeric(15,2),
    ri_schedule_e_year1_total_expense_amount numeric(15,2),
    ri_schedule_e_year1_non_recurring_expense_amount_1 numeric(15,2),
    ri_schedule_e_year1_non_recurring_expense_amount_2 numeric(15,2),
    ri_schedule_e_year1_non_recurring_expense_amount_3 numeric(15,2),
    ri_schedule_e_year1_insurance_credit_amount numeric(15,2),
    ri_schedule_e_year1_taxes_credit_amount numeric(15,2),
    ri_schedule_e_year1_annual_subtotal numeric(15,2),
    ri_schedule_e_year1_ownership_percent numeric(11,9),
    ri_schedule_e_year2_rent_received_amount numeric(15,2),
    ri_schedule_e_year2_advertising_expense_amount numeric(15,2),
    ri_schedule_e_year2_auto_travel_expense_amount numeric(15,2),
    ri_schedule_e_year2_cleaning_maintenance_expense_amount numeric(15,2),
    ri_schedule_e_year2_commissions_expense_amount numeric(15,2),
    ri_schedule_e_year2_insurance_expense_amount numeric(15,2),
    ri_schedule_e_year2_legal_professional_expense_amount numeric(15,2),
    ri_schedule_e_year2_management_expense_amount numeric(15,2),
    ri_schedule_e_year2_mortgage_interest_expense_amount numeric(15,2),
    ri_schedule_e_year2_other_interest_expense_amount numeric(15,2),
    ri_schedule_e_year2_repairs_expense_amount numeric(15,2),
    ri_schedule_e_year2_supplies_expense_amount numeric(15,2),
    ri_schedule_e_year2_taxes_expense_amount numeric(15,2),
    ri_schedule_e_year2_utilities_expense_amount numeric(15,2),
    ri_schedule_e_year2_depreciation_expense_amount numeric(15,2),
    ri_schedule_e_year2_other_expense_amount numeric(15,2),
    ri_schedule_e_year2_total_expense_amount numeric(15,2),
    ri_schedule_e_year2_non_recurring_expense_amount_1 numeric(15,2),
    ri_schedule_e_year2_non_recurring_expense_amount_2 numeric(15,2),
    ri_schedule_e_year2_non_recurring_expense_amount_3 numeric(15,2),
    ri_schedule_e_year2_insurance_credit_amount numeric(15,2),
    ri_schedule_e_year2_taxes_credit_amount numeric(15,2),
    ri_schedule_e_year2_annual_subtotal numeric(15,2),
    ri_schedule_e_year2_ownership_percent numeric(11,9),
    ri_schedule_e_year3_rent_received_amount numeric(15,2),
    ri_schedule_e_year3_advertising_expense_amount numeric(15,2),
    ri_schedule_e_year3_auto_travel_expense_amount numeric(15,2),
    ri_schedule_e_year3_cleaning_maintenance_expense_amount numeric(15,2),
    ri_schedule_e_year3_commissions_expense_amount numeric(15,2),
    ri_schedule_e_year3_insurance_expense_amount numeric(15,2),
    ri_schedule_e_year3_legal_professional_expense_amount numeric(15,2),
    ri_schedule_e_year3_management_expense_amount numeric(15,2),
    ri_schedule_e_year3_mortgage_interest_expense_amount numeric(15,2),
    ri_schedule_e_year3_other_interest_expense_amount numeric(15,2),
    ri_schedule_e_year3_repairs_expense_amount numeric(15,2),
    ri_schedule_e_year3_supplies_expense_amount numeric(15,2),
    ri_schedule_e_year3_taxes_expense_amount numeric(15,2),
    ri_schedule_e_year3_utilities_expense_amount numeric(15,2),
    ri_schedule_e_year3_depreciation_expense_amount numeric(15,2),
    ri_schedule_e_year3_other_expense_amount numeric(15,2),
    ri_schedule_e_year3_total_expense_amount numeric(15,2),
    ri_schedule_e_year3_non_recurring_expense_amount_1 numeric(15,2),
    ri_schedule_e_year3_non_recurring_expense_amount_2 numeric(15,2),
    ri_schedule_e_year3_non_recurring_expense_amount_3 numeric(15,2),
    ri_schedule_e_year3_insurance_credit_amount numeric(15,2),
    ri_schedule_e_year3_taxes_credit_amount numeric(15,2),
    ri_schedule_e_year3_annual_subtotal numeric(15,2),
    ri_schedule_e_year3_ownership_percent numeric(11,9),
    ri_simple_monthly_rent_amount numeric(15,2),
    ri_simple_vacancy_maintenance_adjustment_percent numeric(11,9),
    ri_simple_monthly_net_rent_amount numeric(15,2),
    ri_simple_monthly_expense_amount numeric(15,2),
    ri_simple_monthly_pre_ownership_income_amount numeric(15,2),
    ri_simple_ownership_percent numeric(11,9),
    ri_simple_calculated_monthly_amount numeric(15,2)
);

alter table staging_octane.rental_income owner to deployer;

create index idx_rental_income__pid_version
    on staging_octane.rental_income (ri_pid, ri_version);

grant select on staging_octane.rental_income to readonly;

grant delete, insert, select, truncate, update on staging_octane.rental_income to dms_octane_writer;

grant select on staging_octane.rental_income to etl_loan;

create table staging_octane.sap_quote_request
(
    sqr_pid bigint not null
        constraint sap_quote_request_pkey
            primary key,
    sqr_version integer,
    sqr_deal_pid bigint,
    sqr_include_conventional boolean,
    sqr_include_fha boolean,
    sqr_include_va boolean,
    sqr_include_fixed_rate boolean,
    sqr_include_arm boolean,
    sqr_due_in_term_months_string_list text
);

alter table staging_octane.sap_quote_request owner to deployer;

create index idx_sap_quote_request__pid_version
    on staging_octane.sap_quote_request (sqr_pid, sqr_version);

grant select on staging_octane.sap_quote_request to readonly;

grant delete, insert, select, truncate, update on staging_octane.sap_quote_request to dms_octane_writer;

grant select on staging_octane.sap_quote_request to etl_loan;

create table staging_octane.secondary_settings
(
    sset_pid bigint not null
        constraint secondary_settings_pkey
            primary key,
    sset_version integer,
    sset_account_pid bigint,
    sset_default_lead_source_pid bigint,
    sset_default_mortech_account_pid bigint,
    sset_default_beneficiary_investor_pid bigint,
    sset_default_servicer_investor_pid bigint,
    sset_initial_lender_lock_id bigint,
    sset_initial_lender_trade_id bigint,
    sset_lock_expiration_warning_days integer,
    sset_expired_lock_update_allowed_days integer,
    sset_disable_all_locking boolean,
    sset_pricing_engine_type varchar(128),
    sset_price_match_check_suspend_through_date date,
    sset_mortech_disable_eligibility boolean,
    sset_mortech_strict_eligibility boolean,
    sset_zillow_appraisal_fee numeric(15,2),
    sset_zillow_title_fee numeric(15,2),
    sset_zillow_recording_fee numeric(15,2),
    sset_mortech_floating_adjuster_prefixes varchar(16000),
    sset_rate_lock_acknowledgement_due_days integer,
    sset_rate_lock_supporting_documentation_due_days integer,
    sset_rate_lock_appraisal_inspection_due_days integer,
    sset_min_subordinate_financing_lock_term_days integer,
    sset_servicer_loan_id_minimum_available_threshold integer,
    sset_servicer_loan_id_minimum_available_warning_email varchar(256),
    sset_third_party_base_margin_prefixes varchar(16000),
    sset_third_party_floating_margin_prefixes varchar(16000),
    sset_month_ami_uses_subsequent_year integer,
    sset_day_ami_uses_subsequent_year integer
);

alter table staging_octane.secondary_settings owner to deployer;

create index idx_secondary_settings__pid_version
    on staging_octane.secondary_settings (sset_pid, sset_version);

grant select on staging_octane.secondary_settings to readonly;

grant delete, insert, select, truncate, update on staging_octane.secondary_settings to dms_octane_writer;

grant select on staging_octane.secondary_settings to etl_loan;

create table staging_octane.servicer_loan_id_import_request
(
    slir_pid bigint not null
        constraint servicer_loan_id_import_request_pkey
            primary key,
    slir_version integer,
    slir_account_pid bigint,
    slir_create_datetime timestamp,
    slir_import_lender_user_pid bigint,
    slir_imported_loan_id_count integer,
    slir_error_loan_id_count integer,
    slir_servicer_loan_id_import_request_status_type varchar(128)
);

alter table staging_octane.servicer_loan_id_import_request owner to deployer;

create index idx_servicer_loan_id_import_request__pid_version
    on staging_octane.servicer_loan_id_import_request (slir_pid, slir_version);

grant select on staging_octane.servicer_loan_id_import_request to readonly;

grant delete, insert, select, truncate, update on staging_octane.servicer_loan_id_import_request to dms_octane_writer;

grant select on staging_octane.servicer_loan_id_import_request to etl_loan;

create table staging_octane.servicer_loan_id_assignment
(
    slia_pid bigint not null
        constraint servicer_loan_id_assignment_pkey
            primary key,
    slia_version integer,
    slia_account_pid bigint,
    slia_servicer_loan_id_import_request_pid bigint,
    slia_loan_servicer_pid bigint,
    slia_servicer_loan_id varchar(32),
    slia_servicer_loan_id_assign_type varchar(128),
    slia_assigned_datetime timestamp
);

alter table staging_octane.servicer_loan_id_assignment owner to deployer;

create index idx_servicer_loan_id_assignment__pid_version
    on staging_octane.servicer_loan_id_assignment (slia_pid, slia_version);

grant select on staging_octane.servicer_loan_id_assignment to readonly;

grant delete, insert, select, truncate, update on staging_octane.servicer_loan_id_assignment to dms_octane_writer;

grant select on staging_octane.servicer_loan_id_assignment to etl_loan;

create table staging_octane.smart_doc
(
    sd_pid bigint not null
        constraint smart_doc_pkey
            primary key,
    sd_version integer,
    sd_account_pid bigint,
    sd_doc_set_type varchar(128),
    sd_custom_form_pid bigint,
    sd_doc_name varchar(767),
    sd_doc_number numeric(15,3),
    sd_doc_category_type varchar(128),
    sd_doc_file_source_type varchar(128),
    sd_doc_external_provider_type varchar(128),
    sd_broker_applicable_provider boolean,
    sd_action_entities_from_merge_field boolean,
    sd_action_entity_applicant boolean,
    sd_action_entity_non_applicant boolean,
    sd_action_entity_underwriter boolean,
    sd_action_entity_originator boolean,
    sd_doc_borrower_access_mode_type varchar(128),
    sd_borrower_explanation varchar(1024),
    sd_deal_child_type varchar(128),
    sd_doc_fulfill_status_type_default varchar(128),
    sd_prior_to_type varchar(128),
    sd_doc_action_type varchar(128),
    sd_e_delivery boolean,
    sd_active boolean,
    sd_key_doc_type varchar(128),
    sd_key_doc_include_file varchar(128),
    sd_doc_approval_type varchar(128),
    sd_auto_approve boolean,
    sd_auto_include_on_request boolean,
    sd_poa_applicable boolean,
    sd_action_entity_hud_va_lender_officer boolean,
    sd_action_entity_collateral_underwriter boolean,
    sd_action_entity_wholesale_client_advocate boolean,
    sd_action_entity_correspondent_client_advocate boolean,
    sd_action_entity_government_insurance boolean,
    sd_action_entity_underwriting_manager boolean,
    sd_action_entity_effective_collateral_underwriter boolean
);

alter table staging_octane.smart_doc owner to deployer;

create index idx_smart_doc__pid_version
    on staging_octane.smart_doc (sd_pid, sd_version);

grant select on staging_octane.smart_doc to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_doc to dms_octane_writer;

grant select on staging_octane.smart_doc to etl_loan;

create table staging_octane.smart_doc_criteria
(
    sdc_pid bigint not null
        constraint smart_doc_criteria_pkey
            primary key,
    sdc_version integer,
    sdc_smart_doc_pid bigint,
    sdc_criteria_pid bigint,
    sdc_deal_child_type varchar(128)
);

alter table staging_octane.smart_doc_criteria owner to deployer;

create index idx_smart_doc_criteria__pid_version
    on staging_octane.smart_doc_criteria (sdc_pid, sdc_version);

grant select on staging_octane.smart_doc_criteria to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_doc_criteria to dms_octane_writer;

grant select on staging_octane.smart_doc_criteria to etl_loan;

create table staging_octane.smart_doc_note
(
    sdn_pid bigint not null
        constraint smart_doc_note_pkey
            primary key,
    sdn_version integer,
    sdn_smart_doc_pid bigint,
    sdn_create_datetime timestamp,
    sdn_content varchar(16000),
    sdn_author_lender_user_pid bigint,
    sdn_author_unparsed_name varchar(128)
);

alter table staging_octane.smart_doc_note owner to deployer;

create index idx_smart_doc_note__pid_version
    on staging_octane.smart_doc_note (sdn_pid, sdn_version);

grant select on staging_octane.smart_doc_note to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_doc_note to dms_octane_writer;

grant select on staging_octane.smart_doc_note to etl_loan;

create table staging_octane.smart_doc_note_comment
(
    sdnc_pid bigint not null
        constraint smart_doc_note_comment_pkey
            primary key,
    sdnc_version integer,
    sdnc_smart_doc_note_pid bigint,
    sdnc_create_datetime timestamp,
    sdnc_content varchar(16000),
    sdnc_author_lender_user_pid bigint,
    sdnc_author_unparsed_name varchar(128)
);

alter table staging_octane.smart_doc_note_comment owner to deployer;

create index idx_smart_doc_note_comment__pid_version
    on staging_octane.smart_doc_note_comment (sdnc_pid, sdnc_version);

grant select on staging_octane.smart_doc_note_comment to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_doc_note_comment to dms_octane_writer;

grant select on staging_octane.smart_doc_note_comment to etl_loan;

create table staging_octane.smart_doc_note_monitor
(
    sdnm_pid bigint not null
        constraint smart_doc_note_monitor_pkey
            primary key,
    sdnm_version integer,
    sdnm_smart_doc_note_pid bigint,
    sdnm_lender_user_pid bigint
);

alter table staging_octane.smart_doc_note_monitor owner to deployer;

create index idx_smart_doc_note_monitor__pid_version
    on staging_octane.smart_doc_note_monitor (sdnm_pid, sdnm_version);

grant select on staging_octane.smart_doc_note_monitor to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_doc_note_monitor to dms_octane_writer;

grant select on staging_octane.smart_doc_note_monitor to etl_loan;

create table staging_octane.smart_doc_role
(
    sdr_pid bigint not null
        constraint smart_doc_role_pkey
            primary key,
    sdr_version integer,
    sdr_smart_doc_pid bigint,
    sdr_role_pid bigint,
    sdr_doc_permission_type varchar(128)
);

alter table staging_octane.smart_doc_role owner to deployer;

create index idx_smart_doc_role__pid_version
    on staging_octane.smart_doc_role (sdr_pid, sdr_version);

grant select on staging_octane.smart_doc_role to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_doc_role to dms_octane_writer;

grant select on staging_octane.smart_doc_role to etl_loan;

create table staging_octane.smart_message
(
    smsg_pid bigint not null
        constraint smart_message_pkey
            primary key,
    smsg_version integer,
    smsg_account_pid bigint,
    smsg_name varchar(256),
    smsg_delivery_type varchar(128),
    smsg_reply_to_role_pid bigint,
    smsg_email_subject varchar(1024),
    smsg_message_source_type varchar(128),
    smsg_smart_doc_pid bigint,
    smsg_smart_stack_pid bigint,
    smsg_allow_ad_hoc boolean,
    smsg_send_securely boolean,
    smsg_id_num integer,
    smsg_message_body varchar(16000),
    smsg_email_closing_type varchar(128),
    smsg_allow_custom_text boolean
);

alter table staging_octane.smart_message owner to deployer;

create index idx_smart_message__pid_version
    on staging_octane.smart_message (smsg_pid, smsg_version);

grant select on staging_octane.smart_message to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_message to dms_octane_writer;

grant select on staging_octane.smart_message to etl_loan;

create table staging_octane.smart_message_recipient
(
    smr_pid bigint not null
        constraint smart_message_recipient_pkey
            primary key,
    smr_version integer,
    smr_smart_message_pid bigint,
    smr_recipient_type varchar(128),
    smr_role_pid bigint,
    smr_email_recipient_type varchar(128)
);

alter table staging_octane.smart_message_recipient owner to deployer;

create index idx_smart_message_recipient__pid_version
    on staging_octane.smart_message_recipient (smr_pid, smr_version);

grant select on staging_octane.smart_message_recipient to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_message_recipient to dms_octane_writer;

grant select on staging_octane.smart_message_recipient to etl_loan;

create table staging_octane.smart_req
(
    sr_pid bigint not null
        constraint smart_req_pkey
            primary key,
    sr_version integer,
    sr_smart_doc_pid bigint,
    sr_criteria_pid bigint,
    sr_deal_child_type varchar(128),
    sr_deal_child_relationship_type varchar(128),
    sr_req_name varchar(767),
    sr_borrower_access boolean,
    sr_active boolean
);

alter table staging_octane.smart_req owner to deployer;

create index idx_smart_req__pid_version
    on staging_octane.smart_req (sr_pid, sr_version);

grant select on staging_octane.smart_req to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_req to dms_octane_writer;

grant select on staging_octane.smart_req to etl_loan;

create table staging_octane.smart_separator
(
    ssp_pid bigint not null
        constraint smart_separator_pkey
            primary key,
    ssp_version integer,
    ssp_account_pid bigint,
    ssp_custom_form_pid bigint,
    ssp_criteria_pid bigint,
    ssp_separator_name varchar(767)
);

alter table staging_octane.smart_separator owner to deployer;

create index idx_smart_separator__pid_version
    on staging_octane.smart_separator (ssp_pid, ssp_version);

grant select on staging_octane.smart_separator to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_separator to dms_octane_writer;

grant select on staging_octane.smart_separator to etl_loan;

create table staging_octane.smart_set_doc
(
    sstd_pid bigint not null
        constraint smart_set_doc_pkey
            primary key,
    sstd_version integer,
    sstd_smart_doc_set_pid bigint,
    sstd_smart_doc_pid bigint,
    sstd_sequence integer
);

alter table staging_octane.smart_set_doc owner to deployer;

create index idx_smart_set_doc__pid_version
    on staging_octane.smart_set_doc (sstd_pid, sstd_version);

grant select on staging_octane.smart_set_doc to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_set_doc to dms_octane_writer;

grant select on staging_octane.smart_set_doc to etl_loan;

create table staging_octane.smart_stack_doc
(
    ssd_pid bigint not null
        constraint smart_stack_doc_pkey
            primary key,
    ssd_version integer,
    ssd_smart_stack_pid bigint,
    ssd_stack_doc_type varchar(128),
    ssd_smart_doc_set_pid bigint,
    ssd_smart_separator_pid bigint,
    ssd_smart_doc_pid bigint,
    ssd_sequence bigint,
    ssd_smart_stack_doc_set_include_type varchar(128)
);

alter table staging_octane.smart_stack_doc owner to deployer;

create index idx_smart_stack_doc__pid_version
    on staging_octane.smart_stack_doc (ssd_pid, ssd_version);

grant select on staging_octane.smart_stack_doc to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_stack_doc to dms_octane_writer;

grant select on staging_octane.smart_stack_doc to etl_loan;

create table staging_octane.stack_export_request
(
    ser_pid bigint not null
        constraint stack_export_request_pkey
            primary key,
    ser_version integer,
    ser_account_pid bigint,
    ser_create_datetime timestamp,
    ser_start_datetime timestamp,
    ser_end_datetime timestamp,
    ser_request_status_type varchar(128),
    ser_loan_export_type varchar(128),
    ser_loan_name_format_type varchar(128),
    ser_file_name_format_type varchar(128),
    ser_requester_lender_user_pid bigint,
    ser_requester_unparsed_name varchar(128),
    ser_smart_stack_pid bigint,
    ser_total_deal_count integer,
    ser_exported_deal_count integer,
    ser_description varchar(32)
);

alter table staging_octane.stack_export_request owner to deployer;

create index idx_stack_export_request__pid_version
    on staging_octane.stack_export_request (ser_pid, ser_version);

grant select on staging_octane.stack_export_request to readonly;

grant delete, insert, select, truncate, update on staging_octane.stack_export_request to dms_octane_writer;

grant select on staging_octane.stack_export_request to etl_loan;

create table staging_octane.stack_export_file
(
    sef_pid bigint not null
        constraint stack_export_file_pkey
            primary key,
    sef_version integer,
    sef_stack_export_request_pid bigint,
    sef_repository_file_pid bigint,
    sef_stack_export_file_type varchar(128)
);

alter table staging_octane.stack_export_file owner to deployer;

create index idx_stack_export_file__pid_version
    on staging_octane.stack_export_file (sef_pid, sef_version);

grant select on staging_octane.stack_export_file to readonly;

grant delete, insert, select, truncate, update on staging_octane.stack_export_file to dms_octane_writer;

grant select on staging_octane.stack_export_file to etl_loan;

create table staging_octane.tax_transcript_request
(
    ttr_pid bigint not null
        constraint tax_transcript_request_pkey
            primary key,
    ttr_version integer,
    ttr_deal_pid bigint,
    ttr_create_datetime timestamp,
    ttr_requester_agent_type varchar(128),
    ttr_requester_lender_user_pid bigint,
    ttr_requester_unparsed_name varchar(128),
    ttr_mismo_version_type varchar(128),
    ttr_credit_request_type varchar(128),
    ttr_request_error_messages text,
    ttr_request_success_messages text,
    ttr_tracking_number varchar(16),
    ttr_tax_transcript_request_status_type varchar(128),
    ttr_update_reason varchar(1024),
    ttr_last_status_query_datetime timestamp,
    ttr_signed_4506t_deal_file_pid bigint,
    ttr_company boolean,
    ttr_company_name varchar(128),
    ttr_company_city varchar(128),
    ttr_company_country varchar(128),
    ttr_company_postal_code varchar(128),
    ttr_company_state varchar(128),
    ttr_company_street1 varchar(128),
    ttr_company_street2 varchar(128),
    ttr_company_ein varchar(16),
    ttr_borrower1_pid bigint,
    ttr_borrower1_first_name varchar(32),
    ttr_borrower1_middle_name varchar(32),
    ttr_borrower1_last_name varchar(32),
    ttr_borrower1_name_suffix varchar(32),
    ttr_borrower1_birth_date date,
    ttr_borrower1_current_city varchar(128),
    ttr_borrower1_current_country varchar(128),
    ttr_borrower1_current_postal_code varchar(128),
    ttr_borrower1_current_state varchar(128),
    ttr_borrower1_current_street1 varchar(128),
    ttr_borrower1_current_street2 varchar(128),
    ttr_borrower1_prior_city varchar(128),
    ttr_borrower1_prior_country varchar(128),
    ttr_borrower1_prior_postal_code varchar(128),
    ttr_borrower1_prior_state varchar(128),
    ttr_borrower1_prior_street1 varchar(128),
    ttr_borrower1_prior_street2 varchar(128),
    ttr_borrower1_monthly_income_amount numeric(15,2),
    ttr_borrower2_pid bigint,
    ttr_borrower2_first_name varchar(32),
    ttr_borrower2_middle_name varchar(32),
    ttr_borrower2_last_name varchar(32),
    ttr_borrower2_name_suffix varchar(32),
    ttr_borrower2_birth_date date,
    ttr_borrower2_current_city varchar(128),
    ttr_borrower2_current_country varchar(128),
    ttr_borrower2_current_postal_code varchar(128),
    ttr_borrower2_current_state varchar(128),
    ttr_borrower2_current_street1 varchar(128),
    ttr_borrower2_current_street2 varchar(128),
    ttr_borrower2_prior_city varchar(128),
    ttr_borrower2_prior_country varchar(128),
    ttr_borrower2_prior_postal_code varchar(128),
    ttr_borrower2_prior_state varchar(128),
    ttr_borrower2_prior_street1 varchar(128),
    ttr_borrower2_prior_street2 varchar(128),
    ttr_borrower2_monthly_income_amount numeric(15,2),
    ttr_year1 integer,
    ttr_year2 integer,
    ttr_year3 integer,
    ttr_year4 integer,
    ttr_include_w_2 boolean,
    ttr_include_1099 boolean,
    ttr_include_1040 boolean,
    ttr_include_1040_return_transcript boolean,
    ttr_include_1040_account_transcript boolean,
    ttr_include_1040_record_of_account boolean,
    ttr_include_1065 boolean,
    ttr_include_1065_return_transcript boolean,
    ttr_include_1065_account_transcript boolean,
    ttr_include_1065_record_of_account boolean,
    ttr_include_1120 boolean,
    ttr_include_1120_return_transcript boolean,
    ttr_include_1120_account_transcript boolean,
    ttr_include_1120_record_of_account boolean,
    ttr_archived boolean,
    ttr_company_phone varchar(32),
    ttr_company_phone_extension varchar(16),
    ttr_business_ownership_type varchar(128)
);

alter table staging_octane.tax_transcript_request owner to deployer;

create index idx_tax_transcript_request__pid_version
    on staging_octane.tax_transcript_request (ttr_pid, ttr_version);

grant select on staging_octane.tax_transcript_request to readonly;

grant delete, insert, select, truncate, update on staging_octane.tax_transcript_request to dms_octane_writer;

grant select on staging_octane.tax_transcript_request to etl_loan;

create table staging_octane.third_party_community_second_program
(
    tpcsp_pid bigint not null
        constraint third_party_community_second_program_pkey
            primary key,
    tpcsp_version integer,
    tpcsp_account_pid bigint,
    tpcsp_program_id varchar(32),
    tpcsp_program_name varchar(128),
    tpcsp_fre_community_program_type varchar(128),
    tpcsp_fnm_community_lending_product_type varchar(128),
    tpcsp_fnm_community_seconds_repayment_structure_type varchar(128),
    tpcsp_wire_action_type varchar(128),
    tpcsp_security_instrument_page_count integer,
    tpcsp_deed_page_count integer,
    tpcsp_notes varchar(1024),
    tpcsp_from_date date,
    tpcsp_through_date date,
    tpcsp_investor_pid bigint
);

alter table staging_octane.third_party_community_second_program owner to deployer;

create index idx_third_party_community_second_program__pid_version
    on staging_octane.third_party_community_second_program (tpcsp_pid, tpcsp_version);

grant select on staging_octane.third_party_community_second_program to readonly;

grant delete, insert, select, truncate, update on staging_octane.third_party_community_second_program to dms_octane_writer;

grant select on staging_octane.third_party_community_second_program to etl_loan;

create table staging_octane.liability
(
    lia_pid bigint not null
        constraint liability_pkey
            primary key,
    lia_version integer,
    lia_proposal_pid bigint,
    lia_aggregate_description varchar(128),
    lia_description varchar(128),
    lia_city varchar(128),
    lia_country varchar(128),
    lia_postal_code varchar(128),
    lia_state varchar(128),
    lia_street1 varchar(128),
    lia_street2 varchar(128),
    lia_holder_name varchar(128),
    lia_holder_phone varchar(32),
    lia_holder_phone_extension varchar(16),
    lia_holder_fax varchar(32),
    lia_holder_email varchar(256),
    lia_account_opened_date date,
    lia_liability_disposition_type varchar(128),
    lia_liability_type varchar(128),
    lia_monthly_payment_amount numeric(15,2),
    lia_remaining_term_months integer,
    lia_high_balance_amount numeric(15,2),
    lia_credit_limit_amount numeric(15),
    lia_past_due_amount numeric(15,2),
    lia_unpaid_balance_amount numeric(15,2),
    lia_report_value_overridden boolean,
    lia_bankruptcy_exception_type varchar(128),
    lia_note varchar(1024),
    lia_terms_months_count integer,
    lia_payoff_amount numeric(15,2),
    lia_energy_related_type varchar(128),
    lia_credit_request_liability_pid bigint,
    lia_snapshotted_pid bigint
);

alter table staging_octane.liability owner to deployer;

create index idx_liability__pid_version
    on staging_octane.liability (lia_pid, lia_version);

grant select on staging_octane.liability to readonly;

grant delete, insert, select, truncate, update on staging_octane.liability to dms_octane_writer;

grant select on staging_octane.liability to etl_loan;

create table staging_octane.borrower_liability
(
    bl_pid bigint not null
        constraint borrower_liability_pkey
            primary key,
    bl_version integer,
    bl_borrower_pid bigint,
    bl_liability_pid bigint
);

alter table staging_octane.borrower_liability owner to deployer;

create index idx_borrower_liability__pid_version
    on staging_octane.borrower_liability (bl_pid, bl_version);

grant select on staging_octane.borrower_liability to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower_liability to dms_octane_writer;

grant select on staging_octane.borrower_liability to etl_loan;

create table staging_octane.deal_tag
(
    dtg_pid bigint not null
        constraint deal_tag_pkey
            primary key,
    dtg_version integer,
    dtg_deal_tag_definition_pid bigint,
    dtg_deal_pid bigint,
    dtg_asset_pid bigint,
    dtg_liability_pid bigint,
    dtg_application_pid bigint,
    dtg_borrower_pid bigint,
    dtg_borrower_income_pid bigint,
    dtg_job_income_pid bigint,
    dtg_other_income_pid bigint,
    dtg_business_income_pid bigint,
    dtg_rental_income_pid bigint,
    dtg_place_pid bigint,
    dtg_borrower_residence_pid bigint,
    dtg_credit_inquiry_pid bigint,
    dtg_appraisal_pid bigint
);

alter table staging_octane.deal_tag owner to deployer;

create index idx_deal_tag__pid_version
    on staging_octane.deal_tag (dtg_pid, dtg_version);

grant select on staging_octane.deal_tag to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_tag to dms_octane_writer;

grant select on staging_octane.deal_tag to etl_loan;

create table staging_octane.product_third_party_community_second_program
(
    ptpp_pid bigint not null
        constraint product_third_party_community_second_program_pkey
            primary key,
    ptpp_version integer,
    ptpp_product_terms_pid bigint,
    ptpp_third_party_community_second_program_pid bigint
);

alter table staging_octane.product_third_party_community_second_program owner to deployer;

create index idx_product_third_party_community_second_program__pid_version
    on staging_octane.product_third_party_community_second_program (ptpp_pid, ptpp_version);

grant select on staging_octane.product_third_party_community_second_program to readonly;

grant delete, insert, select, truncate, update on staging_octane.product_third_party_community_second_program to dms_octane_writer;

grant select on staging_octane.product_third_party_community_second_program to etl_loan;

create table staging_octane.proposal_doc
(
    prpd_pid bigint not null
        constraint proposal_doc_pkey
            primary key,
    prpd_version integer,
    prpd_doc_name varchar(767),
    prpd_doc_number numeric(15,3),
    prpd_borrower_access boolean,
    prpd_deal_child_type varchar(128),
    prpd_deal_child_name varchar(767),
    prpd_deal_pid bigint,
    prpd_proposal_pid bigint,
    prpd_loan_pid bigint,
    prpd_borrower_pid bigint,
    prpd_borrower_income_pid bigint,
    prpd_job_income_pid bigint,
    prpd_borrower_job_gap_pid bigint,
    prpd_other_income_pid bigint,
    prpd_business_income_pid bigint,
    prpd_rental_income_pid bigint,
    prpd_asset_pid bigint,
    prpd_asset_large_deposit_pid bigint,
    prpd_liability_pid bigint,
    prpd_reo_place_pid bigint,
    prpd_property_place_pid bigint,
    prpd_residence_place_pid bigint,
    prpd_borrower_residence_pid bigint,
    prpd_application_pid bigint,
    prpd_credit_inquiry_pid bigint,
    prpd_appraisal_pid bigint,
    prpd_appraisal_form_pid bigint,
    prpd_tax_transcript_request_pid bigint,
    prpd_trash boolean,
    prpd_smart_doc_pid bigint,
    prpd_proposal_doc_set_pid bigint,
    prpd_doc_fulfill_status_type varchar(128),
    prpd_status_unparsed_name varchar(128),
    prpd_status_datetime timestamp,
    prpd_status_reason varchar(1024),
    prpd_doc_excluded boolean,
    prpd_doc_excluded_reason varchar(1024),
    prpd_doc_excluded_unparsed_name varchar(128),
    prpd_doc_excluded_datetime timestamp,
    prpd_doc_approval_type varchar(128),
    prpd_borrower_edit boolean,
    prpd_borrower_associated_address_pid bigint,
    prpd_construction_cost_pid bigint,
    prpd_construction_draw_pid bigint,
    prpd_proposal_contractor_pid bigint,
    prpd_doc_provider_group_type varchar(128),
    prpd_doc_req_fulfill_status_type varchar(128),
    prpd_doc_req_decision_status_type varchar(128),
    prpd_doc_status_type varchar(128),
    prpd_proposal_review_pid bigint
);

alter table staging_octane.proposal_doc owner to deployer;

create index idx_proposal_doc__pid_version
    on staging_octane.proposal_doc (prpd_pid, prpd_version);

grant select on staging_octane.proposal_doc to readonly;

grant delete, insert, select, truncate, update on staging_octane.proposal_doc to dms_octane_writer;

grant select on staging_octane.proposal_doc to etl_loan;

create table staging_octane.proposal_doc_borrower_access
(
    pdba_pid bigint not null
        constraint proposal_doc_borrower_access_pkey
            primary key,
    pdba_version integer,
    pdba_borrower_pid bigint,
    pdba_proposal_doc_pid bigint
);

alter table staging_octane.proposal_doc_borrower_access owner to deployer;

create index idx_proposal_doc_borrower_access__pid_version
    on staging_octane.proposal_doc_borrower_access (pdba_pid, pdba_version);

grant select on staging_octane.proposal_doc_borrower_access to readonly;

grant delete, insert, select, truncate, update on staging_octane.proposal_doc_borrower_access to dms_octane_writer;

grant select on staging_octane.proposal_doc_borrower_access to etl_loan;

create table staging_octane.proposal_doc_file
(
    prpdf_pid bigint not null
        constraint proposal_doc_file_pkey
            primary key,
    prpdf_version integer,
    prpdf_proposal_doc_pid bigint,
    prpdf_deal_file_pid bigint,
    prpdf_proposal_doc_file_type varchar(128),
    prpdf_included_file varchar(128),
    prpdf_key_doc boolean
);

alter table staging_octane.proposal_doc_file owner to deployer;

create index idx_proposal_doc_file__pid_version
    on staging_octane.proposal_doc_file (prpdf_pid, prpdf_version);

grant select on staging_octane.proposal_doc_file to readonly;

grant delete, insert, select, truncate, update on staging_octane.proposal_doc_file to dms_octane_writer;

grant select on staging_octane.proposal_doc_file to etl_loan;

create table staging_octane.proposal_req
(
    prpr_pid bigint not null
        constraint proposal_req_pkey
            primary key,
    prpr_version integer,
    prpr_proposal_doc_pid bigint,
    prpr_req_name varchar(767),
    prpr_borrower_access boolean,
    prpr_req_id integer,
    prpr_req_fulfill_status_type varchar(128),
    prpr_fulfill_status_unparsed_name varchar(128),
    prpr_fulfill_status_datetime timestamp,
    prpr_req_decision_status_type varchar(128),
    prpr_decision_status_unparsed_name varchar(128),
    prpr_decision_status_datetime timestamp,
    prpr_deal_pid bigint,
    prpr_proposal_pid bigint,
    prpr_loan_pid bigint,
    prpr_borrower_pid bigint,
    prpr_borrower_income_pid bigint,
    prpr_job_income_pid bigint,
    prpr_borrower_job_gap_pid bigint,
    prpr_other_income_pid bigint,
    prpr_business_income_pid bigint,
    prpr_rental_income_pid bigint,
    prpr_asset_pid bigint,
    prpr_asset_large_deposit_pid bigint,
    prpr_liability_pid bigint,
    prpr_reo_place_pid bigint,
    prpr_property_place_pid bigint,
    prpr_residence_place_pid bigint,
    prpr_borrower_residence_pid bigint,
    prpr_application_pid bigint,
    prpr_credit_inquiry_pid bigint,
    prpr_appraisal_pid bigint,
    prpr_appraisal_form_pid bigint,
    prpr_tax_transcript_request_pid bigint,
    prpr_deal_child_type varchar(128),
    prpr_deal_child_name varchar(767),
    prpr_smart_req boolean,
    prpr_smart_req_criteria_html text,
    prpr_trash boolean,
    prpr_borrower_associated_address_pid bigint,
    prpr_construction_cost_pid bigint,
    prpr_construction_draw_pid bigint,
    prpr_proposal_contractor_pid bigint,
    prpr_proposal_review_pid bigint
);

alter table staging_octane.proposal_req owner to deployer;

create index idx_proposal_req__pid_version
    on staging_octane.proposal_req (prpr_pid, prpr_version);

grant select on staging_octane.proposal_req to readonly;

grant delete, insert, select, truncate, update on staging_octane.proposal_req to dms_octane_writer;

grant select on staging_octane.proposal_req to etl_loan;

create table staging_octane.sap_deal_step
(
    sds_pid bigint not null
        constraint sap_deal_step_pkey
            primary key,
    sds_version integer,
    sds_borrower_user_pid bigint,
    sds_previous_pid bigint,
    sds_sap_step_type varchar(128),
    sds_complete_datetime timestamp,
    sds_yes_no_answer varchar(128),
    sds_deal_pid bigint,
    sds_borrower_pid bigint,
    sds_reo_pid bigint,
    sds_application_pid bigint,
    sds_job_income_pid bigint,
    sds_other_income_pid bigint,
    sds_borrower_residence_pid bigint,
    sds_asset_pid bigint,
    sds_liability_pid bigint,
    sds_deal_contact_pid bigint,
    sds_deal_real_estate_agent_pid bigint,
    sds_radio_choice_answer varchar(32),
    sds_initial_values boolean,
    sds_business_income_pid bigint
);

alter table staging_octane.sap_deal_step owner to deployer;

create index idx_sap_deal_step__pid_version
    on staging_octane.sap_deal_step (sds_pid, sds_version);

grant select on staging_octane.sap_deal_step to readonly;

grant delete, insert, select, truncate, update on staging_octane.sap_deal_step to dms_octane_writer;

grant select on staging_octane.sap_deal_step to etl_loan;

create table staging_octane.deal_sap
(
    dsap_pid bigint not null
        constraint deal_sap_pkey
            primary key,
    dsap_version integer,
    dsap_deal_pid bigint,
    dsap_last_sap_deal_step_pid bigint,
    dsap_last_sap_step_type varchar(128),
    dsap_credit_pull_attempts integer,
    dsap_retry_credit_pull boolean,
    dsap_borrower_step_type integer,
    dsap_sap_status_type varchar(128)
);

alter table staging_octane.deal_sap owner to deployer;

create index idx_deal_sap__pid_version
    on staging_octane.deal_sap (dsap_pid, dsap_version);

grant select on staging_octane.deal_sap to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_sap to dms_octane_writer;

grant select on staging_octane.deal_sap to etl_loan;

create table staging_octane.trade
(
    t_pid bigint not null
        constraint trade_pkey
            primary key,
    t_version integer,
    t_account_pid bigint,
    t_investor_pid bigint,
    t_create_lender_user_pid bigint,
    t_create_datetime timestamp,
    t_lender_trade_id varchar(11),
    t_investor_trade_id varchar(32),
    t_investor_commitment_id varchar(32),
    t_trade_name varchar(128),
    t_trade_status_type varchar(128),
    t_commitment_amount_tolerance_percent numeric(11,9),
    t_commitment_amount numeric(15,2),
    t_minimum_note_rate_percent numeric(11,9),
    t_maximum_note_rate_percent numeric(11,9),
    t_actual_delivery_datetime timestamp,
    t_early_delivery_datetime timestamp,
    t_required_delivery_datetime timestamp,
    t_commitment_expiration_datetime timestamp,
    t_commitment_datetime timestamp,
    t_purchase_datetime timestamp,
    t_weighted_average_note_rate_percent numeric(11,9),
    t_weighted_average_lender_price_percent numeric(11,9),
    t_weighted_average_investor_price_percent numeric(11,9),
    t_weighted_average_net_price_percent numeric(11,9),
    t_weighted_average_decision_credit_score integer,
    t_average_loan_amount numeric(15,2),
    t_total_loan_amount numeric(17,2),
    t_loans_delivered_percent numeric(11,9),
    t_trade_pricing_type varchar(128),
    t_trade_same_price_percent numeric(11,9),
    t_buy_up_multiple integer,
    t_buy_down_multiple integer
);

alter table staging_octane.trade owner to deployer;

create index idx_trade__pid_version
    on staging_octane.trade (t_pid, t_version);

grant select on staging_octane.trade to readonly;

grant delete, insert, select, truncate, update on staging_octane.trade to dms_octane_writer;

grant select on staging_octane.trade to etl_loan;

create table staging_octane.investor_lock
(
    il_pid bigint not null
        constraint investor_lock_pkey
            primary key,
    il_version integer,
    il_lender_lock_major_pid bigint,
    il_product_terms_pid bigint,
    il_mortgage_type varchar(128),
    il_interest_only_type varchar(128),
    il_buydown_schedule_type varchar(128),
    il_prepay_penalty_schedule_type varchar(128),
    il_lock_commitment_type varchar(128),
    il_initial_duration_days integer,
    il_commitment_datetime timestamp,
    il_initial_commitment_expiration_datetime timestamp,
    il_effective_commitment_expiration_datetime timestamp,
    il_effective_duration_days integer,
    il_cancel_datetime timestamp,
    il_cancel_lender_user_pid bigint,
    il_cancel_unparsed_name varchar(128),
    il_confirm_datetime timestamp,
    il_confirm_lender_user_pid bigint,
    il_confirm_unparsed_name varchar(128),
    il_requester_lender_user_pid bigint,
    il_requester_unparsed_name varchar(128),
    il_request_datetime timestamp,
    il_notes varchar(16000),
    il_investor_base_note_rate_percent numeric(11,9),
    il_investor_base_arm_margin_percent numeric(11,9),
    il_investor_base_price_percent numeric(11,9),
    il_lock_note_rate_percent numeric(11,9),
    il_lock_initial_note_rate_percent numeric(11,9),
    il_lock_arm_margin_percent numeric(11,9),
    il_lock_price_percent numeric(11,9),
    il_lock_price_raw_percent numeric(11,9),
    il_maximum_rebate_percent numeric(11,9),
    il_trade_pid bigint,
    il_hedging boolean,
    il_investor_lock_status_type varchar(128),
    il_investor_loan_id varchar(32),
    il_required_delivery_datetime timestamp,
    il_investor_commitment_id varchar(32)
);

alter table staging_octane.investor_lock owner to deployer;

create index idx_investor_lock__pid_version
    on staging_octane.investor_lock (il_pid, il_version);

grant select on staging_octane.investor_lock to readonly;

grant delete, insert, select, truncate, update on staging_octane.investor_lock to dms_octane_writer;

grant select on staging_octane.investor_lock to etl_loan;

create table staging_octane.investor_lock_add_on
(
    ila_pid bigint not null
        constraint investor_lock_add_on_pkey
            primary key,
    ila_version integer,
    ila_investor_lock_pid bigint,
    ila_create_datetime timestamp,
    ila_creator_lender_user_pid bigint,
    ila_creator_unparsed_name varchar(128),
    ila_summary varchar(16000),
    ila_rate_adjustment_percent numeric(11,9),
    ila_price_adjustment_percent numeric(11,9),
    ila_arm_margin_adjustment_percent numeric(11,9)
);

alter table staging_octane.investor_lock_add_on owner to deployer;

create index idx_investor_lock_add_on__pid_version
    on staging_octane.investor_lock_add_on (ila_pid, ila_version);

grant select on staging_octane.investor_lock_add_on to readonly;

grant delete, insert, select, truncate, update on staging_octane.investor_lock_add_on to dms_octane_writer;

grant select on staging_octane.investor_lock_add_on to etl_loan;

create table staging_octane.investor_lock_extension
(
    ile_pid bigint not null
        constraint investor_lock_extension_pkey
            primary key,
    ile_version integer,
    ile_investor_lock_pid bigint,
    ile_creator_lender_user_pid bigint,
    ile_creator_unparsed_name varchar(128),
    ile_requester_lender_user_pid bigint,
    ile_requester_unparsed_name varchar(128),
    ile_requested_datetime timestamp,
    ile_confirm_lender_user_pid bigint,
    ile_confirm_unparsed_name varchar(128),
    ile_confirm_datetime timestamp,
    ile_reject_lender_user_pid bigint,
    ile_reject_datetime timestamp,
    ile_reject_explanation varchar(1024),
    ile_lock_extension_status_type varchar(128),
    ile_extension_days integer,
    ile_price_adjustment_percent numeric(11,9)
);

alter table staging_octane.investor_lock_extension owner to deployer;

create index idx_investor_lock_extension__pid_version
    on staging_octane.investor_lock_extension (ile_pid, ile_version);

grant select on staging_octane.investor_lock_extension to readonly;

grant delete, insert, select, truncate, update on staging_octane.investor_lock_extension to dms_octane_writer;

grant select on staging_octane.investor_lock_extension to etl_loan;

create table staging_octane.trade_audit
(
    ta_pid bigint not null
        constraint trade_audit_pkey
            primary key,
    ta_version integer,
    ta_trade_pid bigint,
    ta_lender_lock_major_pid bigint,
    ta_trade_audit_type varchar(128),
    ta_message varchar(256)
);

alter table staging_octane.trade_audit owner to deployer;

create index idx_trade_audit__pid_version
    on staging_octane.trade_audit (ta_pid, ta_version);

grant select on staging_octane.trade_audit to readonly;

grant delete, insert, select, truncate, update on staging_octane.trade_audit to dms_octane_writer;

grant select on staging_octane.trade_audit to etl_loan;

create table staging_octane.trade_fee
(
    tfe_pid bigint not null
        constraint trade_fee_pkey
            primary key,
    tfe_version integer,
    tfe_trade_pid bigint,
    tfe_trade_fee_type_pid bigint,
    tfe_amount numeric(15,2),
    tfe_description varchar(256)
);

alter table staging_octane.trade_fee owner to deployer;

create index idx_trade_fee__pid_version
    on staging_octane.trade_fee (tfe_pid, tfe_version);

grant select on staging_octane.trade_fee to readonly;

grant delete, insert, select, truncate, update on staging_octane.trade_fee to dms_octane_writer;

grant select on staging_octane.trade_fee to etl_loan;

create table staging_octane.trade_file
(
    tf_pid bigint not null
        constraint trade_file_pkey
            primary key,
    tf_version integer,
    tf_trade_pid bigint,
    tf_repository_file_pid bigint
);

alter table staging_octane.trade_file owner to deployer;

create index idx_trade_file__pid_version
    on staging_octane.trade_file (tf_pid, tf_version);

grant select on staging_octane.trade_file to readonly;

grant delete, insert, select, truncate, update on staging_octane.trade_file to dms_octane_writer;

grant select on staging_octane.trade_file to etl_loan;

create table staging_octane.trade_lock_filter
(
    tlf_pid bigint not null
        constraint trade_lock_filter_pkey
            primary key,
    tlf_version integer,
    tlf_lender_user_pid bigint,
    tlf_name varchar(128),
    tlf_criteria_pid bigint
);

alter table staging_octane.trade_lock_filter owner to deployer;

create index idx_trade_lock_filter__pid_version
    on staging_octane.trade_lock_filter (tlf_pid, tlf_version);

grant select on staging_octane.trade_lock_filter to readonly;

grant delete, insert, select, truncate, update on staging_octane.trade_lock_filter to dms_octane_writer;

grant select on staging_octane.trade_lock_filter to etl_loan;

create table staging_octane.trade_note
(
    tn_pid bigint not null
        constraint trade_note_pkey
            primary key,
    tn_version integer,
    tn_trade_pid bigint,
    tn_create_datetime timestamp,
    tn_content varchar(16000),
    tn_author_lender_user_pid bigint,
    tn_author_unparsed_name varchar(128)
);

alter table staging_octane.trade_note owner to deployer;

create index idx_trade_note__pid_version
    on staging_octane.trade_note (tn_pid, tn_version);

grant select on staging_octane.trade_note to readonly;

grant delete, insert, select, truncate, update on staging_octane.trade_note to dms_octane_writer;

grant select on staging_octane.trade_note to etl_loan;

create table staging_octane.trade_note_comment
(
    tnc_pid bigint not null
        constraint trade_note_comment_pkey
            primary key,
    tnc_version integer,
    tnc_trade_note_pid bigint,
    tnc_create_datetime timestamp,
    tnc_content varchar(16000),
    tnc_author_lender_user_pid bigint,
    tnc_author_unparsed_name varchar(128)
);

alter table staging_octane.trade_note_comment owner to deployer;

create index idx_trade_note_comment__pid_version
    on staging_octane.trade_note_comment (tnc_pid, tnc_version);

grant select on staging_octane.trade_note_comment to readonly;

grant delete, insert, select, truncate, update on staging_octane.trade_note_comment to dms_octane_writer;

grant select on staging_octane.trade_note_comment to etl_loan;

create table staging_octane.trade_note_monitor
(
    tnm_pid bigint not null
        constraint trade_note_monitor_pkey
            primary key,
    tnm_version integer,
    tnm_trade_note_pid bigint,
    tnm_lender_user_pid bigint
);

alter table staging_octane.trade_note_monitor owner to deployer;

create index idx_trade_note_monitor__pid_version
    on staging_octane.trade_note_monitor (tnm_pid, tnm_version);

grant select on staging_octane.trade_note_monitor to readonly;

grant delete, insert, select, truncate, update on staging_octane.trade_note_monitor to dms_octane_writer;

grant select on staging_octane.trade_note_monitor to etl_loan;

create table staging_octane.trade_product
(
    tp_pid bigint not null
        constraint trade_product_pkey
            primary key,
    tp_version integer,
    tp_product_pid bigint,
    tp_trade_pid bigint
);

alter table staging_octane.trade_product owner to deployer;

create index idx_trade_product__pid_version
    on staging_octane.trade_product (tp_pid, tp_version);

grant select on staging_octane.trade_product to readonly;

grant delete, insert, select, truncate, update on staging_octane.trade_product to dms_octane_writer;

grant select on staging_octane.trade_product to etl_loan;

create table staging_octane.unpaid_balance_adjustment
(
    upba_pid bigint not null
        constraint unpaid_balance_adjustment_pkey
            primary key,
    upba_version integer,
    upba_investor_pid bigint,
    upba_adjustment_percent numeric(11,9),
    upba_from_date date,
    upba_mortgage_type varchar(128)
);

alter table staging_octane.unpaid_balance_adjustment owner to deployer;

create index idx_unpaid_balance_adjustment__pid_version
    on staging_octane.unpaid_balance_adjustment (upba_pid, upba_version);

grant select on staging_octane.unpaid_balance_adjustment to readonly;

grant delete, insert, select, truncate, update on staging_octane.unpaid_balance_adjustment to dms_octane_writer;

grant select on staging_octane.unpaid_balance_adjustment to etl_loan;

create table staging_octane.vendor_document_repository_file
(
    vdrf_pid bigint not null
        constraint vendor_document_repository_file_pkey
            primary key,
    vdrf_version integer,
    vdrf_account_pid bigint,
    vdrf_deal_pid bigint,
    vdrf_document_import_vendor_type varchar(128),
    vdrf_client_filename varchar(128),
    vdrf_client_filepath varchar(256),
    vdrf_file_checksum varchar(128),
    vdrf_vendor_import_document_type varchar(128),
    vdrf_document_import_status_type varchar(128),
    vdrf_processed_datetime timestamp
);

alter table staging_octane.vendor_document_repository_file owner to deployer;

create index idx_vendor_document_repository_file__pid_version
    on staging_octane.vendor_document_repository_file (vdrf_pid, vdrf_version);

grant select on staging_octane.vendor_document_repository_file to readonly;

grant delete, insert, select, truncate, update on staging_octane.vendor_document_repository_file to dms_octane_writer;

grant select on staging_octane.vendor_document_repository_file to etl_loan;

create table staging_octane.deal_data_vendor_document_import
(
    ddvdi_pid bigint not null
        constraint deal_data_vendor_document_import_pkey
            primary key,
    ddvdi_version integer,
    ddvdi_deal_pid bigint,
    ddvdi_vendor_document_repository_file_pid bigint,
    ddvdi_deal_system_file_pid bigint,
    ddvdi_vendor_import_document_type varchar(128),
    ddvdi_create_datetime timestamp,
    ddvdi_document_import_status_type varchar(128),
    ddvdi_failure_info varchar(16000),
    ddvdi_warning_info varchar(16000)
);

alter table staging_octane.deal_data_vendor_document_import owner to deployer;

create index idx_deal_data_vendor_document_import__pid_version
    on staging_octane.deal_data_vendor_document_import (ddvdi_pid, ddvdi_version);

grant select on staging_octane.deal_data_vendor_document_import to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_data_vendor_document_import to dms_octane_writer;

grant select on staging_octane.deal_data_vendor_document_import to etl_loan;

create table staging_octane.vendor_document_event
(
    vde_pid bigint not null
        constraint vendor_document_event_pkey
            primary key,
    vde_version integer,
    vde_account_pid bigint,
    vde_vendor_document_repository_file_pid bigint,
    vde_vendor_document_event_type varchar(128),
    vde_source_unparsed_name varchar(128),
    vde_messages text,
    vde_create_datetime timestamp,
    vde_create_date date
);

alter table staging_octane.vendor_document_event owner to deployer;

create index idx_vendor_document_event__pid_version
    on staging_octane.vendor_document_event (vde_pid, vde_version);

grant select on staging_octane.vendor_document_event to readonly;

grant delete, insert, select, truncate, update on staging_octane.vendor_document_event to dms_octane_writer;

grant select on staging_octane.vendor_document_event to etl_loan;

create table staging_octane.wf_deal_process
(
    wdpr_pid bigint not null
        constraint wf_deal_process_pkey
            primary key,
    wdpr_version integer,
    wdpr_deal_pid bigint,
    wdpr_wf_process_pid bigint,
    wdpr_wf_deal_process_status_type varchar(128),
    wdpr_process_start_datetime timestamp,
    wdpr_process_complete_datetime timestamp,
    wdpr_name varchar(128)
);

alter table staging_octane.wf_deal_process owner to deployer;

create index idx_wf_deal_process__pid_version
    on staging_octane.wf_deal_process (wdpr_pid, wdpr_version);

grant select on staging_octane.wf_deal_process to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_deal_process to dms_octane_writer;

grant select on staging_octane.wf_deal_process to etl_loan;

create table staging_octane.wf_step
(
    ws_pid bigint not null
        constraint wf_step_pkey
            primary key,
    ws_version integer,
    ws_wf_process_pid bigint,
    ws_step_name varchar(128),
    ws_step_number numeric(17,5),
    ws_step_number_formatted varchar(16),
    ws_step_number_name_formatted varchar(145),
    ws_step_start_borrower_text varchar(1024),
    ws_expected_complete_minutes integer,
    ws_wf_step_timeout_type varchar(128),
    ws_second_of_day_timeout integer,
    ws_timeout_time_zone_type varchar(128),
    ws_description varchar(1024),
    ws_wf_step_type varchar(128),
    ws_wf_phase_pid bigint,
    ws_wf_step_performer_assign_type varchar(128),
    ws_role_pid bigint,
    ws_from_role_pid bigint,
    ws_wf_step_reassign_type varchar(128),
    ws_wf_step_function_type varchar(128),
    ws_sap_expire_minutes integer,
    ws_sap_expire_warning_minutes integer,
    ws_prompt_user_defined_time boolean,
    ws_smart_message_pid bigint,
    ws_smart_doc_set_pid bigint,
    ws_lien_priority_type varchar(128),
    ws_active_only boolean,
    ws_internal boolean,
    ws_deal_stage_type varchar(128),
    ws_polling_interval_type varchar(128),
    ws_swappable boolean,
    ws_wf_prereq_set_pid bigint,
    ws_user_step_name varchar(128)
);

alter table staging_octane.wf_step owner to deployer;

create index idx_wf_step__pid_version
    on staging_octane.wf_step (ws_pid, ws_version);

grant select on staging_octane.wf_step to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_step to dms_octane_writer;

grant select on staging_octane.wf_step to etl_loan;

create table staging_octane.criteria_pid_operand
(
    crpo_pid bigint not null
        constraint criteria_pid_operand_pkey
            primary key,
    crpo_version integer,
    crpo_criteria_pid bigint,
    crpo_criteria_pid_operand_type varchar(128),
    crpo_lender_user_pid bigint,
    crpo_role_pid bigint,
    crpo_branch_pid bigint,
    crpo_wf_step_pid bigint,
    crpo_wf_phase_pid bigint,
    crpo_county_pid bigint,
    crpo_investor_pid bigint,
    crpo_product_pid bigint,
    crpo_lead_source_pid bigint,
    crpo_company_pid bigint,
    crpo_deal_tag_definition_pid bigint,
    crpo_creditor_pid bigint,
    crpo_interim_funder_pid bigint,
    crpo_settlement_agent_pid bigint,
    crpo_performer_team_pid bigint,
    crpo_third_party_community_second_program_pid bigint,
    crpo_offering_pid bigint,
    crpo_channel_pid bigint,
    crpo_account_grant_program_pid bigint,
    crpo_mortgage_credit_certificate_issuer_pid bigint,
    crpo_criteria_snippet_pid bigint,
    crpo_smart_doc_pid bigint,
    crpo_org_node_pid bigint,
    crpo_trustee_pid bigint
);

alter table staging_octane.criteria_pid_operand owner to deployer;

create index idx_criteria_pid_operand__pid_version
    on staging_octane.criteria_pid_operand (crpo_pid, crpo_version);

grant select on staging_octane.criteria_pid_operand to readonly;

grant delete, insert, select, truncate, update on staging_octane.criteria_pid_operand to dms_octane_writer;

grant select on staging_octane.criteria_pid_operand to etl_loan;

create table staging_octane.smart_task
(
    st_pid bigint not null
        constraint smart_task_pkey
            primary key,
    st_version integer,
    st_wf_step_pid bigint,
    st_description varchar(1024),
    st_from_date date,
    st_through_date date,
    st_wf_step_order integer,
    st_criteria_pid bigint
);

alter table staging_octane.smart_task owner to deployer;

create index idx_smart_task__pid_version
    on staging_octane.smart_task (st_pid, st_version);

grant select on staging_octane.smart_task to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_task to dms_octane_writer;

grant select on staging_octane.smart_task to etl_loan;

create table staging_octane.smart_task_tag_modifier
(
    sttm_pid bigint not null
        constraint smart_task_tag_modifier_pkey
            primary key,
    sttm_version integer,
    sttm_deal_tag_definition_pid bigint,
    sttm_smart_task_pid bigint,
    sttm_add_tag boolean
);

alter table staging_octane.smart_task_tag_modifier owner to deployer;

create index idx_smart_task_tag_modifier__pid_version
    on staging_octane.smart_task_tag_modifier (sttm_pid, sttm_version);

grant select on staging_octane.smart_task_tag_modifier to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_task_tag_modifier to dms_octane_writer;

grant select on staging_octane.smart_task_tag_modifier to etl_loan;

create table staging_octane.view_wf_deal_step_started
(
    wds_pid bigint not null
        constraint view_wf_deal_step_started_pkey
            primary key,
    wds_version integer,
    wds_wf_step_pid bigint,
    wds_wf_deal_process_pid bigint,
    wds_performer_user_pid bigint,
    wds_visit_number integer,
    wds_start_datetime timestamp,
    wds_complete_datetime timestamp,
    wds_timeout_datetime timestamp,
    wds_wf_deal_step_status_type varchar(128),
    wds_wf_step_type varchar(128),
    wds_function_error_list text,
    wds_step_name varchar(128),
    wds_step_number numeric(17,5),
    wds_step_number_formatted varchar(16),
    wds_step_number_name_formatted varchar(145),
    wds_expected_complete_minutes integer,
    wds_description varchar(1024),
    wds_wf_step_function_type varchar(128),
    wds_phase_name varchar(128),
    wds_phase_number integer,
    wds_allow_check_override boolean,
    wds_deal_stage_pid bigint,
    wds_completing_user_pid bigint,
    wds_polling_interval_offset integer,
    wds_materialized_view_trash boolean
);

alter table staging_octane.view_wf_deal_step_started owner to deployer;

create index idx_view_wf_deal_step_started__pid_version
    on staging_octane.view_wf_deal_step_started (wds_pid, wds_version);

grant select on staging_octane.view_wf_deal_step_started to readonly;

grant delete, insert, select, truncate, update on staging_octane.view_wf_deal_step_started to dms_octane_writer;

grant select on staging_octane.view_wf_deal_step_started to etl_loan;

create table staging_octane.wf_deal_step
(
    wds_pid bigint not null
        constraint wf_deal_step_pkey
            primary key,
    wds_version integer,
    wds_wf_step_pid bigint,
    wds_wf_deal_process_pid bigint,
    wds_performer_user_pid bigint,
    wds_visit_number integer,
    wds_start_datetime timestamp,
    wds_complete_datetime timestamp,
    wds_timeout_datetime timestamp,
    wds_wf_deal_step_status_type varchar(128),
    wds_wf_step_type varchar(128),
    wds_function_error_list text,
    wds_step_name varchar(128),
    wds_step_number numeric(17,5),
    wds_step_number_formatted varchar(16),
    wds_step_number_name_formatted varchar(145),
    wds_expected_complete_minutes integer,
    wds_description varchar(1024),
    wds_wf_step_function_type varchar(128),
    wds_phase_name varchar(128),
    wds_phase_number integer,
    wds_allow_check_override boolean,
    wds_deal_stage_pid bigint,
    wds_completing_user_pid bigint,
    wds_polling_interval_offset integer
);

alter table staging_octane.wf_deal_step owner to deployer;

create index idx_wf_deal_step__pid_version
    on staging_octane.wf_deal_step (wds_pid, wds_version);

grant select on staging_octane.wf_deal_step to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_deal_step to dms_octane_writer;

grant select on staging_octane.wf_deal_step to etl_loan;

create table staging_octane.deal_note
(
    dn_pid bigint not null
        constraint deal_note_pkey
            primary key,
    dn_version integer,
    dn_deal_pid bigint,
    dn_create_datetime timestamp,
    dn_content varchar(16000),
    dn_author_unparsed_name varchar(128),
    dn_author_lender_user_pid bigint,
    dn_scope_type varchar(128),
    dn_scope_name varchar(1024),
    dn_wf_deal_step_pid bigint,
    dn_proposal_doc_pid bigint,
    dn_proposal_review_pid bigint,
    dn_category_type varchar(128)
);

alter table staging_octane.deal_note owner to deployer;

create index idx_deal_note__pid_version
    on staging_octane.deal_note (dn_pid, dn_version);

grant select on staging_octane.deal_note to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_note to dms_octane_writer;

grant select on staging_octane.deal_note to etl_loan;

create table staging_octane.deal_note_comment
(
    dnc_pid bigint not null
        constraint deal_note_comment_pkey
            primary key,
    dnc_version integer,
    dnc_deal_note_pid bigint,
    dnc_create_datetime timestamp,
    dnc_content varchar(16000),
    dnc_author_unparsed_name varchar(128),
    dnc_author_lender_user_pid bigint
);

alter table staging_octane.deal_note_comment owner to deployer;

create index idx_deal_note_comment__pid_version
    on staging_octane.deal_note_comment (dnc_pid, dnc_version);

grant select on staging_octane.deal_note_comment to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_note_comment to dms_octane_writer;

grant select on staging_octane.deal_note_comment to etl_loan;

create table staging_octane.deal_note_monitor
(
    dnm_pid bigint not null
        constraint deal_note_monitor_pkey
            primary key,
    dnm_version integer,
    dnm_deal_note_pid bigint,
    dnm_lender_user_pid bigint
);

alter table staging_octane.deal_note_monitor owner to deployer;

create index idx_deal_note_monitor__pid_version
    on staging_octane.deal_note_monitor (dnm_pid, dnm_version);

grant select on staging_octane.deal_note_monitor to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_note_monitor to dms_octane_writer;

grant select on staging_octane.deal_note_monitor to etl_loan;

create table staging_octane.deal_note_role_tag
(
    dnrt_pid bigint not null
        constraint deal_note_role_tag_pkey
            primary key,
    dnrt_version integer,
    dnrt_deal_note_pid bigint,
    dnrt_role_pid bigint
);

alter table staging_octane.deal_note_role_tag owner to deployer;

create index idx_deal_note_role_tag__pid_version
    on staging_octane.deal_note_role_tag (dnrt_pid, dnrt_version);

grant select on staging_octane.deal_note_role_tag to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_note_role_tag to dms_octane_writer;

grant select on staging_octane.deal_note_role_tag to etl_loan;

create table staging_octane.deal_task
(
    dt_pid bigint not null
        constraint deal_task_pkey
            primary key,
    dt_version integer,
    dt_wf_deal_step_pid bigint,
    dt_create_lender_user_name varchar(128),
    dt_create_datetime timestamp,
    dt_description varchar(1024),
    dt_complete_datetime timestamp,
    dt_deal_task_status_type varchar(128),
    dt_smart_task boolean
);

alter table staging_octane.deal_task owner to deployer;

create index idx_deal_task__pid_version
    on staging_octane.deal_task (dt_pid, dt_version);

grant select on staging_octane.deal_task to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_task to dms_octane_writer;

grant select on staging_octane.deal_task to etl_loan;

create table staging_octane.wf_deal_fork_process
(
    wdfp_pid bigint not null
        constraint wf_deal_fork_process_pkey
            primary key,
    wdfp_version integer,
    wdfp_wf_deal_step_pid bigint,
    wdfp_wf_deal_process_pid bigint
);

alter table staging_octane.wf_deal_fork_process owner to deployer;

create index idx_wf_deal_fork_process__pid_version
    on staging_octane.wf_deal_fork_process (wdfp_pid, wdfp_version);

grant select on staging_octane.wf_deal_fork_process to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_deal_fork_process to dms_octane_writer;

grant select on staging_octane.wf_deal_fork_process to etl_loan;

create table staging_octane.wf_deal_function_queue
(
    wdfq_pid bigint not null
        constraint wf_deal_function_queue_pkey
            primary key,
    wdfq_version integer,
    wdfq_wf_deal_step_pid bigint,
    wdfq_worker_start_datetime timestamp,
    wdfq_halted boolean,
    wdfq_retry_count integer
);

alter table staging_octane.wf_deal_function_queue owner to deployer;

create index idx_wf_deal_function_queue__pid_version
    on staging_octane.wf_deal_function_queue (wdfq_pid, wdfq_version);

grant select on staging_octane.wf_deal_function_queue to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_deal_function_queue to dms_octane_writer;

grant select on staging_octane.wf_deal_function_queue to etl_loan;

create table staging_octane.wf_deal_outcome
(
    wdo_pid bigint not null
        constraint wf_deal_outcome_pkey
            primary key,
    wdo_version integer,
    wdo_wf_deal_step_pid bigint,
    wdo_wf_outcome_type varchar(128),
    wdo_outcome_name varchar(128),
    wdo_borrower_message varchar(1024),
    wdo_lender_description varchar(256),
    wdo_incomplete_outcome boolean,
    wdo_transition_wf_deal_step_pid bigint
);

alter table staging_octane.wf_deal_outcome owner to deployer;

create index idx_wf_deal_outcome__pid_version
    on staging_octane.wf_deal_outcome (wdo_pid, wdo_version);

grant select on staging_octane.wf_deal_outcome to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_deal_outcome to dms_octane_writer;

grant select on staging_octane.wf_deal_outcome to etl_loan;

create table staging_octane.wf_deal_step_timeout
(
    wdst_pid bigint not null
        constraint wf_deal_step_timeout_pkey
            primary key,
    wdst_version integer,
    wdst_wf_deal_step_pid bigint,
    wdst_timeout_datetime timestamp
);

alter table staging_octane.wf_deal_step_timeout owner to deployer;

create index idx_wf_deal_step_timeout__pid_version
    on staging_octane.wf_deal_step_timeout (wdst_pid, wdst_version);

grant select on staging_octane.wf_deal_step_timeout to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_deal_step_timeout to dms_octane_writer;

grant select on staging_octane.wf_deal_step_timeout to etl_loan;

create table staging_octane.wf_fork_process
(
    wfp_pid bigint not null
        constraint wf_fork_process_pkey
            primary key,
    wfp_version integer,
    wfp_wf_step_pid bigint,
    wfp_wf_process_pid bigint
);

alter table staging_octane.wf_fork_process owner to deployer;

create index idx_wf_fork_process__pid_version
    on staging_octane.wf_fork_process (wfp_pid, wfp_version);

grant select on staging_octane.wf_fork_process to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_fork_process to dms_octane_writer;

grant select on staging_octane.wf_fork_process to etl_loan;

create table staging_octane.wf_outcome
(
    wo_pid bigint not null
        constraint wf_outcome_pkey
            primary key,
    wo_version integer,
    wo_wf_step_pid bigint,
    wo_wf_outcome_type varchar(128),
    wo_outcome_name varchar(128),
    wo_ordinal integer,
    wo_criteria_pid bigint,
    wo_borrower_message varchar(1024),
    wo_lender_description varchar(256),
    wo_incomplete_outcome boolean,
    wo_transition_wf_step_pid bigint
);

alter table staging_octane.wf_outcome owner to deployer;

create index idx_wf_outcome__pid_version
    on staging_octane.wf_outcome (wo_pid, wo_version);

grant select on staging_octane.wf_outcome to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_outcome to dms_octane_writer;

grant select on staging_octane.wf_outcome to etl_loan;

create table staging_octane.wf_step_deal_check
(
    wsdc_pid bigint not null
        constraint wf_step_deal_check_pkey
            primary key,
    wsdc_version integer,
    wsdc_wf_step_pid bigint,
    wsdc_deal_check_type varchar(128),
    wsdc_deal_check_severity_type varchar(128)
);

alter table staging_octane.wf_step_deal_check owner to deployer;

create index idx_wf_step_deal_check__pid_version
    on staging_octane.wf_step_deal_check (wsdc_pid, wsdc_version);

grant select on staging_octane.wf_step_deal_check to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_step_deal_check to dms_octane_writer;

grant select on staging_octane.wf_step_deal_check to etl_loan;

create table staging_octane.wf_step_deal_check_definition
(
    wsdd_pid bigint not null
        constraint wf_step_deal_check_definition_pkey
            primary key,
    wsdd_version integer,
    wsdd_wf_step_pid bigint,
    wsdd_deal_check_type varchar(128),
    wsdd_deal_check_severity_type varchar(128)
);

alter table staging_octane.wf_step_deal_check_definition owner to deployer;

create index idx_wf_step_deal_check_definition__pid_version
    on staging_octane.wf_step_deal_check_definition (wsdd_pid, wsdd_version);

grant select on staging_octane.wf_step_deal_check_definition to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_step_deal_check_definition to dms_octane_writer;

grant select on staging_octane.wf_step_deal_check_definition to etl_loan;

create table staging_octane.wf_step_deal_check_dependency
(
    wsdp_pid bigint not null
        constraint wf_step_deal_check_dependency_pkey
            primary key,
    wsdp_version integer,
    wsdp_wf_step_pid bigint,
    wsdp_dependency_wf_step_pid bigint
);

alter table staging_octane.wf_step_deal_check_dependency owner to deployer;

create index idx_wf_step_deal_check_dependency__pid_version
    on staging_octane.wf_step_deal_check_dependency (wsdp_pid, wsdp_version);

grant select on staging_octane.wf_step_deal_check_dependency to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_step_deal_check_dependency to dms_octane_writer;

grant select on staging_octane.wf_step_deal_check_dependency to etl_loan;

create table staging_octane.wf_step_deal_tag_modifier
(
    wsdt_pid bigint not null
        constraint wf_step_deal_tag_modifier_pkey
            primary key,
    wsdt_version integer,
    wsdt_deal_tag_definition_pid bigint,
    wsdt_wf_step_pid bigint,
    wsdt_add_tag boolean
);

alter table staging_octane.wf_step_deal_tag_modifier owner to deployer;

create index idx_wf_step_deal_tag_modifier__pid_version
    on staging_octane.wf_step_deal_tag_modifier (wsdt_pid, wsdt_version);

grant select on staging_octane.wf_step_deal_tag_modifier to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_step_deal_tag_modifier to dms_octane_writer;

grant select on staging_octane.wf_step_deal_tag_modifier to etl_loan;

create table staging_octane.zip_code_info
(
    zci_pid bigint not null
        constraint zip_code_info_pkey
            primary key,
    zci_version integer,
    zci_zip_code varchar(5),
    zci_latitude numeric(9,6),
    zci_longitude numeric(9,6)
);

alter table staging_octane.zip_code_info owner to deployer;

grant select on staging_octane.zip_code_info to readonly;

grant delete, insert, select, truncate, update on staging_octane.zip_code_info to dms_octane_writer;

grant select on staging_octane.zip_code_info to etl_loan;

create table staging_octane.county_zip_code
(
    czc_pid bigint not null
        constraint county_zip_code_pkey
            primary key,
    czc_version integer,
    czc_county_pid bigint,
    czc_zip_code_info_pid bigint
);

alter table staging_octane.county_zip_code owner to deployer;

create index idx_county_zip_code__pid_version
    on staging_octane.county_zip_code (czc_pid, czc_version);

grant select on staging_octane.county_zip_code to readonly;

grant delete, insert, select, truncate, update on staging_octane.county_zip_code to dms_octane_writer;

grant select on staging_octane.county_zip_code to etl_loan;

create table staging_compliance.nmls_call_report_state
(
    etl_batch_id text,
    data_source_dwid bigint,
    mcr_field_id text not null,
    mcr_description text,
    state_type text not null,
    total_unpaid_balance numeric(21,3),
    loan_count integer,
    average_unpaid_balance numeric(21,3),
    report_quarter text
);

alter table staging_compliance.nmls_call_report_state owner to deployer;

grant select on staging_compliance.nmls_call_report_state to readonly;

grant delete, insert, select, truncate, update on staging_compliance.nmls_call_report_state to dmi;

create table staging_compliance.nmls_call_report_national
(
    etl_batch_id text,
    data_source_dwid bigint,
    mcr_field_id text not null,
    mcr_description text,
    total_unpaid_balance numeric(21,3),
    loan_count integer,
    average_unpaid_balance numeric(21,3),
    report_quarter text
);

alter table staging_compliance.nmls_call_report_national owner to deployer;

grant select on staging_compliance.nmls_call_report_national to readonly;

grant delete, insert, select, truncate, update on staging_compliance.nmls_call_report_national to dmi;

create table staging_compliance.nmls_call_report_s540a
(
    etl_batch_id text,
    data_source_dwid bigint,
    state_type text,
    item_id bigint,
    servicer_nmls_id bigint,
    servicer_name text,
    pool_number text,
    total_unpaid_balance numeric(21,3),
    loan_count integer,
    average_unpaid_balance numeric(21,3),
    report_quarter text
);

alter table staging_compliance.nmls_call_report_s540a owner to deployer;

grant select on staging_compliance.nmls_call_report_s540a to readonly;

grant delete, insert, select, truncate, update on staging_compliance.nmls_call_report_s540a to dmi;

create table staging_octane.borrower_declarations
(
    bdec_pid bigint not null
        constraint borrower_declarations_pkey
            primary key,
    bdec_version integer,
    bdec_borrower_pid bigint,
    bdec_fha_secondary_residence varchar(128),
    bdec_relationship_with_seller varchar(128),
    bdec_borrowed_funds_undisclosed varchar(128),
    bdec_borrowed_funds_undisclosed_amount numeric(15,2),
    bdec_other_mortgage_in_progress_before_closing varchar(128),
    bdec_applying_for_credit_before_closing varchar(128),
    bdec_priority_given_to_another_lien varchar(128),
    bdec_cosigner_undisclosed varchar(128),
    bdec_currently_delinquent_federal_debt varchar(128),
    bdec_party_to_lawsuit varchar(128),
    bdec_conveyed_title_in_lieu_of_foreclosure varchar(128),
    bdec_completed_pre_foreclosure_short_sale varchar(128),
    bdec_property_foreclosure varchar(128),
    bdec_bankruptcy_chapter_7 varchar(128),
    bdec_bankruptcy_chapter_11 varchar(128),
    bdec_bankruptcy_chapter_12 varchar(128),
    bdec_bankruptcy_chapter_13 varchar(128),
    bdec_intend_to_occupy_more_than_14_days varchar(128)
);

alter table staging_octane.borrower_declarations owner to deployer;

create index idx_borrower_declarations__pid_version
    on staging_octane.borrower_declarations (bdec_pid, bdec_version);

grant select on staging_octane.borrower_declarations to readonly;

grant delete, insert, select, truncate, update on staging_octane.borrower_declarations to dms_octane_writer;

grant select on staging_octane.borrower_declarations to etl_loan;

create table staging_octane.minimum_required_residual_income_table
(
    mrit_pid bigint not null
        constraint minimum_required_residual_income_table_pkey
            primary key,
    mrit_version integer,
    mrit_effective_date date
);

alter table staging_octane.minimum_required_residual_income_table owner to deployer;

create index idx_minimum_required_residual_income_table__pid_version
    on staging_octane.minimum_required_residual_income_table (mrit_pid, mrit_version);

grant select on staging_octane.minimum_required_residual_income_table to readonly;

grant delete, insert, select, truncate, update on staging_octane.minimum_required_residual_income_table to dms_octane_writer;

grant select on staging_octane.minimum_required_residual_income_table to etl_loan;

create table staging_octane.minimum_required_residual_income_row
(
    mrir_pid bigint not null
        constraint minimum_required_residual_income_row_pkey
            primary key,
    mrir_version integer,
    mrir_minimum_required_residual_income_table_pid bigint,
    mrir_state_type varchar(16),
    mrir_household_size integer,
    mrir_loan_amount_min numeric(15,2),
    mrir_loan_amount_max numeric(15,2),
    mrir_minimum_required_residual_income_amount numeric(15,2)
);

alter table staging_octane.minimum_required_residual_income_row owner to deployer;

create index idx_minimum_required_residual_income_row__pid_version
    on staging_octane.minimum_required_residual_income_row (mrir_pid, mrir_version);

grant select on staging_octane.minimum_required_residual_income_row to readonly;

grant delete, insert, select, truncate, update on staging_octane.minimum_required_residual_income_row to dms_octane_writer;

grant select on staging_octane.minimum_required_residual_income_row to etl_loan;

create table staging_octane.new_lock_only_add_on
(
    nlo_pid bigint not null
        constraint new_lock_only_add_on_pkey
            primary key,
    nlo_version integer,
    nlo_account_pid bigint,
    nlo_add_on_prefix varchar(32),
    nlo_add_on_description varchar(256)
);

alter table staging_octane.new_lock_only_add_on owner to deployer;

create index idx_new_lock_only_add_on__pid_version
    on staging_octane.new_lock_only_add_on (nlo_pid, nlo_version);

grant select on staging_octane.new_lock_only_add_on to readonly;

grant delete, insert, select, truncate, update on staging_octane.new_lock_only_add_on to dms_octane_writer;

grant select on staging_octane.new_lock_only_add_on to etl_loan;

create table staging_octane.doc_provider_group_type
(
    code varchar(128) not null
        constraint doc_provider_group_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.doc_provider_group_type owner to deployer;

grant select on staging_octane.doc_provider_group_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.doc_provider_group_type to dms_octane_writer;

grant select on staging_octane.doc_provider_group_type to etl_loan;

create table staging_octane.doc_req_fulfill_status_type
(
    code varchar(128) not null
        constraint doc_req_fulfill_status_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.doc_req_fulfill_status_type owner to deployer;

grant select on staging_octane.doc_req_fulfill_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.doc_req_fulfill_status_type to dms_octane_writer;

grant select on staging_octane.doc_req_fulfill_status_type to etl_loan;

create table staging_octane.trust_classification_type
(
    code varchar(128) not null
        constraint trust_classification_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.trust_classification_type owner to deployer;

grant select on staging_octane.trust_classification_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.trust_classification_type to dms_octane_writer;

grant select on staging_octane.trust_classification_type to etl_loan;

create table staging_octane.financed_property_improvements_category_type
(
    code varchar(128) not null
        constraint financed_property_improvements_category_type_pkey
            primary key,
    value varchar(1024)
);

alter table staging_octane.financed_property_improvements_category_type owner to deployer;

grant select on staging_octane.financed_property_improvements_category_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.financed_property_improvements_category_type to dms_octane_writer;

grant select on staging_octane.financed_property_improvements_category_type to etl_loan;

create table star_loan.loan_fact
(
    data_source_dwid bigint not null,
    edw_created_datetime timestamp with time zone,
    edw_modified_datetime timestamp with time zone,
    etl_batch_id text,
    data_source_integration_columns text,
    data_source_integration_id text not null,
    data_source_modified_datetime timestamp with time zone,
    loan_pid bigint,
    loan_dwid bigint not null
        constraint pk_loan_fact
            primary key,
    loan_junk_dwid bigint,
    product_choice_dwid bigint,
    transaction_dwid bigint,
    transaction_junk_dwid bigint,
    current_loan_beneficiary_dwid bigint,
    active_loan_funding_dwid bigint,
    b1_borrower_dwid bigint,
    b2_borrower_dwid bigint,
    b3_borrower_dwid bigint,
    b4_borrower_dwid bigint,
    b5_borrower_dwid bigint,
    c1_borrower_dwid bigint,
    c2_borrower_dwid bigint,
    c3_borrower_dwid bigint,
    c4_borrower_dwid bigint,
    c5_borrower_dwid bigint,
    n1_borrower_dwid bigint,
    n2_borrower_dwid bigint,
    n3_borrower_dwid bigint,
    n4_borrower_dwid bigint,
    n5_borrower_dwid bigint,
    n6_borrower_dwid bigint,
    n7_borrower_dwid bigint,
    n8_borrower_dwid bigint,
    b1_borrower_demographics_dwid bigint,
    b1_borrower_lending_profile_dwid bigint,
    primary_application_dwid bigint,
    collateral_to_custodian_lender_user_dwid bigint,
    interim_funder_dwid bigint,
    product_terms_dwid bigint,
    product_dwid bigint,
    product_investor_dwid bigint,
    hmda_purchaser_of_loan_dwid bigint,
    apr numeric(15,9),
    base_loan_amount numeric(21,3),
    financed_amount numeric(21,3),
    loan_amount numeric(21,3),
    ltv_ratio_percent numeric(15,9),
    note_rate_percent numeric(15,9),
    purchase_advice_amount numeric(21,3),
    finance_charge_amount numeric(21,3),
    hoepa_fees_dollar_amount numeric(21,3),
    interest_rate_fee_change_amount numeric(21,3),
    principal_curtailment_amount numeric(21,3),
    qualifying_pi_amount numeric(21,3),
    target_cash_out_amount numeric(21,3),
    heloc_maximum_balance_amount numeric(21,3),
    agency_case_id_assigned_date_dwid bigint,
    apor_date_dwid bigint,
    application_signed_date_dwid bigint,
    approved_with_conditions_date_dwid bigint,
    beneficiary_from_date_dwid bigint,
    beneficiary_through_date_dwid bigint,
    collateral_sent_date_dwid bigint,
    disbursement_date_dwid bigint,
    early_funding_date_dwid bigint,
    effective_funding_date_dwid bigint,
    fha_endorsement_date_dwid bigint,
    estimated_funding_date_dwid bigint,
    intent_to_proceed_date_dwid bigint,
    funding_date_dwid bigint,
    funding_requested_date_dwid bigint,
    loan_file_ship_date_dwid bigint,
    mers_transfer_creation_date_dwid bigint,
    pending_wire_date_dwid bigint,
    rejected_date_dwid bigint,
    return_confirmed_date_dwid bigint,
    return_request_date_dwid bigint,
    scheduled_release_date_dwid bigint,
    usda_guarantee_date_dwid bigint,
    va_guaranty_date_dwid bigint,
    account_executive_lender_user_dwid bigint,
    closing_doc_specialist_lender_user_dwid bigint,
    closing_scheduler_lender_user_dwid bigint,
    collateral_to_investor_lender_user_dwid bigint,
    collateral_underwriter_lender_user_dwid bigint,
    correspondent_client_advocate_lender_user_dwid bigint,
    final_documents_to_investor_lender_user_dwid bigint,
    flood_insurance_specialist_lender_user_dwid bigint,
    funder_lender_user_dwid bigint,
    government_insurance_lender_user_dwid bigint,
    ho6_specialist_lender_user_dwid bigint,
    hoa_specialist_lender_user_dwid bigint,
    hoi_specialist_lender_user_dwid bigint,
    hud_va_lender_officer_lender_user_dwid bigint,
    internal_construction_manager_lender_user_dwid bigint,
    investor_conditions_lender_user_dwid bigint,
    investor_stack_to_investor_lender_user_dwid bigint,
    loan_officer_assistant_lender_user_dwid bigint,
    loan_payoff_specialist_lender_user_dwid bigint,
    originator_lender_user_dwid bigint,
    processor_lender_user_dwid bigint,
    project_underwriter_lender_user_dwid bigint,
    subordination_specialist_lender_user_dwid bigint,
    supplemental_originator_lender_user_dwid bigint,
    title_specialist_lender_user_dwid bigint,
    transaction_assistant_lender_user_dwid bigint,
    underwriter_lender_user_dwid bigint,
    underwriting_manager_lender_user_dwid bigint,
    va_specialist_lender_user_dwid bigint,
    verbal_voe_specialist_lender_user_dwid bigint,
    voe_specialist_lender_user_dwid bigint,
    wholesale_client_advocate_lender_user_dwid bigint,
    wire_specialist_lender_user_dwid bigint,
    initial_beneficiary_investor_dwid bigint,
    first_beneficiary_after_initial_investor_dwid bigint,
    most_recent_purchasing_beneficiary_investor_dwid bigint,
    current_beneficiary_investor_dwid bigint
);

alter table star_loan.loan_fact owner to deployer;

create index idx_loan_fact__loan_pid
    on star_loan.loan_fact (loan_pid);

create index idx_loan_fact__loan_junk_dwid
    on star_loan.loan_fact (loan_junk_dwid);

create index idx_loan_fact__product_choices_dwid
    on star_loan.loan_fact (product_choice_dwid);

create index idx_loan_fact__transaction_dwid
    on star_loan.loan_fact (transaction_dwid);

create index idx_loan_fact__transaction_junk_dwid
    on star_loan.loan_fact (transaction_junk_dwid);

create index idx_loan_fact__loan_beneficiary_dwid
    on star_loan.loan_fact (current_loan_beneficiary_dwid);

create index idx_loan_fact__loan_funding_dwid
    on star_loan.loan_fact (active_loan_funding_dwid);

create index idx_loan_fact__b1_borrower_dwid
    on star_loan.loan_fact (b1_borrower_dwid);

create index idx_loan_fact__b2_borrower_dwid
    on star_loan.loan_fact (b2_borrower_dwid);

create index idx_loan_fact__b3_borrower_dwid
    on star_loan.loan_fact (b3_borrower_dwid);

create index idx_loan_fact__b4_borrower_dwid
    on star_loan.loan_fact (b4_borrower_dwid);

create index idx_loan_fact__b5_borrower_dwid
    on star_loan.loan_fact (b5_borrower_dwid);

create index idx_loan_fact__c1_borrower_dwid
    on star_loan.loan_fact (c1_borrower_dwid);

create index idx_loan_fact__c2_borrower_dwid
    on star_loan.loan_fact (c2_borrower_dwid);

create index idx_loan_fact__c3_borrower_dwid
    on star_loan.loan_fact (c3_borrower_dwid);

create index idx_loan_fact__c4_borrower_dwid
    on star_loan.loan_fact (c4_borrower_dwid);

create index idx_loan_fact__c5_borrower_dwid
    on star_loan.loan_fact (c5_borrower_dwid);

create index idx_loan_fact__n1_borrower_dwid
    on star_loan.loan_fact (n1_borrower_dwid);

create index idx_loan_fact__n2_borrower_dwid
    on star_loan.loan_fact (n2_borrower_dwid);

create index idx_loan_fact__n3_borrower_dwid
    on star_loan.loan_fact (n3_borrower_dwid);

create index idx_loan_fact__n4_borrower_dwid
    on star_loan.loan_fact (n4_borrower_dwid);

create index idx_loan_fact__n5_borrower_dwid
    on star_loan.loan_fact (n5_borrower_dwid);

create index idx_loan_fact__n6_borrower_dwid
    on star_loan.loan_fact (n6_borrower_dwid);

create index idx_loan_fact__n7_borrower_dwid
    on star_loan.loan_fact (n7_borrower_dwid);

create index idx_loan_fact__n8_borrower_dwid
    on star_loan.loan_fact (n8_borrower_dwid);

create index idx_loan_fact__b1_borrower_demographics_dwid
    on star_loan.loan_fact (b1_borrower_demographics_dwid);

create index idx_loan_fact__b1_borrower_lending_profile_dwid
    on star_loan.loan_fact (b1_borrower_lending_profile_dwid);

create index idx_loan_fact__application_dwid
    on star_loan.loan_fact (primary_application_dwid);

create index idx_loan_fact__collateral_to_custodian_lender_user_dwid
    on star_loan.loan_fact (collateral_to_custodian_lender_user_dwid);

create index idx_loan_fact__interim_funder_dwid
    on star_loan.loan_fact (interim_funder_dwid);

create index idx_loan_fact__product_terms_dwid
    on star_loan.loan_fact (product_terms_dwid);

create index idx_loan_fact__product_dwid
    on star_loan.loan_fact (product_dwid);

create index idx_loan_fact__investor_dwid
    on star_loan.loan_fact (product_investor_dwid);

create index idx_loan_fact__hmda_purchaser_of_loan_dwid
    on star_loan.loan_fact (hmda_purchaser_of_loan_dwid);

create index idx_loan_fact__agency_case_id_assigned_date_dwid
    on star_loan.loan_fact (agency_case_id_assigned_date_dwid);

create index idx_loan_fact__apor_date_dwid
    on star_loan.loan_fact (apor_date_dwid);

create index idx_loan_fact__application_signed_date_dwid
    on star_loan.loan_fact (application_signed_date_dwid);

create index idx_loan_fact__approved_with_conditions_date_dwid
    on star_loan.loan_fact (approved_with_conditions_date_dwid);

create index idx_loan_fact__beneficiary_from_date_dwid
    on star_loan.loan_fact (beneficiary_from_date_dwid);

create index idx_loan_fact__beneficiary_through_date_dwid
    on star_loan.loan_fact (beneficiary_through_date_dwid);

create index idx_loan_fact__collateral_sent_date_dwid
    on star_loan.loan_fact (collateral_sent_date_dwid);

create index idx_loan_fact__disbursement_date_dwid
    on star_loan.loan_fact (disbursement_date_dwid);

create index idx_loan_fact__early_funding_date_dwid
    on star_loan.loan_fact (early_funding_date_dwid);

create index idx_loan_fact__effective_funding_date_dwid
    on star_loan.loan_fact (effective_funding_date_dwid);

create index idx_loan_fact__fha_endorsement_date_dwid
    on star_loan.loan_fact (fha_endorsement_date_dwid);

create index idx_loan_fact__estimated_funding_date_dwid
    on star_loan.loan_fact (estimated_funding_date_dwid);

create index idx_loan_fact__intent_to_proceed_date_dwid
    on star_loan.loan_fact (intent_to_proceed_date_dwid);

create index idx_loan_fact__funding_date_dwid
    on star_loan.loan_fact (funding_date_dwid);

create index idx_loan_fact__funding_requested_date_dwid
    on star_loan.loan_fact (funding_requested_date_dwid);

create index idx_loan_fact__loan_file_ship_date_dwid
    on star_loan.loan_fact (loan_file_ship_date_dwid);

create index idx_loan_fact__mers_transfer_creation_date_dwid
    on star_loan.loan_fact (mers_transfer_creation_date_dwid);

create index idx_loan_fact__pending_wire_date_dwid
    on star_loan.loan_fact (pending_wire_date_dwid);

create index idx_loan_fact__rejected_date_dwid
    on star_loan.loan_fact (rejected_date_dwid);

create index idx_loan_fact__return_confirmed_date_dwid
    on star_loan.loan_fact (return_confirmed_date_dwid);

create index idx_loan_fact__return_request_date_dwid
    on star_loan.loan_fact (return_request_date_dwid);

create index idx_loan_fact__scheduled_release_date_dwid
    on star_loan.loan_fact (scheduled_release_date_dwid);

create index idx_loan_fact__usda_guarantee_date_dwid
    on star_loan.loan_fact (usda_guarantee_date_dwid);

create index idx_loan_fact__va_guaranty_date_dwid
    on star_loan.loan_fact (va_guaranty_date_dwid);

create index idx_loan_fact__data_source_integration_id
    on star_loan.loan_fact (data_source_integration_id);

create index idx_loan_fact__etl_batch_id
    on star_loan.loan_fact (etl_batch_id);

grant select on star_loan.loan_fact to readonly;

grant select on star_loan.loan_fact to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_fact to etl_loan;

create table star_loan.loan_dim
(
    dwid bigint default nextval('star_loan.loan_dim_dwid_seq'::regclass) not null
        constraint pk_loan_dim
            primary key,
    data_source_dwid bigint not null,
    edw_created_datetime timestamp with time zone,
    edw_modified_datetime timestamp with time zone,
    etl_batch_id text,
    data_source_integration_columns text,
    data_source_integration_id text not null,
    data_source_modified_datetime timestamp with time zone,
    loan_pid bigint not null,
    proposal_pid bigint,
    product_terms_pid bigint,
    los_loan_number bigint,
    arm_index_current_value_percent numeric(15,9),
    arm_index_datetime timestamp with time zone,
    base_guaranty_fee_percent numeric(15,9),
    base_loan_amount_ltv_ratio_percent numeric(15,9),
    effective_undiscounted_rate_percent numeric(15,9),
    fhac_case_assignment_messages text,
    fnm_investor_product_plan_id varchar(5),
    fnm_mbs_investor_contract_id varchar(6),
    guaranty_fee_after_alternate_payment_method_percent numeric(15,9),
    guaranty_fee_percent numeric(15,9),
    hmda_rate_spread_percent numeric(15,9),
    hoepa_apr numeric(15,9),
    hoepa_rate_spread numeric(15,9),
    last_unprocessed_changes_datetime timestamp with time zone,
    locked_price_change_percent numeric(15,9),
    mi_requirement_ltv_ratio_percent numeric(15,9),
    product_choice_datetime timestamp with time zone,
    rate_sheet_undiscounted_rate_percent numeric(15,9),
    uldd_loan_comment varchar(60)
);

alter table star_loan.loan_dim owner to deployer;

create index idx_loan_dim__loan_pid
    on star_loan.loan_dim (loan_pid);

create index idx_loan_dim__proposal_pid
    on star_loan.loan_dim (proposal_pid);

create index idx_loan_dim__product_terms_pid
    on star_loan.loan_dim (product_terms_pid);

create index idx_loan_dim__los_loan_number
    on star_loan.loan_dim (los_loan_number);

create index idx_loan_dim__data_source_integration_id
    on star_loan.loan_dim (data_source_integration_id);

create index idx_loan_dim__etl_batch_id
    on star_loan.loan_dim (etl_batch_id);

grant select on star_loan.loan_dim to readonly;

grant select on star_loan.loan_dim to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_dim to etl_loan;

create table star_loan.loan_junk_dim
(
    dwid bigint default nextval('star_loan.loan_junk_dim_dwid_seq'::regclass) not null
        constraint pk_loan_junk_dim
            primary key,
    data_source_dwid bigint not null,
    edw_created_datetime timestamp with time zone,
    edw_modified_datetime timestamp with time zone,
    etl_batch_id text,
    data_source_integration_columns text,
    data_source_integration_id text not null,
    data_source_modified_datetime timestamp with time zone,
    buydown_contributor varchar(1024),
    buydown_contributor_code varchar(128),
    fha_program varchar(1024),
    fha_program_code varchar(128),
    hmda_hoepa_status varchar(1024),
    hmda_hoepa_status_code varchar(128),
    durp_eligibility_opt_out_flag boolean,
    fha_principal_write_down_flag boolean,
    hpml_flag boolean,
    lender_concession_candidate_flag boolean,
    mi_required_flag boolean,
    piggyback_flag boolean,
    qm_eligible_flag boolean,
    qualified_mortgage_flag boolean,
    secondary_clear_to_commit_flag boolean,
    student_loan_cash_out_refinance_flag boolean,
    lien_priority varchar(1024),
    lien_priority_code varchar(128),
    lqa_purchase_eligibility varchar(1024),
    lqa_purchase_eligibility_code varchar(128),
    qualified_mortgage_status varchar(1024),
    qualified_mortgage_status_code varchar(128),
    qualifying_rate varchar(1024),
    qualifying_rate_code varchar(128),
    texas_equity varchar(1024),
    texas_equity_auto varchar(1024),
    texas_equity_auto_code varchar(128),
    texas_equity_code varchar(128)
);

alter table star_loan.loan_junk_dim owner to deployer;

create index idx_loan_junk_dim__lien_priority
    on star_loan.loan_junk_dim (lien_priority);

create index idx_loan_junk_dim__data_source_integration_id
    on star_loan.loan_junk_dim (data_source_integration_id);

create index idx_loan_junk_dim__etl_batch_id
    on star_loan.loan_junk_dim (etl_batch_id);

grant select on star_loan.loan_junk_dim to readonly;

grant select on star_loan.loan_junk_dim to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_junk_dim to etl_loan;

create table star_loan.product_choice_dim
(
    dwid bigint default nextval('star_loan.product_choice_dim_dwid_seq'::regclass) not null
        constraint pk_product_choice_dim
            primary key,
    data_source_dwid bigint not null,
    edw_created_datetime timestamp with time zone,
    edw_modified_datetime timestamp with time zone,
    etl_batch_id text,
    data_source_integration_columns text,
    data_source_integration_id text not null,
    data_source_modified_datetime timestamp with time zone,
    aus varchar(1024),
    aus_code varchar(128),
    buydown_schedule varchar(1024),
    buydown_schedule_code varchar(128),
    interest_only varchar(1024),
    interest_only_code varchar(128),
    mortgage_type varchar(1024),
    mortgage_type_code varchar(128),
    prepay_penalty_schedule varchar(1024),
    prepay_penalty_schedule_code varchar(128)
);

alter table star_loan.product_choice_dim owner to deployer;

create index idx_product_choice_dim__mortgage_type
    on star_loan.product_choice_dim (mortgage_type);

create index idx_product_choice_dim__data_source_integration_id
    on star_loan.product_choice_dim (data_source_integration_id);

create index idx_product_choice_dim__etl_batch_id
    on star_loan.product_choice_dim (etl_batch_id);

grant select on star_loan.product_choice_dim to readonly;

grant select on star_loan.product_choice_dim to svc_looker_operations;

grant delete, insert, select, update on star_loan.product_choice_dim to etl_loan;

create table star_loan.transaction_junk_dim
(
    dwid bigint default nextval('star_loan.transaction_junk_dim_dwid_seq'::regclass) not null
        constraint transaction_junk_dim_pkey
            primary key,
    data_source_dwid bigint not null,
    edw_created_datetime timestamp with time zone,
    edw_modified_datetime timestamp with time zone,
    etl_batch_id text,
    data_source_integration_columns text,
    data_source_integration_id text not null,
    data_source_modified_datetime timestamp with time zone,
    piggyback_flag boolean,
    mi_required_flag boolean,
    is_test_loan_flag boolean,
    structure varchar(1024),
    loan_purpose varchar(1024),
    structure_code varchar(128),
    loan_purpose_code varchar(128)
);

alter table star_loan.transaction_junk_dim owner to deployer;

create index idx_transaction_junk_dim__structure
    on star_loan.transaction_junk_dim (structure);

create index idx_transaction_junk_dim__data_source_integration_id
    on star_loan.transaction_junk_dim (data_source_integration_id);

create index idx_transaction_junk_dim__etl_batch_id
    on star_loan.transaction_junk_dim (etl_batch_id);

grant select on star_loan.transaction_junk_dim to readonly;

grant select on star_loan.transaction_junk_dim to svc_looker_operations;

grant delete, insert, select, update on star_loan.transaction_junk_dim to etl_loan;

create table star_loan.hmda_purchaser_of_loan_dim
(
    dwid bigint default nextval('star_loan.hmda_purchaser_of_loan_dim_dwid_seq'::regclass) not null
        constraint pk_hmda_purchaser_of_loan_dim
            primary key,
    data_source_dwid bigint not null,
    edw_created_datetime timestamp with time zone,
    edw_modified_datetime timestamp with time zone,
    etl_batch_id text,
    data_source_integration_columns text,
    data_source_integration_id text not null,
    data_source_modified_datetime timestamp with time zone,
    code_2017 varchar(128),
    value_2017 varchar(1024),
    code_2018 varchar(128),
    value_2018 varchar(1024)
);

alter table star_loan.hmda_purchaser_of_loan_dim owner to deployer;

create index idx_hmda_purchaser_of_loan_dim__data_source_integration_id
    on star_loan.hmda_purchaser_of_loan_dim (data_source_integration_id);

create index idx_hmda_purchaser_of_loan_dim__etl_batch_id
    on star_loan.hmda_purchaser_of_loan_dim (etl_batch_id);

grant select on star_loan.hmda_purchaser_of_loan_dim to readonly;

grant select on star_loan.hmda_purchaser_of_loan_dim to svc_looker_operations;

grant delete, insert, select, update on star_loan.hmda_purchaser_of_loan_dim to etl_loan;

create table star_loan.borrower_dim
(
    dwid bigint default nextval('star_loan.borrower_dim_dwid_seq'::regclass) not null
        constraint pk_borrower_dim
            primary key,
    data_source_dwid bigint not null,
    edw_created_datetime timestamp with time zone,
    edw_modified_datetime timestamp with time zone,
    etl_batch_id text,
    data_source_integration_columns text,
    data_source_integration_id text not null,
    data_source_modified_datetime timestamp with time zone,
    borrower_pid bigint not null,
    application_pid bigint,
    alimony_child_support_explanation varchar(128),
    applicant_role varchar(1024),
    applicant_role_code varchar(128),
    application_taken_method varchar(1024),
    application_taken_method_code varchar(128),
    bankruptcy_explanation varchar(128),
    birth_date date,
    borrowed_down_payment_explanation varchar(128),
    caivrs_id varchar(16),
    caivrs_messages text,
    credit_report_authorization_datetime timestamp with time zone,
    credit_report_authorization_method varchar(1024),
    credit_report_authorization_method_code varchar(128),
    credit_report_authorization_obtained_by_unparsed_name varchar(128),
    credit_report_identifier varchar(32),
    decision_credit_score integer,
    dependent_count integer,
    dependents_age_years varchar(32),
    email varchar(256),
    equifax_credit_score integer,
    ethnicity_other_hispanic_or_latino_description varchar(100),
    experian_credit_score integer,
    fax varchar(32),
    first_name varchar(32),
    first_time_homebuyer_explain varchar(1024),
    credit_report_authorization_flag boolean,
    has_no_ssn_flag boolean,
    power_of_attorney varchar(1024),
    power_of_attorney_code varchar(128),
    home_phone varchar(32),
    homeownership_education_id varchar(128),
    homeownership_education_name varchar(128),
    housing_counseling varchar(1024),
    housing_counseling_agency varchar(1024),
    housing_counseling_agency_code varchar(128),
    housing_counseling_code varchar(128),
    housing_counseling_complete_date date,
    housing_counseling_id varchar(128),
    housing_counseling_name varchar(128),
    required_to_sign_flag boolean,
    last_name varchar(32),
    legal_entity varchar(1024),
    legal_entity_code varchar(128),
    middle_name varchar(32),
    monthly_job_federal_tax_amount numeric(21,3),
    monthly_job_medicare_tax_amount numeric(21,3),
    monthly_job_other_tax_1_amount numeric(21,3),
    monthly_job_other_tax_1_description varchar(128),
    monthly_job_other_tax_2_amount numeric(21,3),
    monthly_job_other_tax_2_description varchar(128),
    monthly_job_other_tax_3_amount numeric(21,3),
    monthly_job_other_tax_3_description varchar(128),
    monthly_job_retirement_tax_amount numeric(21,3),
    monthly_job_state_disability_insurance_amount numeric(21,3),
    monthly_job_state_tax_amount numeric(21,3),
    monthly_job_total_tax_amount numeric(21,3),
    name_suffix varchar(32),
    nickname varchar(32),
    note_endorser_explanation varchar(128),
    obligated_loan_foreclosure_explanation varchar(128),
    office_phone varchar(32),
    office_phone_extension varchar(16),
    other_race_national_origin_description varchar(32),
    outstanding_judgments_explanation varchar(128),
    party_to_lawsuit_explanation varchar(128),
    power_of_attorney_city varchar(128),
    power_of_attorney_company_name varchar(128),
    power_of_attorney_country varchar(1024),
    power_of_attorney_country_code varchar(128),
    power_of_attorney_email varchar(256),
    power_of_attorney_fax varchar(32),
    power_of_attorney_first_name varchar(32),
    power_of_attorney_last_name varchar(32),
    power_of_attorney_middle_name varchar(32),
    power_of_attorney_mobile_phone varchar(32),
    power_of_attorney_name_suffix varchar(32),
    power_of_attorney_office_phone varchar(32),
    power_of_attorney_office_phone_extension varchar(16),
    power_of_attorney_postal_code varchar(128),
    power_of_attorney_signing_capacity varchar(1024),
    power_of_attorney_state varchar(128),
    power_of_attorney_street1 varchar(128),
    power_of_attorney_street2 varchar(128),
    power_of_attorney_title varchar(128),
    preferred_first_name varchar(32),
    presently_delinquent_explanation varchar(128),
    prior_property_title varchar(1024),
    prior_property_title_code varchar(128),
    prior_property_usage varchar(1024),
    prior_property_usage_code varchar(128),
    property_foreclosure_explanation varchar(128),
    race_other_american_indian_or_alaska_native_description varchar(100),
    race_other_asian_description varchar(100),
    race_other_pacific_islander_description varchar(100),
    relationship_to_primary_borrower varchar(1024),
    relationship_to_primary_borrower_code varchar(128),
    relationship_to_seller varchar(1024),
    relationship_to_seller_code varchar(128),
    tiny_id varchar(1024),
    tiny_id_code varchar(128),
    trans_union_credit_score integer,
    usda_annual_child_care_expenses numeric(21,3),
    usda_disability_expenses numeric(21,3),
    usda_income_from_assets numeric(21,3),
    usda_medical_expenses numeric(21,3),
    usda_moderate_income_limit numeric(21,3)
);

alter table star_loan.borrower_dim owner to deployer;

create index idx_borrower_dim__borrower_pid
    on star_loan.borrower_dim (borrower_pid);

create index idx_borrower_dim__application_pid
    on star_loan.borrower_dim (application_pid);

create index idx_borrower_dim__applicant_role
    on star_loan.borrower_dim (applicant_role);

create index idx_borrower_dim__decision_credit_score
    on star_loan.borrower_dim (decision_credit_score);

create index idx_borrower_dim__tiny_id
    on star_loan.borrower_dim (tiny_id);

create index idx_borrower_dim__data_source_integration_id
    on star_loan.borrower_dim (data_source_integration_id);

create index idx_borrower_dim__etl_batch_id
    on star_loan.borrower_dim (etl_batch_id);

grant select on star_loan.borrower_dim to readonly;

grant select on star_loan.borrower_dim to svc_looker_operations;

grant delete, insert, select, update on star_loan.borrower_dim to etl_loan;

create table star_loan.borrower_demographics_dim
(
    dwid bigint default nextval('star_loan.borrower_demographics_dim_dwid_seq'::regclass) not null
        constraint pk_borrower_demographics_dim
            primary key,
    data_source_dwid bigint not null,
    edw_created_datetime timestamp with time zone,
    edw_modified_datetime timestamp with time zone,
    etl_batch_id text,
    data_source_integration_columns text,
    data_source_integration_id text not null,
    data_source_modified_datetime timestamp with time zone,
    ethnicity_collected_visual_or_surname varchar(1024),
    ethnicity_collected_visual_or_surname_code varchar(128),
    ethnicity_refused varchar(1024),
    ethnicity_refused_code varchar(128),
    ethnicity_other_hispanic_or_latino_description_flag boolean,
    other_race_national_origin_description_flag boolean,
    race_other_american_indian_or_alaska_native_description_flag boolean,
    race_other_asian_description_flag boolean,
    race_other_pacific_islander_description_flag boolean,
    ethnicity_cuban_flag boolean,
    ethnicity_hispanic_or_latino_flag boolean,
    ethnicity_mexican_flag boolean,
    ethnicity_not_hispanic_or_latino_flag boolean,
    ethnicity_not_obtainable_flag boolean,
    ethnicity_other_hispanic_or_latino_flag boolean,
    ethnicity_puerto_rican_flag boolean,
    race_american_indian_or_alaska_native_flag boolean,
    race_asian_flag boolean,
    race_asian_indian_flag boolean,
    race_black_or_african_american_flag boolean,
    race_chinese_flag boolean,
    race_filipino_flag boolean,
    race_guamanian_or_chamorro_flag boolean,
    race_information_not_provided_flag boolean,
    race_japanese_flag boolean,
    race_korean_flag boolean,
    race_national_origin_refusal_flag boolean,
    race_native_hawaiian_flag boolean,
    race_native_hawaiian_or_other_pacific_islander_flag boolean,
    race_not_applicable_flag boolean,
    race_not_obtainable_flag boolean,
    race_other_asian_flag boolean,
    race_other_pacific_islander_flag boolean,
    race_samoan_flag boolean,
    race_vietnamese_flag boolean,
    race_white_flag boolean,
    sex_female_flag boolean,
    sex_male_flag boolean,
    sex_not_obtainable_flag boolean,
    marital_status varchar(1024),
    marital_status_code varchar(128),
    race_collected_visual_or_surname varchar(1024),
    race_collected_visual_or_surname_code varchar(128),
    race_refused varchar(1024),
    race_refused_code varchar(128),
    schooling_years integer,
    sex_collected_visual_or_surname varchar(1024),
    sex_collected_visual_or_surname_code varchar(128),
    sex_refused varchar(1024),
    sex_refused_code varchar(128)
);

alter table star_loan.borrower_demographics_dim owner to deployer;

create index idx_borrower_demographics_dim__data_source_integration_id
    on star_loan.borrower_demographics_dim (data_source_integration_id);

create index idx_borrower_demographics_dim__etl_batch_id
    on star_loan.borrower_demographics_dim (etl_batch_id);

grant select on star_loan.borrower_demographics_dim to readonly;

grant select on star_loan.borrower_demographics_dim to svc_looker_operations;

grant delete, insert, select, update on star_loan.borrower_demographics_dim to etl_loan;

create table star_loan.borrower_lending_profile_dim
(
    dwid bigint default nextval('star_loan.borrower_lending_profile_dim_dwid_seq'::regclass) not null
        constraint pk_borrower_lending_profile_dim
            primary key,
    data_source_dwid bigint not null,
    edw_created_datetime timestamp with time zone,
    edw_modified_datetime timestamp with time zone,
    etl_batch_id text,
    data_source_integration_columns text,
    data_source_integration_id text not null,
    data_source_modified_datetime timestamp with time zone,
    alimony_child_support varchar(1024),
    alimony_child_support_code varchar(128),
    bankruptcy varchar(1024),
    bankruptcy_code varchar(128),
    borrowed_down_payment varchar(1024),
    borrowed_down_payment_code varchar(128),
    citizenship_residency varchar(1024),
    citizenship_residency_code varchar(128),
    disabled varchar(1024),
    disabled_code varchar(128),
    domestic_relationship_state varchar(1024),
    domestic_relationship_state_code varchar(128),
    dependents varchar(1024),
    dependents_code varchar(128),
    homeowner_past_three_years varchar(1024),
    homeowner_past_three_years_code varchar(128),
    homeownership_education varchar(1024),
    homeownership_education_agency varchar(1024),
    homeownership_education_agency_code varchar(128),
    homeownership_education_code varchar(128),
    intend_to_occupy varchar(1024),
    intend_to_occupy_code varchar(128),
    first_time_homebuyer_flag boolean,
    first_time_homebuyer_auto_compute_flag boolean,
    hud_employee_flag boolean,
    lender_employee_status_confirmed_flag boolean,
    lender_employee varchar(1024),
    lender_employee_code varchar(128),
    note_endorser varchar(1024),
    note_endorser_code varchar(128),
    obligated_loan_foreclosure varchar(1024),
    obligated_loan_foreclosure_code varchar(128),
    on_gsa_list varchar(1024),
    on_gsa_list_code varchar(128),
    on_ldp_list varchar(1024),
    on_ldp_list_code varchar(128),
    outstanding_judgements varchar(1024),
    outstanding_judgements_code varchar(128),
    party_to_lawsuit varchar(1024),
    party_to_lawsuit_code varchar(128),
    presently_delinquent varchar(1024),
    presently_delinquent_code varchar(128),
    property_foreclosure varchar(1024),
    property_foreclosure_code varchar(128),
    spousal_homestead varchar(1024),
    spousal_homestead_code varchar(128),
    titleholder varchar(1024),
    titleholder_code varchar(128)
);

alter table star_loan.borrower_lending_profile_dim owner to deployer;

create index idx_borrower_lending_profile_dim__lender_employee
    on star_loan.borrower_lending_profile_dim (lender_employee);

create index idx_borrower_lending_profile_dim__data_source_integration_id
    on star_loan.borrower_lending_profile_dim (data_source_integration_id);

create index idx_borrower_lending_profile_dim__etl_batch_id
    on star_loan.borrower_lending_profile_dim (etl_batch_id);

grant select on star_loan.borrower_lending_profile_dim to readonly;

grant select on star_loan.borrower_lending_profile_dim to svc_looker_operations;

grant delete, insert, select, update on star_loan.borrower_lending_profile_dim to etl_loan;

create table star_loan.interim_funder_dim
(
    dwid bigint default nextval('star_loan.interim_funder_dim_dwid_seq'::regclass) not null
        constraint pk_interim_funder_dim
            primary key,
    data_source_dwid bigint not null,
    edw_created_datetime timestamp with time zone,
    edw_modified_datetime timestamp with time zone,
    etl_batch_id text,
    data_source_integration_columns text,
    data_source_integration_id text not null,
    data_source_modified_datetime timestamp with time zone,
    interim_funder_pid bigint not null,
    address_city varchar(128),
    address_country varchar(1024),
    address_country_code varchar(128),
    address_postal_code varchar(128),
    address_state varchar(128),
    address_street1 varchar(128),
    address_street2 varchar(128),
    contact_unparsed_name varchar(128),
    email varchar(256),
    fax varchar(32),
    fnm_payee_id varchar(9),
    fnm_warehouse_lender_id varchar(32),
    fre_warehouse_lender_id varchar(32),
    id varchar(32),
    mers_org_id varchar(7),
    mers_registration varchar(1024),
    mers_registration_code varchar(128),
    name varchar(128),
    office_phone varchar(32),
    office_phone_extension varchar(16),
    reimbursement_wire_attention_unparsed_name varchar(128),
    reimbursement_wire_authorized_signer_unparsed_name varchar(128),
    remarks varchar(1024),
    remibursement_wire_credit_to_name varchar(128),
    return_wire_attention_unparsed_name varchar(128),
    return_wire_authorized_signer_unparsed_name varchar(128),
    return_wire_credit_to_name varchar(128),
    from_date date,
    through_date date
);

alter table star_loan.interim_funder_dim owner to deployer;

create index idx_interim_funder_dim__interim_funder_pid
    on star_loan.interim_funder_dim (interim_funder_pid);

create index idx_interim_funder_dim__name
    on star_loan.interim_funder_dim (name);

create index idx_interim_funder_dim__data_source_integration_id
    on star_loan.interim_funder_dim (data_source_integration_id);

create index idx_interim_funder_dim__etl_batch_id
    on star_loan.interim_funder_dim (etl_batch_id);

grant select on star_loan.interim_funder_dim to readonly;

grant select on star_loan.interim_funder_dim to svc_looker_operations;

grant delete, insert, select, update on star_loan.interim_funder_dim to etl_loan;

create table star_loan.investor_dim
(
    dwid bigint default nextval('star_loan.investor_dim_dwid_seq'::regclass) not null
        constraint pk_investor_dim
            primary key,
    data_source_dwid bigint not null,
    edw_created_datetime timestamp with time zone,
    edw_modified_datetime timestamp with time zone,
    etl_batch_id text,
    data_source_integration_columns text,
    data_source_integration_id text not null,
    data_source_modified_datetime timestamp with time zone,
    investor_pid bigint not null,
    allonge_transfer_to_name varchar(128),
    allows_weekend_holiday_locks_flag boolean,
    beneficiary_city varchar(128),
    beneficiary_country varchar(1024),
    beneficiary_country_code varchar(128),
    beneficiary_name varchar(128),
    beneficiary_postal_code varchar(128),
    beneficiary_state varchar(128),
    beneficiary_street1 varchar(128),
    beneficiary_street2 varchar(128),
    ein varchar(10),
    file_delivery_address_city varchar(128),
    file_delivery_address_country varchar(1024),
    file_delivery_address_country_code varchar(128),
    file_delivery_address_postal_code varchar(128),
    file_delivery_address_state varchar(128),
    file_delivery_address_street1 varchar(128),
    file_delivery_address_street2 varchar(128),
    file_delivery_name varchar(128),
    fnm_investor_remittance varchar(1024),
    fnm_investor_remittance_code varchar(128),
    fnm_mbs_investor_remittance_day_of_month integer,
    fnm_mbs_loan_default_loss_party varchar(1024),
    fnm_mbs_loan_default_loss_party_code varchar(128),
    fnm_mbs_reo_marketing_party varchar(1024),
    fnm_mbs_reo_marketing_party_code varchar(128),
    fnma_servicer_id varchar(16),
    investor_city varchar(128),
    investor_country varchar(1024),
    investor_country_code varchar(128),
    investor_hmda_purchaser_of_loan varchar(1024),
    investor_hmda_purchaser_of_loan_code varchar(128),
    investor_id varchar(32),
    investor_lock_disable_time time with time zone,
    investor_name varchar(128),
    investor_postal_code varchar(128),
    investor_state varchar(128),
    investor_street1 varchar(128),
    investor_street2 varchar(128),
    initial_beneficiary_candidate_flag boolean,
    initial_servicer_candidate_flag boolean,
    mbs_investor_flag boolean,
    loan_file_delivery_method varchar(1024),
    loan_file_delivery_method_code varchar(128),
    lock_expiration_delivery_subtrahend_days integer,
    loss_payee_assignee_name varchar(128),
    loss_payee_city varchar(128),
    loss_payee_country varchar(1024),
    loss_payee_country_code varchar(128),
    loss_payee_name varchar(128),
    loss_payee_postal_code varchar(128),
    loss_payee_state varchar(128),
    loss_payee_street1 varchar(128),
    loss_payee_street2 varchar(128),
    maximum_lock_extension_days_allowed integer,
    maximum_lock_extensions_allowed integer,
    mers_org_id varchar(7),
    mers_org_member varchar(128),
    mortech_investor_id varchar(16),
    nmls_id varchar(16),
    nmls_id_applicable varchar(128),
    offers_secondary_financing_flag boolean,
    secondary_financing_source varchar(1024),
    secondary_financing_source_code varchar(128),
    servicer_address_city varchar(128),
    servicer_address_country varchar(1024),
    servicer_address_country_code varchar(128),
    servicer_address_postal_code varchar(128),
    servicer_address_state varchar(128),
    servicer_address_street1 varchar(128),
    servicer_address_street2 varchar(128),
    servicer_name varchar(128),
    sub_servicer_address_city varchar(128),
    sub_servicer_address_country varchar(1024),
    sub_servicer_address_country_code varchar(128),
    sub_servicer_address_postal_code varchar(128),
    sub_servicer_address_state varchar(128),
    sub_servicer_address_street1 varchar(128),
    sub_servicer_address_street2 varchar(128),
    sub_servicer_mers_org_id varchar(7),
    sub_servicer_name varchar(128),
    website_url varchar(256),
    when_recorded_mail_to_city varchar(128),
    when_recorded_mail_to_country varchar(1024),
    when_recorded_mail_to_country_code varchar(128),
    when_recorded_mail_to_name varchar(128),
    when_recorded_mail_to_postal_code varchar(128),
    when_recorded_mail_to_state varchar(128),
    when_recorded_mail_to_street1 varchar(128),
    when_recorded_mail_to_street2 varchar(128)
);

alter table star_loan.investor_dim owner to deployer;

create index idx_investor_dim__investor_pid
    on star_loan.investor_dim (investor_pid);

create index idx_investor_dim__beneficiary_name
    on star_loan.investor_dim (beneficiary_name);

create index idx_investor_dim__investor_name
    on star_loan.investor_dim (investor_name);

create index idx_investor_dim__nmls_id
    on star_loan.investor_dim (nmls_id);

create index idx_investor_dim__servicer_name
    on star_loan.investor_dim (servicer_name);

create index idx_investor_dim__data_source_integration_id
    on star_loan.investor_dim (data_source_integration_id);

create index idx_investor_dim__etl_batch_id
    on star_loan.investor_dim (etl_batch_id);

grant select on star_loan.investor_dim to readonly;

grant select on star_loan.investor_dim to svc_looker_operations;

grant delete, insert, select, update on star_loan.investor_dim to etl_loan;

create table star_loan.lender_user_dim
(
    dwid bigint default nextval('star_loan.lender_user_dim_dwid_seq'::regclass) not null
        constraint pk_lender_user_dim
            primary key,
    data_source_dwid bigint not null,
    edw_created_datetime timestamp with time zone,
    edw_modified_datetime timestamp with time zone,
    etl_batch_id text,
    data_source_integration_columns text,
    data_source_integration_id text not null,
    data_source_modified_datetime timestamp with time zone,
    lender_user_pid bigint not null,
    create_date date,
    about_me varchar(2000),
    city varchar(128),
    company_name varchar(128),
    company_user_id varchar(32),
    country varchar(1024),
    country_code varchar(128),
    default_credit_bureau varchar(1024),
    default_credit_bureau_code varchar(128),
    email varchar(256),
    fax varchar(32),
    fha_chums_id varchar(16),
    first_name varchar(32),
    hire_date date,
    account_owner_flag boolean,
    address_use_branch_flag boolean,
    allow_external_ip_flag boolean,
    esign_only_flag boolean,
    fax_use_branch_flag boolean,
    force_password_change_flag boolean,
    hub_directory_flag boolean,
    office_phone_use_branch_flag boolean,
    smart_app_enabled_flag boolean,
    training_mode_flag boolean,
    work_step_start_notices_enabled_flag boolean,
    last_name varchar(32),
    last_password_change_datetime timestamp with time zone,
    middle_name varchar(32),
    name_qualifier varchar(16),
    name_suffix varchar(32),
    nickname varchar(32),
    nmls_loan_originator_id varchar(16),
    office_phone varchar(32),
    office_phone_extension varchar(16),
    originator_id varchar(32),
    postal_code varchar(128),
    preferred_first_name varchar(32),
    schedule_once_booking_page_id varchar(128),
    search_text varchar(256),
    state varchar(128),
    status varchar(1024),
    status_code varchar(128),
    street1 varchar(128),
    street2 varchar(128),
    time_zone varchar(1024),
    time_zone_code varchar(128),
    title varchar(128),
    total_workload_cap integer,
    type varchar(1024),
    type_code varchar(128),
    unparsed_name varchar(128),
    username varchar(32),
    va_agent_id varchar(32),
    start_date date,
    through_date date
);

alter table star_loan.lender_user_dim owner to deployer;

create index idx_lender_user_dim__lender_user_pid
    on star_loan.lender_user_dim (lender_user_pid);

create index idx_lender_user_dim__nmls_loan_originator_id
    on star_loan.lender_user_dim (nmls_loan_originator_id);

create index idx_lender_user_dim__status
    on star_loan.lender_user_dim (status);

create index idx_lender_user_dim__type
    on star_loan.lender_user_dim (type);

create index idx_lender_user_dim__unparsed_name
    on star_loan.lender_user_dim (unparsed_name);

create index idx_lender_user_dim__start_date
    on star_loan.lender_user_dim (start_date);

create index idx_lender_user_dim__through_date
    on star_loan.lender_user_dim (through_date);

create index idx_lender_user_dim__data_source_integration_id
    on star_loan.lender_user_dim (data_source_integration_id);

create index idx_lender_user_dim__etl_batch_id
    on star_loan.lender_user_dim (etl_batch_id);

grant select on star_loan.lender_user_dim to readonly;

grant select on star_loan.lender_user_dim to svc_looker_operations;

grant delete, insert, select, update on star_loan.lender_user_dim to etl_loan;

create table star_loan.loan_beneficiary_dim
(
    dwid bigint default nextval('star_loan.loan_beneficiary_dim_dwid_seq'::regclass) not null
        constraint pk_loan_beneficiary_dim
            primary key,
    data_source_dwid bigint not null,
    edw_created_datetime timestamp with time zone,
    edw_modified_datetime timestamp with time zone,
    etl_batch_id text,
    data_source_integration_columns text,
    data_source_integration_id text not null,
    data_source_modified_datetime timestamp with time zone,
    loan_beneficiary_pid bigint not null,
    loan_pid bigint,
    collateral_courier varchar(1024),
    collateral_courier_code varchar(128),
    delivery_aus varchar(1024),
    delivery_aus_code varchar(128),
    early_funding varchar(1024),
    early_funding_code varchar(128),
    investor_loan_id varchar(32),
    current_flag boolean,
    initial_flag boolean,
    mers_mom_flag boolean,
    mers_transfer_override_flag boolean,
    loan_file_courier varchar(1024),
    loan_file_courier_code varchar(128),
    loan_file_delivery_method varchar(1024),
    loan_file_delivery_method_code varchar(128),
    mers_transfer_status varchar(1024),
    mers_transfer_status_code varchar(128),
    pool_id varchar(32),
    transfer_status varchar(1024),
    transfer_status_code varchar(128)
);

alter table star_loan.loan_beneficiary_dim owner to deployer;

create index idx_loan_beneficiary_dim__loan_beneficiary_pid
    on star_loan.loan_beneficiary_dim (loan_beneficiary_pid);

create index idx_loan_beneficiary_dim__loan_pid
    on star_loan.loan_beneficiary_dim (loan_pid);

create index idx_loan_beneficiary_dim__transfer_status
    on star_loan.loan_beneficiary_dim (transfer_status);

create index idx_loan_beneficiary_dim__data_source_integration_id
    on star_loan.loan_beneficiary_dim (data_source_integration_id);

create index idx_loan_beneficiary_dim__etl_batch_id
    on star_loan.loan_beneficiary_dim (etl_batch_id);

grant select on star_loan.loan_beneficiary_dim to readonly;

grant select on star_loan.loan_beneficiary_dim to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_beneficiary_dim to etl_loan;

create table star_loan.loan_funding_dim
(
    dwid bigint default nextval('star_loan.loan_funding_dim_dwid_seq'::regclass) not null
        constraint pk_loan_funding_dim
            primary key,
    data_source_dwid bigint not null,
    edw_created_datetime timestamp with time zone,
    edw_modified_datetime timestamp with time zone,
    etl_batch_id text,
    data_source_integration_columns text,
    data_source_integration_id text not null,
    data_source_modified_datetime timestamp with time zone,
    loan_funding_pid bigint not null,
    loan_pid bigint,
    interim_funder_pid bigint,
    collateral_courier varchar(1024),
    collateral_courier_code varchar(128),
    early_wire_charge_day_count integer,
    early_wire_daily_charge_amount numeric(21,3),
    early_wire_total_charge_amount numeric(21,3),
    funding_confirmed_release_datetime timestamp with time zone,
    funding_status varchar(1024),
    funding_status_code varchar(128),
    funds_authorization_code varchar(32),
    funds_authorized_datetime timestamp with time zone,
    interim_funder_fee_amount numeric(21,3),
    interim_funder_loan_id varchar(32),
    early_wire_request_flag boolean,
    scheduled_release_date_auto_compute_flag boolean,
    net_wire_amount numeric(21,3),
    post_wire_adjustment_amount numeric(21,3),
    release_wire_federal_reference_number varchar(32),
    wire_amount numeric(21,3),
    collateral_tracking_number varchar(32)
);

alter table star_loan.loan_funding_dim owner to deployer;

create index idx_loan_funding_dim__loan_funding_pid
    on star_loan.loan_funding_dim (loan_funding_pid);

create index idx_loan_funding_dim__loan_pid
    on star_loan.loan_funding_dim (loan_pid);

create index idx_loan_funding_dim__interim_funder_pid
    on star_loan.loan_funding_dim (interim_funder_pid);

create index idx_loan_funding_dim__funding_status
    on star_loan.loan_funding_dim (funding_status);

create index idx_loan_funding_dim__data_source_integration_id
    on star_loan.loan_funding_dim (data_source_integration_id);

create index idx_loan_funding_dim__etl_batch_id
    on star_loan.loan_funding_dim (etl_batch_id);

grant select on star_loan.loan_funding_dim to readonly;

grant select on star_loan.loan_funding_dim to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_funding_dim to etl_loan;

create table star_loan.mortgage_insurance_dim
(
    loan_dwid bigint not null
        constraint mortgage_insurance_dim_pkey
            primary key,
    data_source_dwid bigint not null,
    edw_created_datetime timestamp with time zone,
    edw_modified_datetime timestamp with time zone,
    etl_batch_id text,
    data_source_integration_columns text,
    data_source_integration_id text not null,
    data_source_modified_datetime timestamp with time zone,
    loan_pid bigint not null,
    mi_auto_compute_flag boolean,
    mi_midpoint_cutoff_required_flag boolean,
    no_mi_product_flag boolean,
    mi_actual_monthly_payment_count integer,
    mi_base_monthly_payment_amount numeric(21,3),
    mi_base_monthly_payment_annual_percent numeric(15,9),
    mi_base_rate_label varchar(16000),
    mi_base_upfront_payment_amount numeric(21,3),
    mi_base_upfront_percent numeric(15,9),
    mi_certificate_id varchar(32),
    mi_company varchar(1024),
    mi_company_code varchar(128),
    mi_coverage_percent numeric(15,9),
    mi_initial_calculated_rate varchar(1024),
    mi_initial_calculated_rate_code varchar(128),
    mi_initial_calculation varchar(1024),
    mi_initial_calculation_code varchar(128),
    mi_initial_duration_months integer,
    mi_initial_monthly_payment_amount numeric(21,3),
    mi_initial_monthly_payment_annual_percent numeric(15,9),
    mi_input varchar(1024),
    mi_input_code varchar(128),
    mi_lender_paid_rate_adjustment_percent numeric(15,9),
    mi_ltv_cutoff_percent numeric(15,9),
    mi_payer varchar(1024),
    mi_payer_code varchar(128),
    mi_payment varchar(1024),
    mi_payment_code varchar(128),
    mi_premium_refundable varchar(1024),
    mi_premium_refundable_code varchar(128),
    mi_rate_quote_id varchar(128),
    mi_renewal_calcuated_rate varchar(1024),
    mi_renewal_calculated_rate_code varchar(128),
    mi_renewal_calculation varchar(1024),
    mi_renewal_calculation_code varchar(128),
    mi_renewal_monthly_payment_amount numeric(21,3),
    mi_renewal_monthly_payment_annual_percent numeric(15,9),
    mi_required_monthly_payment_count integer,
    mi_upfront_amount numeric(21,3),
    mi_upront_percent numeric(15,9)
);

alter table star_loan.mortgage_insurance_dim owner to deployer;

create index idx_mortgage_insurance_dim__loan_pid
    on star_loan.mortgage_insurance_dim (loan_pid);

create index idx_mortgage_insurance_dim__data_source_integration_id
    on star_loan.mortgage_insurance_dim (data_source_integration_id);

create index idx_mortgage_insurance_dim__etl_batch_id
    on star_loan.mortgage_insurance_dim (etl_batch_id);

grant select on star_loan.mortgage_insurance_dim to readonly;

grant select on star_loan.mortgage_insurance_dim to svc_looker_operations;

grant delete, insert, select, update on star_loan.mortgage_insurance_dim to etl_loan;

create table star_loan.product_dim
(
    dwid bigint default nextval('star_loan.product_dim_dwid_seq'::regclass) not null
        constraint pk_product_dim
            primary key,
    data_source_dwid bigint not null,
    edw_created_datetime timestamp with time zone,
    edw_modified_datetime timestamp with time zone,
    etl_batch_id text,
    data_source_integration_columns text,
    data_source_integration_id text not null,
    data_source_modified_datetime timestamp with time zone,
    product_pid bigint not null,
    investor_pid bigint,
    investor_product_id varchar(32),
    description varchar(1024),
    fnm_product_name varchar(15),
    fund_source varchar(1024),
    fund_source_code varchar(128),
    investor_product_name varchar(128),
    lock_auto_confirm_flag boolean,
    product_side varchar(1024),
    product_side_code varchar(128),
    from_date date,
    through_date date
);

alter table star_loan.product_dim owner to deployer;

create index idx_product_dim__product_pid
    on star_loan.product_dim (product_pid);

create index idx_product_dim__investor_pid
    on star_loan.product_dim (investor_pid);

create index idx_product_dim__fund_source
    on star_loan.product_dim (fund_source);

create index idx_product_dim__product_side
    on star_loan.product_dim (product_side);

create index idx_product_dim__data_source_integration_id
    on star_loan.product_dim (data_source_integration_id);

create index idx_product_dim__etl_batch_id
    on star_loan.product_dim (etl_batch_id);

grant select on star_loan.product_dim to readonly;

grant select on star_loan.product_dim to svc_looker_operations;

grant delete, insert, select, update on star_loan.product_dim to etl_loan;

create table star_loan.product_terms_dim
(
    dwid bigint default nextval('star_loan.product_terms_dim_dwid_seq'::regclass) not null
        constraint pk_product_terms_dim
            primary key,
    data_source_dwid bigint not null,
    edw_created_datetime timestamp with time zone,
    edw_modified_datetime timestamp with time zone,
    etl_batch_id text,
    data_source_integration_columns text,
    data_source_integration_id text not null,
    data_source_modified_datetime timestamp with time zone,
    product_terms_pid bigint not null,
    product_pid bigint,
    amortization_term_months integer,
    arm_convertible_from_month integer,
    arm_convertible_through_month integer,
    arm_floor_rate_percent numeric(15,9),
    arm_index varchar(1024),
    arm_index_code varchar(128),
    arm_lookback_period_days integer,
    arm_payment_adjustment_calculation varchar(1024),
    arm_payment_adjustment_calculation_code varchar(128),
    buydown_base_date varchar(1024),
    buydown_base_date_code varchar(128),
    buydown_subsidy_calculation_code varchar(128),
    buydown_subsidy_calculation varchar(1024),
    community_lending varchar(1024),
    community_lending_code varchar(128),
    days_per_year varchar(1024),
    days_per_year_code varchar(128),
    decision_credit_score_calc varchar(1024),
    decision_credit_score_calc_code varchar(128),
    deed_page_count integer,
    deferred_payment_months integer,
    dsi_plan_code varchar(128),
    due_in_term_months integer,
    escrow_cushion_months integer,
    fha_rehab_program varchar(1024),
    fha_rehab_program_code varchar(128),
    fha_special_program varchar(1024),
    fha_special_program_code varchar(128),
    fnm_arm_plan varchar(1024),
    fnm_arm_plan_code varchar(128),
    fnm_community_lending_product varchar(1024),
    fnm_community_lending_product_code varchar(128),
    fre_community_program varchar(1024),
    fre_community_program_code varchar(128),
    from_date date,
    gpm_adjustment_percent numeric(15,9),
    gpm_adjustment_years integer,
    conditions_to_assumability_flag boolean,
    demand_feature_flag boolean,
    lender_hazard_insurance_available_flag boolean,
    prepayment_charge_refund_flag boolean,
    heloc_cancel_fee_amount numeric(21,3),
    heloc_cancel_fee_applicable varchar(1024),
    heloc_cancel_fee_applicable_code varchar(128),
    heloc_cancel_fee_period_months integer,
    heloc_draw_period_months integer,
    heloc_maximum_initial_draw_amount numeric(21,3),
    heloc_minimum_draw_amount numeric(21,3),
    heloc_repayment_period_duration_months integer,
    high_balance varchar(1024),
    high_balance_code varchar(128),
    initial_payment_adjustment_term_months integer,
    initial_rate_adjustment_cap_percent numeric(15,9),
    initial_rate_adjustment_term_months integer,
    ipc_calc varchar(1024),
    ipc_calc_code varchar(128),
    ipc_cltv_ratio_percent1 numeric(15,9),
    ipc_cltv_ratio_percent2 numeric(15,9),
    ipc_cltv_ratio_percent3 numeric(15,9),
    ipc_cltv_ratio_percent4 numeric(15,9),
    ipc_comparison_operator_code1 varchar(128),
    ipc_comparison_operator_code2 varchar(128),
    ipc_comparison_operator_code3 varchar(128),
    ipc_comparison_operator_code4 varchar(128),
    ipc_comparison_operator1 varchar(1024),
    ipc_comparison_operator2 varchar(1024),
    ipc_comparison_operator3 varchar(1024),
    ipc_comparison_operator4 varchar(1024),
    ipc_limit_percent1 numeric(15,9),
    ipc_limit_percent2 numeric(15,9),
    ipc_limit_percent3 numeric(15,9),
    ipc_limit_percent4 numeric(15,9),
    ipc_property_usage_code1 varchar(128),
    ipc_property_usage_code2 varchar(128),
    ipc_property_usage_code3 varchar(128),
    ipc_property_usage_code4 varchar(128),
    ipc_property_usage1 varchar(1024),
    ipc_property_usage2 varchar(1024),
    ipc_property_usage3 varchar(1024),
    ipc_property_usage4 varchar(1024),
    allow_loan_amount_cents_flag boolean,
    always_current_market_price_flag boolean,
    arm_convertible_flag boolean,
    assumable_flag boolean,
    credit_qualifying_flag boolean,
    du_risk_assessment_accepted_flag boolean,
    escrow_waiver_allowed_flag boolean,
    external_fha_underwrite_accepted_flag boolean,
    external_investor_underwrite_accepted_flag boolean,
    external_usda_underwrite_accepted_flag boolean,
    external_va_underwrite_accepted_flag boolean,
    family_advantage_flag boolean,
    heloc_maximum_initial_draw_flag boolean,
    heloc_minimum_draw_flag boolean,
    internal_underwrite_accepted_flag boolean,
    loan_requires_hazard_insurance_flag boolean,
    lp_risk_assessment_accepted_flag boolean,
    manual_risk_assessment_accepted_flag boolean,
    mortgage_credit_certificate_eligible_flag boolean,
    new_york_flag boolean,
    no_mi_product_flag boolean,
    non_conforming_flag boolean,
    rate_protect_flag boolean,
    texas_veterans_land_board varchar(1024),
    texas_veterans_land_board_code varchar(128),
    third_party_grant_eligible_flag boolean,
    zero_note_rate_flag boolean,
    lender_hazard_insurance_premium_amount numeric(21,3),
    lender_hazard_insurance_term_months integer,
    lien_priority varchar(1024),
    lien_priority_code varchar(128),
    loan_amortization varchar(1024),
    loan_amortization_code varchar(128),
    minimum_payment_rate_percent numeric(15,9),
    minimum_rate_term_months integer,
    mortgage_type varchar(1024),
    mortgage_type_code varchar(128),
    negative_amortization varchar(1024),
    negative_amortization_code varchar(128),
    negative_amortization_limit_percent numeric(15,9),
    negative_amortization_recast_period_months integer,
    partial_payment_policy varchar(1024),
    partial_payment_policy_code varchar(128),
    payment_adjustment_lifetime_cap_percent numeric(15,9),
    payment_adjustment_periodic_cap numeric(15,9),
    payment_frequency varchar(1024),
    payment_frequency_code varchar(128),
    payment_structure varchar(1024),
    payment_structure_code varchar(128),
    prepaid_interest_rate varchar(1024),
    prepaid_interest_rate_code varchar(128),
    prepay_penalty varchar(1024),
    prepay_penalty_code varchar(128),
    product_appraisal_requirement varchar(1024),
    product_appraisal_requirement_code varchar(128),
    product_category varchar(128),
    product_special_program varchar(1024),
    product_special_program_code varchar(128),
    qualifying_monthly_payment varchar(1024),
    qualifying_monthly_payment_code varchar(128),
    qualifying_rate varchar(1024),
    qualifying_rate_code varchar(128),
    qualifying_rate_input_percent numeric(15,9),
    rate_adjustment_lifetime_cap_percent numeric(15,9),
    section_of_act_coarse varchar(1024),
    section_of_act_coarse_code varchar(128),
    security_instrument_page_count integer,
    servicing_transfer varchar(1024),
    servicing_transfer_code varchar(128),
    subsequent_payment_adjustment_term_months integer,
    subsequent_rate_adjustment_cap_percent numeric(15,9),
    subsequent_rate_adjustment_term_months integer,
    third_party_community_second_program_eligibility varchar(1024),
    third_party_community_second_program_eligibility_code varchar(128)
);

alter table star_loan.product_terms_dim owner to deployer;

create index idx_product_terms_dim__product_terms_pid
    on star_loan.product_terms_dim (product_terms_pid);

create index idx_product_terms_dim__product_pid
    on star_loan.product_terms_dim (product_pid);

create index idx_product_terms_dim__high_balance
    on star_loan.product_terms_dim (high_balance);

create index idx_product_terms_dim__lien_priority
    on star_loan.product_terms_dim (lien_priority);

create index idx_product_terms_dim__loan_amortization
    on star_loan.product_terms_dim (loan_amortization);

create index idx_product_terms_dim__mortgage_type
    on star_loan.product_terms_dim (mortgage_type);

create index idx_product_terms_dim__product_special_program
    on star_loan.product_terms_dim (product_special_program);

create index idx_product_terms_dim__data_source_integration_id
    on star_loan.product_terms_dim (data_source_integration_id);

create index idx_product_terms_dim__etl_batch_id
    on star_loan.product_terms_dim (etl_batch_id);

grant select on star_loan.product_terms_dim to readonly;

grant select on star_loan.product_terms_dim to svc_looker_operations;

grant delete, insert, select, update on star_loan.product_terms_dim to etl_loan;

create table star_loan.application_dim
(
    dwid bigint default nextval('star_loan.application_dim_dwid_seq'::regclass) not null
        constraint pk_application_dim
            primary key,
    data_source_dwid bigint not null,
    edw_created_datetime timestamp with time zone,
    edw_modified_datetime timestamp with time zone,
    etl_batch_id text,
    data_source_integration_columns text,
    data_source_integration_id text not null,
    data_source_modified_datetime timestamp with time zone,
    application_pid bigint not null,
    proposal_pid bigint
);

alter table star_loan.application_dim owner to deployer;

create index idx_application_dim__application_pid
    on star_loan.application_dim (application_pid);

create index idx_application_dim__proposal_pid
    on star_loan.application_dim (proposal_pid);

create index idx_application_dim__data_source_integration_id
    on star_loan.application_dim (data_source_integration_id);

create index idx_application_dim__etl_batch_id
    on star_loan.application_dim (etl_batch_id);

grant select on star_loan.application_dim to readonly;

grant select on star_loan.application_dim to svc_looker_operations;

grant delete, insert, select, update on star_loan.application_dim to etl_loan;

create table star_loan.transaction_dim
(
    dwid bigint default nextval('star_loan.transaction_dim_dwid_seq'::regclass) not null
        constraint pk_transaction_dim
            primary key,
    data_source_dwid bigint not null,
    edw_created_datetime timestamp with time zone,
    edw_modified_datetime timestamp with time zone,
    etl_batch_id text,
    data_source_integration_columns text,
    data_source_integration_id text not null,
    data_source_modified_datetime timestamp with time zone,
    deal_pid bigint not null,
    active_proposal_pid bigint
);

alter table star_loan.transaction_dim owner to deployer;

create index idx_transaction_dim__deal_pid
    on star_loan.transaction_dim (deal_pid);

create index idx_transaction_dim__active_proposal_pid
    on star_loan.transaction_dim (active_proposal_pid);

create index idx_transaction_dim__data_source_integration_id
    on star_loan.transaction_dim (data_source_integration_id);

create index idx_transaction_dim__etl_batch_id
    on star_loan.transaction_dim (etl_batch_id);

grant select on star_loan.transaction_dim to readonly;

grant select on star_loan.transaction_dim to svc_looker_operations;

grant delete, insert, select, update on star_loan.transaction_dim to etl_loan;

create table history_octane.account_event_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.account_event_type owner to deployer;

create index idx_account_event_type__data_source_deleted_flag
    on history_octane.account_event_type (data_source_deleted_flag);

create index idx_account_event_type__data_source_updated_datetime
    on history_octane.account_event_type (data_source_updated_datetime);

create index idx_account_event_type__etl_batch_id
    on history_octane.account_event_type (etl_batch_id);

grant select on history_octane.account_event_type to readonly;

grant insert, select, update on history_octane.account_event_type to etl_loan;

create table history_octane.account_id_sequence
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ais_id bigint not null,
    etl_batch_id text
);

alter table history_octane.account_id_sequence owner to deployer;

create index idx_account_id_sequence__data_source_deleted_flag
    on history_octane.account_id_sequence (data_source_deleted_flag);

create index idx_account_id_sequence__data_source_updated_datetime
    on history_octane.account_id_sequence (data_source_updated_datetime);

create index idx_account_id_sequence__etl_batch_id
    on history_octane.account_id_sequence (etl_batch_id);

grant select on history_octane.account_id_sequence to readonly;

grant insert, select, update on history_octane.account_id_sequence to etl_loan;

create table history_octane.account_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.account_status_type owner to deployer;

create index idx_account_status_type__data_source_deleted_flag
    on history_octane.account_status_type (data_source_deleted_flag);

create index idx_account_status_type__data_source_updated_datetime
    on history_octane.account_status_type (data_source_updated_datetime);

create index idx_account_status_type__etl_batch_id
    on history_octane.account_status_type (etl_batch_id);

grant select on history_octane.account_status_type to readonly;

grant insert, select, update on history_octane.account_status_type to etl_loan;

create table history_octane.account
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    a_pid bigint not null,
    a_version integer,
    a_account_id bigint,
    a_account_name varchar(128),
    a_gfe_interest_rate_expiration_days integer,
    a_gfe_lock_duration_days integer,
    a_gfe_lock_before_settlement_days integer,
    a_proposal_expiration_days integer,
    a_uw_expiration_days integer,
    a_conditional_commitment_expiration_days integer,
    a_account_from_date date,
    a_account_status_type varchar(128),
    a_account_through_date date,
    a_initial_los_loan_id bigint,
    a_uuts_master_contact_name varchar(128),
    a_uuts_master_contact_title varchar(128),
    a_uuts_master_office_phone varchar(16),
    a_uuts_master_office_phone_extension varchar(32),
    a_allonge_representative_name varchar(128),
    a_allonge_representative_title varchar(128),
    a_account_borrower_site_id varchar(128),
    a_originator_borrower_sites_enabled boolean,
    a_company_borrower_site_enabled boolean,
    a_discount_included_in_origination_fee boolean,
    a_uuts_use_master_contact boolean,
    a_borrower_job_gap_lookback_years integer,
    a_borrower_job_gap_minimum_days integer,
    a_lender_app_host varchar(256),
    a_lender_app_ip_address varchar(32),
    a_advance_period_days integer,
    a_account_destroy_mode boolean,
    a_lender_user_password_expire_days integer,
    a_lender_user_password_minimum_change_days integer,
    a_lender_user_previous_password_ban integer,
    a_paid_through_current_month_required_day_of_month integer,
    a_disclosure_change_threshold_cash_to_close numeric(15,2),
    a_disclosure_change_threshold_monthly_payment numeric(15,2),
    a_disclosure_action_required_days integer,
    a_le_to_cd_seasoning_days integer,
    a_disclosure_max_arm_apr_change_percent numeric(11,9),
    a_disclosure_max_non_arm_apr_change_percent numeric(11,9),
    a_initial_le_delivered_mailed_seasoning_days integer,
    a_revised_le_delivered_mailed_seasoning_days integer,
    a_revised_le_received_signed_seasoning_days integer,
    a_significant_cd_delivered_mailed_seasoning_days integer,
    a_significant_cd_received_signed_seasoning_days integer,
    a_supported_states text,
    etl_batch_id text
);

alter table history_octane.account owner to deployer;

create index idx_account__data_source_deleted_flag
    on history_octane.account (data_source_deleted_flag);

create index idx_account__data_source_updated_datetime
    on history_octane.account (data_source_updated_datetime);

create index idx_account__pid
    on history_octane.account (a_pid);

create index idx_account__pid_version
    on history_octane.account (a_pid, a_version);

create index idx_account__etl_batch_id
    on history_octane.account (etl_batch_id);

grant select on history_octane.account to readonly;

grant insert, select, update on history_octane.account to etl_loan;

create table history_octane.account_event
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ae_pid bigint not null,
    ae_version integer,
    ae_account_pid bigint,
    ae_create_datetime timestamp,
    ae_account_event_type varchar(128),
    ae_detail varchar(16000),
    ae_source_unparsed_name varchar(128),
    ae_ip_address varchar(32),
    ae_client_agent varchar(256),
    ae_event_date date,
    etl_batch_id text
);

alter table history_octane.account_event owner to deployer;

create index idx_account_event__data_source_deleted_flag
    on history_octane.account_event (data_source_deleted_flag);

create index idx_account_event__data_source_updated_datetime
    on history_octane.account_event (data_source_updated_datetime);

create index idx_account_event__pid
    on history_octane.account_event (ae_pid);

create index idx_account_event__pid_version
    on history_octane.account_event (ae_pid, ae_version);

create index idx_account_event_3
    on history_octane.account_event (ae_event_date);

create index idx_account_event__etl_batch_id
    on history_octane.account_event (etl_batch_id);

grant select on history_octane.account_event to readonly;

grant insert, select, update on history_octane.account_event to etl_loan;

create table history_octane.admin_user_event_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.admin_user_event_type owner to deployer;

create index idx_admin_user_event_type__data_source_deleted_flag
    on history_octane.admin_user_event_type (data_source_deleted_flag);

create index idx_admin_user_event_type__data_source_updated_datetime
    on history_octane.admin_user_event_type (data_source_updated_datetime);

create index idx_admin_user_event_type__etl_batch_id
    on history_octane.admin_user_event_type (etl_batch_id);

grant select on history_octane.admin_user_event_type to readonly;

grant insert, select, update on history_octane.admin_user_event_type to etl_loan;

create table history_octane.admin_user_event
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    aue_pid bigint not null,
    aue_version integer,
    aue_create_datetime timestamp,
    aue_detail varchar(16000),
    aue_source_unparsed_name varchar(128),
    aue_admin_user_event_type varchar(128),
    aue_ip_address varchar(32),
    aue_client_agent varchar(256),
    etl_batch_id text
);

alter table history_octane.admin_user_event owner to deployer;

create index idx_admin_user_event__data_source_deleted_flag
    on history_octane.admin_user_event (data_source_deleted_flag);

create index idx_admin_user_event__data_source_updated_datetime
    on history_octane.admin_user_event (data_source_updated_datetime);

create index idx_admin_user_event__pid
    on history_octane.admin_user_event (aue_pid);

create index idx_admin_user_event__pid_version
    on history_octane.admin_user_event (aue_pid, aue_version);

create index idx_admin_user_event__etl_batch_id
    on history_octane.admin_user_event (etl_batch_id);

grant select on history_octane.admin_user_event to readonly;

grant insert, select, update on history_octane.admin_user_event to etl_loan;

create table history_octane.admin_user_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.admin_user_status_type owner to deployer;

create index idx_admin_user_status_type__data_source_deleted_flag
    on history_octane.admin_user_status_type (data_source_deleted_flag);

create index idx_admin_user_status_type__data_source_updated_datetime
    on history_octane.admin_user_status_type (data_source_updated_datetime);

create index idx_admin_user_status_type__etl_batch_id
    on history_octane.admin_user_status_type (etl_batch_id);

grant select on history_octane.admin_user_status_type to readonly;

grant insert, select, update on history_octane.admin_user_status_type to etl_loan;

create table history_octane.agency_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.agency_type owner to deployer;

create index idx_agency_type__data_source_deleted_flag
    on history_octane.agency_type (data_source_deleted_flag);

create index idx_agency_type__data_source_updated_datetime
    on history_octane.agency_type (data_source_updated_datetime);

create index idx_agency_type__etl_batch_id
    on history_octane.agency_type (etl_batch_id);

grant select on history_octane.agency_type to readonly;

grant insert, select, update on history_octane.agency_type to etl_loan;

create table history_octane.agent_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.agent_type owner to deployer;

create index idx_agent_type__data_source_deleted_flag
    on history_octane.agent_type (data_source_deleted_flag);

create index idx_agent_type__data_source_updated_datetime
    on history_octane.agent_type (data_source_updated_datetime);

create index idx_agent_type__etl_batch_id
    on history_octane.agent_type (etl_batch_id);

grant select on history_octane.agent_type to readonly;

grant insert, select, update on history_octane.agent_type to etl_loan;

create table history_octane.announcement
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ann_pid bigint not null,
    ann_version integer,
    ann_lender_text varchar(1024),
    ann_borrower_text varchar(1024),
    ann_from_datetime timestamp,
    ann_to_datetime timestamp,
    etl_batch_id text
);

alter table history_octane.announcement owner to deployer;

create index idx_announcement__data_source_deleted_flag
    on history_octane.announcement (data_source_deleted_flag);

create index idx_announcement__data_source_updated_datetime
    on history_octane.announcement (data_source_updated_datetime);

create index idx_announcement__pid
    on history_octane.announcement (ann_pid);

create index idx_announcement__pid_version
    on history_octane.announcement (ann_pid, ann_version);

create index idx_announcement__etl_batch_id
    on history_octane.announcement (etl_batch_id);

grant select on history_octane.announcement to readonly;

grant insert, select, update on history_octane.announcement to etl_loan;

create table history_octane.annual_monthly_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.annual_monthly_type owner to deployer;

create index idx_annual_monthly_type__data_source_deleted_flag
    on history_octane.annual_monthly_type (data_source_deleted_flag);

create index idx_annual_monthly_type__data_source_updated_datetime
    on history_octane.annual_monthly_type (data_source_updated_datetime);

create index idx_annual_monthly_type__etl_batch_id
    on history_octane.annual_monthly_type (etl_batch_id);

grant select on history_octane.annual_monthly_type to readonly;

grant insert, select, update on history_octane.annual_monthly_type to etl_loan;

create table history_octane.applicant_role_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.applicant_role_type owner to deployer;

create index idx_applicant_role_type__data_source_deleted_flag
    on history_octane.applicant_role_type (data_source_deleted_flag);

create index idx_applicant_role_type__data_source_updated_datetime
    on history_octane.applicant_role_type (data_source_updated_datetime);

create index idx_applicant_role_type__etl_batch_id
    on history_octane.applicant_role_type (etl_batch_id);

grant select on history_octane.applicant_role_type to readonly;

grant insert, select, update on history_octane.applicant_role_type to etl_loan;

create table history_octane.application_taken_method_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.application_taken_method_type owner to deployer;

create index idx_application_taken_method_type__data_source_deleted_flag
    on history_octane.application_taken_method_type (data_source_deleted_flag);

create index idx_application_taken_method_type__data_source_updated_datetime
    on history_octane.application_taken_method_type (data_source_updated_datetime);

create index idx_application_taken_method_type__etl_batch_id
    on history_octane.application_taken_method_type (etl_batch_id);

grant select on history_octane.application_taken_method_type to readonly;

grant insert, select, update on history_octane.application_taken_method_type to etl_loan;

create table history_octane.application_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.application_type owner to deployer;

create index idx_application_type__data_source_deleted_flag
    on history_octane.application_type (data_source_deleted_flag);

create index idx_application_type__data_source_updated_datetime
    on history_octane.application_type (data_source_updated_datetime);

create index idx_application_type__etl_batch_id
    on history_octane.application_type (etl_batch_id);

grant select on history_octane.application_type to readonly;

grant insert, select, update on history_octane.application_type to etl_loan;

create table history_octane.appraisal_condition_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.appraisal_condition_type owner to deployer;

create index idx_appraisal_condition_type__data_source_deleted_flag
    on history_octane.appraisal_condition_type (data_source_deleted_flag);

create index idx_appraisal_condition_type__data_source_updated_datetime
    on history_octane.appraisal_condition_type (data_source_updated_datetime);

create index idx_appraisal_condition_type__etl_batch_id
    on history_octane.appraisal_condition_type (etl_batch_id);

grant select on history_octane.appraisal_condition_type to readonly;

grant insert, select, update on history_octane.appraisal_condition_type to etl_loan;

create table history_octane.appraisal_entry_contact_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.appraisal_entry_contact_type owner to deployer;

create index idx_appraisal_entry_contact_type__data_source_deleted_flag
    on history_octane.appraisal_entry_contact_type (data_source_deleted_flag);

create index idx_appraisal_entry_contact_type__data_source_updated_datetime
    on history_octane.appraisal_entry_contact_type (data_source_updated_datetime);

create index idx_appraisal_entry_contact_type__etl_batch_id
    on history_octane.appraisal_entry_contact_type (etl_batch_id);

grant select on history_octane.appraisal_entry_contact_type to readonly;

grant insert, select, update on history_octane.appraisal_entry_contact_type to etl_loan;

create table history_octane.appraisal_file_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.appraisal_file_type owner to deployer;

create index idx_appraisal_file_type__data_source_deleted_flag
    on history_octane.appraisal_file_type (data_source_deleted_flag);

create index idx_appraisal_file_type__data_source_updated_datetime
    on history_octane.appraisal_file_type (data_source_updated_datetime);

create index idx_appraisal_file_type__etl_batch_id
    on history_octane.appraisal_file_type (etl_batch_id);

grant select on history_octane.appraisal_file_type to readonly;

grant insert, select, update on history_octane.appraisal_file_type to etl_loan;

create table history_octane.appraisal_form_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.appraisal_form_type owner to deployer;

create index idx_appraisal_form_type__data_source_deleted_flag
    on history_octane.appraisal_form_type (data_source_deleted_flag);

create index idx_appraisal_form_type__data_source_updated_datetime
    on history_octane.appraisal_form_type (data_source_updated_datetime);

create index idx_appraisal_form_type__etl_batch_id
    on history_octane.appraisal_form_type (etl_batch_id);

grant select on history_octane.appraisal_form_type to readonly;

grant insert, select, update on history_octane.appraisal_form_type to etl_loan;

create table history_octane.appraisal_hold_reason_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.appraisal_hold_reason_type owner to deployer;

create index idx_appraisal_hold_reason_type__data_source_deleted_flag
    on history_octane.appraisal_hold_reason_type (data_source_deleted_flag);

create index idx_appraisal_hold_reason_type__data_source_updated_datetime
    on history_octane.appraisal_hold_reason_type (data_source_updated_datetime);

create index idx_appraisal_hold_reason_type__etl_batch_id
    on history_octane.appraisal_hold_reason_type (etl_batch_id);

grant select on history_octane.appraisal_hold_reason_type to readonly;

grant insert, select, update on history_octane.appraisal_hold_reason_type to etl_loan;

create table history_octane.appraisal_hold_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.appraisal_hold_type owner to deployer;

create index idx_appraisal_hold_type__data_source_deleted_flag
    on history_octane.appraisal_hold_type (data_source_deleted_flag);

create index idx_appraisal_hold_type__data_source_updated_datetime
    on history_octane.appraisal_hold_type (data_source_updated_datetime);

create index idx_appraisal_hold_type__etl_batch_id
    on history_octane.appraisal_hold_type (etl_batch_id);

grant select on history_octane.appraisal_hold_type to readonly;

grant insert, select, update on history_octane.appraisal_hold_type to etl_loan;

create table history_octane.appraisal_management_company_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.appraisal_management_company_type owner to deployer;

create index idx_appraisal_management_company_type__data_source_deleted_flag
    on history_octane.appraisal_management_company_type (data_source_deleted_flag);

create index idx_4b7ca44c61494bfa82eaf25a529a3eb9
    on history_octane.appraisal_management_company_type (data_source_updated_datetime);

create index idx_appraisal_management_company_type__etl_batch_id
    on history_octane.appraisal_management_company_type (etl_batch_id);

grant select on history_octane.appraisal_management_company_type to readonly;

grant insert, select, update on history_octane.appraisal_management_company_type to etl_loan;

create table history_octane.appraisal_order_coarse_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.appraisal_order_coarse_status_type owner to deployer;

create index idx_814cd08aa1e2e72658e457a4e7e8bfc1
    on history_octane.appraisal_order_coarse_status_type (data_source_deleted_flag);

create index idx_722fe01982d734cff0a3b3ee99d151d5
    on history_octane.appraisal_order_coarse_status_type (data_source_updated_datetime);

create index idx_appraisal_order_coarse_status_type__etl_batch_id
    on history_octane.appraisal_order_coarse_status_type (etl_batch_id);

grant select on history_octane.appraisal_order_coarse_status_type to readonly;

grant insert, select, update on history_octane.appraisal_order_coarse_status_type to etl_loan;

create table history_octane.appraisal_order_request_file_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.appraisal_order_request_file_type owner to deployer;

create index idx_appraisal_order_request_file_type__data_source_deleted_flag
    on history_octane.appraisal_order_request_file_type (data_source_deleted_flag);

create index idx_ab3bcc197067e972586553193bd6fea6
    on history_octane.appraisal_order_request_file_type (data_source_updated_datetime);

create index idx_appraisal_order_request_file_type__etl_batch_id
    on history_octane.appraisal_order_request_file_type (etl_batch_id);

grant select on history_octane.appraisal_order_request_file_type to readonly;

grant insert, select, update on history_octane.appraisal_order_request_file_type to etl_loan;

create table history_octane.appraisal_order_request_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.appraisal_order_request_type owner to deployer;

create index idx_appraisal_order_request_type__data_source_deleted_flag
    on history_octane.appraisal_order_request_type (data_source_deleted_flag);

create index idx_appraisal_order_request_type__data_source_updated_datetime
    on history_octane.appraisal_order_request_type (data_source_updated_datetime);

create index idx_appraisal_order_request_type__etl_batch_id
    on history_octane.appraisal_order_request_type (etl_batch_id);

grant select on history_octane.appraisal_order_request_type to readonly;

grant insert, select, update on history_octane.appraisal_order_request_type to etl_loan;

create table history_octane.appraisal_order_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.appraisal_order_status_type owner to deployer;

create index idx_appraisal_order_status_type__data_source_deleted_flag
    on history_octane.appraisal_order_status_type (data_source_deleted_flag);

create index idx_appraisal_order_status_type__data_source_updated_datetime
    on history_octane.appraisal_order_status_type (data_source_updated_datetime);

create index idx_appraisal_order_status_type__etl_batch_id
    on history_octane.appraisal_order_status_type (etl_batch_id);

grant select on history_octane.appraisal_order_status_type to readonly;

grant insert, select, update on history_octane.appraisal_order_status_type to etl_loan;

create table history_octane.appraisal_purpose_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.appraisal_purpose_type owner to deployer;

create index idx_appraisal_purpose_type__data_source_deleted_flag
    on history_octane.appraisal_purpose_type (data_source_deleted_flag);

create index idx_appraisal_purpose_type__data_source_updated_datetime
    on history_octane.appraisal_purpose_type (data_source_updated_datetime);

create index idx_appraisal_purpose_type__etl_batch_id
    on history_octane.appraisal_purpose_type (etl_batch_id);

grant select on history_octane.appraisal_purpose_type to readonly;

grant insert, select, update on history_octane.appraisal_purpose_type to etl_loan;

create table history_octane.appraisal_source_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.appraisal_source_type owner to deployer;

create index idx_appraisal_source_type__data_source_deleted_flag
    on history_octane.appraisal_source_type (data_source_deleted_flag);

create index idx_appraisal_source_type__data_source_updated_datetime
    on history_octane.appraisal_source_type (data_source_updated_datetime);

create index idx_appraisal_source_type__etl_batch_id
    on history_octane.appraisal_source_type (etl_batch_id);

grant select on history_octane.appraisal_source_type to readonly;

grant insert, select, update on history_octane.appraisal_source_type to etl_loan;

create table history_octane.appraisal_underwriter_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.appraisal_underwriter_type owner to deployer;

create index idx_appraisal_underwriter_type__data_source_deleted_flag
    on history_octane.appraisal_underwriter_type (data_source_deleted_flag);

create index idx_appraisal_underwriter_type__data_source_updated_datetime
    on history_octane.appraisal_underwriter_type (data_source_updated_datetime);

create index idx_appraisal_underwriter_type__etl_batch_id
    on history_octane.appraisal_underwriter_type (etl_batch_id);

grant select on history_octane.appraisal_underwriter_type to readonly;

grant insert, select, update on history_octane.appraisal_underwriter_type to etl_loan;

create table history_octane.area_median_income_table
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    amit_pid bigint not null,
    amit_version integer,
    amit_account_pid bigint,
    amit_from_date date,
    amit_uploader_unparsed_name varchar(128),
    amit_upload_datetime timestamp,
    etl_batch_id text
);

alter table history_octane.area_median_income_table owner to deployer;

create index idx_area_median_income_table__data_source_deleted_flag
    on history_octane.area_median_income_table (data_source_deleted_flag);

create index idx_area_median_income_table__data_source_updated_datetime
    on history_octane.area_median_income_table (data_source_updated_datetime);

create index idx_area_median_income_table__pid
    on history_octane.area_median_income_table (amit_pid);

create index idx_area_median_income_table__pid_version
    on history_octane.area_median_income_table (amit_pid, amit_version);

create index idx_area_median_income_table__etl_batch_id
    on history_octane.area_median_income_table (etl_batch_id);

grant select on history_octane.area_median_income_table to readonly;

grant insert, select, update on history_octane.area_median_income_table to etl_loan;

create table history_octane.arm_index_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.arm_index_type owner to deployer;

create index idx_arm_index_type__data_source_deleted_flag
    on history_octane.arm_index_type (data_source_deleted_flag);

create index idx_arm_index_type__data_source_updated_datetime
    on history_octane.arm_index_type (data_source_updated_datetime);

create index idx_arm_index_type__etl_batch_id
    on history_octane.arm_index_type (etl_batch_id);

grant select on history_octane.arm_index_type to readonly;

grant insert, select, update on history_octane.arm_index_type to etl_loan;

create table history_octane.arm_index_rate
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    air_pid bigint not null,
    air_version integer,
    air_arm_index_type varchar(128),
    air_effective_datetime timestamp,
    air_rate numeric(11,9),
    etl_batch_id text
);

alter table history_octane.arm_index_rate owner to deployer;

create index idx_arm_index_rate__data_source_deleted_flag
    on history_octane.arm_index_rate (data_source_deleted_flag);

create index idx_arm_index_rate__data_source_updated_datetime
    on history_octane.arm_index_rate (data_source_updated_datetime);

create index idx_arm_index_rate__pid
    on history_octane.arm_index_rate (air_pid);

create index idx_arm_index_rate__pid_version
    on history_octane.arm_index_rate (air_pid, air_version);

create index idx_arm_index_rate__etl_batch_id
    on history_octane.arm_index_rate (etl_batch_id);

grant select on history_octane.arm_index_rate to readonly;

grant insert, select, update on history_octane.arm_index_rate to etl_loan;

create table history_octane.asset_account_holder_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.asset_account_holder_type owner to deployer;

create index idx_asset_account_holder_type__data_source_deleted_flag
    on history_octane.asset_account_holder_type (data_source_deleted_flag);

create index idx_asset_account_holder_type__data_source_updated_datetime
    on history_octane.asset_account_holder_type (data_source_updated_datetime);

create index idx_asset_account_holder_type__etl_batch_id
    on history_octane.asset_account_holder_type (etl_batch_id);

grant select on history_octane.asset_account_holder_type to readonly;

grant insert, select, update on history_octane.asset_account_holder_type to etl_loan;

create table history_octane.asset_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.asset_type owner to deployer;

create index idx_asset_type__data_source_deleted_flag
    on history_octane.asset_type (data_source_deleted_flag);

create index idx_asset_type__data_source_updated_datetime
    on history_octane.asset_type (data_source_updated_datetime);

create index idx_asset_type__etl_batch_id
    on history_octane.asset_type (etl_batch_id);

grant select on history_octane.asset_type to readonly;

grant insert, select, update on history_octane.asset_type to etl_loan;

create table history_octane.aus_credit_service_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.aus_credit_service_type owner to deployer;

create index idx_aus_credit_service_type__data_source_deleted_flag
    on history_octane.aus_credit_service_type (data_source_deleted_flag);

create index idx_aus_credit_service_type__data_source_updated_datetime
    on history_octane.aus_credit_service_type (data_source_updated_datetime);

create index idx_aus_credit_service_type__etl_batch_id
    on history_octane.aus_credit_service_type (etl_batch_id);

grant select on history_octane.aus_credit_service_type to readonly;

grant insert, select, update on history_octane.aus_credit_service_type to etl_loan;

create table history_octane.aus_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.aus_type owner to deployer;

create index idx_aus_type__data_source_deleted_flag
    on history_octane.aus_type (data_source_deleted_flag);

create index idx_aus_type__data_source_updated_datetime
    on history_octane.aus_type (data_source_updated_datetime);

create index idx_aus_type__etl_batch_id
    on history_octane.aus_type (etl_batch_id);

grant select on history_octane.aus_type to readonly;

grant insert, select, update on history_octane.aus_type to etl_loan;

create table history_octane.backfill_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.backfill_status_type owner to deployer;

create index idx_backfill_status_type__data_source_deleted_flag
    on history_octane.backfill_status_type (data_source_deleted_flag);

create index idx_backfill_status_type__data_source_updated_datetime
    on history_octane.backfill_status_type (data_source_updated_datetime);

create index idx_backfill_status_type__etl_batch_id
    on history_octane.backfill_status_type (etl_batch_id);

grant select on history_octane.backfill_status_type to readonly;

grant insert, select, update on history_octane.backfill_status_type to etl_loan;

create table history_octane.bankruptcy_exception_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.bankruptcy_exception_type owner to deployer;

create index idx_bankruptcy_exception_type__data_source_deleted_flag
    on history_octane.bankruptcy_exception_type (data_source_deleted_flag);

create index idx_bankruptcy_exception_type__data_source_updated_datetime
    on history_octane.bankruptcy_exception_type (data_source_updated_datetime);

create index idx_bankruptcy_exception_type__etl_batch_id
    on history_octane.bankruptcy_exception_type (etl_batch_id);

grant select on history_octane.bankruptcy_exception_type to readonly;

grant insert, select, update on history_octane.bankruptcy_exception_type to etl_loan;

create table history_octane.bid_pool_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.bid_pool_status_type owner to deployer;

create index idx_bid_pool_status_type__data_source_deleted_flag
    on history_octane.bid_pool_status_type (data_source_deleted_flag);

create index idx_bid_pool_status_type__data_source_updated_datetime
    on history_octane.bid_pool_status_type (data_source_updated_datetime);

create index idx_bid_pool_status_type__etl_batch_id
    on history_octane.bid_pool_status_type (etl_batch_id);

grant select on history_octane.bid_pool_status_type to readonly;

grant insert, select, update on history_octane.bid_pool_status_type to etl_loan;

create table history_octane.bid_pool
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    bp_pid bigint not null,
    bp_version integer,
    bp_account_pid bigint,
    bp_bid_pool_name varchar(32),
    bp_bid_pool_status_type varchar(128),
    bp_create_datetime date,
    etl_batch_id text
);

alter table history_octane.bid_pool owner to deployer;

create index idx_bid_pool__data_source_deleted_flag
    on history_octane.bid_pool (data_source_deleted_flag);

create index idx_bid_pool__data_source_updated_datetime
    on history_octane.bid_pool (data_source_updated_datetime);

create index idx_bid_pool__pid
    on history_octane.bid_pool (bp_pid);

create index idx_bid_pool__pid_version
    on history_octane.bid_pool (bp_pid, bp_version);

create index idx_bid_pool__etl_batch_id
    on history_octane.bid_pool (etl_batch_id);

grant select on history_octane.bid_pool to readonly;

grant insert, select, update on history_octane.bid_pool to etl_loan;

create table history_octane.borrower_associated_address_explanation_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.borrower_associated_address_explanation_type owner to deployer;

create index idx_492ba628157a869b6367305eb9bf483b
    on history_octane.borrower_associated_address_explanation_type (data_source_deleted_flag);

create index idx_2b2996b07f71948219825726bf76a641
    on history_octane.borrower_associated_address_explanation_type (data_source_updated_datetime);

create index idx_borrower_associated_address_explanation_type__etl_batch_id
    on history_octane.borrower_associated_address_explanation_type (etl_batch_id);

grant select on history_octane.borrower_associated_address_explanation_type to readonly;

grant insert, select, update on history_octane.borrower_associated_address_explanation_type to etl_loan;

create table history_octane.borrower_associated_address_source_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.borrower_associated_address_source_type owner to deployer;

create index idx_36999a2b3e2b80516decdd3b0f4f39db
    on history_octane.borrower_associated_address_source_type (data_source_deleted_flag);

create index idx_d75847291129937761c034799ae18b49
    on history_octane.borrower_associated_address_source_type (data_source_updated_datetime);

create index idx_borrower_associated_address_source_type__etl_batch_id
    on history_octane.borrower_associated_address_source_type (etl_batch_id);

grant select on history_octane.borrower_associated_address_source_type to readonly;

grant insert, select, update on history_octane.borrower_associated_address_source_type to etl_loan;

create table history_octane.borrower_income_category_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.borrower_income_category_type owner to deployer;

create index idx_borrower_income_category_type__data_source_deleted_flag
    on history_octane.borrower_income_category_type (data_source_deleted_flag);

create index idx_borrower_income_category_type__data_source_updated_datetime
    on history_octane.borrower_income_category_type (data_source_updated_datetime);

create index idx_borrower_income_category_type__etl_batch_id
    on history_octane.borrower_income_category_type (etl_batch_id);

grant select on history_octane.borrower_income_category_type to readonly;

grant insert, select, update on history_octane.borrower_income_category_type to etl_loan;

create table history_octane.borrower_relationship_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.borrower_relationship_type owner to deployer;

create index idx_borrower_relationship_type__data_source_deleted_flag
    on history_octane.borrower_relationship_type (data_source_deleted_flag);

create index idx_borrower_relationship_type__data_source_updated_datetime
    on history_octane.borrower_relationship_type (data_source_updated_datetime);

create index idx_borrower_relationship_type__etl_batch_id
    on history_octane.borrower_relationship_type (etl_batch_id);

grant select on history_octane.borrower_relationship_type to readonly;

grant insert, select, update on history_octane.borrower_relationship_type to etl_loan;

create table history_octane.borrower_residency_basis_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.borrower_residency_basis_type owner to deployer;

create index idx_borrower_residency_basis_type__data_source_deleted_flag
    on history_octane.borrower_residency_basis_type (data_source_deleted_flag);

create index idx_borrower_residency_basis_type__data_source_updated_datetime
    on history_octane.borrower_residency_basis_type (data_source_updated_datetime);

create index idx_borrower_residency_basis_type__etl_batch_id
    on history_octane.borrower_residency_basis_type (etl_batch_id);

grant select on history_octane.borrower_residency_basis_type to readonly;

grant insert, select, update on history_octane.borrower_residency_basis_type to etl_loan;

create table history_octane.borrower_tiny_id_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.borrower_tiny_id_type owner to deployer;

create index idx_borrower_tiny_id_type__data_source_deleted_flag
    on history_octane.borrower_tiny_id_type (data_source_deleted_flag);

create index idx_borrower_tiny_id_type__data_source_updated_datetime
    on history_octane.borrower_tiny_id_type (data_source_updated_datetime);

create index idx_borrower_tiny_id_type__etl_batch_id
    on history_octane.borrower_tiny_id_type (etl_batch_id);

grant select on history_octane.borrower_tiny_id_type to readonly;

grant insert, select, update on history_octane.borrower_tiny_id_type to etl_loan;

create table history_octane.borrower_user_account_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.borrower_user_account_status_type owner to deployer;

create index idx_borrower_user_account_status_type__data_source_deleted_flag
    on history_octane.borrower_user_account_status_type (data_source_deleted_flag);

create index idx_50050b35ee0505f3a8d9662355fbaac1
    on history_octane.borrower_user_account_status_type (data_source_updated_datetime);

create index idx_borrower_user_account_status_type__etl_batch_id
    on history_octane.borrower_user_account_status_type (etl_batch_id);

grant select on history_octane.borrower_user_account_status_type to readonly;

grant insert, select, update on history_octane.borrower_user_account_status_type to etl_loan;

create table history_octane.borrower_user_deal_access_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.borrower_user_deal_access_type owner to deployer;

create index idx_borrower_user_deal_access_type__data_source_deleted_flag
    on history_octane.borrower_user_deal_access_type (data_source_deleted_flag);

create index idx_fce5009a10c9ab8c98a514aa5f19ed9c
    on history_octane.borrower_user_deal_access_type (data_source_updated_datetime);

create index idx_borrower_user_deal_access_type__etl_batch_id
    on history_octane.borrower_user_deal_access_type (etl_batch_id);

grant select on history_octane.borrower_user_deal_access_type to readonly;

grant insert, select, update on history_octane.borrower_user_deal_access_type to etl_loan;

create table history_octane.branch_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.branch_status_type owner to deployer;

create index idx_branch_status_type__data_source_deleted_flag
    on history_octane.branch_status_type (data_source_deleted_flag);

create index idx_branch_status_type__data_source_updated_datetime
    on history_octane.branch_status_type (data_source_updated_datetime);

create index idx_branch_status_type__etl_batch_id
    on history_octane.branch_status_type (etl_batch_id);

grant select on history_octane.branch_status_type to readonly;

grant insert, select, update on history_octane.branch_status_type to etl_loan;

create table history_octane.building_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.building_status_type owner to deployer;

create index idx_building_status_type__data_source_deleted_flag
    on history_octane.building_status_type (data_source_deleted_flag);

create index idx_building_status_type__data_source_updated_datetime
    on history_octane.building_status_type (data_source_updated_datetime);

create index idx_building_status_type__etl_batch_id
    on history_octane.building_status_type (etl_batch_id);

grant select on history_octane.building_status_type to readonly;

grant insert, select, update on history_octane.building_status_type to etl_loan;

create table history_octane.business_disposition_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.business_disposition_type owner to deployer;

create index idx_business_disposition_type__data_source_deleted_flag
    on history_octane.business_disposition_type (data_source_deleted_flag);

create index idx_business_disposition_type__data_source_updated_datetime
    on history_octane.business_disposition_type (data_source_updated_datetime);

create index idx_business_disposition_type__etl_batch_id
    on history_octane.business_disposition_type (etl_batch_id);

grant select on history_octane.business_disposition_type to readonly;

grant insert, select, update on history_octane.business_disposition_type to etl_loan;

create table history_octane.business_income_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.business_income_type owner to deployer;

create index idx_business_income_type__data_source_deleted_flag
    on history_octane.business_income_type (data_source_deleted_flag);

create index idx_business_income_type__data_source_updated_datetime
    on history_octane.business_income_type (data_source_updated_datetime);

create index idx_business_income_type__etl_batch_id
    on history_octane.business_income_type (etl_batch_id);

grant select on history_octane.business_income_type to readonly;

grant insert, select, update on history_octane.business_income_type to etl_loan;

create table history_octane.business_ownership_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.business_ownership_type owner to deployer;

create index idx_business_ownership_type__data_source_deleted_flag
    on history_octane.business_ownership_type (data_source_deleted_flag);

create index idx_business_ownership_type__data_source_updated_datetime
    on history_octane.business_ownership_type (data_source_updated_datetime);

create index idx_business_ownership_type__etl_batch_id
    on history_octane.business_ownership_type (etl_batch_id);

grant select on history_octane.business_ownership_type to readonly;

grant insert, select, update on history_octane.business_ownership_type to etl_loan;

create table history_octane.buydown_base_date_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.buydown_base_date_type owner to deployer;

create index idx_buydown_base_date_type__data_source_deleted_flag
    on history_octane.buydown_base_date_type (data_source_deleted_flag);

create index idx_buydown_base_date_type__data_source_updated_datetime
    on history_octane.buydown_base_date_type (data_source_updated_datetime);

create index idx_buydown_base_date_type__etl_batch_id
    on history_octane.buydown_base_date_type (etl_batch_id);

grant select on history_octane.buydown_base_date_type to readonly;

grant insert, select, update on history_octane.buydown_base_date_type to etl_loan;

create table history_octane.buydown_contributor_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.buydown_contributor_type owner to deployer;

create index idx_buydown_contributor_type__data_source_deleted_flag
    on history_octane.buydown_contributor_type (data_source_deleted_flag);

create index idx_buydown_contributor_type__data_source_updated_datetime
    on history_octane.buydown_contributor_type (data_source_updated_datetime);

create index idx_buydown_contributor_type__etl_batch_id
    on history_octane.buydown_contributor_type (etl_batch_id);

grant select on history_octane.buydown_contributor_type to readonly;

grant insert, select, update on history_octane.buydown_contributor_type to etl_loan;

create table history_octane.buydown_schedule_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.buydown_schedule_type owner to deployer;

create index idx_buydown_schedule_type__data_source_deleted_flag
    on history_octane.buydown_schedule_type (data_source_deleted_flag);

create index idx_buydown_schedule_type__data_source_updated_datetime
    on history_octane.buydown_schedule_type (data_source_updated_datetime);

create index idx_buydown_schedule_type__etl_batch_id
    on history_octane.buydown_schedule_type (etl_batch_id);

grant select on history_octane.buydown_schedule_type to readonly;

grant insert, select, update on history_octane.buydown_schedule_type to etl_loan;

create table history_octane.buydown_subsidy_calculation_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.buydown_subsidy_calculation_type owner to deployer;

create index idx_buydown_subsidy_calculation_type__data_source_deleted_flag
    on history_octane.buydown_subsidy_calculation_type (data_source_deleted_flag);

create index idx_358da196152bc355714aec303885b4c7
    on history_octane.buydown_subsidy_calculation_type (data_source_updated_datetime);

create index idx_buydown_subsidy_calculation_type__etl_batch_id
    on history_octane.buydown_subsidy_calculation_type (etl_batch_id);

grant select on history_octane.buydown_subsidy_calculation_type to readonly;

grant insert, select, update on history_octane.buydown_subsidy_calculation_type to etl_loan;

create table history_octane.calendar_rule_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.calendar_rule_type owner to deployer;

create index idx_calendar_rule_type__data_source_deleted_flag
    on history_octane.calendar_rule_type (data_source_deleted_flag);

create index idx_calendar_rule_type__data_source_updated_datetime
    on history_octane.calendar_rule_type (data_source_updated_datetime);

create index idx_calendar_rule_type__etl_batch_id
    on history_octane.calendar_rule_type (etl_batch_id);

grant select on history_octane.calendar_rule_type to readonly;

grant insert, select, update on history_octane.calendar_rule_type to etl_loan;

create table history_octane.challenge_question_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.challenge_question_type owner to deployer;

create index idx_challenge_question_type__data_source_deleted_flag
    on history_octane.challenge_question_type (data_source_deleted_flag);

create index idx_challenge_question_type__data_source_updated_datetime
    on history_octane.challenge_question_type (data_source_updated_datetime);

create index idx_challenge_question_type__etl_batch_id
    on history_octane.challenge_question_type (etl_batch_id);

grant select on history_octane.challenge_question_type to readonly;

grant insert, select, update on history_octane.challenge_question_type to etl_loan;

create table history_octane.channel_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.channel_type owner to deployer;

create index idx_channel_type__data_source_deleted_flag
    on history_octane.channel_type (data_source_deleted_flag);

create index idx_channel_type__data_source_updated_datetime
    on history_octane.channel_type (data_source_updated_datetime);

create index idx_channel_type__etl_batch_id
    on history_octane.channel_type (etl_batch_id);

grant select on history_octane.channel_type to readonly;

grant insert, select, update on history_octane.channel_type to etl_loan;

create table history_octane.channel
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ch_pid bigint not null,
    ch_version integer,
    ch_account_pid bigint,
    ch_id varchar(32),
    ch_name varchar(128),
    ch_channel_type varchar(128),
    etl_batch_id text
);

alter table history_octane.channel owner to deployer;

create index idx_channel__data_source_deleted_flag
    on history_octane.channel (data_source_deleted_flag);

create index idx_channel__data_source_updated_datetime
    on history_octane.channel (data_source_updated_datetime);

create index idx_channel__pid
    on history_octane.channel (ch_pid);

create index idx_channel__pid_version
    on history_octane.channel (ch_pid, ch_version);

create index idx_channel__etl_batch_id
    on history_octane.channel (etl_batch_id);

grant select on history_octane.channel to readonly;

grant insert, select, update on history_octane.channel to etl_loan;

create table history_octane.charge_input_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.charge_input_type owner to deployer;

create index idx_charge_input_type__data_source_deleted_flag
    on history_octane.charge_input_type (data_source_deleted_flag);

create index idx_charge_input_type__data_source_updated_datetime
    on history_octane.charge_input_type (data_source_updated_datetime);

create index idx_charge_input_type__etl_batch_id
    on history_octane.charge_input_type (etl_batch_id);

grant select on history_octane.charge_input_type to readonly;

grant insert, select, update on history_octane.charge_input_type to etl_loan;

create table history_octane.charge_payee_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.charge_payee_type owner to deployer;

create index idx_charge_payee_type__data_source_deleted_flag
    on history_octane.charge_payee_type (data_source_deleted_flag);

create index idx_charge_payee_type__data_source_updated_datetime
    on history_octane.charge_payee_type (data_source_updated_datetime);

create index idx_charge_payee_type__etl_batch_id
    on history_octane.charge_payee_type (etl_batch_id);

grant select on history_octane.charge_payee_type to readonly;

grant insert, select, update on history_octane.charge_payee_type to etl_loan;

create table history_octane.charge_payer_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.charge_payer_type owner to deployer;

create index idx_charge_payer_type__data_source_deleted_flag
    on history_octane.charge_payer_type (data_source_deleted_flag);

create index idx_charge_payer_type__data_source_updated_datetime
    on history_octane.charge_payer_type (data_source_updated_datetime);

create index idx_charge_payer_type__etl_batch_id
    on history_octane.charge_payer_type (etl_batch_id);

grant select on history_octane.charge_payer_type to readonly;

grant insert, select, update on history_octane.charge_payer_type to etl_loan;

create table history_octane.charge_source_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.charge_source_type owner to deployer;

create index idx_charge_source_type__data_source_deleted_flag
    on history_octane.charge_source_type (data_source_deleted_flag);

create index idx_charge_source_type__data_source_updated_datetime
    on history_octane.charge_source_type (data_source_updated_datetime);

create index idx_charge_source_type__etl_batch_id
    on history_octane.charge_source_type (etl_batch_id);

grant select on history_octane.charge_source_type to readonly;

grant insert, select, update on history_octane.charge_source_type to etl_loan;

create table history_octane.charge_wire_action_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.charge_wire_action_type owner to deployer;

create index idx_charge_wire_action_type__data_source_deleted_flag
    on history_octane.charge_wire_action_type (data_source_deleted_flag);

create index idx_charge_wire_action_type__data_source_updated_datetime
    on history_octane.charge_wire_action_type (data_source_updated_datetime);

create index idx_charge_wire_action_type__etl_batch_id
    on history_octane.charge_wire_action_type (etl_batch_id);

grant select on history_octane.charge_wire_action_type to readonly;

grant insert, select, update on history_octane.charge_wire_action_type to etl_loan;

create table history_octane.circumstance_change_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.circumstance_change_type owner to deployer;

create index idx_circumstance_change_type__data_source_deleted_flag
    on history_octane.circumstance_change_type (data_source_deleted_flag);

create index idx_circumstance_change_type__data_source_updated_datetime
    on history_octane.circumstance_change_type (data_source_updated_datetime);

create index idx_circumstance_change_type__etl_batch_id
    on history_octane.circumstance_change_type (etl_batch_id);

grant select on history_octane.circumstance_change_type to readonly;

grant insert, select, update on history_octane.circumstance_change_type to etl_loan;

create table history_octane.citizenship_residency_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.citizenship_residency_type owner to deployer;

create index idx_citizenship_residency_type__data_source_deleted_flag
    on history_octane.citizenship_residency_type (data_source_deleted_flag);

create index idx_citizenship_residency_type__data_source_updated_datetime
    on history_octane.citizenship_residency_type (data_source_updated_datetime);

create index idx_citizenship_residency_type__etl_batch_id
    on history_octane.citizenship_residency_type (etl_batch_id);

grant select on history_octane.citizenship_residency_type to readonly;

grant insert, select, update on history_octane.citizenship_residency_type to etl_loan;

create table history_octane.clg_flood_cert_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.clg_flood_cert_status_type owner to deployer;

create index idx_clg_flood_cert_status_type__data_source_deleted_flag
    on history_octane.clg_flood_cert_status_type (data_source_deleted_flag);

create index idx_clg_flood_cert_status_type__data_source_updated_datetime
    on history_octane.clg_flood_cert_status_type (data_source_updated_datetime);

create index idx_clg_flood_cert_status_type__etl_batch_id
    on history_octane.clg_flood_cert_status_type (etl_batch_id);

grant select on history_octane.clg_flood_cert_status_type to readonly;

grant insert, select, update on history_octane.clg_flood_cert_status_type to etl_loan;

create table history_octane.closing_document_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.closing_document_status_type owner to deployer;

create index idx_closing_document_status_type__data_source_deleted_flag
    on history_octane.closing_document_status_type (data_source_deleted_flag);

create index idx_closing_document_status_type__data_source_updated_datetime
    on history_octane.closing_document_status_type (data_source_updated_datetime);

create index idx_closing_document_status_type__etl_batch_id
    on history_octane.closing_document_status_type (etl_batch_id);

grant select on history_octane.closing_document_status_type to readonly;

grant insert, select, update on history_octane.closing_document_status_type to etl_loan;

create table history_octane.coarse_event_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.coarse_event_type owner to deployer;

create index idx_coarse_event_type__data_source_deleted_flag
    on history_octane.coarse_event_type (data_source_deleted_flag);

create index idx_coarse_event_type__data_source_updated_datetime
    on history_octane.coarse_event_type (data_source_updated_datetime);

create index idx_coarse_event_type__etl_batch_id
    on history_octane.coarse_event_type (etl_batch_id);

grant select on history_octane.coarse_event_type to readonly;

grant insert, select, update on history_octane.coarse_event_type to etl_loan;

create table history_octane.community_lending_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.community_lending_type owner to deployer;

create index idx_community_lending_type__data_source_deleted_flag
    on history_octane.community_lending_type (data_source_deleted_flag);

create index idx_community_lending_type__data_source_updated_datetime
    on history_octane.community_lending_type (data_source_updated_datetime);

create index idx_community_lending_type__etl_batch_id
    on history_octane.community_lending_type (etl_batch_id);

grant select on history_octane.community_lending_type to readonly;

grant insert, select, update on history_octane.community_lending_type to etl_loan;

create table history_octane.company_admin_event_entity_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.company_admin_event_entity_type owner to deployer;

create index idx_company_admin_event_entity_type__data_source_deleted_flag
    on history_octane.company_admin_event_entity_type (data_source_deleted_flag);

create index idx_a86e5a34e003c082c9ec98691e7ff411
    on history_octane.company_admin_event_entity_type (data_source_updated_datetime);

create index idx_company_admin_event_entity_type__etl_batch_id
    on history_octane.company_admin_event_entity_type (etl_batch_id);

grant select on history_octane.company_admin_event_entity_type to readonly;

grant insert, select, update on history_octane.company_admin_event_entity_type to etl_loan;

create table history_octane.company_admin_event
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    cae_pid bigint not null,
    cae_version integer,
    cae_account_pid bigint,
    cae_company_admin_event_entity_type varchar(128),
    cae_message varchar(256),
    cae_diff_list text,
    cae_unparsed_name varchar(128),
    cae_event_date date,
    cae_event_datetime timestamp,
    cae_target_entity_pid bigint,
    etl_batch_id text
);

alter table history_octane.company_admin_event owner to deployer;

create index idx_company_admin_event__data_source_deleted_flag
    on history_octane.company_admin_event (data_source_deleted_flag);

create index idx_company_admin_event__data_source_updated_datetime
    on history_octane.company_admin_event (data_source_updated_datetime);

create index idx_company_admin_event__pid
    on history_octane.company_admin_event (cae_pid);

create index idx_company_admin_event__pid_version
    on history_octane.company_admin_event (cae_pid, cae_version);

create index idx_company_admin_event__etl_batch_id
    on history_octane.company_admin_event (etl_batch_id);

grant select on history_octane.company_admin_event to readonly;

grant insert, select, update on history_octane.company_admin_event to etl_loan;

create table history_octane.company_state_license_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.company_state_license_type owner to deployer;

create index idx_company_state_license_type__data_source_deleted_flag
    on history_octane.company_state_license_type (data_source_deleted_flag);

create index idx_company_state_license_type__data_source_updated_datetime
    on history_octane.company_state_license_type (data_source_updated_datetime);

create index idx_company_state_license_type__etl_batch_id
    on history_octane.company_state_license_type (etl_batch_id);

grant select on history_octane.company_state_license_type to readonly;

grant insert, select, update on history_octane.company_state_license_type to etl_loan;

create table history_octane.config_export_permission_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.config_export_permission_type owner to deployer;

create index idx_config_export_permission_type__data_source_deleted_flag
    on history_octane.config_export_permission_type (data_source_deleted_flag);

create index idx_config_export_permission_type__data_source_updated_datetime
    on history_octane.config_export_permission_type (data_source_updated_datetime);

create index idx_config_export_permission_type__etl_batch_id
    on history_octane.config_export_permission_type (etl_batch_id);

grant select on history_octane.config_export_permission_type to readonly;

grant insert, select, update on history_octane.config_export_permission_type to etl_loan;

create table history_octane.construction_cost_category_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.construction_cost_category_type owner to deployer;

create index idx_construction_cost_category_type__data_source_deleted_flag
    on history_octane.construction_cost_category_type (data_source_deleted_flag);

create index idx_d45b5ecb30a641bdb07b273ec60c9ef2
    on history_octane.construction_cost_category_type (data_source_updated_datetime);

create index idx_construction_cost_category_type__etl_batch_id
    on history_octane.construction_cost_category_type (etl_batch_id);

grant select on history_octane.construction_cost_category_type to readonly;

grant insert, select, update on history_octane.construction_cost_category_type to etl_loan;

create table history_octane.construction_cost_funding_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.construction_cost_funding_type owner to deployer;

create index idx_construction_cost_funding_type__data_source_deleted_flag
    on history_octane.construction_cost_funding_type (data_source_deleted_flag);

create index idx_04fa93434c5902fd32ddad731ddc32a8
    on history_octane.construction_cost_funding_type (data_source_updated_datetime);

create index idx_construction_cost_funding_type__etl_batch_id
    on history_octane.construction_cost_funding_type (etl_batch_id);

grant select on history_octane.construction_cost_funding_type to readonly;

grant insert, select, update on history_octane.construction_cost_funding_type to etl_loan;

create table history_octane.construction_cost_payee_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.construction_cost_payee_type owner to deployer;

create index idx_construction_cost_payee_type__data_source_deleted_flag
    on history_octane.construction_cost_payee_type (data_source_deleted_flag);

create index idx_construction_cost_payee_type__data_source_updated_datetime
    on history_octane.construction_cost_payee_type (data_source_updated_datetime);

create index idx_construction_cost_payee_type__etl_batch_id
    on history_octane.construction_cost_payee_type (etl_batch_id);

grant select on history_octane.construction_cost_payee_type to readonly;

grant insert, select, update on history_octane.construction_cost_payee_type to etl_loan;

create table history_octane.construction_cost_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.construction_cost_status_type owner to deployer;

create index idx_construction_cost_status_type__data_source_deleted_flag
    on history_octane.construction_cost_status_type (data_source_deleted_flag);

create index idx_construction_cost_status_type__data_source_updated_datetime
    on history_octane.construction_cost_status_type (data_source_updated_datetime);

create index idx_construction_cost_status_type__etl_batch_id
    on history_octane.construction_cost_status_type (etl_batch_id);

grant select on history_octane.construction_cost_status_type to readonly;

grant insert, select, update on history_octane.construction_cost_status_type to etl_loan;

create table history_octane.construction_draw_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.construction_draw_status_type owner to deployer;

create index idx_construction_draw_status_type__data_source_deleted_flag
    on history_octane.construction_draw_status_type (data_source_deleted_flag);

create index idx_construction_draw_status_type__data_source_updated_datetime
    on history_octane.construction_draw_status_type (data_source_updated_datetime);

create index idx_construction_draw_status_type__etl_batch_id
    on history_octane.construction_draw_status_type (etl_batch_id);

grant select on history_octane.construction_draw_status_type to readonly;

grant insert, select, update on history_octane.construction_draw_status_type to etl_loan;

create table history_octane.construction_draw_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.construction_draw_type owner to deployer;

create index idx_construction_draw_type__data_source_deleted_flag
    on history_octane.construction_draw_type (data_source_deleted_flag);

create index idx_construction_draw_type__data_source_updated_datetime
    on history_octane.construction_draw_type (data_source_updated_datetime);

create index idx_construction_draw_type__etl_batch_id
    on history_octane.construction_draw_type (etl_batch_id);

grant select on history_octane.construction_draw_type to readonly;

grant insert, select, update on history_octane.construction_draw_type to etl_loan;

create table history_octane.construction_lot_ownership_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.construction_lot_ownership_status_type owner to deployer;

create index idx_1857202eb32daff0d6a880f5bcc27e58
    on history_octane.construction_lot_ownership_status_type (data_source_deleted_flag);

create index idx_d0490336eb448a3be8291c6b7acc562a
    on history_octane.construction_lot_ownership_status_type (data_source_updated_datetime);

create index idx_construction_lot_ownership_status_type__etl_batch_id
    on history_octane.construction_lot_ownership_status_type (etl_batch_id);

grant select on history_octane.construction_lot_ownership_status_type to readonly;

grant insert, select, update on history_octane.construction_lot_ownership_status_type to etl_loan;

create table history_octane.consumer_privacy_request_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.consumer_privacy_request_type owner to deployer;

create index idx_consumer_privacy_request_type__data_source_deleted_flag
    on history_octane.consumer_privacy_request_type (data_source_deleted_flag);

create index idx_consumer_privacy_request_type__data_source_updated_datetime
    on history_octane.consumer_privacy_request_type (data_source_updated_datetime);

create index idx_consumer_privacy_request_type__etl_batch_id
    on history_octane.consumer_privacy_request_type (etl_batch_id);

grant select on history_octane.consumer_privacy_request_type to readonly;

grant insert, select, update on history_octane.consumer_privacy_request_type to etl_loan;

create table history_octane.cost_center
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    cosc_pid bigint not null,
    cosc_version integer,
    cosc_account_pid bigint,
    cosc_amb_code varchar(16),
    cosc_name varchar(128),
    cosc_comments varchar(1024),
    cosc_active boolean,
    etl_batch_id text
);

alter table history_octane.cost_center owner to deployer;

create index idx_cost_center__data_source_deleted_flag
    on history_octane.cost_center (data_source_deleted_flag);

create index idx_cost_center__data_source_updated_datetime
    on history_octane.cost_center (data_source_updated_datetime);

create index idx_cost_center__pid
    on history_octane.cost_center (cosc_pid);

create index idx_cost_center__pid_version
    on history_octane.cost_center (cosc_pid, cosc_version);

create index idx_cost_center__etl_batch_id
    on history_octane.cost_center (etl_batch_id);

grant select on history_octane.cost_center to readonly;

grant insert, select, update on history_octane.cost_center to etl_loan;

create table history_octane.country_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.country_type owner to deployer;

create index idx_country_type__data_source_deleted_flag
    on history_octane.country_type (data_source_deleted_flag);

create index idx_country_type__data_source_updated_datetime
    on history_octane.country_type (data_source_updated_datetime);

create index idx_country_type__etl_batch_id
    on history_octane.country_type (etl_batch_id);

grant select on history_octane.country_type to readonly;

grant insert, select, update on history_octane.country_type to etl_loan;

create table history_octane.account_contact
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ac_pid bigint not null,
    ac_version integer,
    ac_account_pid bigint,
    ac_unparsed_name varchar(128),
    ac_note varchar(256),
    ac_search_text varchar(256),
    ac_tags varchar(256),
    ac_first_name varchar(32),
    ac_middle_name varchar(32),
    ac_last_name varchar(32),
    ac_name_suffix varchar(32),
    ac_company_name varchar(128),
    ac_title varchar(128),
    ac_office_phone varchar(32),
    ac_office_phone_extension varchar(16),
    ac_mobile_phone varchar(32),
    ac_email varchar(256),
    ac_fax varchar(32),
    ac_address_street1 varchar(128),
    ac_address_street2 varchar(128),
    ac_address_city varchar(128),
    ac_address_state varchar(128),
    ac_address_postal_code varchar(128),
    ac_address_country varchar(128),
    ac_home_phone varchar(32),
    ac_closing_document_email varchar(256),
    ac_license_number varchar(128),
    ac_supervisory_license_number varchar(128),
    ac_license_state varchar(128),
    etl_batch_id text
);

alter table history_octane.account_contact owner to deployer;

create index idx_account_contact__data_source_deleted_flag
    on history_octane.account_contact (data_source_deleted_flag);

create index idx_account_contact__data_source_updated_datetime
    on history_octane.account_contact (data_source_updated_datetime);

create index idx_account_contact__pid
    on history_octane.account_contact (ac_pid);

create index idx_account_contact__pid_version
    on history_octane.account_contact (ac_pid, ac_version);

create index idx_account_contact__etl_batch_id
    on history_octane.account_contact (etl_batch_id);

grant select on history_octane.account_contact to readonly;

grant insert, select, update on history_octane.account_contact to etl_loan;

create table history_octane.courier_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.courier_type owner to deployer;

create index idx_courier_type__data_source_deleted_flag
    on history_octane.courier_type (data_source_deleted_flag);

create index idx_courier_type__data_source_updated_datetime
    on history_octane.courier_type (data_source_updated_datetime);

create index idx_courier_type__etl_batch_id
    on history_octane.courier_type (etl_batch_id);

grant select on history_octane.courier_type to readonly;

grant insert, select, update on history_octane.courier_type to etl_loan;

create table history_octane.credit_authorization_method_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.credit_authorization_method_type owner to deployer;

create index idx_credit_authorization_method_type__data_source_deleted_flag
    on history_octane.credit_authorization_method_type (data_source_deleted_flag);

create index idx_df9464b430ef1b41bd9d58ea426267b7
    on history_octane.credit_authorization_method_type (data_source_updated_datetime);

create index idx_credit_authorization_method_type__etl_batch_id
    on history_octane.credit_authorization_method_type (etl_batch_id);

grant select on history_octane.credit_authorization_method_type to readonly;

grant insert, select, update on history_octane.credit_authorization_method_type to etl_loan;

create table history_octane.credit_bureau_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.credit_bureau_type owner to deployer;

create index idx_credit_bureau_type__data_source_deleted_flag
    on history_octane.credit_bureau_type (data_source_deleted_flag);

create index idx_credit_bureau_type__data_source_updated_datetime
    on history_octane.credit_bureau_type (data_source_updated_datetime);

create index idx_credit_bureau_type__etl_batch_id
    on history_octane.credit_bureau_type (etl_batch_id);

grant select on history_octane.credit_bureau_type to readonly;

grant insert, select, update on history_octane.credit_bureau_type to etl_loan;

create table history_octane.credit_business_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.credit_business_type owner to deployer;

create index idx_credit_business_type__data_source_deleted_flag
    on history_octane.credit_business_type (data_source_deleted_flag);

create index idx_credit_business_type__data_source_updated_datetime
    on history_octane.credit_business_type (data_source_updated_datetime);

create index idx_credit_business_type__etl_batch_id
    on history_octane.credit_business_type (etl_batch_id);

grant select on history_octane.credit_business_type to readonly;

grant insert, select, update on history_octane.credit_business_type to etl_loan;

create table history_octane.credit_inquiry_explanation_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.credit_inquiry_explanation_type owner to deployer;

create index idx_credit_inquiry_explanation_type__data_source_deleted_flag
    on history_octane.credit_inquiry_explanation_type (data_source_deleted_flag);

create index idx_495a6c1b9145f50d6466478038f8a0f0
    on history_octane.credit_inquiry_explanation_type (data_source_updated_datetime);

create index idx_credit_inquiry_explanation_type__etl_batch_id
    on history_octane.credit_inquiry_explanation_type (etl_batch_id);

grant select on history_octane.credit_inquiry_explanation_type to readonly;

grant insert, select, update on history_octane.credit_inquiry_explanation_type to etl_loan;

create table history_octane.credit_inquiry_result_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.credit_inquiry_result_type owner to deployer;

create index idx_credit_inquiry_result_type__data_source_deleted_flag
    on history_octane.credit_inquiry_result_type (data_source_deleted_flag);

create index idx_credit_inquiry_result_type__data_source_updated_datetime
    on history_octane.credit_inquiry_result_type (data_source_updated_datetime);

create index idx_credit_inquiry_result_type__etl_batch_id
    on history_octane.credit_inquiry_result_type (etl_batch_id);

grant select on history_octane.credit_inquiry_result_type to readonly;

grant insert, select, update on history_octane.credit_inquiry_result_type to etl_loan;

create table history_octane.credit_limit_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.credit_limit_type owner to deployer;

create index idx_credit_limit_type__data_source_deleted_flag
    on history_octane.credit_limit_type (data_source_deleted_flag);

create index idx_credit_limit_type__data_source_updated_datetime
    on history_octane.credit_limit_type (data_source_updated_datetime);

create index idx_credit_limit_type__etl_batch_id
    on history_octane.credit_limit_type (etl_batch_id);

grant select on history_octane.credit_limit_type to readonly;

grant insert, select, update on history_octane.credit_limit_type to etl_loan;

create table history_octane.credit_loan_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.credit_loan_type owner to deployer;

create index idx_credit_loan_type__data_source_deleted_flag
    on history_octane.credit_loan_type (data_source_deleted_flag);

create index idx_credit_loan_type__data_source_updated_datetime
    on history_octane.credit_loan_type (data_source_updated_datetime);

create index idx_credit_loan_type__etl_batch_id
    on history_octane.credit_loan_type (etl_batch_id);

grant select on history_octane.credit_loan_type to readonly;

grant insert, select, update on history_octane.credit_loan_type to etl_loan;

create table history_octane.credit_report_request_action_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.credit_report_request_action_type owner to deployer;

create index idx_credit_report_request_action_type__data_source_deleted_flag
    on history_octane.credit_report_request_action_type (data_source_deleted_flag);

create index idx_4bdbac27fd0634ca1a1d3090d31d7a66
    on history_octane.credit_report_request_action_type (data_source_updated_datetime);

create index idx_credit_report_request_action_type__etl_batch_id
    on history_octane.credit_report_request_action_type (etl_batch_id);

grant select on history_octane.credit_report_request_action_type to readonly;

grant insert, select, update on history_octane.credit_report_request_action_type to etl_loan;

create table history_octane.credit_report_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.credit_report_type owner to deployer;

create index idx_credit_report_type__data_source_deleted_flag
    on history_octane.credit_report_type (data_source_deleted_flag);

create index idx_credit_report_type__data_source_updated_datetime
    on history_octane.credit_report_type (data_source_updated_datetime);

create index idx_credit_report_type__etl_batch_id
    on history_octane.credit_report_type (etl_batch_id);

grant select on history_octane.credit_report_type to readonly;

grant insert, select, update on history_octane.credit_report_type to etl_loan;

create table history_octane.credit_request_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.credit_request_status_type owner to deployer;

create index idx_credit_request_status_type__data_source_deleted_flag
    on history_octane.credit_request_status_type (data_source_deleted_flag);

create index idx_credit_request_status_type__data_source_updated_datetime
    on history_octane.credit_request_status_type (data_source_updated_datetime);

create index idx_credit_request_status_type__etl_batch_id
    on history_octane.credit_request_status_type (etl_batch_id);

grant select on history_octane.credit_request_status_type to readonly;

grant insert, select, update on history_octane.credit_request_status_type to etl_loan;

create table history_octane.credit_request_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.credit_request_type owner to deployer;

create index idx_credit_request_type__data_source_deleted_flag
    on history_octane.credit_request_type (data_source_deleted_flag);

create index idx_credit_request_type__data_source_updated_datetime
    on history_octane.credit_request_type (data_source_updated_datetime);

create index idx_credit_request_type__etl_batch_id
    on history_octane.credit_request_type (etl_batch_id);

grant select on history_octane.credit_request_type to readonly;

grant insert, select, update on history_octane.credit_request_type to etl_loan;

create table history_octane.credit_request_via_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.credit_request_via_type owner to deployer;

create index idx_credit_request_via_type__data_source_deleted_flag
    on history_octane.credit_request_via_type (data_source_deleted_flag);

create index idx_credit_request_via_type__data_source_updated_datetime
    on history_octane.credit_request_via_type (data_source_updated_datetime);

create index idx_credit_request_via_type__etl_batch_id
    on history_octane.credit_request_via_type (etl_batch_id);

grant select on history_octane.credit_request_via_type to readonly;

grant insert, select, update on history_octane.credit_request_via_type to etl_loan;

create table history_octane.credit_score_model_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.credit_score_model_type owner to deployer;

create index idx_credit_score_model_type__data_source_deleted_flag
    on history_octane.credit_score_model_type (data_source_deleted_flag);

create index idx_credit_score_model_type__data_source_updated_datetime
    on history_octane.credit_score_model_type (data_source_updated_datetime);

create index idx_credit_score_model_type__etl_batch_id
    on history_octane.credit_score_model_type (etl_batch_id);

grant select on history_octane.credit_score_model_type to readonly;

grant insert, select, update on history_octane.credit_score_model_type to etl_loan;

create table history_octane.criteria
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    cr_pid bigint not null,
    cr_version integer,
    cr_account_pid bigint,
    cr_criteria_source varchar(16000),
    cr_criteria_sql varchar(16000),
    cr_criteria_owner_instance_name varchar(2048),
    cr_criteria_source_html text,
    cr_criteria_source_pretty_text text,
    etl_batch_id text
);

alter table history_octane.criteria owner to deployer;

create index idx_criteria__data_source_deleted_flag
    on history_octane.criteria (data_source_deleted_flag);

create index idx_criteria__data_source_updated_datetime
    on history_octane.criteria (data_source_updated_datetime);

create index idx_criteria__pid
    on history_octane.criteria (cr_pid);

create index idx_criteria__pid_version
    on history_octane.criteria (cr_pid, cr_version);

create index idx_criteria__etl_batch_id
    on history_octane.criteria (etl_batch_id);

grant select on history_octane.criteria to readonly;

grant insert, select, update on history_octane.criteria to etl_loan;

create table history_octane.criteria_owner_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.criteria_owner_type owner to deployer;

create index idx_criteria_owner_type__data_source_deleted_flag
    on history_octane.criteria_owner_type (data_source_deleted_flag);

create index idx_criteria_owner_type__data_source_updated_datetime
    on history_octane.criteria_owner_type (data_source_updated_datetime);

create index idx_criteria_owner_type__etl_batch_id
    on history_octane.criteria_owner_type (etl_batch_id);

grant select on history_octane.criteria_owner_type to readonly;

grant insert, select, update on history_octane.criteria_owner_type to etl_loan;

create table history_octane.criteria_pid_operand_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.criteria_pid_operand_type owner to deployer;

create index idx_criteria_pid_operand_type__data_source_deleted_flag
    on history_octane.criteria_pid_operand_type (data_source_deleted_flag);

create index idx_criteria_pid_operand_type__data_source_updated_datetime
    on history_octane.criteria_pid_operand_type (data_source_updated_datetime);

create index idx_criteria_pid_operand_type__etl_batch_id
    on history_octane.criteria_pid_operand_type (etl_batch_id);

grant select on history_octane.criteria_pid_operand_type to readonly;

grant insert, select, update on history_octane.criteria_pid_operand_type to etl_loan;

create table history_octane.custodian
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    cu_pid bigint not null,
    cu_version integer,
    cu_account_pid bigint,
    cu_custodian_id varchar(32),
    cu_custodian_name varchar(128),
    cu_address_street1 varchar(128),
    cu_address_street2 varchar(128),
    cu_address_city varchar(128),
    cu_address_state varchar(128),
    cu_address_postal_code varchar(128),
    cu_address_country varchar(128),
    cu_custodian_phone varchar(32),
    cu_custodian_mers_org_id varchar(7),
    cu_whole_loan_fin varchar(11),
    cu_mbs_loan_fin varchar(11),
    cu_register_with_mers boolean,
    etl_batch_id text
);

alter table history_octane.custodian owner to deployer;

create index idx_custodian__data_source_deleted_flag
    on history_octane.custodian (data_source_deleted_flag);

create index idx_custodian__data_source_updated_datetime
    on history_octane.custodian (data_source_updated_datetime);

create index idx_custodian__pid
    on history_octane.custodian (cu_pid);

create index idx_custodian__pid_version
    on history_octane.custodian (cu_pid, cu_version);

create index idx_custodian__etl_batch_id
    on history_octane.custodian (etl_batch_id);

grant select on history_octane.custodian to readonly;

grant insert, select, update on history_octane.custodian to etl_loan;

create table history_octane.days_per_year_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.days_per_year_type owner to deployer;

create index idx_days_per_year_type__data_source_deleted_flag
    on history_octane.days_per_year_type (data_source_deleted_flag);

create index idx_days_per_year_type__data_source_updated_datetime
    on history_octane.days_per_year_type (data_source_updated_datetime);

create index idx_days_per_year_type__etl_batch_id
    on history_octane.days_per_year_type (etl_batch_id);

grant select on history_octane.days_per_year_type to readonly;

grant insert, select, update on history_octane.days_per_year_type to etl_loan;

create table history_octane.deal_cancel_reason_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.deal_cancel_reason_type owner to deployer;

create index idx_deal_cancel_reason_type__data_source_deleted_flag
    on history_octane.deal_cancel_reason_type (data_source_deleted_flag);

create index idx_deal_cancel_reason_type__data_source_updated_datetime
    on history_octane.deal_cancel_reason_type (data_source_updated_datetime);

create index idx_deal_cancel_reason_type__etl_batch_id
    on history_octane.deal_cancel_reason_type (etl_batch_id);

grant select on history_octane.deal_cancel_reason_type to readonly;

grant insert, select, update on history_octane.deal_cancel_reason_type to etl_loan;

create table history_octane.deal_change_updater_time
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dcut_pid bigint not null,
    dcut_version integer,
    dcut_account_pid bigint,
    dcut_los_loan_id_main bigint,
    dcut_start_time timestamp,
    dcut_start_date date,
    dcut_overall_duration_ms bigint,
    dcut_deal_checks_ms bigint,
    dcut_deal_updates_ms bigint,
    dcut_proposal_updates_ms bigint,
    dcut_num_proposal_updates integer,
    dcut_application_updates_ms bigint,
    dcut_num_application_updates integer,
    dcut_borrower_updates_ms bigint,
    dcut_num_borrower_updates integer,
    dcut_place_updates_ms bigint,
    dcut_num_place_updates integer,
    dcut_loan_updates_ms bigint,
    dcut_num_loan_updates integer,
    dcut_proposal_updates_after_loan_updates_ms bigint,
    dcut_updates_after_proposal_updates_ms bigint,
    dcut_proposal_summary_updates_ms bigint,
    dcut_deal_updates_after_all_proposal_updates_ms bigint,
    dcut_smart_charge_update_ms bigint,
    dcut_circumstance_change_updates_ms bigint,
    dcut_num_circumstance_change_updates integer,
    dcut_tolerance_cure_update_ms bigint,
    dcut_proposal_summary_updates_after_smart_charge_updates_ms bigint,
    dcut_update_doc_sets_ms bigint,
    dcut_closing_funds_itemization_ms bigint,
    dcut_update_ribbon_for_deal_ms bigint,
    dcut_num_construction_draw_updates integer,
    dcut_construction_draw_updates_ms bigint,
    etl_batch_id text
);

alter table history_octane.deal_change_updater_time owner to deployer;

create index idx_deal_change_updater_time__data_source_deleted_flag
    on history_octane.deal_change_updater_time (data_source_deleted_flag);

create index idx_deal_change_updater_time__data_source_updated_datetime
    on history_octane.deal_change_updater_time (data_source_updated_datetime);

create index idx_deal_change_updater_time__pid
    on history_octane.deal_change_updater_time (dcut_pid);

create index idx_deal_change_updater_time__pid_version
    on history_octane.deal_change_updater_time (dcut_pid, dcut_version);

create index idx_deal_change_updater_time__etl_batch_id
    on history_octane.deal_change_updater_time (etl_batch_id);

grant select on history_octane.deal_change_updater_time to readonly;

grant insert, select, update on history_octane.deal_change_updater_time to etl_loan;

create table history_octane.deal_check_severity_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.deal_check_severity_type owner to deployer;

create index idx_deal_check_severity_type__data_source_deleted_flag
    on history_octane.deal_check_severity_type (data_source_deleted_flag);

create index idx_deal_check_severity_type__data_source_updated_datetime
    on history_octane.deal_check_severity_type (data_source_updated_datetime);

create index idx_deal_check_severity_type__etl_batch_id
    on history_octane.deal_check_severity_type (etl_batch_id);

grant select on history_octane.deal_check_severity_type to readonly;

grant insert, select, update on history_octane.deal_check_severity_type to etl_loan;

create table history_octane.deal_check_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    dct_id_num integer,
    etl_batch_id text
);

alter table history_octane.deal_check_type owner to deployer;

create index idx_deal_check_type__data_source_deleted_flag
    on history_octane.deal_check_type (data_source_deleted_flag);

create index idx_deal_check_type__data_source_updated_datetime
    on history_octane.deal_check_type (data_source_updated_datetime);

create index idx_deal_check_type__etl_batch_id
    on history_octane.deal_check_type (etl_batch_id);

grant select on history_octane.deal_check_type to readonly;

grant insert, select, update on history_octane.deal_check_type to etl_loan;

create table history_octane.deal_child_relationship_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.deal_child_relationship_type owner to deployer;

create index idx_deal_child_relationship_type__data_source_deleted_flag
    on history_octane.deal_child_relationship_type (data_source_deleted_flag);

create index idx_deal_child_relationship_type__data_source_updated_datetime
    on history_octane.deal_child_relationship_type (data_source_updated_datetime);

create index idx_deal_child_relationship_type__etl_batch_id
    on history_octane.deal_child_relationship_type (etl_batch_id);

grant select on history_octane.deal_child_relationship_type to readonly;

grant insert, select, update on history_octane.deal_child_relationship_type to etl_loan;

create table history_octane.deal_child_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.deal_child_type owner to deployer;

create index idx_deal_child_type__data_source_deleted_flag
    on history_octane.deal_child_type (data_source_deleted_flag);

create index idx_deal_child_type__data_source_updated_datetime
    on history_octane.deal_child_type (data_source_updated_datetime);

create index idx_deal_child_type__etl_batch_id
    on history_octane.deal_child_type (etl_batch_id);

grant select on history_octane.deal_child_type to readonly;

grant insert, select, update on history_octane.deal_child_type to etl_loan;

create table history_octane.criteria_snippet
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    crs_pid bigint not null,
    crs_version integer,
    crs_account_pid bigint,
    crs_name varchar(35),
    crs_criteria_pid bigint,
    crs_description varchar(16000),
    crs_deal_child_type varchar(128),
    crs_compatible_with_smart_charge_case boolean,
    crs_compatible_with_smart_req boolean,
    crs_compatible_with_stack_separator boolean,
    crs_compatible_with_investor_eligibility boolean,
    crs_compatible_with_wf_smart_task boolean,
    crs_compatible_with_wf_outcome boolean,
    crs_compatible_with_wf_smart_process boolean,
    crs_compatible_with_smart_doc boolean,
    crs_compatible_with_smart_doc_validity_date_case boolean,
    crs_compatible_with_smart_charge_apr boolean,
    etl_batch_id text
);

alter table history_octane.criteria_snippet owner to deployer;

create index idx_criteria_snippet__data_source_deleted_flag
    on history_octane.criteria_snippet (data_source_deleted_flag);

create index idx_criteria_snippet__data_source_updated_datetime
    on history_octane.criteria_snippet (data_source_updated_datetime);

create index idx_criteria_snippet__pid
    on history_octane.criteria_snippet (crs_pid);

create index idx_criteria_snippet__pid_version
    on history_octane.criteria_snippet (crs_pid, crs_version);

create index idx_criteria_snippet__etl_batch_id
    on history_octane.criteria_snippet (etl_batch_id);

grant select on history_octane.criteria_snippet to readonly;

grant insert, select, update on history_octane.criteria_snippet to etl_loan;

create table history_octane.deal_contact_role_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.deal_contact_role_type owner to deployer;

create index idx_deal_contact_role_type__data_source_deleted_flag
    on history_octane.deal_contact_role_type (data_source_deleted_flag);

create index idx_deal_contact_role_type__data_source_updated_datetime
    on history_octane.deal_contact_role_type (data_source_updated_datetime);

create index idx_deal_contact_role_type__etl_batch_id
    on history_octane.deal_contact_role_type (etl_batch_id);

grant select on history_octane.deal_contact_role_type to readonly;

grant insert, select, update on history_octane.deal_contact_role_type to etl_loan;

create table history_octane.deal_context_permission_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.deal_context_permission_type owner to deployer;

create index idx_deal_context_permission_type__data_source_deleted_flag
    on history_octane.deal_context_permission_type (data_source_deleted_flag);

create index idx_deal_context_permission_type__data_source_updated_datetime
    on history_octane.deal_context_permission_type (data_source_updated_datetime);

create index idx_deal_context_permission_type__etl_batch_id
    on history_octane.deal_context_permission_type (etl_batch_id);

grant select on history_octane.deal_context_permission_type to readonly;

grant insert, select, update on history_octane.deal_context_permission_type to etl_loan;

create table history_octane.deal_create_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.deal_create_type owner to deployer;

create index idx_deal_create_type__data_source_deleted_flag
    on history_octane.deal_create_type (data_source_deleted_flag);

create index idx_deal_create_type__data_source_updated_datetime
    on history_octane.deal_create_type (data_source_updated_datetime);

create index idx_deal_create_type__etl_batch_id
    on history_octane.deal_create_type (etl_batch_id);

grant select on history_octane.deal_create_type to readonly;

grant insert, select, update on history_octane.deal_create_type to etl_loan;

create table history_octane.deal_event_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.deal_event_type owner to deployer;

create index idx_deal_event_type__data_source_deleted_flag
    on history_octane.deal_event_type (data_source_deleted_flag);

create index idx_deal_event_type__data_source_updated_datetime
    on history_octane.deal_event_type (data_source_updated_datetime);

create index idx_deal_event_type__etl_batch_id
    on history_octane.deal_event_type (etl_batch_id);

grant select on history_octane.deal_event_type to readonly;

grant insert, select, update on history_octane.deal_event_type to etl_loan;

create table history_octane.deal_id_sequence
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dis_id bigint not null,
    etl_batch_id text
);

alter table history_octane.deal_id_sequence owner to deployer;

create index idx_deal_id_sequence__data_source_deleted_flag
    on history_octane.deal_id_sequence (data_source_deleted_flag);

create index idx_deal_id_sequence__data_source_updated_datetime
    on history_octane.deal_id_sequence (data_source_updated_datetime);

create index idx_deal_id_sequence__etl_batch_id
    on history_octane.deal_id_sequence (etl_batch_id);

grant select on history_octane.deal_id_sequence to readonly;

grant insert, select, update on history_octane.deal_id_sequence to etl_loan;

create table history_octane.deal_invoice_file_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.deal_invoice_file_type owner to deployer;

create index idx_deal_invoice_file_type__data_source_deleted_flag
    on history_octane.deal_invoice_file_type (data_source_deleted_flag);

create index idx_deal_invoice_file_type__data_source_updated_datetime
    on history_octane.deal_invoice_file_type (data_source_updated_datetime);

create index idx_deal_invoice_file_type__etl_batch_id
    on history_octane.deal_invoice_file_type (etl_batch_id);

grant select on history_octane.deal_invoice_file_type to readonly;

grant insert, select, update on history_octane.deal_invoice_file_type to etl_loan;

create table history_octane.deal_invoice_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.deal_invoice_status_type owner to deployer;

create index idx_deal_invoice_status_type__data_source_deleted_flag
    on history_octane.deal_invoice_status_type (data_source_deleted_flag);

create index idx_deal_invoice_status_type__data_source_updated_datetime
    on history_octane.deal_invoice_status_type (data_source_updated_datetime);

create index idx_deal_invoice_status_type__etl_batch_id
    on history_octane.deal_invoice_status_type (etl_batch_id);

grant select on history_octane.deal_invoice_status_type to readonly;

grant insert, select, update on history_octane.deal_invoice_status_type to etl_loan;

create table history_octane.deal_note_scope_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.deal_note_scope_type owner to deployer;

create index idx_deal_note_scope_type__data_source_deleted_flag
    on history_octane.deal_note_scope_type (data_source_deleted_flag);

create index idx_deal_note_scope_type__data_source_updated_datetime
    on history_octane.deal_note_scope_type (data_source_updated_datetime);

create index idx_deal_note_scope_type__etl_batch_id
    on history_octane.deal_note_scope_type (etl_batch_id);

grant select on history_octane.deal_note_scope_type to readonly;

grant insert, select, update on history_octane.deal_note_scope_type to etl_loan;

create table history_octane.deal_orphan_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.deal_orphan_status_type owner to deployer;

create index idx_deal_orphan_status_type__data_source_deleted_flag
    on history_octane.deal_orphan_status_type (data_source_deleted_flag);

create index idx_deal_orphan_status_type__data_source_updated_datetime
    on history_octane.deal_orphan_status_type (data_source_updated_datetime);

create index idx_deal_orphan_status_type__etl_batch_id
    on history_octane.deal_orphan_status_type (etl_batch_id);

grant select on history_octane.deal_orphan_status_type to readonly;

grant insert, select, update on history_octane.deal_orphan_status_type to etl_loan;

create table history_octane.deal_stage_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.deal_stage_type owner to deployer;

create index idx_deal_stage_type__data_source_deleted_flag
    on history_octane.deal_stage_type (data_source_deleted_flag);

create index idx_deal_stage_type__data_source_updated_datetime
    on history_octane.deal_stage_type (data_source_updated_datetime);

create index idx_deal_stage_type__etl_batch_id
    on history_octane.deal_stage_type (etl_batch_id);

grant select on history_octane.deal_stage_type to readonly;

grant insert, select, update on history_octane.deal_stage_type to etl_loan;

create table history_octane.deal_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.deal_status_type owner to deployer;

create index idx_deal_status_type__data_source_deleted_flag
    on history_octane.deal_status_type (data_source_deleted_flag);

create index idx_deal_status_type__data_source_updated_datetime
    on history_octane.deal_status_type (data_source_updated_datetime);

create index idx_deal_status_type__etl_batch_id
    on history_octane.deal_status_type (etl_batch_id);

grant select on history_octane.deal_status_type to readonly;

grant insert, select, update on history_octane.deal_status_type to etl_loan;

create table history_octane.deal_tag_access_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.deal_tag_access_type owner to deployer;

create index idx_deal_tag_access_type__data_source_deleted_flag
    on history_octane.deal_tag_access_type (data_source_deleted_flag);

create index idx_deal_tag_access_type__data_source_updated_datetime
    on history_octane.deal_tag_access_type (data_source_updated_datetime);

create index idx_deal_tag_access_type__etl_batch_id
    on history_octane.deal_tag_access_type (etl_batch_id);

grant select on history_octane.deal_tag_access_type to readonly;

grant insert, select, update on history_octane.deal_tag_access_type to etl_loan;

create table history_octane.deal_tag_level_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.deal_tag_level_type owner to deployer;

create index idx_deal_tag_level_type__data_source_deleted_flag
    on history_octane.deal_tag_level_type (data_source_deleted_flag);

create index idx_deal_tag_level_type__data_source_updated_datetime
    on history_octane.deal_tag_level_type (data_source_updated_datetime);

create index idx_deal_tag_level_type__etl_batch_id
    on history_octane.deal_tag_level_type (etl_batch_id);

grant select on history_octane.deal_tag_level_type to readonly;

grant insert, select, update on history_octane.deal_tag_level_type to etl_loan;

create table history_octane.deal_tag_definition
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dtd_pid bigint not null,
    dtd_version integer,
    dtd_account_pid bigint,
    dtd_tag_name varchar(32),
    dtd_deal_tag_level_type varchar(128),
    dtd_deal_tag_access_type varchar(128),
    etl_batch_id text
);

alter table history_octane.deal_tag_definition owner to deployer;

create index idx_deal_tag_definition__data_source_deleted_flag
    on history_octane.deal_tag_definition (data_source_deleted_flag);

create index idx_deal_tag_definition__data_source_updated_datetime
    on history_octane.deal_tag_definition (data_source_updated_datetime);

create index idx_deal_tag_definition__pid
    on history_octane.deal_tag_definition (dtd_pid);

create index idx_deal_tag_definition__pid_version
    on history_octane.deal_tag_definition (dtd_pid, dtd_version);

create index idx_deal_tag_definition__etl_batch_id
    on history_octane.deal_tag_definition (etl_batch_id);

grant select on history_octane.deal_tag_definition to readonly;

grant insert, select, update on history_octane.deal_tag_definition to etl_loan;

create table history_octane.deal_task_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.deal_task_status_type owner to deployer;

create index idx_deal_task_status_type__data_source_deleted_flag
    on history_octane.deal_task_status_type (data_source_deleted_flag);

create index idx_deal_task_status_type__data_source_updated_datetime
    on history_octane.deal_task_status_type (data_source_updated_datetime);

create index idx_deal_task_status_type__etl_batch_id
    on history_octane.deal_task_status_type (etl_batch_id);

grant select on history_octane.deal_task_status_type to readonly;

grant insert, select, update on history_octane.deal_task_status_type to etl_loan;

create table history_octane.decision_credit_score_calc_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.decision_credit_score_calc_type owner to deployer;

create index idx_decision_credit_score_calc_type__data_source_deleted_flag
    on history_octane.decision_credit_score_calc_type (data_source_deleted_flag);

create index idx_51796213227f169842573f8f3202e8ff
    on history_octane.decision_credit_score_calc_type (data_source_updated_datetime);

create index idx_decision_credit_score_calc_type__etl_batch_id
    on history_octane.decision_credit_score_calc_type (etl_batch_id);

grant select on history_octane.decision_credit_score_calc_type to readonly;

grant insert, select, update on history_octane.decision_credit_score_calc_type to etl_loan;

create table history_octane.delivery_aus_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.delivery_aus_type owner to deployer;

create index idx_delivery_aus_type__data_source_deleted_flag
    on history_octane.delivery_aus_type (data_source_deleted_flag);

create index idx_delivery_aus_type__data_source_updated_datetime
    on history_octane.delivery_aus_type (data_source_updated_datetime);

create index idx_delivery_aus_type__etl_batch_id
    on history_octane.delivery_aus_type (etl_batch_id);

grant select on history_octane.delivery_aus_type to readonly;

grant insert, select, update on history_octane.delivery_aus_type to etl_loan;

create table history_octane.disaster_declaration_check_date_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.disaster_declaration_check_date_type owner to deployer;

create index idx_73b1c2c28d6a8587497cd5a3b7c89508
    on history_octane.disaster_declaration_check_date_type (data_source_deleted_flag);

create index idx_229dd865e1238d1f9d2762d6ac319360
    on history_octane.disaster_declaration_check_date_type (data_source_updated_datetime);

create index idx_disaster_declaration_check_date_type__etl_batch_id
    on history_octane.disaster_declaration_check_date_type (etl_batch_id);

grant select on history_octane.disaster_declaration_check_date_type to readonly;

grant insert, select, update on history_octane.disaster_declaration_check_date_type to etl_loan;

create table history_octane.doc_action_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.doc_action_type owner to deployer;

create index idx_doc_action_type__data_source_deleted_flag
    on history_octane.doc_action_type (data_source_deleted_flag);

create index idx_doc_action_type__data_source_updated_datetime
    on history_octane.doc_action_type (data_source_updated_datetime);

create index idx_doc_action_type__etl_batch_id
    on history_octane.doc_action_type (etl_batch_id);

grant select on history_octane.doc_action_type to readonly;

grant insert, select, update on history_octane.doc_action_type to etl_loan;

create table history_octane.doc_approval_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.doc_approval_type owner to deployer;

create index idx_doc_approval_type__data_source_deleted_flag
    on history_octane.doc_approval_type (data_source_deleted_flag);

create index idx_doc_approval_type__data_source_updated_datetime
    on history_octane.doc_approval_type (data_source_updated_datetime);

create index idx_doc_approval_type__etl_batch_id
    on history_octane.doc_approval_type (etl_batch_id);

grant select on history_octane.doc_approval_type to readonly;

grant insert, select, update on history_octane.doc_approval_type to etl_loan;

create table history_octane.doc_borrower_access_mode_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.doc_borrower_access_mode_type owner to deployer;

create index idx_doc_borrower_access_mode_type__data_source_deleted_flag
    on history_octane.doc_borrower_access_mode_type (data_source_deleted_flag);

create index idx_doc_borrower_access_mode_type__data_source_updated_datetime
    on history_octane.doc_borrower_access_mode_type (data_source_updated_datetime);

create index idx_doc_borrower_access_mode_type__etl_batch_id
    on history_octane.doc_borrower_access_mode_type (etl_batch_id);

grant select on history_octane.doc_borrower_access_mode_type to readonly;

grant insert, select, update on history_octane.doc_borrower_access_mode_type to etl_loan;

create table history_octane.doc_category_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.doc_category_type owner to deployer;

create index idx_doc_category_type__data_source_deleted_flag
    on history_octane.doc_category_type (data_source_deleted_flag);

create index idx_doc_category_type__data_source_updated_datetime
    on history_octane.doc_category_type (data_source_updated_datetime);

create index idx_doc_category_type__etl_batch_id
    on history_octane.doc_category_type (etl_batch_id);

grant select on history_octane.doc_category_type to readonly;

grant insert, select, update on history_octane.doc_category_type to etl_loan;

create table history_octane.doc_external_provider_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.doc_external_provider_type owner to deployer;

create index idx_doc_external_provider_type__data_source_deleted_flag
    on history_octane.doc_external_provider_type (data_source_deleted_flag);

create index idx_doc_external_provider_type__data_source_updated_datetime
    on history_octane.doc_external_provider_type (data_source_updated_datetime);

create index idx_doc_external_provider_type__etl_batch_id
    on history_octane.doc_external_provider_type (etl_batch_id);

grant select on history_octane.doc_external_provider_type to readonly;

grant insert, select, update on history_octane.doc_external_provider_type to etl_loan;

create table history_octane.doc_file_source_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.doc_file_source_type owner to deployer;

create index idx_doc_file_source_type__data_source_deleted_flag
    on history_octane.doc_file_source_type (data_source_deleted_flag);

create index idx_doc_file_source_type__data_source_updated_datetime
    on history_octane.doc_file_source_type (data_source_updated_datetime);

create index idx_doc_file_source_type__etl_batch_id
    on history_octane.doc_file_source_type (etl_batch_id);

grant select on history_octane.doc_file_source_type to readonly;

grant insert, select, update on history_octane.doc_file_source_type to etl_loan;

create table history_octane.doc_fulfill_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.doc_fulfill_status_type owner to deployer;

create index idx_doc_fulfill_status_type__data_source_deleted_flag
    on history_octane.doc_fulfill_status_type (data_source_deleted_flag);

create index idx_doc_fulfill_status_type__data_source_updated_datetime
    on history_octane.doc_fulfill_status_type (data_source_updated_datetime);

create index idx_doc_fulfill_status_type__etl_batch_id
    on history_octane.doc_fulfill_status_type (etl_batch_id);

grant select on history_octane.doc_fulfill_status_type to readonly;

grant insert, select, update on history_octane.doc_fulfill_status_type to etl_loan;

create table history_octane.doc_key_date_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.doc_key_date_type owner to deployer;

create index idx_doc_key_date_type__data_source_deleted_flag
    on history_octane.doc_key_date_type (data_source_deleted_flag);

create index idx_doc_key_date_type__data_source_updated_datetime
    on history_octane.doc_key_date_type (data_source_updated_datetime);

create index idx_doc_key_date_type__etl_batch_id
    on history_octane.doc_key_date_type (etl_batch_id);

grant select on history_octane.doc_key_date_type to readonly;

grant insert, select, update on history_octane.doc_key_date_type to etl_loan;

create table history_octane.doc_level_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.doc_level_type owner to deployer;

create index idx_doc_level_type__data_source_deleted_flag
    on history_octane.doc_level_type (data_source_deleted_flag);

create index idx_doc_level_type__data_source_updated_datetime
    on history_octane.doc_level_type (data_source_updated_datetime);

create index idx_doc_level_type__etl_batch_id
    on history_octane.doc_level_type (etl_batch_id);

grant select on history_octane.doc_level_type to readonly;

grant insert, select, update on history_octane.doc_level_type to etl_loan;

create table history_octane.doc_package_canceled_reason_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.doc_package_canceled_reason_type owner to deployer;

create index idx_doc_package_canceled_reason_type__data_source_deleted_flag
    on history_octane.doc_package_canceled_reason_type (data_source_deleted_flag);

create index idx_95d2508f3fe8a58ba3f56bc14b163694
    on history_octane.doc_package_canceled_reason_type (data_source_updated_datetime);

create index idx_doc_package_canceled_reason_type__etl_batch_id
    on history_octane.doc_package_canceled_reason_type (etl_batch_id);

grant select on history_octane.doc_package_canceled_reason_type to readonly;

grant insert, select, update on history_octane.doc_package_canceled_reason_type to etl_loan;

create table history_octane.doc_package_delivery_method_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.doc_package_delivery_method_type owner to deployer;

create index idx_doc_package_delivery_method_type__data_source_deleted_flag
    on history_octane.doc_package_delivery_method_type (data_source_deleted_flag);

create index idx_5741263e70b382e88e0567c505397cf9
    on history_octane.doc_package_delivery_method_type (data_source_updated_datetime);

create index idx_doc_package_delivery_method_type__etl_batch_id
    on history_octane.doc_package_delivery_method_type (etl_batch_id);

grant select on history_octane.doc_package_delivery_method_type to readonly;

grant insert, select, update on history_octane.doc_package_delivery_method_type to etl_loan;

create table history_octane.doc_package_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.doc_package_status_type owner to deployer;

create index idx_doc_package_status_type__data_source_deleted_flag
    on history_octane.doc_package_status_type (data_source_deleted_flag);

create index idx_doc_package_status_type__data_source_updated_datetime
    on history_octane.doc_package_status_type (data_source_updated_datetime);

create index idx_doc_package_status_type__etl_batch_id
    on history_octane.doc_package_status_type (etl_batch_id);

grant select on history_octane.doc_package_status_type to readonly;

grant insert, select, update on history_octane.doc_package_status_type to etl_loan;

create table history_octane.doc_permission_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.doc_permission_type owner to deployer;

create index idx_doc_permission_type__data_source_deleted_flag
    on history_octane.doc_permission_type (data_source_deleted_flag);

create index idx_doc_permission_type__data_source_updated_datetime
    on history_octane.doc_permission_type (data_source_updated_datetime);

create index idx_doc_permission_type__etl_batch_id
    on history_octane.doc_permission_type (etl_batch_id);

grant select on history_octane.doc_permission_type to readonly;

grant insert, select, update on history_octane.doc_permission_type to etl_loan;

create table history_octane.doc_set_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.doc_set_type owner to deployer;

create index idx_doc_set_type__data_source_deleted_flag
    on history_octane.doc_set_type (data_source_deleted_flag);

create index idx_doc_set_type__data_source_updated_datetime
    on history_octane.doc_set_type (data_source_updated_datetime);

create index idx_doc_set_type__etl_batch_id
    on history_octane.doc_set_type (etl_batch_id);

grant select on history_octane.doc_set_type to readonly;

grant insert, select, update on history_octane.doc_set_type to etl_loan;

create table history_octane.doc_validity_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.doc_validity_type owner to deployer;

create index idx_doc_validity_type__data_source_deleted_flag
    on history_octane.doc_validity_type (data_source_deleted_flag);

create index idx_doc_validity_type__data_source_updated_datetime
    on history_octane.doc_validity_type (data_source_updated_datetime);

create index idx_doc_validity_type__etl_batch_id
    on history_octane.doc_validity_type (etl_batch_id);

grant select on history_octane.doc_validity_type to readonly;

grant insert, select, update on history_octane.doc_validity_type to etl_loan;

create table history_octane.document_import_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.document_import_status_type owner to deployer;

create index idx_document_import_status_type__data_source_deleted_flag
    on history_octane.document_import_status_type (data_source_deleted_flag);

create index idx_document_import_status_type__data_source_updated_datetime
    on history_octane.document_import_status_type (data_source_updated_datetime);

create index idx_document_import_status_type__etl_batch_id
    on history_octane.document_import_status_type (etl_batch_id);

grant select on history_octane.document_import_status_type to readonly;

grant insert, select, update on history_octane.document_import_status_type to etl_loan;

create table history_octane.document_import_vendor_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.document_import_vendor_type owner to deployer;

create index idx_document_import_vendor_type__data_source_deleted_flag
    on history_octane.document_import_vendor_type (data_source_deleted_flag);

create index idx_document_import_vendor_type__data_source_updated_datetime
    on history_octane.document_import_vendor_type (data_source_updated_datetime);

create index idx_document_import_vendor_type__etl_batch_id
    on history_octane.document_import_vendor_type (etl_batch_id);

grant select on history_octane.document_import_vendor_type to readonly;

grant insert, select, update on history_octane.document_import_vendor_type to etl_loan;

create table history_octane.du_key_finding_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.du_key_finding_type owner to deployer;

create index idx_du_key_finding_type__data_source_deleted_flag
    on history_octane.du_key_finding_type (data_source_deleted_flag);

create index idx_du_key_finding_type__data_source_updated_datetime
    on history_octane.du_key_finding_type (data_source_updated_datetime);

create index idx_du_key_finding_type__etl_batch_id
    on history_octane.du_key_finding_type (etl_batch_id);

grant select on history_octane.du_key_finding_type to readonly;

grant insert, select, update on history_octane.du_key_finding_type to etl_loan;

create table history_octane.du_recommendation_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.du_recommendation_type owner to deployer;

create index idx_du_recommendation_type__data_source_deleted_flag
    on history_octane.du_recommendation_type (data_source_deleted_flag);

create index idx_du_recommendation_type__data_source_updated_datetime
    on history_octane.du_recommendation_type (data_source_updated_datetime);

create index idx_du_recommendation_type__etl_batch_id
    on history_octane.du_recommendation_type (etl_batch_id);

grant select on history_octane.du_recommendation_type to readonly;

grant insert, select, update on history_octane.du_recommendation_type to etl_loan;

create table history_octane.du_request_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.du_request_status_type owner to deployer;

create index idx_du_request_status_type__data_source_deleted_flag
    on history_octane.du_request_status_type (data_source_deleted_flag);

create index idx_du_request_status_type__data_source_updated_datetime
    on history_octane.du_request_status_type (data_source_updated_datetime);

create index idx_du_request_status_type__etl_batch_id
    on history_octane.du_request_status_type (etl_batch_id);

grant select on history_octane.du_request_status_type to readonly;

grant insert, select, update on history_octane.du_request_status_type to etl_loan;

create table history_octane.dw_export_request_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.dw_export_request_status_type owner to deployer;

create index idx_dw_export_request_status_type__data_source_deleted_flag
    on history_octane.dw_export_request_status_type (data_source_deleted_flag);

create index idx_dw_export_request_status_type__data_source_updated_datetime
    on history_octane.dw_export_request_status_type (data_source_updated_datetime);

create index idx_dw_export_request_status_type__etl_batch_id
    on history_octane.dw_export_request_status_type (etl_batch_id);

grant select on history_octane.dw_export_request_status_type to readonly;

grant insert, select, update on history_octane.dw_export_request_status_type to etl_loan;

create table history_octane.ecoa_denial_reason_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.ecoa_denial_reason_type owner to deployer;

create index idx_ecoa_denial_reason_type__data_source_deleted_flag
    on history_octane.ecoa_denial_reason_type (data_source_deleted_flag);

create index idx_ecoa_denial_reason_type__data_source_updated_datetime
    on history_octane.ecoa_denial_reason_type (data_source_updated_datetime);

create index idx_ecoa_denial_reason_type__etl_batch_id
    on history_octane.ecoa_denial_reason_type (etl_batch_id);

grant select on history_octane.ecoa_denial_reason_type to readonly;

grant insert, select, update on history_octane.ecoa_denial_reason_type to etl_loan;

create table history_octane.effective_property_value_explanation_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.effective_property_value_explanation_type owner to deployer;

create index idx_a952d4e859c12d39678323b2e0cb9e5c
    on history_octane.effective_property_value_explanation_type (data_source_deleted_flag);

create index idx_733f9a72f12c850d19a6b97a6b1607b0
    on history_octane.effective_property_value_explanation_type (data_source_updated_datetime);

create index idx_effective_property_value_explanation_type__etl_batch_id
    on history_octane.effective_property_value_explanation_type (etl_batch_id);

grant select on history_octane.effective_property_value_explanation_type to readonly;

grant insert, select, update on history_octane.effective_property_value_explanation_type to etl_loan;

create table history_octane.effective_property_value_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.effective_property_value_type owner to deployer;

create index idx_effective_property_value_type__data_source_deleted_flag
    on history_octane.effective_property_value_type (data_source_deleted_flag);

create index idx_effective_property_value_type__data_source_updated_datetime
    on history_octane.effective_property_value_type (data_source_updated_datetime);

create index idx_effective_property_value_type__etl_batch_id
    on history_octane.effective_property_value_type (etl_batch_id);

grant select on history_octane.effective_property_value_type to readonly;

grant insert, select, update on history_octane.effective_property_value_type to etl_loan;

create table history_octane.email_closing_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.email_closing_type owner to deployer;

create index idx_email_closing_type__data_source_deleted_flag
    on history_octane.email_closing_type (data_source_deleted_flag);

create index idx_email_closing_type__data_source_updated_datetime
    on history_octane.email_closing_type (data_source_updated_datetime);

create index idx_email_closing_type__etl_batch_id
    on history_octane.email_closing_type (etl_batch_id);

grant select on history_octane.email_closing_type to readonly;

grant insert, select, update on history_octane.email_closing_type to etl_loan;

create table history_octane.ernst_deed_request_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.ernst_deed_request_type owner to deployer;

create index idx_ernst_deed_request_type__data_source_deleted_flag
    on history_octane.ernst_deed_request_type (data_source_deleted_flag);

create index idx_ernst_deed_request_type__data_source_updated_datetime
    on history_octane.ernst_deed_request_type (data_source_updated_datetime);

create index idx_ernst_deed_request_type__etl_batch_id
    on history_octane.ernst_deed_request_type (etl_batch_id);

grant select on history_octane.ernst_deed_request_type to readonly;

grant insert, select, update on history_octane.ernst_deed_request_type to etl_loan;

create table history_octane.ernst_page_rec_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.ernst_page_rec_type owner to deployer;

create index idx_ernst_page_rec_type__data_source_deleted_flag
    on history_octane.ernst_page_rec_type (data_source_deleted_flag);

create index idx_ernst_page_rec_type__data_source_updated_datetime
    on history_octane.ernst_page_rec_type (data_source_updated_datetime);

create index idx_ernst_page_rec_type__etl_batch_id
    on history_octane.ernst_page_rec_type (etl_batch_id);

grant select on history_octane.ernst_page_rec_type to readonly;

grant insert, select, update on history_octane.ernst_page_rec_type to etl_loan;

create table history_octane.ernst_request_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.ernst_request_status_type owner to deployer;

create index idx_ernst_request_status_type__data_source_deleted_flag
    on history_octane.ernst_request_status_type (data_source_deleted_flag);

create index idx_ernst_request_status_type__data_source_updated_datetime
    on history_octane.ernst_request_status_type (data_source_updated_datetime);

create index idx_ernst_request_status_type__etl_batch_id
    on history_octane.ernst_request_status_type (etl_batch_id);

grant select on history_octane.ernst_request_status_type to readonly;

grant insert, select, update on history_octane.ernst_request_status_type to etl_loan;

create table history_octane.ernst_security_instrument_request_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.ernst_security_instrument_request_type owner to deployer;

create index idx_ffdba69d49b1d17e40080eb95abbe428
    on history_octane.ernst_security_instrument_request_type (data_source_deleted_flag);

create index idx_e49d8814b828a50f5bfc3364a809c0ca
    on history_octane.ernst_security_instrument_request_type (data_source_updated_datetime);

create index idx_ernst_security_instrument_request_type__etl_batch_id
    on history_octane.ernst_security_instrument_request_type (etl_batch_id);

grant select on history_octane.ernst_security_instrument_request_type to readonly;

grant insert, select, update on history_octane.ernst_security_instrument_request_type to etl_loan;

create table history_octane.esign_package_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.esign_package_status_type owner to deployer;

create index idx_esign_package_status_type__data_source_deleted_flag
    on history_octane.esign_package_status_type (data_source_deleted_flag);

create index idx_esign_package_status_type__data_source_updated_datetime
    on history_octane.esign_package_status_type (data_source_updated_datetime);

create index idx_esign_package_status_type__etl_batch_id
    on history_octane.esign_package_status_type (etl_batch_id);

grant select on history_octane.esign_package_status_type to readonly;

grant insert, select, update on history_octane.esign_package_status_type to etl_loan;

create table history_octane.esign_vendor_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.esign_vendor_type owner to deployer;

create index idx_esign_vendor_type__data_source_deleted_flag
    on history_octane.esign_vendor_type (data_source_deleted_flag);

create index idx_esign_vendor_type__data_source_updated_datetime
    on history_octane.esign_vendor_type (data_source_updated_datetime);

create index idx_esign_vendor_type__etl_batch_id
    on history_octane.esign_vendor_type (etl_batch_id);

grant select on history_octane.esign_vendor_type to readonly;

grant insert, select, update on history_octane.esign_vendor_type to etl_loan;

create table history_octane.export_permission_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.export_permission_type owner to deployer;

create index idx_export_permission_type__data_source_deleted_flag
    on history_octane.export_permission_type (data_source_deleted_flag);

create index idx_export_permission_type__data_source_updated_datetime
    on history_octane.export_permission_type (data_source_updated_datetime);

create index idx_export_permission_type__etl_batch_id
    on history_octane.export_permission_type (etl_batch_id);

grant select on history_octane.export_permission_type to readonly;

grant insert, select, update on history_octane.export_permission_type to etl_loan;

create table history_octane.export_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.export_type owner to deployer;

create index idx_export_type__data_source_deleted_flag
    on history_octane.export_type (data_source_deleted_flag);

create index idx_export_type__data_source_updated_datetime
    on history_octane.export_type (data_source_updated_datetime);

create index idx_export_type__etl_batch_id
    on history_octane.export_type (etl_batch_id);

grant select on history_octane.export_type to readonly;

grant insert, select, update on history_octane.export_type to etl_loan;

create table history_octane.external_entity_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.external_entity_type owner to deployer;

create index idx_external_entity_type__data_source_deleted_flag
    on history_octane.external_entity_type (data_source_deleted_flag);

create index idx_external_entity_type__data_source_updated_datetime
    on history_octane.external_entity_type (data_source_updated_datetime);

create index idx_external_entity_type__etl_batch_id
    on history_octane.external_entity_type (etl_batch_id);

grant select on history_octane.external_entity_type to readonly;

grant insert, select, update on history_octane.external_entity_type to etl_loan;

create table history_octane.fault_tolerant_event_registration
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    fter_message_id varchar(128) not null,
    fter_queue_name varchar(128),
    fter_event_type varchar(128),
    fter_create_datetime timestamp,
    fter_processed_datetime timestamp,
    etl_batch_id text
);

alter table history_octane.fault_tolerant_event_registration owner to deployer;

create index idx_fault_tolerant_event_registration__data_source_deleted_flag
    on history_octane.fault_tolerant_event_registration (data_source_deleted_flag);

create index idx_f27bd339acc2ed06e4ac7d5d6ac637d0
    on history_octane.fault_tolerant_event_registration (data_source_updated_datetime);

create index idx_fault_tolerant_event_registration__etl_batch_id
    on history_octane.fault_tolerant_event_registration (etl_batch_id);

grant select on history_octane.fault_tolerant_event_registration to readonly;

grant insert, select, update on history_octane.fault_tolerant_event_registration to etl_loan;

create table history_octane.fema_flood_zone_designation_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.fema_flood_zone_designation_type owner to deployer;

create index idx_fema_flood_zone_designation_type__data_source_deleted_flag
    on history_octane.fema_flood_zone_designation_type (data_source_deleted_flag);

create index idx_73b88a69bd3ff444813a1c910c43ee7f
    on history_octane.fema_flood_zone_designation_type (data_source_updated_datetime);

create index idx_fema_flood_zone_designation_type__etl_batch_id
    on history_octane.fema_flood_zone_designation_type (etl_batch_id);

grant select on history_octane.fema_flood_zone_designation_type to readonly;

grant insert, select, update on history_octane.fema_flood_zone_designation_type to etl_loan;

create table history_octane.fha_non_arms_length_ltv_limit_exception_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.fha_non_arms_length_ltv_limit_exception_type owner to deployer;

create index idx_33b26a53c4e2f47089378308705b2139
    on history_octane.fha_non_arms_length_ltv_limit_exception_type (data_source_deleted_flag);

create index idx_5a78b7866e49d1ed7b44a4094a3d64ab
    on history_octane.fha_non_arms_length_ltv_limit_exception_type (data_source_updated_datetime);

create index idx_fha_non_arms_length_ltv_limit_exception_type__etl_batch_id
    on history_octane.fha_non_arms_length_ltv_limit_exception_type (etl_batch_id);

grant select on history_octane.fha_non_arms_length_ltv_limit_exception_type to readonly;

grant insert, select, update on history_octane.fha_non_arms_length_ltv_limit_exception_type to etl_loan;

create table history_octane.fha_program_code_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.fha_program_code_type owner to deployer;

create index idx_fha_program_code_type__data_source_deleted_flag
    on history_octane.fha_program_code_type (data_source_deleted_flag);

create index idx_fha_program_code_type__data_source_updated_datetime
    on history_octane.fha_program_code_type (data_source_updated_datetime);

create index idx_fha_program_code_type__etl_batch_id
    on history_octane.fha_program_code_type (etl_batch_id);

grant select on history_octane.fha_program_code_type to readonly;

grant insert, select, update on history_octane.fha_program_code_type to etl_loan;

create table history_octane.fha_rehab_program_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.fha_rehab_program_type owner to deployer;

create index idx_fha_rehab_program_type__data_source_deleted_flag
    on history_octane.fha_rehab_program_type (data_source_deleted_flag);

create index idx_fha_rehab_program_type__data_source_updated_datetime
    on history_octane.fha_rehab_program_type (data_source_updated_datetime);

create index idx_fha_rehab_program_type__etl_batch_id
    on history_octane.fha_rehab_program_type (etl_batch_id);

grant select on history_octane.fha_rehab_program_type to readonly;

grant insert, select, update on history_octane.fha_rehab_program_type to etl_loan;

create table history_octane.fha_special_program_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.fha_special_program_type owner to deployer;

create index idx_fha_special_program_type__data_source_deleted_flag
    on history_octane.fha_special_program_type (data_source_deleted_flag);

create index idx_fha_special_program_type__data_source_updated_datetime
    on history_octane.fha_special_program_type (data_source_updated_datetime);

create index idx_fha_special_program_type__etl_batch_id
    on history_octane.fha_special_program_type (etl_batch_id);

grant select on history_octane.fha_special_program_type to readonly;

grant insert, select, update on history_octane.fha_special_program_type to etl_loan;

create table history_octane.fha_va_bor_cert_sales_price_exceeds_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.fha_va_bor_cert_sales_price_exceeds_type owner to deployer;

create index idx_d59ccb31fc6b7f09be63650acc255026
    on history_octane.fha_va_bor_cert_sales_price_exceeds_type (data_source_deleted_flag);

create index idx_18e56bad127ebcd833c09b3199ebd7f6
    on history_octane.fha_va_bor_cert_sales_price_exceeds_type (data_source_updated_datetime);

create index idx_fha_va_bor_cert_sales_price_exceeds_type__etl_batch_id
    on history_octane.fha_va_bor_cert_sales_price_exceeds_type (etl_batch_id);

grant select on history_octane.fha_va_bor_cert_sales_price_exceeds_type to readonly;

grant insert, select, update on history_octane.fha_va_bor_cert_sales_price_exceeds_type to etl_loan;

create table history_octane.field_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.field_type owner to deployer;

create index idx_field_type__data_source_deleted_flag
    on history_octane.field_type (data_source_deleted_flag);

create index idx_field_type__data_source_updated_datetime
    on history_octane.field_type (data_source_updated_datetime);

create index idx_field_type__etl_batch_id
    on history_octane.field_type (etl_batch_id);

grant select on history_octane.field_type to readonly;

grant insert, select, update on history_octane.field_type to etl_loan;

create table history_octane.flood_cert_vendor_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.flood_cert_vendor_type owner to deployer;

create index idx_flood_cert_vendor_type__data_source_deleted_flag
    on history_octane.flood_cert_vendor_type (data_source_deleted_flag);

create index idx_flood_cert_vendor_type__data_source_updated_datetime
    on history_octane.flood_cert_vendor_type (data_source_updated_datetime);

create index idx_flood_cert_vendor_type__etl_batch_id
    on history_octane.flood_cert_vendor_type (etl_batch_id);

grant select on history_octane.flood_cert_vendor_type to readonly;

grant insert, select, update on history_octane.flood_cert_vendor_type to etl_loan;

create table history_octane.flood_certificate_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.flood_certificate_type owner to deployer;

create index idx_flood_certificate_type__data_source_deleted_flag
    on history_octane.flood_certificate_type (data_source_deleted_flag);

create index idx_flood_certificate_type__data_source_updated_datetime
    on history_octane.flood_certificate_type (data_source_updated_datetime);

create index idx_flood_certificate_type__etl_batch_id
    on history_octane.flood_certificate_type (etl_batch_id);

grant select on history_octane.flood_certificate_type to readonly;

grant insert, select, update on history_octane.flood_certificate_type to etl_loan;

create table history_octane.fnm_arm_plan_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.fnm_arm_plan_type owner to deployer;

create index idx_fnm_arm_plan_type__data_source_deleted_flag
    on history_octane.fnm_arm_plan_type (data_source_deleted_flag);

create index idx_fnm_arm_plan_type__data_source_updated_datetime
    on history_octane.fnm_arm_plan_type (data_source_updated_datetime);

create index idx_fnm_arm_plan_type__etl_batch_id
    on history_octane.fnm_arm_plan_type (etl_batch_id);

grant select on history_octane.fnm_arm_plan_type to readonly;

grant insert, select, update on history_octane.fnm_arm_plan_type to etl_loan;

create table history_octane.fnm_community_lending_product_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.fnm_community_lending_product_type owner to deployer;

create index idx_1da5f1001322bbace6065847c50af3c5
    on history_octane.fnm_community_lending_product_type (data_source_deleted_flag);

create index idx_04a27259298d38e149af5926b944723e
    on history_octane.fnm_community_lending_product_type (data_source_updated_datetime);

create index idx_fnm_community_lending_product_type__etl_batch_id
    on history_octane.fnm_community_lending_product_type (etl_batch_id);

grant select on history_octane.fnm_community_lending_product_type to readonly;

grant insert, select, update on history_octane.fnm_community_lending_product_type to etl_loan;

create table history_octane.fnm_community_seconds_repayment_structure_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.fnm_community_seconds_repayment_structure_type owner to deployer;

create index idx_bda91c4279c1d40d1318c74fbf80ff48
    on history_octane.fnm_community_seconds_repayment_structure_type (data_source_deleted_flag);

create index idx_0bd7652dffe5f672f0e9d5aafa3f5d17
    on history_octane.fnm_community_seconds_repayment_structure_type (data_source_updated_datetime);

create index idx_b1752270aec35006da31b8ffd5a3d196
    on history_octane.fnm_community_seconds_repayment_structure_type (etl_batch_id);

grant select on history_octane.fnm_community_seconds_repayment_structure_type to readonly;

grant insert, select, update on history_octane.fnm_community_seconds_repayment_structure_type to etl_loan;

create table history_octane.fnm_investor_remittance_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.fnm_investor_remittance_type owner to deployer;

create index idx_fnm_investor_remittance_type__data_source_deleted_flag
    on history_octane.fnm_investor_remittance_type (data_source_deleted_flag);

create index idx_fnm_investor_remittance_type__data_source_updated_datetime
    on history_octane.fnm_investor_remittance_type (data_source_updated_datetime);

create index idx_fnm_investor_remittance_type__etl_batch_id
    on history_octane.fnm_investor_remittance_type (etl_batch_id);

grant select on history_octane.fnm_investor_remittance_type to readonly;

grant insert, select, update on history_octane.fnm_investor_remittance_type to etl_loan;

create table history_octane.fnm_mbs_loan_default_loss_party_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.fnm_mbs_loan_default_loss_party_type owner to deployer;

create index idx_3bc08aae0ec468011183bcb59f07e9fc
    on history_octane.fnm_mbs_loan_default_loss_party_type (data_source_deleted_flag);

create index idx_5da341d4a47d3f1c486bac7b7438256b
    on history_octane.fnm_mbs_loan_default_loss_party_type (data_source_updated_datetime);

create index idx_fnm_mbs_loan_default_loss_party_type__etl_batch_id
    on history_octane.fnm_mbs_loan_default_loss_party_type (etl_batch_id);

grant select on history_octane.fnm_mbs_loan_default_loss_party_type to readonly;

grant insert, select, update on history_octane.fnm_mbs_loan_default_loss_party_type to etl_loan;

create table history_octane.fnm_mbs_reo_marketing_party_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.fnm_mbs_reo_marketing_party_type owner to deployer;

create index idx_fnm_mbs_reo_marketing_party_type__data_source_deleted_flag
    on history_octane.fnm_mbs_reo_marketing_party_type (data_source_deleted_flag);

create index idx_30a136ae4538f0e5f880a1ebb461da99
    on history_octane.fnm_mbs_reo_marketing_party_type (data_source_updated_datetime);

create index idx_fnm_mbs_reo_marketing_party_type__etl_batch_id
    on history_octane.fnm_mbs_reo_marketing_party_type (etl_batch_id);

grant select on history_octane.fnm_mbs_reo_marketing_party_type to readonly;

grant insert, select, update on history_octane.fnm_mbs_reo_marketing_party_type to etl_loan;

create table history_octane.for_further_credit_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.for_further_credit_type owner to deployer;

create index idx_for_further_credit_type__data_source_deleted_flag
    on history_octane.for_further_credit_type (data_source_deleted_flag);

create index idx_for_further_credit_type__data_source_updated_datetime
    on history_octane.for_further_credit_type (data_source_updated_datetime);

create index idx_for_further_credit_type__etl_batch_id
    on history_octane.for_further_credit_type (etl_batch_id);

grant select on history_octane.for_further_credit_type to readonly;

grant insert, select, update on history_octane.for_further_credit_type to etl_loan;

create table history_octane.fre_community_program_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.fre_community_program_type owner to deployer;

create index idx_fre_community_program_type__data_source_deleted_flag
    on history_octane.fre_community_program_type (data_source_deleted_flag);

create index idx_fre_community_program_type__data_source_updated_datetime
    on history_octane.fre_community_program_type (data_source_updated_datetime);

create index idx_fre_community_program_type__etl_batch_id
    on history_octane.fre_community_program_type (etl_batch_id);

grant select on history_octane.fre_community_program_type to readonly;

grant insert, select, update on history_octane.fre_community_program_type to etl_loan;

create table history_octane.fre_ctp_closing_feature_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.fre_ctp_closing_feature_type owner to deployer;

create index idx_fre_ctp_closing_feature_type__data_source_deleted_flag
    on history_octane.fre_ctp_closing_feature_type (data_source_deleted_flag);

create index idx_fre_ctp_closing_feature_type__data_source_updated_datetime
    on history_octane.fre_ctp_closing_feature_type (data_source_updated_datetime);

create index idx_fre_ctp_closing_feature_type__etl_batch_id
    on history_octane.fre_ctp_closing_feature_type (etl_batch_id);

grant select on history_octane.fre_ctp_closing_feature_type to readonly;

grant insert, select, update on history_octane.fre_ctp_closing_feature_type to etl_loan;

create table history_octane.fre_ctp_closing_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.fre_ctp_closing_type owner to deployer;

create index idx_fre_ctp_closing_type__data_source_deleted_flag
    on history_octane.fre_ctp_closing_type (data_source_deleted_flag);

create index idx_fre_ctp_closing_type__data_source_updated_datetime
    on history_octane.fre_ctp_closing_type (data_source_updated_datetime);

create index idx_fre_ctp_closing_type__etl_batch_id
    on history_octane.fre_ctp_closing_type (etl_batch_id);

grant select on history_octane.fre_ctp_closing_type to readonly;

grant insert, select, update on history_octane.fre_ctp_closing_type to etl_loan;

create table history_octane.fre_doc_level_description_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.fre_doc_level_description_type owner to deployer;

create index idx_fre_doc_level_description_type__data_source_deleted_flag
    on history_octane.fre_doc_level_description_type (data_source_deleted_flag);

create index idx_f436865572e4a1f8ce7191d1538d8aaf
    on history_octane.fre_doc_level_description_type (data_source_updated_datetime);

create index idx_fre_doc_level_description_type__etl_batch_id
    on history_octane.fre_doc_level_description_type (etl_batch_id);

grant select on history_octane.fre_doc_level_description_type to readonly;

grant insert, select, update on history_octane.fre_doc_level_description_type to etl_loan;

create table history_octane.fre_purchase_eligibility_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.fre_purchase_eligibility_type owner to deployer;

create index idx_fre_purchase_eligibility_type__data_source_deleted_flag
    on history_octane.fre_purchase_eligibility_type (data_source_deleted_flag);

create index idx_fre_purchase_eligibility_type__data_source_updated_datetime
    on history_octane.fre_purchase_eligibility_type (data_source_updated_datetime);

create index idx_fre_purchase_eligibility_type__etl_batch_id
    on history_octane.fre_purchase_eligibility_type (etl_batch_id);

grant select on history_octane.fre_purchase_eligibility_type to readonly;

grant insert, select, update on history_octane.fre_purchase_eligibility_type to etl_loan;

create table history_octane.fund_source_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.fund_source_type owner to deployer;

create index idx_fund_source_type__data_source_deleted_flag
    on history_octane.fund_source_type (data_source_deleted_flag);

create index idx_fund_source_type__data_source_updated_datetime
    on history_octane.fund_source_type (data_source_updated_datetime);

create index idx_fund_source_type__etl_batch_id
    on history_octane.fund_source_type (etl_batch_id);

grant select on history_octane.fund_source_type to readonly;

grant insert, select, update on history_octane.fund_source_type to etl_loan;

create table history_octane.funding_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    fst_ordinal integer,
    etl_batch_id text
);

alter table history_octane.funding_status_type owner to deployer;

create index idx_funding_status_type__data_source_deleted_flag
    on history_octane.funding_status_type (data_source_deleted_flag);

create index idx_funding_status_type__data_source_updated_datetime
    on history_octane.funding_status_type (data_source_updated_datetime);

create index idx_funding_status_type__etl_batch_id
    on history_octane.funding_status_type (etl_batch_id);

grant select on history_octane.funding_status_type to readonly;

grant insert, select, update on history_octane.funding_status_type to etl_loan;

create table history_octane.gender_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.gender_type owner to deployer;

create index idx_gender_type__data_source_deleted_flag
    on history_octane.gender_type (data_source_deleted_flag);

create index idx_gender_type__data_source_updated_datetime
    on history_octane.gender_type (data_source_updated_datetime);

create index idx_gender_type__etl_batch_id
    on history_octane.gender_type (etl_batch_id);

grant select on history_octane.gender_type to readonly;

grant insert, select, update on history_octane.gender_type to etl_loan;

create table history_octane.gift_funds_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.gift_funds_type owner to deployer;

create index idx_gift_funds_type__data_source_deleted_flag
    on history_octane.gift_funds_type (data_source_deleted_flag);

create index idx_gift_funds_type__data_source_updated_datetime
    on history_octane.gift_funds_type (data_source_updated_datetime);

create index idx_gift_funds_type__etl_batch_id
    on history_octane.gift_funds_type (etl_batch_id);

grant select on history_octane.gift_funds_type to readonly;

grant insert, select, update on history_octane.gift_funds_type to etl_loan;

create table history_octane.account_grant_program
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    agp_pid bigint not null,
    agp_version integer,
    agp_account_pid bigint,
    agp_from_date date,
    agp_through_date date,
    agp_program_id varchar(32),
    agp_program_name varchar(128),
    agp_program_funds_type varchar(128),
    agp_donor_name varchar(128),
    agp_donor_phone varchar(32),
    agp_address_street1 varchar(128),
    agp_address_street2 varchar(128),
    agp_address_city varchar(128),
    agp_address_state varchar(128),
    agp_address_postal_code varchar(128),
    agp_address_country varchar(128),
    agp_ein varchar(10),
    agp_wire_action_type varchar(128),
    agp_notes varchar(1024),
    etl_batch_id text
);

alter table history_octane.account_grant_program owner to deployer;

create index idx_account_grant_program__data_source_deleted_flag
    on history_octane.account_grant_program (data_source_deleted_flag);

create index idx_account_grant_program__data_source_updated_datetime
    on history_octane.account_grant_program (data_source_updated_datetime);

create index idx_account_grant_program__pid
    on history_octane.account_grant_program (agp_pid);

create index idx_account_grant_program__pid_version
    on history_octane.account_grant_program (agp_pid, agp_version);

create index idx_account_grant_program__etl_batch_id
    on history_octane.account_grant_program (etl_batch_id);

grant select on history_octane.account_grant_program to readonly;

grant insert, select, update on history_octane.account_grant_program to etl_loan;

create table history_octane.gse_version_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.gse_version_type owner to deployer;

create index idx_gse_version_type__data_source_deleted_flag
    on history_octane.gse_version_type (data_source_deleted_flag);

create index idx_gse_version_type__data_source_updated_datetime
    on history_octane.gse_version_type (data_source_updated_datetime);

create index idx_gse_version_type__etl_batch_id
    on history_octane.gse_version_type (etl_batch_id);

grant select on history_octane.gse_version_type to readonly;

grant insert, select, update on history_octane.gse_version_type to etl_loan;

create table history_octane.heloc_cancel_fee_applicable_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.heloc_cancel_fee_applicable_type owner to deployer;

create index idx_heloc_cancel_fee_applicable_type__data_source_deleted_flag
    on history_octane.heloc_cancel_fee_applicable_type (data_source_deleted_flag);

create index idx_8813974b3f85418fc59610c3e5c50403
    on history_octane.heloc_cancel_fee_applicable_type (data_source_updated_datetime);

create index idx_heloc_cancel_fee_applicable_type__etl_batch_id
    on history_octane.heloc_cancel_fee_applicable_type (etl_batch_id);

grant select on history_octane.heloc_cancel_fee_applicable_type to readonly;

grant insert, select, update on history_octane.heloc_cancel_fee_applicable_type to etl_loan;

create table history_octane.hmda_action_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.hmda_action_type owner to deployer;

create index idx_hmda_action_type__data_source_deleted_flag
    on history_octane.hmda_action_type (data_source_deleted_flag);

create index idx_hmda_action_type__data_source_updated_datetime
    on history_octane.hmda_action_type (data_source_updated_datetime);

create index idx_hmda_action_type__etl_batch_id
    on history_octane.hmda_action_type (etl_batch_id);

grant select on history_octane.hmda_action_type to readonly;

grant insert, select, update on history_octane.hmda_action_type to etl_loan;

create table history_octane.hmda_agency_id_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.hmda_agency_id_type owner to deployer;

create index idx_hmda_agency_id_type__data_source_deleted_flag
    on history_octane.hmda_agency_id_type (data_source_deleted_flag);

create index idx_hmda_agency_id_type__data_source_updated_datetime
    on history_octane.hmda_agency_id_type (data_source_updated_datetime);

create index idx_hmda_agency_id_type__etl_batch_id
    on history_octane.hmda_agency_id_type (etl_batch_id);

grant select on history_octane.hmda_agency_id_type to readonly;

grant insert, select, update on history_octane.hmda_agency_id_type to etl_loan;

create table history_octane.hmda_denial_reason_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.hmda_denial_reason_type owner to deployer;

create index idx_hmda_denial_reason_type__data_source_deleted_flag
    on history_octane.hmda_denial_reason_type (data_source_deleted_flag);

create index idx_hmda_denial_reason_type__data_source_updated_datetime
    on history_octane.hmda_denial_reason_type (data_source_updated_datetime);

create index idx_hmda_denial_reason_type__etl_batch_id
    on history_octane.hmda_denial_reason_type (etl_batch_id);

grant select on history_octane.hmda_denial_reason_type to readonly;

grant insert, select, update on history_octane.hmda_denial_reason_type to etl_loan;

create table history_octane.hmda_ethnicity_2017_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.hmda_ethnicity_2017_type owner to deployer;

create index idx_hmda_ethnicity_2017_type__data_source_deleted_flag
    on history_octane.hmda_ethnicity_2017_type (data_source_deleted_flag);

create index idx_hmda_ethnicity_2017_type__data_source_updated_datetime
    on history_octane.hmda_ethnicity_2017_type (data_source_updated_datetime);

create index idx_hmda_ethnicity_2017_type__etl_batch_id
    on history_octane.hmda_ethnicity_2017_type (etl_batch_id);

grant select on history_octane.hmda_ethnicity_2017_type to readonly;

grant insert, select, update on history_octane.hmda_ethnicity_2017_type to etl_loan;

create table history_octane.hmda_hoepa_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.hmda_hoepa_status_type owner to deployer;

create index idx_hmda_hoepa_status_type__data_source_deleted_flag
    on history_octane.hmda_hoepa_status_type (data_source_deleted_flag);

create index idx_hmda_hoepa_status_type__data_source_updated_datetime
    on history_octane.hmda_hoepa_status_type (data_source_updated_datetime);

create index idx_hmda_hoepa_status_type__etl_batch_id
    on history_octane.hmda_hoepa_status_type (etl_batch_id);

grant select on history_octane.hmda_hoepa_status_type to readonly;

grant insert, select, update on history_octane.hmda_hoepa_status_type to etl_loan;

create table history_octane.hmda_purchaser_of_loan_2017_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.hmda_purchaser_of_loan_2017_type owner to deployer;

create index idx_hmda_purchaser_of_loan_2017_type__data_source_deleted_flag
    on history_octane.hmda_purchaser_of_loan_2017_type (data_source_deleted_flag);

create index idx_78ea0bfe717eecbe61b0a09ca9a0afb7
    on history_octane.hmda_purchaser_of_loan_2017_type (data_source_updated_datetime);

create index idx_hmda_purchaser_of_loan_2017_type__etl_batch_id
    on history_octane.hmda_purchaser_of_loan_2017_type (etl_batch_id);

grant select on history_octane.hmda_purchaser_of_loan_2017_type to readonly;

grant insert, select, update on history_octane.hmda_purchaser_of_loan_2017_type to etl_loan;

create table history_octane.hmda_purchaser_of_loan_2018_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.hmda_purchaser_of_loan_2018_type owner to deployer;

create index idx_hmda_purchaser_of_loan_2018_type__data_source_deleted_flag
    on history_octane.hmda_purchaser_of_loan_2018_type (data_source_deleted_flag);

create index idx_c12c8e515fa5b50de9e8800ac1e48ac0
    on history_octane.hmda_purchaser_of_loan_2018_type (data_source_updated_datetime);

create index idx_hmda_purchaser_of_loan_2018_type__etl_batch_id
    on history_octane.hmda_purchaser_of_loan_2018_type (etl_batch_id);

grant select on history_octane.hmda_purchaser_of_loan_2018_type to readonly;

grant insert, select, update on history_octane.hmda_purchaser_of_loan_2018_type to etl_loan;

create table history_octane.hmda_race_2017_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.hmda_race_2017_type owner to deployer;

create index idx_hmda_race_2017_type__data_source_deleted_flag
    on history_octane.hmda_race_2017_type (data_source_deleted_flag);

create index idx_hmda_race_2017_type__data_source_updated_datetime
    on history_octane.hmda_race_2017_type (data_source_updated_datetime);

create index idx_hmda_race_2017_type__etl_batch_id
    on history_octane.hmda_race_2017_type (etl_batch_id);

grant select on history_octane.hmda_race_2017_type to readonly;

grant insert, select, update on history_octane.hmda_race_2017_type to etl_loan;

create table history_octane.hoepa_thresholds
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ht_pid bigint not null,
    ht_version integer,
    ht_effective_date date,
    ht_total_loan_amount_threshold numeric(15),
    ht_points_and_fees_threshold_amount numeric(15),
    ht_first_lien_rate_spread_threshold numeric(11,9),
    ht_subordinate_lien_rate_spread_threshold numeric(11,9),
    ht_max_points_and_fees_percent_over_threshold numeric(11,9),
    ht_max_points_and_fees_percent_under_threshold numeric(11,9),
    etl_batch_id text
);

alter table history_octane.hoepa_thresholds owner to deployer;

create index idx_hoepa_thresholds__data_source_deleted_flag
    on history_octane.hoepa_thresholds (data_source_deleted_flag);

create index idx_hoepa_thresholds__data_source_updated_datetime
    on history_octane.hoepa_thresholds (data_source_updated_datetime);

create index idx_hoepa_thresholds__pid
    on history_octane.hoepa_thresholds (ht_pid);

create index idx_hoepa_thresholds__pid_version
    on history_octane.hoepa_thresholds (ht_pid, ht_version);

create index idx_hoepa_thresholds__etl_batch_id
    on history_octane.hoepa_thresholds (etl_batch_id);

grant select on history_octane.hoepa_thresholds to readonly;

grant insert, select, update on history_octane.hoepa_thresholds to etl_loan;

create table history_octane.homeownership_education_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.homeownership_education_type owner to deployer;

create index idx_homeownership_education_type__data_source_deleted_flag
    on history_octane.homeownership_education_type (data_source_deleted_flag);

create index idx_homeownership_education_type__data_source_updated_datetime
    on history_octane.homeownership_education_type (data_source_updated_datetime);

create index idx_homeownership_education_type__etl_batch_id
    on history_octane.homeownership_education_type (etl_batch_id);

grant select on history_octane.homeownership_education_type to readonly;

grant insert, select, update on history_octane.homeownership_education_type to etl_loan;

create table history_octane.housing_counseling_agency_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.housing_counseling_agency_type owner to deployer;

create index idx_housing_counseling_agency_type__data_source_deleted_flag
    on history_octane.housing_counseling_agency_type (data_source_deleted_flag);

create index idx_9fde9db8a1258330402a650befa574c2
    on history_octane.housing_counseling_agency_type (data_source_updated_datetime);

create index idx_housing_counseling_agency_type__etl_batch_id
    on history_octane.housing_counseling_agency_type (etl_batch_id);

grant select on history_octane.housing_counseling_agency_type to readonly;

grant insert, select, update on history_octane.housing_counseling_agency_type to etl_loan;

create table history_octane.housing_counseling_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.housing_counseling_type owner to deployer;

create index idx_housing_counseling_type__data_source_deleted_flag
    on history_octane.housing_counseling_type (data_source_deleted_flag);

create index idx_housing_counseling_type__data_source_updated_datetime
    on history_octane.housing_counseling_type (data_source_updated_datetime);

create index idx_housing_counseling_type__etl_batch_id
    on history_octane.housing_counseling_type (etl_batch_id);

grant select on history_octane.housing_counseling_type to readonly;

grant insert, select, update on history_octane.housing_counseling_type to etl_loan;

create table history_octane.hud_fha_de_approval_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.hud_fha_de_approval_type owner to deployer;

create index idx_hud_fha_de_approval_type__data_source_deleted_flag
    on history_octane.hud_fha_de_approval_type (data_source_deleted_flag);

create index idx_hud_fha_de_approval_type__data_source_updated_datetime
    on history_octane.hud_fha_de_approval_type (data_source_updated_datetime);

create index idx_hud_fha_de_approval_type__etl_batch_id
    on history_octane.hud_fha_de_approval_type (etl_batch_id);

grant select on history_octane.hud_fha_de_approval_type to readonly;

grant insert, select, update on history_octane.hud_fha_de_approval_type to etl_loan;

create table history_octane.hve_confidence_level_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.hve_confidence_level_type owner to deployer;

create index idx_hve_confidence_level_type__data_source_deleted_flag
    on history_octane.hve_confidence_level_type (data_source_deleted_flag);

create index idx_hve_confidence_level_type__data_source_updated_datetime
    on history_octane.hve_confidence_level_type (data_source_updated_datetime);

create index idx_hve_confidence_level_type__etl_batch_id
    on history_octane.hve_confidence_level_type (etl_batch_id);

grant select on history_octane.hve_confidence_level_type to readonly;

grant insert, select, update on history_octane.hve_confidence_level_type to etl_loan;

create table history_octane.income_history_calc_method_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.income_history_calc_method_type owner to deployer;

create index idx_income_history_calc_method_type__data_source_deleted_flag
    on history_octane.income_history_calc_method_type (data_source_deleted_flag);

create index idx_c0c9b16d78247284168581417caf1833
    on history_octane.income_history_calc_method_type (data_source_updated_datetime);

create index idx_income_history_calc_method_type__etl_batch_id
    on history_octane.income_history_calc_method_type (etl_batch_id);

grant select on history_octane.income_history_calc_method_type to readonly;

grant insert, select, update on history_octane.income_history_calc_method_type to etl_loan;

create table history_octane.intent_to_proceed_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.intent_to_proceed_type owner to deployer;

create index idx_intent_to_proceed_type__data_source_deleted_flag
    on history_octane.intent_to_proceed_type (data_source_deleted_flag);

create index idx_intent_to_proceed_type__data_source_updated_datetime
    on history_octane.intent_to_proceed_type (data_source_updated_datetime);

create index idx_intent_to_proceed_type__etl_batch_id
    on history_octane.intent_to_proceed_type (etl_batch_id);

grant select on history_octane.intent_to_proceed_type to readonly;

grant insert, select, update on history_octane.intent_to_proceed_type to etl_loan;

create table history_octane.interest_only_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.interest_only_type owner to deployer;

create index idx_interest_only_type__data_source_deleted_flag
    on history_octane.interest_only_type (data_source_deleted_flag);

create index idx_interest_only_type__data_source_updated_datetime
    on history_octane.interest_only_type (data_source_updated_datetime);

create index idx_interest_only_type__etl_batch_id
    on history_octane.interest_only_type (etl_batch_id);

grant select on history_octane.interest_only_type to readonly;

grant insert, select, update on history_octane.interest_only_type to etl_loan;

create table history_octane.interim_funder_mers_registration_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.interim_funder_mers_registration_type owner to deployer;

create index idx_c63826906f239bf04b3cdbc7d7e78552
    on history_octane.interim_funder_mers_registration_type (data_source_deleted_flag);

create index idx_a35b2fcc591a004ee98cd6f608d983e0
    on history_octane.interim_funder_mers_registration_type (data_source_updated_datetime);

create index idx_interim_funder_mers_registration_type__etl_batch_id
    on history_octane.interim_funder_mers_registration_type (etl_batch_id);

grant select on history_octane.interim_funder_mers_registration_type to readonly;

grant insert, select, update on history_octane.interim_funder_mers_registration_type to etl_loan;

create table history_octane.interim_funder
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    if_pid bigint not null,
    if_version integer,
    if_account_pid bigint,
    if_company_name varchar(128),
    if_company_contact_unparsed_name varchar(128),
    if_company_address_street1 varchar(128),
    if_company_address_street2 varchar(128),
    if_company_address_city varchar(128),
    if_company_address_state varchar(128),
    if_company_address_postal_code varchar(128),
    if_company_address_country varchar(128),
    if_company_office_phone varchar(32),
    if_company_office_phone_extension varchar(16),
    if_company_email varchar(256),
    if_company_fax varchar(32),
    if_company_mers_org_id varchar(7),
    if_remarks varchar(1024),
    if_from_date date,
    if_through_date date,
    if_custodian_pid bigint,
    if_reimbursement_wire_credit_to_name varchar(128),
    if_reimbursement_wire_attention_unparsed_name varchar(128),
    if_reimbursement_wire_authorized_signer_unparsed_name varchar(128),
    if_return_wire_credit_to_name varchar(128),
    if_return_wire_attention_unparsed_name varchar(128),
    if_return_wire_authorized_signer_unparsed_name varchar(128),
    if_fnm_payee_id varchar(9),
    if_interim_funder_mers_registration_type varchar(128),
    if_fnm_warehouse_lender_id varchar(32),
    if_fre_warehouse_lender_id varchar(32),
    if_funder_id varchar(32),
    etl_batch_id text
);

alter table history_octane.interim_funder owner to deployer;

create index idx_interim_funder__data_source_deleted_flag
    on history_octane.interim_funder (data_source_deleted_flag);

create index idx_interim_funder__data_source_updated_datetime
    on history_octane.interim_funder (data_source_updated_datetime);

create index idx_interim_funder__pid
    on history_octane.interim_funder (if_pid);

create index idx_interim_funder__pid_version
    on history_octane.interim_funder (if_pid, if_version);

create index idx_interim_funder__etl_batch_id
    on history_octane.interim_funder (etl_batch_id);

grant select on history_octane.interim_funder to readonly;

grant insert, select, update on history_octane.interim_funder to etl_loan;

create table history_octane.credit_limit
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    cl_pid bigint not null,
    cl_version integer,
    cl_interim_funder_pid bigint,
    cl_credit_limit_name varchar(128),
    cl_credit_limit_amount numeric(15,2),
    cl_credit_limit_type varchar(128),
    cl_from_date date,
    cl_through_date date,
    etl_batch_id text
);

alter table history_octane.credit_limit owner to deployer;

create index idx_credit_limit__data_source_deleted_flag
    on history_octane.credit_limit (data_source_deleted_flag);

create index idx_credit_limit__data_source_updated_datetime
    on history_octane.credit_limit (data_source_updated_datetime);

create index idx_credit_limit__pid
    on history_octane.credit_limit (cl_pid);

create index idx_credit_limit__pid_version
    on history_octane.credit_limit (cl_pid, cl_version);

create index idx_credit_limit__etl_batch_id
    on history_octane.credit_limit (etl_batch_id);

grant select on history_octane.credit_limit to readonly;

grant insert, select, update on history_octane.credit_limit to etl_loan;

create table history_octane.investor_group
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ig_pid bigint not null,
    ig_version integer,
    ig_account_pid bigint,
    ig_name varchar(128),
    ig_lender_group boolean,
    etl_batch_id text
);

alter table history_octane.investor_group owner to deployer;

create index idx_investor_group__data_source_deleted_flag
    on history_octane.investor_group (data_source_deleted_flag);

create index idx_investor_group__data_source_updated_datetime
    on history_octane.investor_group (data_source_updated_datetime);

create index idx_investor_group__pid
    on history_octane.investor_group (ig_pid);

create index idx_investor_group__pid_version
    on history_octane.investor_group (ig_pid, ig_version);

create index idx_investor_group__etl_batch_id
    on history_octane.investor_group (etl_batch_id);

grant select on history_octane.investor_group to readonly;

grant insert, select, update on history_octane.investor_group to etl_loan;

create table history_octane.investor_hmda_purchaser_of_loan_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.investor_hmda_purchaser_of_loan_type owner to deployer;

create index idx_a2771b0861f095dd240d276b08f5df54
    on history_octane.investor_hmda_purchaser_of_loan_type (data_source_deleted_flag);

create index idx_8af5341ddcbd85deb7df17857a25d908
    on history_octane.investor_hmda_purchaser_of_loan_type (data_source_updated_datetime);

create index idx_investor_hmda_purchaser_of_loan_type__etl_batch_id
    on history_octane.investor_hmda_purchaser_of_loan_type (etl_batch_id);

grant select on history_octane.investor_hmda_purchaser_of_loan_type to readonly;

grant insert, select, update on history_octane.investor_hmda_purchaser_of_loan_type to etl_loan;

create table history_octane.investor_lock_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.investor_lock_status_type owner to deployer;

create index idx_investor_lock_status_type__data_source_deleted_flag
    on history_octane.investor_lock_status_type (data_source_deleted_flag);

create index idx_investor_lock_status_type__data_source_updated_datetime
    on history_octane.investor_lock_status_type (data_source_updated_datetime);

create index idx_investor_lock_status_type__etl_batch_id
    on history_octane.investor_lock_status_type (etl_batch_id);

grant select on history_octane.investor_lock_status_type to readonly;

grant insert, select, update on history_octane.investor_lock_status_type to etl_loan;

create table history_octane.invoice_item_category_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.invoice_item_category_type owner to deployer;

create index idx_invoice_item_category_type__data_source_deleted_flag
    on history_octane.invoice_item_category_type (data_source_deleted_flag);

create index idx_invoice_item_category_type__data_source_updated_datetime
    on history_octane.invoice_item_category_type (data_source_updated_datetime);

create index idx_invoice_item_category_type__etl_batch_id
    on history_octane.invoice_item_category_type (etl_batch_id);

grant select on history_octane.invoice_item_category_type to readonly;

grant insert, select, update on history_octane.invoice_item_category_type to etl_loan;

create table history_octane.invoice_payer_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.invoice_payer_type owner to deployer;

create index idx_invoice_payer_type__data_source_deleted_flag
    on history_octane.invoice_payer_type (data_source_deleted_flag);

create index idx_invoice_payer_type__data_source_updated_datetime
    on history_octane.invoice_payer_type (data_source_updated_datetime);

create index idx_invoice_payer_type__etl_batch_id
    on history_octane.invoice_payer_type (etl_batch_id);

grant select on history_octane.invoice_payer_type to readonly;

grant insert, select, update on history_octane.invoice_payer_type to etl_loan;

create table history_octane.invoice_payment_submission_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.invoice_payment_submission_type owner to deployer;

create index idx_invoice_payment_submission_type__data_source_deleted_flag
    on history_octane.invoice_payment_submission_type (data_source_deleted_flag);

create index idx_bd7031bbea3be2e41ef2242553fdd049
    on history_octane.invoice_payment_submission_type (data_source_updated_datetime);

create index idx_invoice_payment_submission_type__etl_batch_id
    on history_octane.invoice_payment_submission_type (etl_batch_id);

grant select on history_octane.invoice_payment_submission_type to readonly;

grant insert, select, update on history_octane.invoice_payment_submission_type to etl_loan;

create table history_octane.ipc_calc_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.ipc_calc_type owner to deployer;

create index idx_ipc_calc_type__data_source_deleted_flag
    on history_octane.ipc_calc_type (data_source_deleted_flag);

create index idx_ipc_calc_type__data_source_updated_datetime
    on history_octane.ipc_calc_type (data_source_updated_datetime);

create index idx_ipc_calc_type__etl_batch_id
    on history_octane.ipc_calc_type (etl_batch_id);

grant select on history_octane.ipc_calc_type to readonly;

grant insert, select, update on history_octane.ipc_calc_type to etl_loan;

create table history_octane.ipc_comparison_operator_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.ipc_comparison_operator_type owner to deployer;

create index idx_ipc_comparison_operator_type__data_source_deleted_flag
    on history_octane.ipc_comparison_operator_type (data_source_deleted_flag);

create index idx_ipc_comparison_operator_type__data_source_updated_datetime
    on history_octane.ipc_comparison_operator_type (data_source_updated_datetime);

create index idx_ipc_comparison_operator_type__etl_batch_id
    on history_octane.ipc_comparison_operator_type (etl_batch_id);

grant select on history_octane.ipc_comparison_operator_type to readonly;

grant insert, select, update on history_octane.ipc_comparison_operator_type to etl_loan;

create table history_octane.ipc_property_usage_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.ipc_property_usage_type owner to deployer;

create index idx_ipc_property_usage_type__data_source_deleted_flag
    on history_octane.ipc_property_usage_type (data_source_deleted_flag);

create index idx_ipc_property_usage_type__data_source_updated_datetime
    on history_octane.ipc_property_usage_type (data_source_updated_datetime);

create index idx_ipc_property_usage_type__etl_batch_id
    on history_octane.ipc_property_usage_type (etl_batch_id);

grant select on history_octane.ipc_property_usage_type to readonly;

grant insert, select, update on history_octane.ipc_property_usage_type to etl_loan;

create table history_octane.job_gap_reason_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.job_gap_reason_type owner to deployer;

create index idx_job_gap_reason_type__data_source_deleted_flag
    on history_octane.job_gap_reason_type (data_source_deleted_flag);

create index idx_job_gap_reason_type__data_source_updated_datetime
    on history_octane.job_gap_reason_type (data_source_updated_datetime);

create index idx_job_gap_reason_type__etl_batch_id
    on history_octane.job_gap_reason_type (etl_batch_id);

grant select on history_octane.job_gap_reason_type to readonly;

grant insert, select, update on history_octane.job_gap_reason_type to etl_loan;

create table history_octane.key_creditor_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.key_creditor_type owner to deployer;

create index idx_key_creditor_type__data_source_deleted_flag
    on history_octane.key_creditor_type (data_source_deleted_flag);

create index idx_key_creditor_type__data_source_updated_datetime
    on history_octane.key_creditor_type (data_source_updated_datetime);

create index idx_key_creditor_type__etl_batch_id
    on history_octane.key_creditor_type (etl_batch_id);

grant select on history_octane.key_creditor_type to readonly;

grant insert, select, update on history_octane.key_creditor_type to etl_loan;

create table history_octane.key_doc_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.key_doc_type owner to deployer;

create index idx_key_doc_type__data_source_deleted_flag
    on history_octane.key_doc_type (data_source_deleted_flag);

create index idx_key_doc_type__data_source_updated_datetime
    on history_octane.key_doc_type (data_source_updated_datetime);

create index idx_key_doc_type__etl_batch_id
    on history_octane.key_doc_type (etl_batch_id);

grant select on history_octane.key_doc_type to readonly;

grant insert, select, update on history_octane.key_doc_type to etl_loan;

create table history_octane.key_package_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.key_package_type owner to deployer;

create index idx_key_package_type__data_source_deleted_flag
    on history_octane.key_package_type (data_source_deleted_flag);

create index idx_key_package_type__data_source_updated_datetime
    on history_octane.key_package_type (data_source_updated_datetime);

create index idx_key_package_type__etl_batch_id
    on history_octane.key_package_type (etl_batch_id);

grant select on history_octane.key_package_type to readonly;

grant insert, select, update on history_octane.key_package_type to etl_loan;

create table history_octane.key_role_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.key_role_type owner to deployer;

create index idx_key_role_type__data_source_deleted_flag
    on history_octane.key_role_type (data_source_deleted_flag);

create index idx_key_role_type__data_source_updated_datetime
    on history_octane.key_role_type (data_source_updated_datetime);

create index idx_key_role_type__etl_batch_id
    on history_octane.key_role_type (etl_batch_id);

grant select on history_octane.key_role_type to readonly;

grant insert, select, update on history_octane.key_role_type to etl_loan;

create table history_octane.lava_zone_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lava_zone_type owner to deployer;

create index idx_lava_zone_type__data_source_deleted_flag
    on history_octane.lava_zone_type (data_source_deleted_flag);

create index idx_lava_zone_type__data_source_updated_datetime
    on history_octane.lava_zone_type (data_source_updated_datetime);

create index idx_lava_zone_type__etl_batch_id
    on history_octane.lava_zone_type (etl_batch_id);

grant select on history_octane.lava_zone_type to readonly;

grant insert, select, update on history_octane.lava_zone_type to etl_loan;

create table history_octane.legacy_role_assignment_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.legacy_role_assignment_type owner to deployer;

create index idx_legacy_role_assignment_type__data_source_deleted_flag
    on history_octane.legacy_role_assignment_type (data_source_deleted_flag);

create index idx_legacy_role_assignment_type__data_source_updated_datetime
    on history_octane.legacy_role_assignment_type (data_source_updated_datetime);

create index idx_legacy_role_assignment_type__etl_batch_id
    on history_octane.legacy_role_assignment_type (etl_batch_id);

grant select on history_octane.legacy_role_assignment_type to readonly;

grant insert, select, update on history_octane.legacy_role_assignment_type to etl_loan;

create table history_octane.legal_description_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.legal_description_type owner to deployer;

create index idx_legal_description_type__data_source_deleted_flag
    on history_octane.legal_description_type (data_source_deleted_flag);

create index idx_legal_description_type__data_source_updated_datetime
    on history_octane.legal_description_type (data_source_updated_datetime);

create index idx_legal_description_type__etl_batch_id
    on history_octane.legal_description_type (etl_batch_id);

grant select on history_octane.legal_description_type to readonly;

grant insert, select, update on history_octane.legal_description_type to etl_loan;

create table history_octane.legal_entity_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.legal_entity_type owner to deployer;

create index idx_legal_entity_type__data_source_deleted_flag
    on history_octane.legal_entity_type (data_source_deleted_flag);

create index idx_legal_entity_type__data_source_updated_datetime
    on history_octane.legal_entity_type (data_source_updated_datetime);

create index idx_legal_entity_type__etl_batch_id
    on history_octane.legal_entity_type (etl_batch_id);

grant select on history_octane.legal_entity_type to readonly;

grant insert, select, update on history_octane.legal_entity_type to etl_loan;

create table history_octane.lender_concession_request_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lender_concession_request_status_type owner to deployer;

create index idx_90f853d3531b4628610f69426df6b09a
    on history_octane.lender_concession_request_status_type (data_source_deleted_flag);

create index idx_651ac451ec4dea7ada8069bd0b46ba2a
    on history_octane.lender_concession_request_status_type (data_source_updated_datetime);

create index idx_lender_concession_request_status_type__etl_batch_id
    on history_octane.lender_concession_request_status_type (etl_batch_id);

grant select on history_octane.lender_concession_request_status_type to readonly;

grant insert, select, update on history_octane.lender_concession_request_status_type to etl_loan;

create table history_octane.lender_concession_request_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lender_concession_request_type owner to deployer;

create index idx_lender_concession_request_type__data_source_deleted_flag
    on history_octane.lender_concession_request_type (data_source_deleted_flag);

create index idx_c9654951572d94542c2bb78b795fa2b9
    on history_octane.lender_concession_request_type (data_source_updated_datetime);

create index idx_lender_concession_request_type__etl_batch_id
    on history_octane.lender_concession_request_type (etl_batch_id);

grant select on history_octane.lender_concession_request_type to readonly;

grant insert, select, update on history_octane.lender_concession_request_type to etl_loan;

create table history_octane.lender_lock_id_ticker
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lltk_pid bigint not null,
    lltk_version integer,
    lltk_account_pid bigint,
    lltk_next_lender_lock_id bigint,
    etl_batch_id text
);

alter table history_octane.lender_lock_id_ticker owner to deployer;

create index idx_lender_lock_id_ticker__data_source_deleted_flag
    on history_octane.lender_lock_id_ticker (data_source_deleted_flag);

create index idx_lender_lock_id_ticker__data_source_updated_datetime
    on history_octane.lender_lock_id_ticker (data_source_updated_datetime);

create index idx_lender_lock_id_ticker__pid
    on history_octane.lender_lock_id_ticker (lltk_pid);

create index idx_lender_lock_id_ticker__pid_version
    on history_octane.lender_lock_id_ticker (lltk_pid, lltk_version);

create index idx_lender_lock_id_ticker__etl_batch_id
    on history_octane.lender_lock_id_ticker (etl_batch_id);

grant select on history_octane.lender_lock_id_ticker to readonly;

grant insert, select, update on history_octane.lender_lock_id_ticker to etl_loan;

create table history_octane.lender_lock_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lender_lock_status_type owner to deployer;

create index idx_lender_lock_status_type__data_source_deleted_flag
    on history_octane.lender_lock_status_type (data_source_deleted_flag);

create index idx_lender_lock_status_type__data_source_updated_datetime
    on history_octane.lender_lock_status_type (data_source_updated_datetime);

create index idx_lender_lock_status_type__etl_batch_id
    on history_octane.lender_lock_status_type (etl_batch_id);

grant select on history_octane.lender_lock_status_type to readonly;

grant insert, select, update on history_octane.lender_lock_status_type to etl_loan;

create table history_octane.lender_toolbox_permission_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lender_toolbox_permission_type owner to deployer;

create index idx_lender_toolbox_permission_type__data_source_deleted_flag
    on history_octane.lender_toolbox_permission_type (data_source_deleted_flag);

create index idx_37d3177156ed47d5afdb3851c48390b0
    on history_octane.lender_toolbox_permission_type (data_source_updated_datetime);

create index idx_lender_toolbox_permission_type__etl_batch_id
    on history_octane.lender_toolbox_permission_type (etl_batch_id);

grant select on history_octane.lender_toolbox_permission_type to readonly;

grant insert, select, update on history_octane.lender_toolbox_permission_type to etl_loan;

create table history_octane.lender_trade_id_ticker
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lttk_pid bigint not null,
    lttk_version integer,
    lttk_account_pid bigint,
    lttk_next_lender_trade_id bigint,
    etl_batch_id text
);

alter table history_octane.lender_trade_id_ticker owner to deployer;

create index idx_lender_trade_id_ticker__data_source_deleted_flag
    on history_octane.lender_trade_id_ticker (data_source_deleted_flag);

create index idx_lender_trade_id_ticker__data_source_updated_datetime
    on history_octane.lender_trade_id_ticker (data_source_updated_datetime);

create index idx_lender_trade_id_ticker__pid
    on history_octane.lender_trade_id_ticker (lttk_pid);

create index idx_lender_trade_id_ticker__pid_version
    on history_octane.lender_trade_id_ticker (lttk_pid, lttk_version);

create index idx_lender_trade_id_ticker__etl_batch_id
    on history_octane.lender_trade_id_ticker (etl_batch_id);

grant select on history_octane.lender_trade_id_ticker to readonly;

grant insert, select, update on history_octane.lender_trade_id_ticker to etl_loan;

create table history_octane.lender_user_allowed_ip_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lender_user_allowed_ip_status_type owner to deployer;

create index idx_6ad30f595f89302a1a5314bf0fba4f04
    on history_octane.lender_user_allowed_ip_status_type (data_source_deleted_flag);

create index idx_4bb2f281fe7c0a658dc006b39e32cbb9
    on history_octane.lender_user_allowed_ip_status_type (data_source_updated_datetime);

create index idx_lender_user_allowed_ip_status_type__etl_batch_id
    on history_octane.lender_user_allowed_ip_status_type (etl_batch_id);

grant select on history_octane.lender_user_allowed_ip_status_type to readonly;

grant insert, select, update on history_octane.lender_user_allowed_ip_status_type to etl_loan;

create table history_octane.lender_user_interest
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lui_pid bigint not null,
    lui_version integer,
    lui_lender_user_pid bigint,
    lui_lender_user_interest_type varchar(128),
    etl_batch_id text
);

alter table history_octane.lender_user_interest owner to deployer;

create index idx_lender_user_interest__data_source_deleted_flag
    on history_octane.lender_user_interest (data_source_deleted_flag);

create index idx_lender_user_interest__data_source_updated_datetime
    on history_octane.lender_user_interest (data_source_updated_datetime);

create index idx_lender_user_interest__pid
    on history_octane.lender_user_interest (lui_pid);

create index idx_lender_user_interest__pid_version
    on history_octane.lender_user_interest (lui_pid, lui_version);

create index fkt_lui_lender_user_interest_type
    on history_octane.lender_user_interest (lui_lender_user_interest_type);

create index fk_lender_user_interest_1
    on history_octane.lender_user_interest (lui_lender_user_pid);

create index idx_lender_user_interest__etl_batch_id
    on history_octane.lender_user_interest (etl_batch_id);

grant select on history_octane.lender_user_interest to readonly;

grant insert, select, update on history_octane.lender_user_interest to etl_loan;

create table history_octane.lender_user_interest_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lender_user_interest_type owner to deployer;

create index idx_lender_user_interest_type__data_source_deleted_flag
    on history_octane.lender_user_interest_type (data_source_deleted_flag);

create index idx_lender_user_interest_type__data_source_updated_datetime
    on history_octane.lender_user_interest_type (data_source_updated_datetime);

create index idx_lender_user_interest_type__etl_batch_id
    on history_octane.lender_user_interest_type (etl_batch_id);

grant select on history_octane.lender_user_interest_type to readonly;

grant insert, select, update on history_octane.lender_user_interest_type to etl_loan;

create table history_octane.lender_user_language
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lul_pid bigint not null,
    lul_version integer,
    lul_lender_user_pid bigint,
    lul_lender_user_language_type varchar(128),
    etl_batch_id text
);

alter table history_octane.lender_user_language owner to deployer;

create index idx_lender_user_language__data_source_deleted_flag
    on history_octane.lender_user_language (data_source_deleted_flag);

create index idx_lender_user_language__data_source_updated_datetime
    on history_octane.lender_user_language (data_source_updated_datetime);

create index idx_lender_user_language__pid
    on history_octane.lender_user_language (lul_pid);

create index idx_lender_user_language__pid_version
    on history_octane.lender_user_language (lul_pid, lul_version);

create index fkt_lul_lender_user_language_type
    on history_octane.lender_user_language (lul_lender_user_language_type);

create index fk_lender_user_language_1
    on history_octane.lender_user_language (lul_lender_user_pid);

create index idx_lender_user_language__etl_batch_id
    on history_octane.lender_user_language (etl_batch_id);

grant select on history_octane.lender_user_language to readonly;

grant insert, select, update on history_octane.lender_user_language to etl_loan;

create table history_octane.lender_user_language_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lender_user_language_type owner to deployer;

create index idx_lender_user_language_type__data_source_deleted_flag
    on history_octane.lender_user_language_type (data_source_deleted_flag);

create index idx_lender_user_language_type__data_source_updated_datetime
    on history_octane.lender_user_language_type (data_source_updated_datetime);

create index idx_lender_user_language_type__etl_batch_id
    on history_octane.lender_user_language_type (etl_batch_id);

grant select on history_octane.lender_user_language_type to readonly;

grant insert, select, update on history_octane.lender_user_language_type to etl_loan;

create table history_octane.lender_user_notice_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lender_user_notice_type owner to deployer;

create index idx_lender_user_notice_type__data_source_deleted_flag
    on history_octane.lender_user_notice_type (data_source_deleted_flag);

create index idx_lender_user_notice_type__data_source_updated_datetime
    on history_octane.lender_user_notice_type (data_source_updated_datetime);

create index idx_lender_user_notice_type__etl_batch_id
    on history_octane.lender_user_notice_type (etl_batch_id);

grant select on history_octane.lender_user_notice_type to readonly;

grant insert, select, update on history_octane.lender_user_notice_type to etl_loan;

create table history_octane.lender_user_reset_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lender_user_reset_type owner to deployer;

create index idx_lender_user_reset_type__data_source_deleted_flag
    on history_octane.lender_user_reset_type (data_source_deleted_flag);

create index idx_lender_user_reset_type__data_source_updated_datetime
    on history_octane.lender_user_reset_type (data_source_updated_datetime);

create index idx_lender_user_reset_type__etl_batch_id
    on history_octane.lender_user_reset_type (etl_batch_id);

grant select on history_octane.lender_user_reset_type to readonly;

grant insert, select, update on history_octane.lender_user_reset_type to etl_loan;

create table history_octane.lender_user_role_queue_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lender_user_role_queue_type owner to deployer;

create index idx_lender_user_role_queue_type__data_source_deleted_flag
    on history_octane.lender_user_role_queue_type (data_source_deleted_flag);

create index idx_lender_user_role_queue_type__data_source_updated_datetime
    on history_octane.lender_user_role_queue_type (data_source_updated_datetime);

create index idx_lender_user_role_queue_type__etl_batch_id
    on history_octane.lender_user_role_queue_type (etl_batch_id);

grant select on history_octane.lender_user_role_queue_type to readonly;

grant insert, select, update on history_octane.lender_user_role_queue_type to etl_loan;

create table history_octane.lender_user_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lender_user_status_type owner to deployer;

create index idx_lender_user_status_type__data_source_deleted_flag
    on history_octane.lender_user_status_type (data_source_deleted_flag);

create index idx_lender_user_status_type__data_source_updated_datetime
    on history_octane.lender_user_status_type (data_source_updated_datetime);

create index idx_lender_user_status_type__etl_batch_id
    on history_octane.lender_user_status_type (etl_batch_id);

grant select on history_octane.lender_user_status_type to readonly;

grant insert, select, update on history_octane.lender_user_status_type to etl_loan;

create table history_octane.lender_user_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lender_user_type owner to deployer;

create index idx_lender_user_type__data_source_deleted_flag
    on history_octane.lender_user_type (data_source_deleted_flag);

create index idx_lender_user_type__data_source_updated_datetime
    on history_octane.lender_user_type (data_source_updated_datetime);

create index idx_lender_user_type__etl_batch_id
    on history_octane.lender_user_type (etl_batch_id);

grant select on history_octane.lender_user_type to readonly;

grant insert, select, update on history_octane.lender_user_type to etl_loan;

create table history_octane.liability_account_ownership_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.liability_account_ownership_type owner to deployer;

create index idx_liability_account_ownership_type__data_source_deleted_flag
    on history_octane.liability_account_ownership_type (data_source_deleted_flag);

create index idx_aff0f36243b637823c641bffc899905b
    on history_octane.liability_account_ownership_type (data_source_updated_datetime);

create index idx_liability_account_ownership_type__etl_batch_id
    on history_octane.liability_account_ownership_type (etl_batch_id);

grant select on history_octane.liability_account_ownership_type to readonly;

grant insert, select, update on history_octane.liability_account_ownership_type to etl_loan;

create table history_octane.liability_account_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.liability_account_status_type owner to deployer;

create index idx_liability_account_status_type__data_source_deleted_flag
    on history_octane.liability_account_status_type (data_source_deleted_flag);

create index idx_liability_account_status_type__data_source_updated_datetime
    on history_octane.liability_account_status_type (data_source_updated_datetime);

create index idx_liability_account_status_type__etl_batch_id
    on history_octane.liability_account_status_type (etl_batch_id);

grant select on history_octane.liability_account_status_type to readonly;

grant insert, select, update on history_octane.liability_account_status_type to etl_loan;

create table history_octane.liability_current_rating_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.liability_current_rating_type owner to deployer;

create index idx_liability_current_rating_type__data_source_deleted_flag
    on history_octane.liability_current_rating_type (data_source_deleted_flag);

create index idx_liability_current_rating_type__data_source_updated_datetime
    on history_octane.liability_current_rating_type (data_source_updated_datetime);

create index idx_liability_current_rating_type__etl_batch_id
    on history_octane.liability_current_rating_type (etl_batch_id);

grant select on history_octane.liability_current_rating_type to readonly;

grant insert, select, update on history_octane.liability_current_rating_type to etl_loan;

create table history_octane.liability_disposition_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.liability_disposition_type owner to deployer;

create index idx_liability_disposition_type__data_source_deleted_flag
    on history_octane.liability_disposition_type (data_source_deleted_flag);

create index idx_liability_disposition_type__data_source_updated_datetime
    on history_octane.liability_disposition_type (data_source_updated_datetime);

create index idx_liability_disposition_type__etl_batch_id
    on history_octane.liability_disposition_type (etl_batch_id);

grant select on history_octane.liability_disposition_type to readonly;

grant insert, select, update on history_octane.liability_disposition_type to etl_loan;

create table history_octane.liability_energy_related_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.liability_energy_related_type owner to deployer;

create index idx_liability_energy_related_type__data_source_deleted_flag
    on history_octane.liability_energy_related_type (data_source_deleted_flag);

create index idx_liability_energy_related_type__data_source_updated_datetime
    on history_octane.liability_energy_related_type (data_source_updated_datetime);

create index idx_liability_energy_related_type__etl_batch_id
    on history_octane.liability_energy_related_type (etl_batch_id);

grant select on history_octane.liability_energy_related_type to readonly;

grant insert, select, update on history_octane.liability_energy_related_type to etl_loan;

create table history_octane.liability_financing_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.liability_financing_type owner to deployer;

create index idx_liability_financing_type__data_source_deleted_flag
    on history_octane.liability_financing_type (data_source_deleted_flag);

create index idx_liability_financing_type__data_source_updated_datetime
    on history_octane.liability_financing_type (data_source_updated_datetime);

create index idx_liability_financing_type__etl_batch_id
    on history_octane.liability_financing_type (etl_batch_id);

grant select on history_octane.liability_financing_type to readonly;

grant insert, select, update on history_octane.liability_financing_type to etl_loan;

create table history_octane.liability_foreclosure_exception_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.liability_foreclosure_exception_type owner to deployer;

create index idx_7f9483ebf552a06ab208ba5bad115d3d
    on history_octane.liability_foreclosure_exception_type (data_source_deleted_flag);

create index idx_a1f2f8574304f78aca1820030518172b
    on history_octane.liability_foreclosure_exception_type (data_source_updated_datetime);

create index idx_liability_foreclosure_exception_type__etl_batch_id
    on history_octane.liability_foreclosure_exception_type (etl_batch_id);

grant select on history_octane.liability_foreclosure_exception_type to readonly;

grant insert, select, update on history_octane.liability_foreclosure_exception_type to etl_loan;

create table history_octane.liability_mi_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.liability_mi_type owner to deployer;

create index idx_liability_mi_type__data_source_deleted_flag
    on history_octane.liability_mi_type (data_source_deleted_flag);

create index idx_liability_mi_type__data_source_updated_datetime
    on history_octane.liability_mi_type (data_source_updated_datetime);

create index idx_liability_mi_type__etl_batch_id
    on history_octane.liability_mi_type (etl_batch_id);

grant select on history_octane.liability_mi_type to readonly;

grant insert, select, update on history_octane.liability_mi_type to etl_loan;

create table history_octane.liability_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.liability_type owner to deployer;

create index idx_liability_type__data_source_deleted_flag
    on history_octane.liability_type (data_source_deleted_flag);

create index idx_liability_type__data_source_updated_datetime
    on history_octane.liability_type (data_source_updated_datetime);

create index idx_liability_type__etl_batch_id
    on history_octane.liability_type (etl_batch_id);

grant select on history_octane.liability_type to readonly;

grant insert, select, update on history_octane.liability_type to etl_loan;

create table history_octane.license_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.license_type owner to deployer;

create index idx_license_type__data_source_deleted_flag
    on history_octane.license_type (data_source_deleted_flag);

create index idx_license_type__data_source_updated_datetime
    on history_octane.license_type (data_source_updated_datetime);

create index idx_license_type__etl_batch_id
    on history_octane.license_type (etl_batch_id);

grant select on history_octane.license_type to readonly;

grant insert, select, update on history_octane.license_type to etl_loan;

create table history_octane.lien_priority_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lien_priority_type owner to deployer;

create index idx_lien_priority_type__data_source_deleted_flag
    on history_octane.lien_priority_type (data_source_deleted_flag);

create index idx_lien_priority_type__data_source_updated_datetime
    on history_octane.lien_priority_type (data_source_updated_datetime);

create index idx_lien_priority_type__etl_batch_id
    on history_octane.lien_priority_type (etl_batch_id);

grant select on history_octane.lien_priority_type to readonly;

grant insert, select, update on history_octane.lien_priority_type to etl_loan;

create table history_octane.loan_access_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.loan_access_type owner to deployer;

create index idx_loan_access_type__data_source_deleted_flag
    on history_octane.loan_access_type (data_source_deleted_flag);

create index idx_loan_access_type__data_source_updated_datetime
    on history_octane.loan_access_type (data_source_updated_datetime);

create index idx_loan_access_type__etl_batch_id
    on history_octane.loan_access_type (etl_batch_id);

grant select on history_octane.loan_access_type to readonly;

grant insert, select, update on history_octane.loan_access_type to etl_loan;

create table history_octane.loan_amortization_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.loan_amortization_type owner to deployer;

create index idx_loan_amortization_type__data_source_deleted_flag
    on history_octane.loan_amortization_type (data_source_deleted_flag);

create index idx_loan_amortization_type__data_source_updated_datetime
    on history_octane.loan_amortization_type (data_source_updated_datetime);

create index idx_loan_amortization_type__etl_batch_id
    on history_octane.loan_amortization_type (etl_batch_id);

grant select on history_octane.loan_amortization_type to readonly;

grant insert, select, update on history_octane.loan_amortization_type to etl_loan;

create table history_octane.apor
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ap_pid bigint not null,
    ap_version integer,
    ap_as_of_date date,
    ap_loan_amortization_type varchar(128),
    ap_term_years integer,
    ap_apor_percent numeric(11,9),
    etl_batch_id text
);

alter table history_octane.apor owner to deployer;

create index idx_apor__data_source_deleted_flag
    on history_octane.apor (data_source_deleted_flag);

create index idx_apor__data_source_updated_datetime
    on history_octane.apor (data_source_updated_datetime);

create index idx_apor__pid
    on history_octane.apor (ap_pid);

create index idx_apor__pid_version
    on history_octane.apor (ap_pid, ap_version);

create index idx_apor__etl_batch_id
    on history_octane.apor (etl_batch_id);

grant select on history_octane.apor to readonly;

grant insert, select, update on history_octane.apor to etl_loan;

create table history_octane.loan_benef_transfer_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.loan_benef_transfer_status_type owner to deployer;

create index idx_loan_benef_transfer_status_type__data_source_deleted_flag
    on history_octane.loan_benef_transfer_status_type (data_source_deleted_flag);

create index idx_0078d0cac4d83c0d1c3082dbbcbdcc60
    on history_octane.loan_benef_transfer_status_type (data_source_updated_datetime);

create index idx_loan_benef_transfer_status_type__etl_batch_id
    on history_octane.loan_benef_transfer_status_type (etl_batch_id);

grant select on history_octane.loan_benef_transfer_status_type to readonly;

grant insert, select, update on history_octane.loan_benef_transfer_status_type to etl_loan;

create table history_octane.loan_file_delivery_method_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.loan_file_delivery_method_type owner to deployer;

create index idx_loan_file_delivery_method_type__data_source_deleted_flag
    on history_octane.loan_file_delivery_method_type (data_source_deleted_flag);

create index idx_e6f20a205922dde3b1eb37bd5f6a1071
    on history_octane.loan_file_delivery_method_type (data_source_updated_datetime);

create index idx_loan_file_delivery_method_type__etl_batch_id
    on history_octane.loan_file_delivery_method_type (etl_batch_id);

grant select on history_octane.loan_file_delivery_method_type to readonly;

grant insert, select, update on history_octane.loan_file_delivery_method_type to etl_loan;

create table history_octane.loan_limit_table_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.loan_limit_table_type owner to deployer;

create index idx_loan_limit_table_type__data_source_deleted_flag
    on history_octane.loan_limit_table_type (data_source_deleted_flag);

create index idx_loan_limit_table_type__data_source_updated_datetime
    on history_octane.loan_limit_table_type (data_source_updated_datetime);

create index idx_loan_limit_table_type__etl_batch_id
    on history_octane.loan_limit_table_type (etl_batch_id);

grant select on history_octane.loan_limit_table_type to readonly;

grant insert, select, update on history_octane.loan_limit_table_type to etl_loan;

create table history_octane.loan_limit_table
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    llt_pid bigint not null,
    llt_version integer,
    llt_account_pid bigint,
    llt_from_date date,
    llt_loan_limit_table_type varchar(128),
    llt_uploader_unparsed_name varchar(128),
    llt_upload_datetime timestamp,
    etl_batch_id text
);

alter table history_octane.loan_limit_table owner to deployer;

create index idx_loan_limit_table__data_source_deleted_flag
    on history_octane.loan_limit_table (data_source_deleted_flag);

create index idx_loan_limit_table__data_source_updated_datetime
    on history_octane.loan_limit_table (data_source_updated_datetime);

create index idx_loan_limit_table__pid
    on history_octane.loan_limit_table (llt_pid);

create index idx_loan_limit_table__pid_version
    on history_octane.loan_limit_table (llt_pid, llt_version);

create index idx_loan_limit_table__etl_batch_id
    on history_octane.loan_limit_table (etl_batch_id);

grant select on history_octane.loan_limit_table to readonly;

grant insert, select, update on history_octane.loan_limit_table to etl_loan;

create table history_octane.loan_limit_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.loan_limit_type owner to deployer;

create index idx_loan_limit_type__data_source_deleted_flag
    on history_octane.loan_limit_type (data_source_deleted_flag);

create index idx_loan_limit_type__data_source_updated_datetime
    on history_octane.loan_limit_type (data_source_updated_datetime);

create index idx_loan_limit_type__etl_batch_id
    on history_octane.loan_limit_type (etl_batch_id);

grant select on history_octane.loan_limit_type to readonly;

grant insert, select, update on history_octane.loan_limit_type to etl_loan;

create table history_octane.loan_position_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.loan_position_type owner to deployer;

create index idx_loan_position_type__data_source_deleted_flag
    on history_octane.loan_position_type (data_source_deleted_flag);

create index idx_loan_position_type__data_source_updated_datetime
    on history_octane.loan_position_type (data_source_updated_datetime);

create index idx_loan_position_type__etl_batch_id
    on history_octane.loan_position_type (etl_batch_id);

grant select on history_octane.loan_position_type to readonly;

grant insert, select, update on history_octane.loan_position_type to etl_loan;

create table history_octane.loan_purpose_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.loan_purpose_type owner to deployer;

create index idx_loan_purpose_type__data_source_deleted_flag
    on history_octane.loan_purpose_type (data_source_deleted_flag);

create index idx_loan_purpose_type__data_source_updated_datetime
    on history_octane.loan_purpose_type (data_source_updated_datetime);

create index idx_loan_purpose_type__etl_batch_id
    on history_octane.loan_purpose_type (etl_batch_id);

grant select on history_octane.loan_purpose_type to readonly;

grant insert, select, update on history_octane.loan_purpose_type to etl_loan;

create table history_octane.loan_safe_product_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.loan_safe_product_type owner to deployer;

create index idx_loan_safe_product_type__data_source_deleted_flag
    on history_octane.loan_safe_product_type (data_source_deleted_flag);

create index idx_loan_safe_product_type__data_source_updated_datetime
    on history_octane.loan_safe_product_type (data_source_updated_datetime);

create index idx_loan_safe_product_type__etl_batch_id
    on history_octane.loan_safe_product_type (etl_batch_id);

grant select on history_octane.loan_safe_product_type to readonly;

grant insert, select, update on history_octane.loan_safe_product_type to etl_loan;

create table history_octane.loans_toolbox_permission_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.loans_toolbox_permission_type owner to deployer;

create index idx_loans_toolbox_permission_type__data_source_deleted_flag
    on history_octane.loans_toolbox_permission_type (data_source_deleted_flag);

create index idx_loans_toolbox_permission_type__data_source_updated_datetime
    on history_octane.loans_toolbox_permission_type (data_source_updated_datetime);

create index idx_loans_toolbox_permission_type__etl_batch_id
    on history_octane.loans_toolbox_permission_type (etl_batch_id);

grant select on history_octane.loans_toolbox_permission_type to readonly;

grant insert, select, update on history_octane.loans_toolbox_permission_type to etl_loan;

create table history_octane.lock_add_on_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lock_add_on_type owner to deployer;

create index idx_lock_add_on_type__data_source_deleted_flag
    on history_octane.lock_add_on_type (data_source_deleted_flag);

create index idx_lock_add_on_type__data_source_updated_datetime
    on history_octane.lock_add_on_type (data_source_updated_datetime);

create index idx_lock_add_on_type__etl_batch_id
    on history_octane.lock_add_on_type (etl_batch_id);

grant select on history_octane.lock_add_on_type to readonly;

grant insert, select, update on history_octane.lock_add_on_type to etl_loan;

create table history_octane.lock_commitment_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lock_commitment_type owner to deployer;

create index idx_lock_commitment_type__data_source_deleted_flag
    on history_octane.lock_commitment_type (data_source_deleted_flag);

create index idx_lock_commitment_type__data_source_updated_datetime
    on history_octane.lock_commitment_type (data_source_updated_datetime);

create index idx_lock_commitment_type__etl_batch_id
    on history_octane.lock_commitment_type (etl_batch_id);

grant select on history_octane.lock_commitment_type to readonly;

grant insert, select, update on history_octane.lock_commitment_type to etl_loan;

create table history_octane.lock_extension_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lock_extension_status_type owner to deployer;

create index idx_lock_extension_status_type__data_source_deleted_flag
    on history_octane.lock_extension_status_type (data_source_deleted_flag);

create index idx_lock_extension_status_type__data_source_updated_datetime
    on history_octane.lock_extension_status_type (data_source_updated_datetime);

create index idx_lock_extension_status_type__etl_batch_id
    on history_octane.lock_extension_status_type (etl_batch_id);

grant select on history_octane.lock_extension_status_type to readonly;

grant insert, select, update on history_octane.lock_extension_status_type to etl_loan;

create table history_octane.lock_term_setting
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lts_pid bigint not null,
    lts_version integer,
    lts_account_pid bigint,
    lts_lock_duration_days integer,
    lts_lock_commitment_type varchar(128),
    lts_borrower_app_enabled boolean,
    etl_batch_id text
);

alter table history_octane.lock_term_setting owner to deployer;

create index idx_lock_term_setting__data_source_deleted_flag
    on history_octane.lock_term_setting (data_source_deleted_flag);

create index idx_lock_term_setting__data_source_updated_datetime
    on history_octane.lock_term_setting (data_source_updated_datetime);

create index idx_lock_term_setting__pid
    on history_octane.lock_term_setting (lts_pid);

create index idx_lock_term_setting__pid_version
    on history_octane.lock_term_setting (lts_pid, lts_version);

create index idx_lock_term_setting__etl_batch_id
    on history_octane.lock_term_setting (etl_batch_id);

grant select on history_octane.lock_term_setting to readonly;

grant insert, select, update on history_octane.lock_term_setting to etl_loan;

create table history_octane.los_loan_id_ticker
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ltk_pid bigint not null,
    ltk_version integer,
    ltk_account_pid bigint,
    ltk_next_los_loan_id bigint,
    etl_batch_id text
);

alter table history_octane.los_loan_id_ticker owner to deployer;

create index idx_los_loan_id_ticker__data_source_deleted_flag
    on history_octane.los_loan_id_ticker (data_source_deleted_flag);

create index idx_los_loan_id_ticker__data_source_updated_datetime
    on history_octane.los_loan_id_ticker (data_source_updated_datetime);

create index idx_los_loan_id_ticker__pid
    on history_octane.los_loan_id_ticker (ltk_pid);

create index idx_los_loan_id_ticker__pid_version
    on history_octane.los_loan_id_ticker (ltk_pid, ltk_version);

create index idx_los_loan_id_ticker__etl_batch_id
    on history_octane.los_loan_id_ticker (etl_batch_id);

grant select on history_octane.los_loan_id_ticker to readonly;

grant insert, select, update on history_octane.los_loan_id_ticker to etl_loan;

create table history_octane.lp_case_state_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lp_case_state_type owner to deployer;

create index idx_lp_case_state_type__data_source_deleted_flag
    on history_octane.lp_case_state_type (data_source_deleted_flag);

create index idx_lp_case_state_type__data_source_updated_datetime
    on history_octane.lp_case_state_type (data_source_updated_datetime);

create index idx_lp_case_state_type__etl_batch_id
    on history_octane.lp_case_state_type (etl_batch_id);

grant select on history_octane.lp_case_state_type to readonly;

grant insert, select, update on history_octane.lp_case_state_type to etl_loan;

create table history_octane.lp_credit_risk_classification_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lp_credit_risk_classification_type owner to deployer;

create index idx_703bb4e3700d3629386f15d2e9100c83
    on history_octane.lp_credit_risk_classification_type (data_source_deleted_flag);

create index idx_0439ae1e5d067d04cc4ec31c9aa5f0d3
    on history_octane.lp_credit_risk_classification_type (data_source_updated_datetime);

create index idx_lp_credit_risk_classification_type__etl_batch_id
    on history_octane.lp_credit_risk_classification_type (etl_batch_id);

grant select on history_octane.lp_credit_risk_classification_type to readonly;

grant insert, select, update on history_octane.lp_credit_risk_classification_type to etl_loan;

create table history_octane.lp_dtd_version_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lp_dtd_version_type owner to deployer;

create index idx_lp_dtd_version_type__data_source_deleted_flag
    on history_octane.lp_dtd_version_type (data_source_deleted_flag);

create index idx_lp_dtd_version_type__data_source_updated_datetime
    on history_octane.lp_dtd_version_type (data_source_updated_datetime);

create index idx_lp_dtd_version_type__etl_batch_id
    on history_octane.lp_dtd_version_type (etl_batch_id);

grant select on history_octane.lp_dtd_version_type to readonly;

grant insert, select, update on history_octane.lp_dtd_version_type to etl_loan;

create table history_octane.lp_evaluation_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lp_evaluation_status_type owner to deployer;

create index idx_lp_evaluation_status_type__data_source_deleted_flag
    on history_octane.lp_evaluation_status_type (data_source_deleted_flag);

create index idx_lp_evaluation_status_type__data_source_updated_datetime
    on history_octane.lp_evaluation_status_type (data_source_updated_datetime);

create index idx_lp_evaluation_status_type__etl_batch_id
    on history_octane.lp_evaluation_status_type (etl_batch_id);

grant select on history_octane.lp_evaluation_status_type to readonly;

grant insert, select, update on history_octane.lp_evaluation_status_type to etl_loan;

create table history_octane.lp_finding_message_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lp_finding_message_type owner to deployer;

create index idx_lp_finding_message_type__data_source_deleted_flag
    on history_octane.lp_finding_message_type (data_source_deleted_flag);

create index idx_lp_finding_message_type__data_source_updated_datetime
    on history_octane.lp_finding_message_type (data_source_updated_datetime);

create index idx_lp_finding_message_type__etl_batch_id
    on history_octane.lp_finding_message_type (etl_batch_id);

grant select on history_octane.lp_finding_message_type to readonly;

grant insert, select, update on history_octane.lp_finding_message_type to etl_loan;

create table history_octane.lp_interface_version_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lp_interface_version_type owner to deployer;

create index idx_lp_interface_version_type__data_source_deleted_flag
    on history_octane.lp_interface_version_type (data_source_deleted_flag);

create index idx_lp_interface_version_type__data_source_updated_datetime
    on history_octane.lp_interface_version_type (data_source_updated_datetime);

create index idx_lp_interface_version_type__etl_batch_id
    on history_octane.lp_interface_version_type (etl_batch_id);

grant select on history_octane.lp_interface_version_type to readonly;

grant insert, select, update on history_octane.lp_interface_version_type to etl_loan;

create table history_octane.lp_request_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lp_request_status_type owner to deployer;

create index idx_lp_request_status_type__data_source_deleted_flag
    on history_octane.lp_request_status_type (data_source_deleted_flag);

create index idx_lp_request_status_type__data_source_updated_datetime
    on history_octane.lp_request_status_type (data_source_updated_datetime);

create index idx_lp_request_status_type__etl_batch_id
    on history_octane.lp_request_status_type (etl_batch_id);

grant select on history_octane.lp_request_status_type to readonly;

grant insert, select, update on history_octane.lp_request_status_type to etl_loan;

create table history_octane.lp_submission_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lp_submission_type owner to deployer;

create index idx_lp_submission_type__data_source_deleted_flag
    on history_octane.lp_submission_type (data_source_deleted_flag);

create index idx_lp_submission_type__data_source_updated_datetime
    on history_octane.lp_submission_type (data_source_updated_datetime);

create index idx_lp_submission_type__etl_batch_id
    on history_octane.lp_submission_type (etl_batch_id);

grant select on history_octane.lp_submission_type to readonly;

grant insert, select, update on history_octane.lp_submission_type to etl_loan;

create table history_octane.lqa_purchase_eligibility_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lqa_purchase_eligibility_type owner to deployer;

create index idx_lqa_purchase_eligibility_type__data_source_deleted_flag
    on history_octane.lqa_purchase_eligibility_type (data_source_deleted_flag);

create index idx_lqa_purchase_eligibility_type__data_source_updated_datetime
    on history_octane.lqa_purchase_eligibility_type (data_source_updated_datetime);

create index idx_lqa_purchase_eligibility_type__etl_batch_id
    on history_octane.lqa_purchase_eligibility_type (etl_batch_id);

grant select on history_octane.lqa_purchase_eligibility_type to readonly;

grant insert, select, update on history_octane.lqa_purchase_eligibility_type to etl_loan;

create table history_octane.lura_file_repository_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lura_file_repository_type owner to deployer;

create index idx_lura_file_repository_type__data_source_deleted_flag
    on history_octane.lura_file_repository_type (data_source_deleted_flag);

create index idx_lura_file_repository_type__data_source_updated_datetime
    on history_octane.lura_file_repository_type (data_source_updated_datetime);

create index idx_lura_file_repository_type__etl_batch_id
    on history_octane.lura_file_repository_type (etl_batch_id);

grant select on history_octane.lura_file_repository_type to readonly;

grant insert, select, update on history_octane.lura_file_repository_type to etl_loan;

create table history_octane.lura_setting_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.lura_setting_type owner to deployer;

create index idx_lura_setting_type__data_source_deleted_flag
    on history_octane.lura_setting_type (data_source_deleted_flag);

create index idx_lura_setting_type__data_source_updated_datetime
    on history_octane.lura_setting_type (data_source_updated_datetime);

create index idx_lura_setting_type__etl_batch_id
    on history_octane.lura_setting_type (etl_batch_id);

grant select on history_octane.lura_setting_type to readonly;

grant insert, select, update on history_octane.lura_setting_type to etl_loan;

create table history_octane.manufactured_home_certificate_of_title_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.manufactured_home_certificate_of_title_type owner to deployer;

create index idx_45f06c6a371405e4b14730f32a14dce0
    on history_octane.manufactured_home_certificate_of_title_type (data_source_deleted_flag);

create index idx_4268fd87e5801bfaeb9e091f48105803
    on history_octane.manufactured_home_certificate_of_title_type (data_source_updated_datetime);

create index idx_manufactured_home_certificate_of_title_type__etl_batch_id
    on history_octane.manufactured_home_certificate_of_title_type (etl_batch_id);

grant select on history_octane.manufactured_home_certificate_of_title_type to readonly;

grant insert, select, update on history_octane.manufactured_home_certificate_of_title_type to etl_loan;

create table history_octane.manufactured_home_leasehold_property_interest_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.manufactured_home_leasehold_property_interest_type owner to deployer;

create index idx_2710d0c2e24d5dd0705026c5f3865755
    on history_octane.manufactured_home_leasehold_property_interest_type (data_source_deleted_flag);

create index idx_2ef0f30b8d2ffe3cdffce081886784bc
    on history_octane.manufactured_home_leasehold_property_interest_type (data_source_updated_datetime);

create index idx_c9af8f33996aa148e493ad8be9da53be
    on history_octane.manufactured_home_leasehold_property_interest_type (etl_batch_id);

grant select on history_octane.manufactured_home_leasehold_property_interest_type to readonly;

grant insert, select, update on history_octane.manufactured_home_leasehold_property_interest_type to etl_loan;

create table history_octane.manufactured_home_loan_purpose_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.manufactured_home_loan_purpose_type owner to deployer;

create index idx_595a7f7c2ef56994fe49261d62e552a7
    on history_octane.manufactured_home_loan_purpose_type (data_source_deleted_flag);

create index idx_f6f0b0d394352b9ae1c48a3c398adbc4
    on history_octane.manufactured_home_loan_purpose_type (data_source_updated_datetime);

create index idx_manufactured_home_loan_purpose_type__etl_batch_id
    on history_octane.manufactured_home_loan_purpose_type (etl_batch_id);

grant select on history_octane.manufactured_home_loan_purpose_type to readonly;

grant insert, select, update on history_octane.manufactured_home_loan_purpose_type to etl_loan;

create table history_octane.marital_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.marital_status_type owner to deployer;

create index idx_marital_status_type__data_source_deleted_flag
    on history_octane.marital_status_type (data_source_deleted_flag);

create index idx_marital_status_type__data_source_updated_datetime
    on history_octane.marital_status_type (data_source_updated_datetime);

create index idx_marital_status_type__etl_batch_id
    on history_octane.marital_status_type (etl_batch_id);

grant select on history_octane.marital_status_type to readonly;

grant insert, select, update on history_octane.marital_status_type to etl_loan;

create table history_octane.master_property_insurance_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.master_property_insurance_type owner to deployer;

create index idx_master_property_insurance_type__data_source_deleted_flag
    on history_octane.master_property_insurance_type (data_source_deleted_flag);

create index idx_b4618368c40320c0d566f34d15852ccc
    on history_octane.master_property_insurance_type (data_source_updated_datetime);

create index idx_master_property_insurance_type__etl_batch_id
    on history_octane.master_property_insurance_type (etl_batch_id);

grant select on history_octane.master_property_insurance_type to readonly;

grant insert, select, update on history_octane.master_property_insurance_type to etl_loan;

create table history_octane.mcr_loan_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.mcr_loan_status_type owner to deployer;

create index idx_mcr_loan_status_type__data_source_deleted_flag
    on history_octane.mcr_loan_status_type (data_source_deleted_flag);

create index idx_mcr_loan_status_type__data_source_updated_datetime
    on history_octane.mcr_loan_status_type (data_source_updated_datetime);

create index idx_mcr_loan_status_type__etl_batch_id
    on history_octane.mcr_loan_status_type (etl_batch_id);

grant select on history_octane.mcr_loan_status_type to readonly;

grant insert, select, update on history_octane.mcr_loan_status_type to etl_loan;

create table history_octane.mercury_client_group
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    mcg_pid bigint not null,
    mcg_version integer,
    mcg_account_pid bigint,
    mcg_mercury_client_group_name varchar(1024),
    mcg_mercury_client_group_id integer,
    mcg_active boolean,
    etl_batch_id text
);

alter table history_octane.mercury_client_group owner to deployer;

create index idx_mercury_client_group__data_source_deleted_flag
    on history_octane.mercury_client_group (data_source_deleted_flag);

create index idx_mercury_client_group__data_source_updated_datetime
    on history_octane.mercury_client_group (data_source_updated_datetime);

create index idx_mercury_client_group__pid
    on history_octane.mercury_client_group (mcg_pid);

create index idx_mercury_client_group__pid_version
    on history_octane.mercury_client_group (mcg_pid, mcg_version);

create index idx_mercury_client_group__etl_batch_id
    on history_octane.mercury_client_group (etl_batch_id);

grant select on history_octane.mercury_client_group to readonly;

grant insert, select, update on history_octane.mercury_client_group to etl_loan;

create table history_octane.mercury_network_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.mercury_network_status_type owner to deployer;

create index idx_mercury_network_status_type__data_source_deleted_flag
    on history_octane.mercury_network_status_type (data_source_deleted_flag);

create index idx_mercury_network_status_type__data_source_updated_datetime
    on history_octane.mercury_network_status_type (data_source_updated_datetime);

create index idx_mercury_network_status_type__etl_batch_id
    on history_octane.mercury_network_status_type (etl_batch_id);

grant select on history_octane.mercury_network_status_type to readonly;

grant insert, select, update on history_octane.mercury_network_status_type to etl_loan;

create table history_octane.mers_daily_report_import_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.mers_daily_report_import_status_type owner to deployer;

create index idx_0dff87b1cb5f3583a454a5b4802fb79a
    on history_octane.mers_daily_report_import_status_type (data_source_deleted_flag);

create index idx_beb5801ff471fc77d3b9e5f9b6e88706
    on history_octane.mers_daily_report_import_status_type (data_source_updated_datetime);

create index idx_mers_daily_report_import_status_type__etl_batch_id
    on history_octane.mers_daily_report_import_status_type (etl_batch_id);

grant select on history_octane.mers_daily_report_import_status_type to readonly;

grant insert, select, update on history_octane.mers_daily_report_import_status_type to etl_loan;

create table history_octane.mers_registration_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.mers_registration_status_type owner to deployer;

create index idx_mers_registration_status_type__data_source_deleted_flag
    on history_octane.mers_registration_status_type (data_source_deleted_flag);

create index idx_mers_registration_status_type__data_source_updated_datetime
    on history_octane.mers_registration_status_type (data_source_updated_datetime);

create index idx_mers_registration_status_type__etl_batch_id
    on history_octane.mers_registration_status_type (etl_batch_id);

grant select on history_octane.mers_registration_status_type to readonly;

grant insert, select, update on history_octane.mers_registration_status_type to etl_loan;

create table history_octane.mers_transfer_batch
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    metb_pid bigint not null,
    metb_version integer,
    metb_account_pid bigint,
    metb_create_datetime timestamp,
    metb_sent_datetime timestamp,
    metb_batch_id varchar(32),
    etl_batch_id text
);

alter table history_octane.mers_transfer_batch owner to deployer;

create index idx_mers_transfer_batch__data_source_deleted_flag
    on history_octane.mers_transfer_batch (data_source_deleted_flag);

create index idx_mers_transfer_batch__data_source_updated_datetime
    on history_octane.mers_transfer_batch (data_source_updated_datetime);

create index idx_mers_transfer_batch__pid
    on history_octane.mers_transfer_batch (metb_pid);

create index idx_mers_transfer_batch__pid_version
    on history_octane.mers_transfer_batch (metb_pid, metb_version);

create index idx_mers_transfer_batch__etl_batch_id
    on history_octane.mers_transfer_batch (etl_batch_id);

grant select on history_octane.mers_transfer_batch to readonly;

grant insert, select, update on history_octane.mers_transfer_batch to etl_loan;

create table history_octane.mers_transfer_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.mers_transfer_status_type owner to deployer;

create index idx_mers_transfer_status_type__data_source_deleted_flag
    on history_octane.mers_transfer_status_type (data_source_deleted_flag);

create index idx_mers_transfer_status_type__data_source_updated_datetime
    on history_octane.mers_transfer_status_type (data_source_updated_datetime);

create index idx_mers_transfer_status_type__etl_batch_id
    on history_octane.mers_transfer_status_type (etl_batch_id);

grant select on history_octane.mers_transfer_status_type to readonly;

grant insert, select, update on history_octane.mers_transfer_status_type to etl_loan;

create table history_octane.mi_calculated_rate_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.mi_calculated_rate_type owner to deployer;

create index idx_mi_calculated_rate_type__data_source_deleted_flag
    on history_octane.mi_calculated_rate_type (data_source_deleted_flag);

create index idx_mi_calculated_rate_type__data_source_updated_datetime
    on history_octane.mi_calculated_rate_type (data_source_updated_datetime);

create index idx_mi_calculated_rate_type__etl_batch_id
    on history_octane.mi_calculated_rate_type (etl_batch_id);

grant select on history_octane.mi_calculated_rate_type to readonly;

grant insert, select, update on history_octane.mi_calculated_rate_type to etl_loan;

create table history_octane.mi_company_name_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.mi_company_name_type owner to deployer;

create index idx_mi_company_name_type__data_source_deleted_flag
    on history_octane.mi_company_name_type (data_source_deleted_flag);

create index idx_mi_company_name_type__data_source_updated_datetime
    on history_octane.mi_company_name_type (data_source_updated_datetime);

create index idx_mi_company_name_type__etl_batch_id
    on history_octane.mi_company_name_type (etl_batch_id);

grant select on history_octane.mi_company_name_type to readonly;

grant insert, select, update on history_octane.mi_company_name_type to etl_loan;

create table history_octane.mi_initial_calculation_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.mi_initial_calculation_type owner to deployer;

create index idx_mi_initial_calculation_type__data_source_deleted_flag
    on history_octane.mi_initial_calculation_type (data_source_deleted_flag);

create index idx_mi_initial_calculation_type__data_source_updated_datetime
    on history_octane.mi_initial_calculation_type (data_source_updated_datetime);

create index idx_mi_initial_calculation_type__etl_batch_id
    on history_octane.mi_initial_calculation_type (etl_batch_id);

grant select on history_octane.mi_initial_calculation_type to readonly;

grant insert, select, update on history_octane.mi_initial_calculation_type to etl_loan;

create table history_octane.mi_input_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.mi_input_type owner to deployer;

create index idx_mi_input_type__data_source_deleted_flag
    on history_octane.mi_input_type (data_source_deleted_flag);

create index idx_mi_input_type__data_source_updated_datetime
    on history_octane.mi_input_type (data_source_updated_datetime);

create index idx_mi_input_type__etl_batch_id
    on history_octane.mi_input_type (etl_batch_id);

grant select on history_octane.mi_input_type to readonly;

grant insert, select, update on history_octane.mi_input_type to etl_loan;

create table history_octane.mi_integration_request_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.mi_integration_request_type owner to deployer;

create index idx_mi_integration_request_type__data_source_deleted_flag
    on history_octane.mi_integration_request_type (data_source_deleted_flag);

create index idx_mi_integration_request_type__data_source_updated_datetime
    on history_octane.mi_integration_request_type (data_source_updated_datetime);

create index idx_mi_integration_request_type__etl_batch_id
    on history_octane.mi_integration_request_type (etl_batch_id);

grant select on history_octane.mi_integration_request_type to readonly;

grant insert, select, update on history_octane.mi_integration_request_type to etl_loan;

create table history_octane.mi_integration_vendor_request_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.mi_integration_vendor_request_status_type owner to deployer;

create index idx_09ab4afac5e772ecee63431f37640deb
    on history_octane.mi_integration_vendor_request_status_type (data_source_deleted_flag);

create index idx_399087273c2ec35783109942cc8e7224
    on history_octane.mi_integration_vendor_request_status_type (data_source_updated_datetime);

create index idx_mi_integration_vendor_request_status_type__etl_batch_id
    on history_octane.mi_integration_vendor_request_status_type (etl_batch_id);

grant select on history_octane.mi_integration_vendor_request_status_type to readonly;

grant insert, select, update on history_octane.mi_integration_vendor_request_status_type to etl_loan;

create table history_octane.mi_payer_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.mi_payer_type owner to deployer;

create index idx_mi_payer_type__data_source_deleted_flag
    on history_octane.mi_payer_type (data_source_deleted_flag);

create index idx_mi_payer_type__data_source_updated_datetime
    on history_octane.mi_payer_type (data_source_updated_datetime);

create index idx_mi_payer_type__etl_batch_id
    on history_octane.mi_payer_type (etl_batch_id);

grant select on history_octane.mi_payer_type to readonly;

grant insert, select, update on history_octane.mi_payer_type to etl_loan;

create table history_octane.mi_payment_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.mi_payment_type owner to deployer;

create index idx_mi_payment_type__data_source_deleted_flag
    on history_octane.mi_payment_type (data_source_deleted_flag);

create index idx_mi_payment_type__data_source_updated_datetime
    on history_octane.mi_payment_type (data_source_updated_datetime);

create index idx_mi_payment_type__etl_batch_id
    on history_octane.mi_payment_type (etl_batch_id);

grant select on history_octane.mi_payment_type to readonly;

grant insert, select, update on history_octane.mi_payment_type to etl_loan;

create table history_octane.mi_premium_refundable_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.mi_premium_refundable_type owner to deployer;

create index idx_mi_premium_refundable_type__data_source_deleted_flag
    on history_octane.mi_premium_refundable_type (data_source_deleted_flag);

create index idx_mi_premium_refundable_type__data_source_updated_datetime
    on history_octane.mi_premium_refundable_type (data_source_updated_datetime);

create index idx_mi_premium_refundable_type__etl_batch_id
    on history_octane.mi_premium_refundable_type (etl_batch_id);

grant select on history_octane.mi_premium_refundable_type to readonly;

grant insert, select, update on history_octane.mi_premium_refundable_type to etl_loan;

create table history_octane.mi_renewal_calculation_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.mi_renewal_calculation_type owner to deployer;

create index idx_mi_renewal_calculation_type__data_source_deleted_flag
    on history_octane.mi_renewal_calculation_type (data_source_deleted_flag);

create index idx_mi_renewal_calculation_type__data_source_updated_datetime
    on history_octane.mi_renewal_calculation_type (data_source_updated_datetime);

create index idx_mi_renewal_calculation_type__etl_batch_id
    on history_octane.mi_renewal_calculation_type (etl_batch_id);

grant select on history_octane.mi_renewal_calculation_type to readonly;

grant insert, select, update on history_octane.mi_renewal_calculation_type to etl_loan;

create table history_octane.mi_submission_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.mi_submission_type owner to deployer;

create index idx_mi_submission_type__data_source_deleted_flag
    on history_octane.mi_submission_type (data_source_deleted_flag);

create index idx_mi_submission_type__data_source_updated_datetime
    on history_octane.mi_submission_type (data_source_updated_datetime);

create index idx_mi_submission_type__etl_batch_id
    on history_octane.mi_submission_type (etl_batch_id);

grant select on history_octane.mi_submission_type to readonly;

grant insert, select, update on history_octane.mi_submission_type to etl_loan;

create table history_octane.military_branch_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.military_branch_type owner to deployer;

create index idx_military_branch_type__data_source_deleted_flag
    on history_octane.military_branch_type (data_source_deleted_flag);

create index idx_military_branch_type__data_source_updated_datetime
    on history_octane.military_branch_type (data_source_updated_datetime);

create index idx_military_branch_type__etl_batch_id
    on history_octane.military_branch_type (etl_batch_id);

grant select on history_octane.military_branch_type to readonly;

grant insert, select, update on history_octane.military_branch_type to etl_loan;

create table history_octane.military_service_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.military_service_type owner to deployer;

create index idx_military_service_type__data_source_deleted_flag
    on history_octane.military_service_type (data_source_deleted_flag);

create index idx_military_service_type__data_source_updated_datetime
    on history_octane.military_service_type (data_source_updated_datetime);

create index idx_military_service_type__etl_batch_id
    on history_octane.military_service_type (etl_batch_id);

grant select on history_octane.military_service_type to readonly;

grant insert, select, update on history_octane.military_service_type to etl_loan;

create table history_octane.military_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.military_status_type owner to deployer;

create index idx_military_status_type__data_source_deleted_flag
    on history_octane.military_status_type (data_source_deleted_flag);

create index idx_military_status_type__data_source_updated_datetime
    on history_octane.military_status_type (data_source_updated_datetime);

create index idx_military_status_type__etl_batch_id
    on history_octane.military_status_type (etl_batch_id);

grant select on history_octane.military_status_type to readonly;

grant insert, select, update on history_octane.military_status_type to etl_loan;

create table history_octane.mismo_version_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.mismo_version_type owner to deployer;

create index idx_mismo_version_type__data_source_deleted_flag
    on history_octane.mismo_version_type (data_source_deleted_flag);

create index idx_mismo_version_type__data_source_updated_datetime
    on history_octane.mismo_version_type (data_source_updated_datetime);

create index idx_mismo_version_type__etl_batch_id
    on history_octane.mismo_version_type (etl_batch_id);

grant select on history_octane.mismo_version_type to readonly;

grant insert, select, update on history_octane.mismo_version_type to etl_loan;

create table history_octane.mortech_account
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ma_pid bigint not null,
    ma_version integer,
    ma_account_pid bigint,
    ma_name varchar(128),
    ma_mortech_customer_id varchar(128),
    etl_batch_id text
);

alter table history_octane.mortech_account owner to deployer;

create index idx_mortech_account__data_source_deleted_flag
    on history_octane.mortech_account (data_source_deleted_flag);

create index idx_mortech_account__data_source_updated_datetime
    on history_octane.mortech_account (data_source_updated_datetime);

create index idx_mortech_account__pid
    on history_octane.mortech_account (ma_pid);

create index idx_mortech_account__pid_version
    on history_octane.mortech_account (ma_pid, ma_version);

create index idx_mortech_account__etl_batch_id
    on history_octane.mortech_account (etl_batch_id);

grant select on history_octane.mortech_account to readonly;

grant insert, select, update on history_octane.mortech_account to etl_loan;

create table history_octane.lead_source
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lds_pid bigint not null,
    lds_version integer,
    lds_account_pid bigint,
    lds_channel_pid bigint,
    lds_lead_source_name varchar(128),
    lds_mortech_lead_source_id varchar(16),
    lds_lead_source_id varchar(32),
    lds_active boolean,
    lds_lead_id_required boolean,
    lds_zero_margin_allowed boolean,
    lds_mortech_account_pid bigint,
    lds_training_only boolean,
    lds_broker_compensation_type varchar(128),
    etl_batch_id text
);

alter table history_octane.lead_source owner to deployer;

create index idx_lead_source__data_source_deleted_flag
    on history_octane.lead_source (data_source_deleted_flag);

create index idx_lead_source__data_source_updated_datetime
    on history_octane.lead_source (data_source_updated_datetime);

create index idx_lead_source__pid
    on history_octane.lead_source (lds_pid);

create index idx_lead_source__pid_version
    on history_octane.lead_source (lds_pid, lds_version);

create index fkt_lds_broker_compensation_type
    on history_octane.lead_source (lds_broker_compensation_type);

create index idx_lead_source__etl_batch_id
    on history_octane.lead_source (etl_batch_id);

grant select on history_octane.lead_source to readonly;

grant insert, select, update on history_octane.lead_source to etl_loan;

create table history_octane.lead_campaign
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ldc_pid bigint not null,
    ldc_version integer,
    ldc_account_pid bigint,
    ldc_lead_source_pid bigint,
    ldc_campaign_id varchar(32),
    ldc_campaign_name varchar(128),
    ldc_velocify_campaign_title varchar(32),
    etl_batch_id text
);

alter table history_octane.lead_campaign owner to deployer;

create index idx_lead_campaign__data_source_deleted_flag
    on history_octane.lead_campaign (data_source_deleted_flag);

create index idx_lead_campaign__data_source_updated_datetime
    on history_octane.lead_campaign (data_source_updated_datetime);

create index idx_lead_campaign__pid
    on history_octane.lead_campaign (ldc_pid);

create index idx_lead_campaign__pid_version
    on history_octane.lead_campaign (ldc_pid, ldc_version);

create index idx_lead_campaign__etl_batch_id
    on history_octane.lead_campaign (etl_batch_id);

grant select on history_octane.lead_campaign to readonly;

grant insert, select, update on history_octane.lead_campaign to etl_loan;

create table history_octane.lead_supplemental_margin_table
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lsmt_pid bigint not null,
    lsmt_version integer,
    lsmt_lead_source_pid bigint,
    lsmt_effective_datetime timestamp,
    etl_batch_id text
);

alter table history_octane.lead_supplemental_margin_table owner to deployer;

create index idx_lead_supplemental_margin_table__data_source_deleted_flag
    on history_octane.lead_supplemental_margin_table (data_source_deleted_flag);

create index idx_ed4c35b5f5ffb113dd13af8e0c4620ce
    on history_octane.lead_supplemental_margin_table (data_source_updated_datetime);

create index idx_lead_supplemental_margin_table__pid
    on history_octane.lead_supplemental_margin_table (lsmt_pid);

create index idx_lead_supplemental_margin_table__pid_version
    on history_octane.lead_supplemental_margin_table (lsmt_pid, lsmt_version);

create index idx_lead_supplemental_margin_table__etl_batch_id
    on history_octane.lead_supplemental_margin_table (etl_batch_id);

grant select on history_octane.lead_supplemental_margin_table to readonly;

grant insert, select, update on history_octane.lead_supplemental_margin_table to etl_loan;

create table history_octane.lead_supplemental_margin_row
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lsmr_pid bigint not null,
    lsmr_version integer,
    lsmr_lead_supplemental_margin_table_pid bigint,
    lsmr_over_anchor_rate_percent numeric(11,9),
    lsmr_company_supplemental_margin_percent numeric(11,9),
    lsmr_branch_supplemental_margin_percent numeric(11,9),
    etl_batch_id text
);

alter table history_octane.lead_supplemental_margin_row owner to deployer;

create index idx_lead_supplemental_margin_row__data_source_deleted_flag
    on history_octane.lead_supplemental_margin_row (data_source_deleted_flag);

create index idx_lead_supplemental_margin_row__data_source_updated_datetime
    on history_octane.lead_supplemental_margin_row (data_source_updated_datetime);

create index idx_lead_supplemental_margin_row__pid
    on history_octane.lead_supplemental_margin_row (lsmr_pid);

create index idx_lead_supplemental_margin_row__pid_version
    on history_octane.lead_supplemental_margin_row (lsmr_pid, lsmr_version);

create index idx_lead_supplemental_margin_row__etl_batch_id
    on history_octane.lead_supplemental_margin_row (etl_batch_id);

grant select on history_octane.lead_supplemental_margin_row to readonly;

grant insert, select, update on history_octane.lead_supplemental_margin_row to etl_loan;

create table history_octane.mortgage_credit_certificate_issuer
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    mcci_pid bigint not null,
    mcci_version integer,
    mcci_account_pid bigint,
    mcci_from_date date,
    mcci_through_date date,
    mcci_issuer_name varchar(128),
    mcci_credit_rate_percent numeric(11,9),
    mcci_ein varchar(10),
    mcci_contact_name varchar(128),
    mcci_contact_phone varchar(128),
    mcci_address_street1 varchar(128),
    mcci_address_street2 varchar(128),
    mcci_address_city varchar(128),
    mcci_address_state varchar(128),
    mcci_address_postal_code varchar(128),
    mcci_contact_email varchar(256),
    mcci_web_url varchar(256),
    mcci_notes varchar(1024),
    etl_batch_id text
);

alter table history_octane.mortgage_credit_certificate_issuer owner to deployer;

create index idx_71e7976d369c0cd592bfdfeed89ca9ae
    on history_octane.mortgage_credit_certificate_issuer (data_source_deleted_flag);

create index idx_2445c818d7787d88c7c8383c065dcfff
    on history_octane.mortgage_credit_certificate_issuer (data_source_updated_datetime);

create index idx_mortgage_credit_certificate_issuer__pid
    on history_octane.mortgage_credit_certificate_issuer (mcci_pid);

create index idx_mortgage_credit_certificate_issuer__pid_version
    on history_octane.mortgage_credit_certificate_issuer (mcci_pid, mcci_version);

create index idx_mortgage_credit_certificate_issuer__etl_batch_id
    on history_octane.mortgage_credit_certificate_issuer (etl_batch_id);

grant select on history_octane.mortgage_credit_certificate_issuer to readonly;

grant insert, select, update on history_octane.mortgage_credit_certificate_issuer to etl_loan;

create table history_octane.mortgage_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.mortgage_type owner to deployer;

create index idx_mortgage_type__data_source_deleted_flag
    on history_octane.mortgage_type (data_source_deleted_flag);

create index idx_mortgage_type__data_source_updated_datetime
    on history_octane.mortgage_type (data_source_updated_datetime);

create index idx_mortgage_type__etl_batch_id
    on history_octane.mortgage_type (etl_batch_id);

grant select on history_octane.mortgage_type to readonly;

grant insert, select, update on history_octane.mortgage_type to etl_loan;

create table history_octane.native_american_lands_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.native_american_lands_type owner to deployer;

create index idx_native_american_lands_type__data_source_deleted_flag
    on history_octane.native_american_lands_type (data_source_deleted_flag);

create index idx_native_american_lands_type__data_source_updated_datetime
    on history_octane.native_american_lands_type (data_source_updated_datetime);

create index idx_native_american_lands_type__etl_batch_id
    on history_octane.native_american_lands_type (etl_batch_id);

grant select on history_octane.native_american_lands_type to readonly;

grant insert, select, update on history_octane.native_american_lands_type to etl_loan;

create table history_octane.negative_amortization_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.negative_amortization_type owner to deployer;

create index idx_negative_amortization_type__data_source_deleted_flag
    on history_octane.negative_amortization_type (data_source_deleted_flag);

create index idx_negative_amortization_type__data_source_updated_datetime
    on history_octane.negative_amortization_type (data_source_updated_datetime);

create index idx_negative_amortization_type__etl_batch_id
    on history_octane.negative_amortization_type (etl_batch_id);

grant select on history_octane.negative_amortization_type to readonly;

grant insert, select, update on history_octane.negative_amortization_type to etl_loan;

create table history_octane.neighborhood_location_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.neighborhood_location_type owner to deployer;

create index idx_neighborhood_location_type__data_source_deleted_flag
    on history_octane.neighborhood_location_type (data_source_deleted_flag);

create index idx_neighborhood_location_type__data_source_updated_datetime
    on history_octane.neighborhood_location_type (data_source_updated_datetime);

create index idx_neighborhood_location_type__etl_batch_id
    on history_octane.neighborhood_location_type (etl_batch_id);

grant select on history_octane.neighborhood_location_type to readonly;

grant insert, select, update on history_octane.neighborhood_location_type to etl_loan;

create table history_octane.net_tangible_benefit_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.net_tangible_benefit_type owner to deployer;

create index idx_net_tangible_benefit_type__data_source_deleted_flag
    on history_octane.net_tangible_benefit_type (data_source_deleted_flag);

create index idx_net_tangible_benefit_type__data_source_updated_datetime
    on history_octane.net_tangible_benefit_type (data_source_updated_datetime);

create index idx_net_tangible_benefit_type__etl_batch_id
    on history_octane.net_tangible_benefit_type (etl_batch_id);

grant select on history_octane.net_tangible_benefit_type to readonly;

grant insert, select, update on history_octane.net_tangible_benefit_type to etl_loan;

create table history_octane.nfip_community_participation_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.nfip_community_participation_status_type owner to deployer;

create index idx_20d9223d8a398acce5c11b47186277a2
    on history_octane.nfip_community_participation_status_type (data_source_deleted_flag);

create index idx_9379db229e0f6508cddd38d2bf4d0372
    on history_octane.nfip_community_participation_status_type (data_source_updated_datetime);

create index idx_nfip_community_participation_status_type__etl_batch_id
    on history_octane.nfip_community_participation_status_type (etl_batch_id);

grant select on history_octane.nfip_community_participation_status_type to readonly;

grant insert, select, update on history_octane.nfip_community_participation_status_type to etl_loan;

create table history_octane.obligation_amount_input_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.obligation_amount_input_type owner to deployer;

create index idx_obligation_amount_input_type__data_source_deleted_flag
    on history_octane.obligation_amount_input_type (data_source_deleted_flag);

create index idx_obligation_amount_input_type__data_source_updated_datetime
    on history_octane.obligation_amount_input_type (data_source_updated_datetime);

create index idx_obligation_amount_input_type__etl_batch_id
    on history_octane.obligation_amount_input_type (etl_batch_id);

grant select on history_octane.obligation_amount_input_type to readonly;

grant insert, select, update on history_octane.obligation_amount_input_type to etl_loan;

create table history_octane.obligation_charge_input_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.obligation_charge_input_type owner to deployer;

create index idx_obligation_charge_input_type__data_source_deleted_flag
    on history_octane.obligation_charge_input_type (data_source_deleted_flag);

create index idx_obligation_charge_input_type__data_source_updated_datetime
    on history_octane.obligation_charge_input_type (data_source_updated_datetime);

create index idx_obligation_charge_input_type__etl_batch_id
    on history_octane.obligation_charge_input_type (etl_batch_id);

grant select on history_octane.obligation_charge_input_type to readonly;

grant insert, select, update on history_octane.obligation_charge_input_type to etl_loan;

create table history_octane.obligation_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.obligation_type owner to deployer;

create index idx_obligation_type__data_source_deleted_flag
    on history_octane.obligation_type (data_source_deleted_flag);

create index idx_obligation_type__data_source_updated_datetime
    on history_octane.obligation_type (data_source_updated_datetime);

create index idx_obligation_type__etl_batch_id
    on history_octane.obligation_type (etl_batch_id);

grant select on history_octane.obligation_type to readonly;

grant insert, select, update on history_octane.obligation_type to etl_loan;

create table history_octane.offering_group
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ofg_pid bigint not null,
    ofg_version integer,
    ofg_account_pid bigint,
    ofg_name varchar(128),
    etl_batch_id text
);

alter table history_octane.offering_group owner to deployer;

create index idx_offering_group__data_source_deleted_flag
    on history_octane.offering_group (data_source_deleted_flag);

create index idx_offering_group__data_source_updated_datetime
    on history_octane.offering_group (data_source_updated_datetime);

create index idx_offering_group__pid
    on history_octane.offering_group (ofg_pid);

create index idx_offering_group__pid_version
    on history_octane.offering_group (ofg_pid, ofg_version);

create index idx_offering_group__etl_batch_id
    on history_octane.offering_group (etl_batch_id);

grant select on history_octane.offering_group to readonly;

grant insert, select, update on history_octane.offering_group to etl_loan;

create table history_octane.offering
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    of_pid bigint not null,
    of_version integer,
    of_account_pid bigint,
    of_offering_name varchar(128),
    of_offering_id varchar(32),
    of_from_date date,
    of_through_date date,
    of_mortech_product_id varchar(16),
    of_offering_group_pid bigint,
    of_adverse_action_offering boolean,
    etl_batch_id text
);

alter table history_octane.offering owner to deployer;

create index idx_offering__data_source_deleted_flag
    on history_octane.offering (data_source_deleted_flag);

create index idx_offering__data_source_updated_datetime
    on history_octane.offering (data_source_updated_datetime);

create index idx_offering__pid
    on history_octane.offering (of_pid);

create index idx_offering__pid_version
    on history_octane.offering (of_pid, of_version);

create index idx_offering__etl_batch_id
    on history_octane.offering (etl_batch_id);

grant select on history_octane.offering to readonly;

grant insert, select, update on history_octane.offering to etl_loan;

create table history_octane.origination_source_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.origination_source_type owner to deployer;

create index idx_origination_source_type__data_source_deleted_flag
    on history_octane.origination_source_type (data_source_deleted_flag);

create index idx_origination_source_type__data_source_updated_datetime
    on history_octane.origination_source_type (data_source_updated_datetime);

create index idx_origination_source_type__etl_batch_id
    on history_octane.origination_source_type (etl_batch_id);

grant select on history_octane.origination_source_type to readonly;

grant insert, select, update on history_octane.origination_source_type to etl_loan;

create table history_octane.other_income_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.other_income_type owner to deployer;

create index idx_other_income_type__data_source_deleted_flag
    on history_octane.other_income_type (data_source_deleted_flag);

create index idx_other_income_type__data_source_updated_datetime
    on history_octane.other_income_type (data_source_updated_datetime);

create index idx_other_income_type__etl_batch_id
    on history_octane.other_income_type (etl_batch_id);

grant select on history_octane.other_income_type to readonly;

grant insert, select, update on history_octane.other_income_type to etl_loan;

create table history_octane.partial_payment_policy_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.partial_payment_policy_type owner to deployer;

create index idx_partial_payment_policy_type__data_source_deleted_flag
    on history_octane.partial_payment_policy_type (data_source_deleted_flag);

create index idx_partial_payment_policy_type__data_source_updated_datetime
    on history_octane.partial_payment_policy_type (data_source_updated_datetime);

create index idx_partial_payment_policy_type__etl_batch_id
    on history_octane.partial_payment_policy_type (etl_batch_id);

grant select on history_octane.partial_payment_policy_type to readonly;

grant insert, select, update on history_octane.partial_payment_policy_type to etl_loan;

create table history_octane.payment_adjustment_calculation_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.payment_adjustment_calculation_type owner to deployer;

create index idx_539a306f399b219c3e2825420e453dba
    on history_octane.payment_adjustment_calculation_type (data_source_deleted_flag);

create index idx_938904d3353c0d1f39f872af85c9d55b
    on history_octane.payment_adjustment_calculation_type (data_source_updated_datetime);

create index idx_payment_adjustment_calculation_type__etl_batch_id
    on history_octane.payment_adjustment_calculation_type (etl_batch_id);

grant select on history_octane.payment_adjustment_calculation_type to readonly;

grant insert, select, update on history_octane.payment_adjustment_calculation_type to etl_loan;

create table history_octane.payment_frequency_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.payment_frequency_type owner to deployer;

create index idx_payment_frequency_type__data_source_deleted_flag
    on history_octane.payment_frequency_type (data_source_deleted_flag);

create index idx_payment_frequency_type__data_source_updated_datetime
    on history_octane.payment_frequency_type (data_source_updated_datetime);

create index idx_payment_frequency_type__etl_batch_id
    on history_octane.payment_frequency_type (etl_batch_id);

grant select on history_octane.payment_frequency_type to readonly;

grant insert, select, update on history_octane.payment_frequency_type to etl_loan;

create table history_octane.payment_fulfill_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.payment_fulfill_type owner to deployer;

create index idx_payment_fulfill_type__data_source_deleted_flag
    on history_octane.payment_fulfill_type (data_source_deleted_flag);

create index idx_payment_fulfill_type__data_source_updated_datetime
    on history_octane.payment_fulfill_type (data_source_updated_datetime);

create index idx_payment_fulfill_type__etl_batch_id
    on history_octane.payment_fulfill_type (etl_batch_id);

grant select on history_octane.payment_fulfill_type to readonly;

grant insert, select, update on history_octane.payment_fulfill_type to etl_loan;

create table history_octane.payment_processing_company_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.payment_processing_company_type owner to deployer;

create index idx_payment_processing_company_type__data_source_deleted_flag
    on history_octane.payment_processing_company_type (data_source_deleted_flag);

create index idx_268adb281a01331aa43b58753cb80e64
    on history_octane.payment_processing_company_type (data_source_updated_datetime);

create index idx_payment_processing_company_type__etl_batch_id
    on history_octane.payment_processing_company_type (etl_batch_id);

grant select on history_octane.payment_processing_company_type to readonly;

grant insert, select, update on history_octane.payment_processing_company_type to etl_loan;

create table history_octane.payment_request_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.payment_request_type owner to deployer;

create index idx_payment_request_type__data_source_deleted_flag
    on history_octane.payment_request_type (data_source_deleted_flag);

create index idx_payment_request_type__data_source_updated_datetime
    on history_octane.payment_request_type (data_source_updated_datetime);

create index idx_payment_request_type__etl_batch_id
    on history_octane.payment_request_type (etl_batch_id);

grant select on history_octane.payment_request_type to readonly;

grant insert, select, update on history_octane.payment_request_type to etl_loan;

create table history_octane.payment_structure_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.payment_structure_type owner to deployer;

create index idx_payment_structure_type__data_source_deleted_flag
    on history_octane.payment_structure_type (data_source_deleted_flag);

create index idx_payment_structure_type__data_source_updated_datetime
    on history_octane.payment_structure_type (data_source_updated_datetime);

create index idx_payment_structure_type__etl_batch_id
    on history_octane.payment_structure_type (etl_batch_id);

grant select on history_octane.payment_structure_type to readonly;

grant insert, select, update on history_octane.payment_structure_type to etl_loan;

create table history_octane.payment_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.payment_type owner to deployer;

create index idx_payment_type__data_source_deleted_flag
    on history_octane.payment_type (data_source_deleted_flag);

create index idx_payment_type__data_source_updated_datetime
    on history_octane.payment_type (data_source_updated_datetime);

create index idx_payment_type__etl_batch_id
    on history_octane.payment_type (etl_batch_id);

grant select on history_octane.payment_type to readonly;

grant insert, select, update on history_octane.payment_type to etl_loan;

create table history_octane.payoff_request_delivery_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.payoff_request_delivery_type owner to deployer;

create index idx_payoff_request_delivery_type__data_source_deleted_flag
    on history_octane.payoff_request_delivery_type (data_source_deleted_flag);

create index idx_payoff_request_delivery_type__data_source_updated_datetime
    on history_octane.payoff_request_delivery_type (data_source_updated_datetime);

create index idx_payoff_request_delivery_type__etl_batch_id
    on history_octane.payoff_request_delivery_type (etl_batch_id);

grant select on history_octane.payoff_request_delivery_type to readonly;

grant insert, select, update on history_octane.payoff_request_delivery_type to etl_loan;

create table history_octane.performer_team
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ptm_pid bigint not null,
    ptm_version integer,
    ptm_account_pid bigint,
    ptm_name varchar(128),
    etl_batch_id text
);

alter table history_octane.performer_team owner to deployer;

create index idx_performer_team__data_source_deleted_flag
    on history_octane.performer_team (data_source_deleted_flag);

create index idx_performer_team__data_source_updated_datetime
    on history_octane.performer_team (data_source_updated_datetime);

create index idx_performer_team__pid
    on history_octane.performer_team (ptm_pid);

create index idx_performer_team__pid_version
    on history_octane.performer_team (ptm_pid, ptm_version);

create index idx_performer_team__etl_batch_id
    on history_octane.performer_team (etl_batch_id);

grant select on history_octane.performer_team to readonly;

grant insert, select, update on history_octane.performer_team to etl_loan;

create table history_octane.polling_interval_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.polling_interval_type owner to deployer;

create index idx_polling_interval_type__data_source_deleted_flag
    on history_octane.polling_interval_type (data_source_deleted_flag);

create index idx_polling_interval_type__data_source_updated_datetime
    on history_octane.polling_interval_type (data_source_updated_datetime);

create index idx_polling_interval_type__etl_batch_id
    on history_octane.polling_interval_type (etl_batch_id);

grant select on history_octane.polling_interval_type to readonly;

grant insert, select, update on history_octane.polling_interval_type to etl_loan;

create table history_octane.prepaid_interest_rate_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.prepaid_interest_rate_type owner to deployer;

create index idx_prepaid_interest_rate_type__data_source_deleted_flag
    on history_octane.prepaid_interest_rate_type (data_source_deleted_flag);

create index idx_prepaid_interest_rate_type__data_source_updated_datetime
    on history_octane.prepaid_interest_rate_type (data_source_updated_datetime);

create index idx_prepaid_interest_rate_type__etl_batch_id
    on history_octane.prepaid_interest_rate_type (etl_batch_id);

grant select on history_octane.prepaid_interest_rate_type to readonly;

grant insert, select, update on history_octane.prepaid_interest_rate_type to etl_loan;

create table history_octane.prepay_penalty_schedule_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.prepay_penalty_schedule_type owner to deployer;

create index idx_prepay_penalty_schedule_type__data_source_deleted_flag
    on history_octane.prepay_penalty_schedule_type (data_source_deleted_flag);

create index idx_prepay_penalty_schedule_type__data_source_updated_datetime
    on history_octane.prepay_penalty_schedule_type (data_source_updated_datetime);

create index idx_prepay_penalty_schedule_type__etl_batch_id
    on history_octane.prepay_penalty_schedule_type (etl_batch_id);

grant select on history_octane.prepay_penalty_schedule_type to readonly;

grant insert, select, update on history_octane.prepay_penalty_schedule_type to etl_loan;

create table history_octane.prepay_penalty_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.prepay_penalty_type owner to deployer;

create index idx_prepay_penalty_type__data_source_deleted_flag
    on history_octane.prepay_penalty_type (data_source_deleted_flag);

create index idx_prepay_penalty_type__data_source_updated_datetime
    on history_octane.prepay_penalty_type (data_source_updated_datetime);

create index idx_prepay_penalty_type__etl_batch_id
    on history_octane.prepay_penalty_type (etl_batch_id);

grant select on history_octane.prepay_penalty_type to readonly;

grant insert, select, update on history_octane.prepay_penalty_type to etl_loan;

create table history_octane.price_processing_time
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ppt_pid bigint not null,
    ppt_version integer,
    ppt_account_pid bigint,
    ppt_los_loan_id_main bigint,
    ppt_start_time timestamp,
    ppt_start_date date,
    ppt_overall_duration_ms bigint,
    ppt_pre_mortech_time_ms bigint,
    ppt_post_mortech_time_ms bigint,
    ppt_num_of_mortech_requests integer,
    ppt_mortech_request_url_1 text,
    ppt_mortech_request_start_time_1 timestamp,
    ppt_mortech_request_time_ms_1 bigint,
    ppt_mortech_request_url_2 text,
    ppt_mortech_request_start_time_2 timestamp,
    ppt_mortech_request_time_ms_2 bigint,
    ppt_mortech_request_url_3 text,
    ppt_mortech_request_start_time_3 timestamp,
    ppt_mortech_request_time_ms_3 bigint,
    ppt_mortech_request_url_4 text,
    ppt_mortech_request_start_time_4 timestamp,
    ppt_mortech_request_time_ms_4 bigint,
    ppt_mortech_request_url_5 text,
    ppt_mortech_request_start_time_5 timestamp,
    ppt_mortech_request_time_ms_5 bigint,
    ppt_mortech_request_url_6 text,
    ppt_mortech_request_start_time_6 timestamp,
    ppt_mortech_request_time_ms_6 bigint,
    ppt_mortech_request_url_7 text,
    ppt_mortech_request_start_time_7 timestamp,
    ppt_mortech_request_time_ms_7 bigint,
    ppt_mortech_request_url_8 text,
    ppt_mortech_request_start_time_8 timestamp,
    ppt_mortech_request_time_ms_8 bigint,
    etl_batch_id text
);

alter table history_octane.price_processing_time owner to deployer;

create index idx_price_processing_time__data_source_deleted_flag
    on history_octane.price_processing_time (data_source_deleted_flag);

create index idx_price_processing_time__data_source_updated_datetime
    on history_octane.price_processing_time (data_source_updated_datetime);

create index idx_price_processing_time__pid
    on history_octane.price_processing_time (ppt_pid);

create index idx_price_processing_time__pid_version
    on history_octane.price_processing_time (ppt_pid, ppt_version);

create index idx_price_processing_time__etl_batch_id
    on history_octane.price_processing_time (etl_batch_id);

grant select on history_octane.price_processing_time to readonly;

grant insert, select, update on history_octane.price_processing_time to etl_loan;

create table history_octane.pricing_engine_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.pricing_engine_type owner to deployer;

create index idx_pricing_engine_type__data_source_deleted_flag
    on history_octane.pricing_engine_type (data_source_deleted_flag);

create index idx_pricing_engine_type__data_source_updated_datetime
    on history_octane.pricing_engine_type (data_source_updated_datetime);

create index idx_pricing_engine_type__etl_batch_id
    on history_octane.pricing_engine_type (etl_batch_id);

grant select on history_octane.pricing_engine_type to readonly;

grant insert, select, update on history_octane.pricing_engine_type to etl_loan;

create table history_octane.prior_property_title_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.prior_property_title_type owner to deployer;

create index idx_prior_property_title_type__data_source_deleted_flag
    on history_octane.prior_property_title_type (data_source_deleted_flag);

create index idx_prior_property_title_type__data_source_updated_datetime
    on history_octane.prior_property_title_type (data_source_updated_datetime);

create index idx_prior_property_title_type__etl_batch_id
    on history_octane.prior_property_title_type (etl_batch_id);

grant select on history_octane.prior_property_title_type to readonly;

grant insert, select, update on history_octane.prior_property_title_type to etl_loan;

create table history_octane.prior_to_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.prior_to_type owner to deployer;

create index idx_prior_to_type__data_source_deleted_flag
    on history_octane.prior_to_type (data_source_deleted_flag);

create index idx_prior_to_type__data_source_updated_datetime
    on history_octane.prior_to_type (data_source_updated_datetime);

create index idx_prior_to_type__etl_batch_id
    on history_octane.prior_to_type (etl_batch_id);

grant select on history_octane.prior_to_type to readonly;

grant insert, select, update on history_octane.prior_to_type to etl_loan;

create table history_octane.product_appraisal_requirement_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.product_appraisal_requirement_type owner to deployer;

create index idx_716e649ac0f4d0b732c45ae8799b788b
    on history_octane.product_appraisal_requirement_type (data_source_deleted_flag);

create index idx_623fbf1694b8957537ffb89201e4c50e
    on history_octane.product_appraisal_requirement_type (data_source_updated_datetime);

create index idx_product_appraisal_requirement_type__etl_batch_id
    on history_octane.product_appraisal_requirement_type (etl_batch_id);

grant select on history_octane.product_appraisal_requirement_type to readonly;

grant insert, select, update on history_octane.product_appraisal_requirement_type to etl_loan;

create table history_octane.product_rule_domain_input_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.product_rule_domain_input_type owner to deployer;

create index idx_product_rule_domain_input_type__data_source_deleted_flag
    on history_octane.product_rule_domain_input_type (data_source_deleted_flag);

create index idx_c858ac39db7ba1a96180492e870120e5
    on history_octane.product_rule_domain_input_type (data_source_updated_datetime);

create index idx_product_rule_domain_input_type__etl_batch_id
    on history_octane.product_rule_domain_input_type (etl_batch_id);

grant select on history_octane.product_rule_domain_input_type to readonly;

grant insert, select, update on history_octane.product_rule_domain_input_type to etl_loan;

create table history_octane.product_side_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.product_side_type owner to deployer;

create index idx_product_side_type__data_source_deleted_flag
    on history_octane.product_side_type (data_source_deleted_flag);

create index idx_product_side_type__data_source_updated_datetime
    on history_octane.product_side_type (data_source_updated_datetime);

create index idx_product_side_type__etl_batch_id
    on history_octane.product_side_type (etl_batch_id);

grant select on history_octane.product_side_type to readonly;

grant insert, select, update on history_octane.product_side_type to etl_loan;

create table history_octane.product_special_program_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.product_special_program_type owner to deployer;

create index idx_product_special_program_type__data_source_deleted_flag
    on history_octane.product_special_program_type (data_source_deleted_flag);

create index idx_product_special_program_type__data_source_updated_datetime
    on history_octane.product_special_program_type (data_source_updated_datetime);

create index idx_product_special_program_type__etl_batch_id
    on history_octane.product_special_program_type (etl_batch_id);

grant select on history_octane.product_special_program_type to readonly;

grant insert, select, update on history_octane.product_special_program_type to etl_loan;

create table history_octane.profit_margin_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.profit_margin_type owner to deployer;

create index idx_profit_margin_type__data_source_deleted_flag
    on history_octane.profit_margin_type (data_source_deleted_flag);

create index idx_profit_margin_type__data_source_updated_datetime
    on history_octane.profit_margin_type (data_source_updated_datetime);

create index idx_profit_margin_type__etl_batch_id
    on history_octane.profit_margin_type (etl_batch_id);

grant select on history_octane.profit_margin_type to readonly;

grant insert, select, update on history_octane.profit_margin_type to etl_loan;

create table history_octane.project_classification_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.project_classification_type owner to deployer;

create index idx_project_classification_type__data_source_deleted_flag
    on history_octane.project_classification_type (data_source_deleted_flag);

create index idx_project_classification_type__data_source_updated_datetime
    on history_octane.project_classification_type (data_source_updated_datetime);

create index idx_project_classification_type__etl_batch_id
    on history_octane.project_classification_type (etl_batch_id);

grant select on history_octane.project_classification_type to readonly;

grant insert, select, update on history_octane.project_classification_type to etl_loan;

create table history_octane.project_design_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.project_design_type owner to deployer;

create index idx_project_design_type__data_source_deleted_flag
    on history_octane.project_design_type (data_source_deleted_flag);

create index idx_project_design_type__data_source_updated_datetime
    on history_octane.project_design_type (data_source_updated_datetime);

create index idx_project_design_type__etl_batch_id
    on history_octane.project_design_type (etl_batch_id);

grant select on history_octane.project_design_type to readonly;

grant insert, select, update on history_octane.project_design_type to etl_loan;

create table history_octane.property_category_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.property_category_type owner to deployer;

create index idx_property_category_type__data_source_deleted_flag
    on history_octane.property_category_type (data_source_deleted_flag);

create index idx_property_category_type__data_source_updated_datetime
    on history_octane.property_category_type (data_source_updated_datetime);

create index idx_property_category_type__etl_batch_id
    on history_octane.property_category_type (etl_batch_id);

grant select on history_octane.property_category_type to readonly;

grant insert, select, update on history_octane.property_category_type to etl_loan;

create table history_octane.property_repairs_holdback_calc_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.property_repairs_holdback_calc_type owner to deployer;

create index idx_c1bd00e55a14c0493dfe906b6a5f72c5
    on history_octane.property_repairs_holdback_calc_type (data_source_deleted_flag);

create index idx_3cef9781d2dd17d9911b6bdd26217a43
    on history_octane.property_repairs_holdback_calc_type (data_source_updated_datetime);

create index idx_property_repairs_holdback_calc_type__etl_batch_id
    on history_octane.property_repairs_holdback_calc_type (etl_batch_id);

grant select on history_octane.property_repairs_holdback_calc_type to readonly;

grant insert, select, update on history_octane.property_repairs_holdback_calc_type to etl_loan;

create table history_octane.property_repairs_holdback_payer_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.property_repairs_holdback_payer_type owner to deployer;

create index idx_fa1973fc5c41395e0289f5ad99b04835
    on history_octane.property_repairs_holdback_payer_type (data_source_deleted_flag);

create index idx_fc08d7035b440ee02db1e4e4469a2a8f
    on history_octane.property_repairs_holdback_payer_type (data_source_updated_datetime);

create index idx_property_repairs_holdback_payer_type__etl_batch_id
    on history_octane.property_repairs_holdback_payer_type (etl_batch_id);

grant select on history_octane.property_repairs_holdback_payer_type to readonly;

grant insert, select, update on history_octane.property_repairs_holdback_payer_type to etl_loan;

create table history_octane.property_repairs_required_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.property_repairs_required_type owner to deployer;

create index idx_property_repairs_required_type__data_source_deleted_flag
    on history_octane.property_repairs_required_type (data_source_deleted_flag);

create index idx_400d1aa069b21e1569fd9dc766c34933
    on history_octane.property_repairs_required_type (data_source_updated_datetime);

create index idx_property_repairs_required_type__etl_batch_id
    on history_octane.property_repairs_required_type (etl_batch_id);

grant select on history_octane.property_repairs_required_type to readonly;

grant insert, select, update on history_octane.property_repairs_required_type to etl_loan;

create table history_octane.property_rights_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.property_rights_type owner to deployer;

create index idx_property_rights_type__data_source_deleted_flag
    on history_octane.property_rights_type (data_source_deleted_flag);

create index idx_property_rights_type__data_source_updated_datetime
    on history_octane.property_rights_type (data_source_updated_datetime);

create index idx_property_rights_type__etl_batch_id
    on history_octane.property_rights_type (etl_batch_id);

grant select on history_octane.property_rights_type to readonly;

grant insert, select, update on history_octane.property_rights_type to etl_loan;

create table history_octane.property_usage_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.property_usage_type owner to deployer;

create index idx_property_usage_type__data_source_deleted_flag
    on history_octane.property_usage_type (data_source_deleted_flag);

create index idx_property_usage_type__data_source_updated_datetime
    on history_octane.property_usage_type (data_source_updated_datetime);

create index idx_property_usage_type__etl_batch_id
    on history_octane.property_usage_type (etl_batch_id);

grant select on history_octane.property_usage_type to readonly;

grant insert, select, update on history_octane.property_usage_type to etl_loan;

create table history_octane.proposal_doc_file_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.proposal_doc_file_type owner to deployer;

create index idx_proposal_doc_file_type__data_source_deleted_flag
    on history_octane.proposal_doc_file_type (data_source_deleted_flag);

create index idx_proposal_doc_file_type__data_source_updated_datetime
    on history_octane.proposal_doc_file_type (data_source_updated_datetime);

create index idx_proposal_doc_file_type__etl_batch_id
    on history_octane.proposal_doc_file_type (etl_batch_id);

grant select on history_octane.proposal_doc_file_type to readonly;

grant insert, select, update on history_octane.proposal_doc_file_type to etl_loan;

create table history_octane.proposal_review_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.proposal_review_status_type owner to deployer;

create index idx_proposal_review_status_type__data_source_deleted_flag
    on history_octane.proposal_review_status_type (data_source_deleted_flag);

create index idx_proposal_review_status_type__data_source_updated_datetime
    on history_octane.proposal_review_status_type (data_source_updated_datetime);

create index idx_proposal_review_status_type__etl_batch_id
    on history_octane.proposal_review_status_type (etl_batch_id);

grant select on history_octane.proposal_review_status_type to readonly;

grant insert, select, update on history_octane.proposal_review_status_type to etl_loan;

create table history_octane.proposal_structure_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.proposal_structure_type owner to deployer;

create index idx_proposal_structure_type__data_source_deleted_flag
    on history_octane.proposal_structure_type (data_source_deleted_flag);

create index idx_proposal_structure_type__data_source_updated_datetime
    on history_octane.proposal_structure_type (data_source_updated_datetime);

create index idx_proposal_structure_type__etl_batch_id
    on history_octane.proposal_structure_type (etl_batch_id);

grant select on history_octane.proposal_structure_type to readonly;

grant insert, select, update on history_octane.proposal_structure_type to etl_loan;

create table history_octane.proposal_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.proposal_type owner to deployer;

create index idx_proposal_type__data_source_deleted_flag
    on history_octane.proposal_type (data_source_deleted_flag);

create index idx_proposal_type__data_source_updated_datetime
    on history_octane.proposal_type (data_source_updated_datetime);

create index idx_proposal_type__etl_batch_id
    on history_octane.proposal_type (etl_batch_id);

grant select on history_octane.proposal_type to readonly;

grant insert, select, update on history_octane.proposal_type to etl_loan;

create table history_octane.pte_request_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.pte_request_status_type owner to deployer;

create index idx_pte_request_status_type__data_source_deleted_flag
    on history_octane.pte_request_status_type (data_source_deleted_flag);

create index idx_pte_request_status_type__data_source_updated_datetime
    on history_octane.pte_request_status_type (data_source_updated_datetime);

create index idx_pte_request_status_type__etl_batch_id
    on history_octane.pte_request_status_type (etl_batch_id);

grant select on history_octane.pte_request_status_type to readonly;

grant insert, select, update on history_octane.pte_request_status_type to etl_loan;

create table history_octane.pte_response_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.pte_response_status_type owner to deployer;

create index idx_pte_response_status_type__data_source_deleted_flag
    on history_octane.pte_response_status_type (data_source_deleted_flag);

create index idx_pte_response_status_type__data_source_updated_datetime
    on history_octane.pte_response_status_type (data_source_updated_datetime);

create index idx_pte_response_status_type__etl_batch_id
    on history_octane.pte_response_status_type (etl_batch_id);

grant select on history_octane.pte_response_status_type to readonly;

grant insert, select, update on history_octane.pte_response_status_type to etl_loan;

create table history_octane.public_record_disposition_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.public_record_disposition_type owner to deployer;

create index idx_public_record_disposition_type__data_source_deleted_flag
    on history_octane.public_record_disposition_type (data_source_deleted_flag);

create index idx_7d3b11509c6f5e24d5e384ee018f7d25
    on history_octane.public_record_disposition_type (data_source_updated_datetime);

create index idx_public_record_disposition_type__etl_batch_id
    on history_octane.public_record_disposition_type (etl_batch_id);

grant select on history_octane.public_record_disposition_type to readonly;

grant insert, select, update on history_octane.public_record_disposition_type to etl_loan;

create table history_octane.public_record_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.public_record_type owner to deployer;

create index idx_public_record_type__data_source_deleted_flag
    on history_octane.public_record_type (data_source_deleted_flag);

create index idx_public_record_type__data_source_updated_datetime
    on history_octane.public_record_type (data_source_updated_datetime);

create index idx_public_record_type__etl_batch_id
    on history_octane.public_record_type (etl_batch_id);

grant select on history_octane.public_record_type to readonly;

grant insert, select, update on history_octane.public_record_type to etl_loan;

create table history_octane.qualified_mortgage_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.qualified_mortgage_status_type owner to deployer;

create index idx_qualified_mortgage_status_type__data_source_deleted_flag
    on history_octane.qualified_mortgage_status_type (data_source_deleted_flag);

create index idx_3b3cd13e8728c9a8dab6e0ff61c91970
    on history_octane.qualified_mortgage_status_type (data_source_updated_datetime);

create index idx_qualified_mortgage_status_type__etl_batch_id
    on history_octane.qualified_mortgage_status_type (etl_batch_id);

grant select on history_octane.qualified_mortgage_status_type to readonly;

grant insert, select, update on history_octane.qualified_mortgage_status_type to etl_loan;

create table history_octane.qualified_mortgage_thresholds
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    qmt_pid bigint not null,
    qmt_version integer,
    qmt_effective_date date,
    qmt_first_total_loan_amount_threshold numeric(15),
    qmt_first_points_and_fees_threshold_percent numeric(11,9),
    qmt_second_total_loan_amount_threshold numeric(15),
    qmt_second_points_and_fees_threshold_amount numeric(15),
    qmt_third_total_loan_amount_threshold numeric(15),
    qmt_third_points_and_fees_threshold_percent numeric(11,9),
    qmt_fourth_total_loan_amount_threshold numeric(15),
    qmt_fourth_points_and_fees_threshold_amount numeric(15),
    qmt_ceiling_points_and_fees_threshold_percent numeric(11,9),
    etl_batch_id text
);

alter table history_octane.qualified_mortgage_thresholds owner to deployer;

create index idx_qualified_mortgage_thresholds__data_source_deleted_flag
    on history_octane.qualified_mortgage_thresholds (data_source_deleted_flag);

create index idx_qualified_mortgage_thresholds__data_source_updated_datetime
    on history_octane.qualified_mortgage_thresholds (data_source_updated_datetime);

create index idx_qualified_mortgage_thresholds__pid
    on history_octane.qualified_mortgage_thresholds (qmt_pid);

create index idx_qualified_mortgage_thresholds__pid_version
    on history_octane.qualified_mortgage_thresholds (qmt_pid, qmt_version);

create index idx_qualified_mortgage_thresholds__etl_batch_id
    on history_octane.qualified_mortgage_thresholds (etl_batch_id);

grant select on history_octane.qualified_mortgage_thresholds to readonly;

grant insert, select, update on history_octane.qualified_mortgage_thresholds to etl_loan;

create table history_octane.qualifying_monthly_payment_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.qualifying_monthly_payment_type owner to deployer;

create index idx_qualifying_monthly_payment_type__data_source_deleted_flag
    on history_octane.qualifying_monthly_payment_type (data_source_deleted_flag);

create index idx_9b021bd566cffdfbf2114395584e6a90
    on history_octane.qualifying_monthly_payment_type (data_source_updated_datetime);

create index idx_qualifying_monthly_payment_type__etl_batch_id
    on history_octane.qualifying_monthly_payment_type (etl_batch_id);

grant select on history_octane.qualifying_monthly_payment_type to readonly;

grant insert, select, update on history_octane.qualifying_monthly_payment_type to etl_loan;

create table history_octane.qualifying_rate_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.qualifying_rate_type owner to deployer;

create index idx_qualifying_rate_type__data_source_deleted_flag
    on history_octane.qualifying_rate_type (data_source_deleted_flag);

create index idx_qualifying_rate_type__data_source_updated_datetime
    on history_octane.qualifying_rate_type (data_source_updated_datetime);

create index idx_qualifying_rate_type__etl_batch_id
    on history_octane.qualifying_rate_type (etl_batch_id);

grant select on history_octane.qualifying_rate_type to readonly;

grant insert, select, update on history_octane.qualifying_rate_type to etl_loan;

create table history_octane.quarter_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.quarter_type owner to deployer;

create index idx_quarter_type__data_source_deleted_flag
    on history_octane.quarter_type (data_source_deleted_flag);

create index idx_quarter_type__data_source_updated_datetime
    on history_octane.quarter_type (data_source_updated_datetime);

create index idx_quarter_type__etl_batch_id
    on history_octane.quarter_type (etl_batch_id);

grant select on history_octane.quarter_type to readonly;

grant insert, select, update on history_octane.quarter_type to etl_loan;

create table history_octane.mcr_snapshot
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    mcrs_pid bigint not null,
    mcrs_version integer,
    mcrs_account_pid bigint,
    mcrs_year integer,
    mcrs_quarter_type varchar(128),
    mcrs_mcr_request_pid bigint,
    etl_batch_id text
);

alter table history_octane.mcr_snapshot owner to deployer;

create index idx_mcr_snapshot__data_source_deleted_flag
    on history_octane.mcr_snapshot (data_source_deleted_flag);

create index idx_mcr_snapshot__data_source_updated_datetime
    on history_octane.mcr_snapshot (data_source_updated_datetime);

create index idx_mcr_snapshot__pid
    on history_octane.mcr_snapshot (mcrs_pid);

create index idx_mcr_snapshot__pid_version
    on history_octane.mcr_snapshot (mcrs_pid, mcrs_version);

create index fk_mcr_snapshot_2
    on history_octane.mcr_snapshot (mcrs_mcr_request_pid);

create index idx_mcr_snapshot__etl_batch_id
    on history_octane.mcr_snapshot (etl_batch_id);

grant select on history_octane.mcr_snapshot to readonly;

grant insert, select, update on history_octane.mcr_snapshot to etl_loan;

create table history_octane.mcr_loan
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    mcrl_pid bigint not null,
    mcrl_version integer,
    mcrl_loan_pid bigint,
    mcrl_mcr_snapshot_pid bigint,
    mcrl_los_loan_id bigint,
    mcrl_originator_nmls_id varchar(16),
    mcrl_loan_amount numeric(15,2),
    mcrl_lien_priority_type varchar(128),
    mcrl_mortgage_type varchar(128),
    mcrl_interest_only_type varchar(128),
    mcrl_prepay_penalty_schedule_type varchar(128),
    mcrl_ltv_ratio_percent numeric(11,9),
    mcrl_note_rate_percent numeric(11,9),
    mcrl_hmda_action_type varchar(128),
    mcrl_hmda_action_date date,
    mcrl_disclosure_mode_date date,
    mcrl_decision_credit_score integer,
    mcrl_property_usage_type varchar(128),
    mcrl_doc_level_type varchar(128),
    mcrl_loan_purpose_type varchar(128),
    mcrl_mi_required boolean,
    mcrl_proposal_structure_type varchar(128),
    mcrl_subject_property_state varchar(128),
    mcrl_property_category_type varchar(128),
    mcrl_cltv_ratio_percent numeric(11,9),
    mcrl_funding_status_type varchar(128),
    mcrl_funding_date date,
    mcrl_loan_amortization_type varchar(128),
    mcrl_product_special_program_type varchar(128),
    mcrl_non_conforming boolean,
    mcrl_initial_payment_adjustment_term_months integer,
    mcrl_subsequent_payment_adjustment_term_months integer,
    mcrl_fund_source_type varchar(128),
    mcrl_channel_type varchar(128),
    mcrl_financed_units_count integer,
    mcrl_cash_out_reason_home_improvement boolean,
    mcrl_hmda_hoepa_status_type varchar(128),
    mcrl_qualified_mortgage_status_type varchar(128),
    mcrl_lender_fee_total_amount numeric(15,2),
    mcrl_broker_fee_total_amount numeric(15,2),
    mcrl_investor_hmda_purchaser_of_loan_type varchar(128),
    mcrl_confirmed_release_datetime timestamp,
    mcrl_purchase_advice_date date,
    mcrl_purchasing_beneficiary_investor_pid bigint,
    mcrl_mcr_loan_status_type varchar(128),
    mcrl_servicing_transfer_type varchar(128),
    mcrl_financed_property_improvements_category_type varchar(128),
    etl_batch_id text
);

alter table history_octane.mcr_loan owner to deployer;

create index idx_mcr_loan__data_source_deleted_flag
    on history_octane.mcr_loan (data_source_deleted_flag);

create index idx_mcr_loan__data_source_updated_datetime
    on history_octane.mcr_loan (data_source_updated_datetime);

create index idx_mcr_loan__pid
    on history_octane.mcr_loan (mcrl_pid);

create index idx_mcr_loan__pid_version
    on history_octane.mcr_loan (mcrl_pid, mcrl_version);

create index fkt_mcrl_servicing_transfer_type
    on history_octane.mcr_loan (mcrl_servicing_transfer_type);

create index fkt_mcrl_financed_property_improvements_category_type
    on history_octane.mcr_loan (mcrl_financed_property_improvements_category_type);

create index idx_mcr_loan__etl_batch_id
    on history_octane.mcr_loan (etl_batch_id);

grant select on history_octane.mcr_loan to readonly;

grant insert, select, update on history_octane.mcr_loan to etl_loan;

create table history_octane.quote_filter_pivot_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.quote_filter_pivot_type owner to deployer;

create index idx_quote_filter_pivot_type__data_source_deleted_flag
    on history_octane.quote_filter_pivot_type (data_source_deleted_flag);

create index idx_quote_filter_pivot_type__data_source_updated_datetime
    on history_octane.quote_filter_pivot_type (data_source_updated_datetime);

create index idx_quote_filter_pivot_type__etl_batch_id
    on history_octane.quote_filter_pivot_type (etl_batch_id);

grant select on history_octane.quote_filter_pivot_type to readonly;

grant insert, select, update on history_octane.quote_filter_pivot_type to etl_loan;

create table history_octane.realty_agent_scenario_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.realty_agent_scenario_type owner to deployer;

create index idx_realty_agent_scenario_type__data_source_deleted_flag
    on history_octane.realty_agent_scenario_type (data_source_deleted_flag);

create index idx_realty_agent_scenario_type__data_source_updated_datetime
    on history_octane.realty_agent_scenario_type (data_source_updated_datetime);

create index idx_realty_agent_scenario_type__etl_batch_id
    on history_octane.realty_agent_scenario_type (etl_batch_id);

grant select on history_octane.realty_agent_scenario_type to readonly;

grant insert, select, update on history_octane.realty_agent_scenario_type to etl_loan;

create table history_octane.recording_district_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.recording_district_type owner to deployer;

create index idx_recording_district_type__data_source_deleted_flag
    on history_octane.recording_district_type (data_source_deleted_flag);

create index idx_recording_district_type__data_source_updated_datetime
    on history_octane.recording_district_type (data_source_updated_datetime);

create index idx_recording_district_type__etl_batch_id
    on history_octane.recording_district_type (etl_batch_id);

grant select on history_octane.recording_district_type to readonly;

grant insert, select, update on history_octane.recording_district_type to etl_loan;

create table history_octane.refinance_improvements_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.refinance_improvements_type owner to deployer;

create index idx_refinance_improvements_type__data_source_deleted_flag
    on history_octane.refinance_improvements_type (data_source_deleted_flag);

create index idx_refinance_improvements_type__data_source_updated_datetime
    on history_octane.refinance_improvements_type (data_source_updated_datetime);

create index idx_refinance_improvements_type__etl_batch_id
    on history_octane.refinance_improvements_type (etl_batch_id);

grant select on history_octane.refinance_improvements_type to readonly;

grant insert, select, update on history_octane.refinance_improvements_type to etl_loan;

create table history_octane.relock_fee_setting
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    rfs_pid bigint not null,
    rfs_version integer,
    rfs_account_pid bigint,
    rfs_from_date date,
    rfs_relock_fee_percent numeric(11,9),
    etl_batch_id text
);

alter table history_octane.relock_fee_setting owner to deployer;

create index idx_relock_fee_setting__data_source_deleted_flag
    on history_octane.relock_fee_setting (data_source_deleted_flag);

create index idx_relock_fee_setting__data_source_updated_datetime
    on history_octane.relock_fee_setting (data_source_updated_datetime);

create index idx_relock_fee_setting__pid
    on history_octane.relock_fee_setting (rfs_pid);

create index idx_relock_fee_setting__pid_version
    on history_octane.relock_fee_setting (rfs_pid, rfs_version);

create index idx_relock_fee_setting__etl_batch_id
    on history_octane.relock_fee_setting (etl_batch_id);

grant select on history_octane.relock_fee_setting to readonly;

grant insert, select, update on history_octane.relock_fee_setting to etl_loan;

create table history_octane.reo_disposition_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.reo_disposition_status_type owner to deployer;

create index idx_reo_disposition_status_type__data_source_deleted_flag
    on history_octane.reo_disposition_status_type (data_source_deleted_flag);

create index idx_reo_disposition_status_type__data_source_updated_datetime
    on history_octane.reo_disposition_status_type (data_source_updated_datetime);

create index idx_reo_disposition_status_type__etl_batch_id
    on history_octane.reo_disposition_status_type (etl_batch_id);

grant select on history_octane.reo_disposition_status_type to readonly;

grant insert, select, update on history_octane.reo_disposition_status_type to etl_loan;

create table history_octane.report_request_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.report_request_status_type owner to deployer;

create index idx_report_request_status_type__data_source_deleted_flag
    on history_octane.report_request_status_type (data_source_deleted_flag);

create index idx_report_request_status_type__data_source_updated_datetime
    on history_octane.report_request_status_type (data_source_updated_datetime);

create index idx_report_request_status_type__etl_batch_id
    on history_octane.report_request_status_type (etl_batch_id);

grant select on history_octane.report_request_status_type to readonly;

grant insert, select, update on history_octane.report_request_status_type to etl_loan;

create table history_octane.report_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.report_type owner to deployer;

create index idx_report_type__data_source_deleted_flag
    on history_octane.report_type (data_source_deleted_flag);

create index idx_report_type__data_source_updated_datetime
    on history_octane.report_type (data_source_updated_datetime);

create index idx_report_type__etl_batch_id
    on history_octane.report_type (etl_batch_id);

grant select on history_octane.report_type to readonly;

grant insert, select, update on history_octane.report_type to etl_loan;

create table history_octane.report
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    rp_pid bigint not null,
    rp_version integer,
    rp_account_pid bigint,
    rp_name varchar(128),
    rp_description varchar(1024),
    rp_report_type varchar(128),
    rp_report_row_pid bigint,
    rp_criteria_pid bigint,
    rp_accessible_only boolean,
    rp_analysis_report boolean,
    rp_publish boolean,
    rp_test_data_report boolean,
    rp_allow_view boolean,
    rp_allow_excel_export boolean,
    etl_batch_id text
);

alter table history_octane.report owner to deployer;

create index idx_report__data_source_deleted_flag
    on history_octane.report (data_source_deleted_flag);

create index idx_report__data_source_updated_datetime
    on history_octane.report (data_source_updated_datetime);

create index idx_report__pid
    on history_octane.report (rp_pid);

create index idx_report__pid_version
    on history_octane.report (rp_pid, rp_version);

create index idx_report__etl_batch_id
    on history_octane.report (etl_batch_id);

grant select on history_octane.report to readonly;

grant insert, select, update on history_octane.report to etl_loan;

create table history_octane.report_row
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    rprw_pid bigint not null,
    rprw_version integer,
    rprw_account_pid bigint,
    rprw_report_type varchar(128),
    rprw_name varchar(128),
    rprw_description varchar(1024),
    rprw_formula_row boolean,
    etl_batch_id text
);

alter table history_octane.report_row owner to deployer;

create index idx_report_row__data_source_deleted_flag
    on history_octane.report_row (data_source_deleted_flag);

create index idx_report_row__data_source_updated_datetime
    on history_octane.report_row (data_source_updated_datetime);

create index idx_report_row__pid
    on history_octane.report_row (rprw_pid);

create index idx_report_row__pid_version
    on history_octane.report_row (rprw_pid, rprw_version);

create index idx_report_row__etl_batch_id
    on history_octane.report_row (etl_batch_id);

grant select on history_octane.report_row to readonly;

grant insert, select, update on history_octane.report_row to etl_loan;

create table history_octane.formula_report_column
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    frc_pid bigint not null,
    frc_version integer,
    frc_report_row_pid bigint,
    frc_header varchar(128),
    frc_formula varchar(1024),
    frc_field_type_1 varchar(128),
    frc_field_type_2 varchar(128),
    frc_field_type_3 varchar(128),
    frc_field_type_4 varchar(128),
    frc_field_type_5 varchar(128),
    frc_field_type_6 varchar(128),
    frc_ordinal integer,
    etl_batch_id text
);

alter table history_octane.formula_report_column owner to deployer;

create index idx_formula_report_column__data_source_deleted_flag
    on history_octane.formula_report_column (data_source_deleted_flag);

create index idx_formula_report_column__data_source_updated_datetime
    on history_octane.formula_report_column (data_source_updated_datetime);

create index idx_formula_report_column__pid
    on history_octane.formula_report_column (frc_pid);

create index idx_formula_report_column__pid_version
    on history_octane.formula_report_column (frc_pid, frc_version);

create index idx_formula_report_column__etl_batch_id
    on history_octane.formula_report_column (etl_batch_id);

grant select on history_octane.formula_report_column to readonly;

grant insert, select, update on history_octane.formula_report_column to etl_loan;

create table history_octane.report_column
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    rpc_pid bigint not null,
    rpc_version integer,
    rpc_report_row_pid bigint,
    rpc_report_column_type varchar(128),
    rpc_ordinal integer,
    etl_batch_id text
);

alter table history_octane.report_column owner to deployer;

create index idx_report_column__data_source_deleted_flag
    on history_octane.report_column (data_source_deleted_flag);

create index idx_report_column__data_source_updated_datetime
    on history_octane.report_column (data_source_updated_datetime);

create index idx_report_column__pid
    on history_octane.report_column (rpc_pid);

create index idx_report_column__pid_version
    on history_octane.report_column (rpc_pid, rpc_version);

create index idx_report_column__etl_batch_id
    on history_octane.report_column (etl_batch_id);

grant select on history_octane.report_column to readonly;

grant insert, select, update on history_octane.report_column to etl_loan;

create table history_octane.req_decision_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.req_decision_status_type owner to deployer;

create index idx_req_decision_status_type__data_source_deleted_flag
    on history_octane.req_decision_status_type (data_source_deleted_flag);

create index idx_req_decision_status_type__data_source_updated_datetime
    on history_octane.req_decision_status_type (data_source_updated_datetime);

create index idx_req_decision_status_type__etl_batch_id
    on history_octane.req_decision_status_type (etl_batch_id);

grant select on history_octane.req_decision_status_type to readonly;

grant insert, select, update on history_octane.req_decision_status_type to etl_loan;

create table history_octane.req_fulfill_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.req_fulfill_status_type owner to deployer;

create index idx_req_fulfill_status_type__data_source_deleted_flag
    on history_octane.req_fulfill_status_type (data_source_deleted_flag);

create index idx_req_fulfill_status_type__data_source_updated_datetime
    on history_octane.req_fulfill_status_type (data_source_updated_datetime);

create index idx_req_fulfill_status_type__etl_batch_id
    on history_octane.req_fulfill_status_type (etl_batch_id);

grant select on history_octane.req_fulfill_status_type to readonly;

grant insert, select, update on history_octane.req_fulfill_status_type to etl_loan;

create table history_octane.rescission_notification_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.rescission_notification_type owner to deployer;

create index idx_rescission_notification_type__data_source_deleted_flag
    on history_octane.rescission_notification_type (data_source_deleted_flag);

create index idx_rescission_notification_type__data_source_updated_datetime
    on history_octane.rescission_notification_type (data_source_updated_datetime);

create index idx_rescission_notification_type__etl_batch_id
    on history_octane.rescission_notification_type (etl_batch_id);

grant select on history_octane.rescission_notification_type to readonly;

grant insert, select, update on history_octane.rescission_notification_type to etl_loan;

create table history_octane.respa_section_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.respa_section_type owner to deployer;

create index idx_respa_section_type__data_source_deleted_flag
    on history_octane.respa_section_type (data_source_deleted_flag);

create index idx_respa_section_type__data_source_updated_datetime
    on history_octane.respa_section_type (data_source_updated_datetime);

create index idx_respa_section_type__etl_batch_id
    on history_octane.respa_section_type (etl_batch_id);

grant select on history_octane.respa_section_type to readonly;

grant insert, select, update on history_octane.respa_section_type to etl_loan;

create table history_octane.charge_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    ct_respa_section_type varchar(128),
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.charge_type owner to deployer;

create index idx_charge_type__data_source_deleted_flag
    on history_octane.charge_type (data_source_deleted_flag);

create index idx_charge_type__data_source_updated_datetime
    on history_octane.charge_type (data_source_updated_datetime);

create index idx_charge_type__etl_batch_id
    on history_octane.charge_type (etl_batch_id);

grant select on history_octane.charge_type to readonly;

grant insert, select, update on history_octane.charge_type to etl_loan;

create table history_octane.road_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.road_type owner to deployer;

create index idx_road_type__data_source_deleted_flag
    on history_octane.road_type (data_source_deleted_flag);

create index idx_road_type__data_source_updated_datetime
    on history_octane.road_type (data_source_updated_datetime);

create index idx_road_type__etl_batch_id
    on history_octane.road_type (etl_batch_id);

grant select on history_octane.road_type to readonly;

grant insert, select, update on history_octane.road_type to etl_loan;

create table history_octane.role
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    r_pid bigint not null,
    r_version integer,
    r_account_pid bigint,
    r_role_name varchar(32),
    r_borrower_viewable boolean,
    r_loan_access_type varchar(128),
    r_internal boolean,
    r_training_applicable boolean,
    etl_batch_id text
);

alter table history_octane.role owner to deployer;

create index idx_role__data_source_deleted_flag
    on history_octane.role (data_source_deleted_flag);

create index idx_role__data_source_updated_datetime
    on history_octane.role (data_source_updated_datetime);

create index idx_role__pid
    on history_octane.role (r_pid);

create index idx_role__pid_version
    on history_octane.role (r_pid, r_version);

create index idx_role__etl_batch_id
    on history_octane.role (etl_batch_id);

grant select on history_octane.role to readonly;

grant insert, select, update on history_octane.role to etl_loan;

create table history_octane.key_role
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    kr_pid bigint not null,
    kr_version integer,
    kr_role_pid bigint,
    kr_account_pid bigint,
    kr_key_role_type varchar(128),
    etl_batch_id text
);

alter table history_octane.key_role owner to deployer;

create index idx_key_role__data_source_deleted_flag
    on history_octane.key_role (data_source_deleted_flag);

create index idx_key_role__data_source_updated_datetime
    on history_octane.key_role (data_source_updated_datetime);

create index idx_key_role__pid
    on history_octane.key_role (kr_pid);

create index idx_key_role__pid_version
    on history_octane.key_role (kr_pid, kr_version);

create index idx_key_role__etl_batch_id
    on history_octane.key_role (etl_batch_id);

grant select on history_octane.key_role to readonly;

grant insert, select, update on history_octane.key_role to etl_loan;

create table history_octane.role_charge_permissions
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    rcp_pid bigint not null,
    rcp_version integer,
    rcp_role_pid bigint,
    rcp_charge_type varchar(128),
    rcp_basic_editable boolean,
    rcp_financed_editable boolean,
    rcp_payer_non_lender_editable boolean,
    rcp_payer_lender_editable boolean,
    rcp_payee_editable boolean,
    rcp_apr_editable boolean,
    rcp_poc_editable boolean,
    rcp_wire_editable boolean,
    etl_batch_id text
);

alter table history_octane.role_charge_permissions owner to deployer;

create index idx_role_charge_permissions__data_source_deleted_flag
    on history_octane.role_charge_permissions (data_source_deleted_flag);

create index idx_role_charge_permissions__data_source_updated_datetime
    on history_octane.role_charge_permissions (data_source_updated_datetime);

create index idx_role_charge_permissions__pid
    on history_octane.role_charge_permissions (rcp_pid);

create index idx_role_charge_permissions__pid_version
    on history_octane.role_charge_permissions (rcp_pid, rcp_version);

create index idx_role_charge_permissions__etl_batch_id
    on history_octane.role_charge_permissions (etl_batch_id);

grant select on history_octane.role_charge_permissions to readonly;

grant insert, select, update on history_octane.role_charge_permissions to etl_loan;

create table history_octane.role_config_export_permission
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    rcep_pid bigint not null,
    rcep_version integer,
    rcep_role_pid bigint,
    rcep_config_export_permission_type varchar(128),
    etl_batch_id text
);

alter table history_octane.role_config_export_permission owner to deployer;

create index idx_role_config_export_permission__data_source_deleted_flag
    on history_octane.role_config_export_permission (data_source_deleted_flag);

create index idx_role_config_export_permission__data_source_updated_datetime
    on history_octane.role_config_export_permission (data_source_updated_datetime);

create index idx_role_config_export_permission__pid
    on history_octane.role_config_export_permission (rcep_pid);

create index idx_role_config_export_permission__pid_version
    on history_octane.role_config_export_permission (rcep_pid, rcep_version);

create index idx_role_config_export_permission__etl_batch_id
    on history_octane.role_config_export_permission (etl_batch_id);

grant select on history_octane.role_config_export_permission to readonly;

grant insert, select, update on history_octane.role_config_export_permission to etl_loan;

create table history_octane.role_deal_context
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    rdc_pid bigint not null,
    rdc_version integer,
    rdc_role_pid bigint,
    rdc_deal_context_permission_type varchar(128),
    etl_batch_id text
);

alter table history_octane.role_deal_context owner to deployer;

create index idx_role_deal_context__data_source_deleted_flag
    on history_octane.role_deal_context (data_source_deleted_flag);

create index idx_role_deal_context__data_source_updated_datetime
    on history_octane.role_deal_context (data_source_updated_datetime);

create index idx_role_deal_context__pid
    on history_octane.role_deal_context (rdc_pid);

create index idx_role_deal_context__pid_version
    on history_octane.role_deal_context (rdc_pid, rdc_version);

create index idx_role_deal_context__etl_batch_id
    on history_octane.role_deal_context (etl_batch_id);

grant select on history_octane.role_deal_context to readonly;

grant insert, select, update on history_octane.role_deal_context to etl_loan;

create table history_octane.role_export_permission
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    rep_pid bigint not null,
    rep_version integer,
    rep_role_pid bigint,
    rep_export_permission_type varchar(128),
    etl_batch_id text
);

alter table history_octane.role_export_permission owner to deployer;

create index idx_role_export_permission__data_source_deleted_flag
    on history_octane.role_export_permission (data_source_deleted_flag);

create index idx_role_export_permission__data_source_updated_datetime
    on history_octane.role_export_permission (data_source_updated_datetime);

create index idx_role_export_permission__pid
    on history_octane.role_export_permission (rep_pid);

create index idx_role_export_permission__pid_version
    on history_octane.role_export_permission (rep_pid, rep_version);

create index idx_role_export_permission__etl_batch_id
    on history_octane.role_export_permission (etl_batch_id);

grant select on history_octane.role_export_permission to readonly;

grant insert, select, update on history_octane.role_export_permission to etl_loan;

create table history_octane.role_lender_toolbox
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    rlet_pid bigint not null,
    rlet_version integer,
    rlet_role_pid bigint,
    rlet_lender_toolbox_permission_type varchar(128),
    etl_batch_id text
);

alter table history_octane.role_lender_toolbox owner to deployer;

create index idx_role_lender_toolbox__data_source_deleted_flag
    on history_octane.role_lender_toolbox (data_source_deleted_flag);

create index idx_role_lender_toolbox__data_source_updated_datetime
    on history_octane.role_lender_toolbox (data_source_updated_datetime);

create index idx_role_lender_toolbox__pid
    on history_octane.role_lender_toolbox (rlet_pid);

create index idx_role_lender_toolbox__pid_version
    on history_octane.role_lender_toolbox (rlet_pid, rlet_version);

create index idx_role_lender_toolbox__etl_batch_id
    on history_octane.role_lender_toolbox (etl_batch_id);

grant select on history_octane.role_lender_toolbox to readonly;

grant insert, select, update on history_octane.role_lender_toolbox to etl_loan;

create table history_octane.role_loans_toolbox
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    rlot_pid bigint not null,
    rlot_version integer,
    rlot_role_pid bigint,
    rlot_loans_toolbox_permission_type varchar(128),
    etl_batch_id text
);

alter table history_octane.role_loans_toolbox owner to deployer;

create index idx_role_loans_toolbox__data_source_deleted_flag
    on history_octane.role_loans_toolbox (data_source_deleted_flag);

create index idx_role_loans_toolbox__data_source_updated_datetime
    on history_octane.role_loans_toolbox (data_source_updated_datetime);

create index idx_role_loans_toolbox__pid
    on history_octane.role_loans_toolbox (rlot_pid);

create index idx_role_loans_toolbox__pid_version
    on history_octane.role_loans_toolbox (rlot_pid, rlot_version);

create index idx_role_loans_toolbox__etl_batch_id
    on history_octane.role_loans_toolbox (etl_batch_id);

grant select on history_octane.role_loans_toolbox to readonly;

grant insert, select, update on history_octane.role_loans_toolbox to etl_loan;

create table history_octane.role_performer_assign
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    rpa_pid bigint not null,
    rpa_version integer,
    rpa_role_pid bigint,
    rpa_assignee_role_pid bigint,
    etl_batch_id text
);

alter table history_octane.role_performer_assign owner to deployer;

create index idx_role_performer_assign__data_source_deleted_flag
    on history_octane.role_performer_assign (data_source_deleted_flag);

create index idx_role_performer_assign__data_source_updated_datetime
    on history_octane.role_performer_assign (data_source_updated_datetime);

create index idx_role_performer_assign__pid
    on history_octane.role_performer_assign (rpa_pid);

create index idx_role_performer_assign__pid_version
    on history_octane.role_performer_assign (rpa_pid, rpa_version);

create index idx_role_performer_assign__etl_batch_id
    on history_octane.role_performer_assign (etl_batch_id);

grant select on history_octane.role_performer_assign to readonly;

grant insert, select, update on history_octane.role_performer_assign to etl_loan;

create table history_octane.role_report
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    rrp_pid bigint not null,
    rrp_version integer,
    rrp_report_pid bigint,
    rrp_role_pid bigint,
    etl_batch_id text
);

alter table history_octane.role_report owner to deployer;

create index idx_role_report__data_source_deleted_flag
    on history_octane.role_report (data_source_deleted_flag);

create index idx_role_report__data_source_updated_datetime
    on history_octane.role_report (data_source_updated_datetime);

create index idx_role_report__pid
    on history_octane.role_report (rrp_pid);

create index idx_role_report__pid_version
    on history_octane.role_report (rrp_pid, rrp_version);

create index idx_role_report__etl_batch_id
    on history_octane.role_report (etl_batch_id);

grant select on history_octane.role_report to readonly;

grant insert, select, update on history_octane.role_report to etl_loan;

create table history_octane.sanitation_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.sanitation_type owner to deployer;

create index idx_sanitation_type__data_source_deleted_flag
    on history_octane.sanitation_type (data_source_deleted_flag);

create index idx_sanitation_type__data_source_updated_datetime
    on history_octane.sanitation_type (data_source_updated_datetime);

create index idx_sanitation_type__etl_batch_id
    on history_octane.sanitation_type (etl_batch_id);

grant select on history_octane.sanitation_type to readonly;

grant insert, select, update on history_octane.sanitation_type to etl_loan;

create table history_octane.sap_step_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.sap_step_type owner to deployer;

create index idx_sap_step_type__data_source_deleted_flag
    on history_octane.sap_step_type (data_source_deleted_flag);

create index idx_sap_step_type__data_source_updated_datetime
    on history_octane.sap_step_type (data_source_updated_datetime);

create index idx_sap_step_type__etl_batch_id
    on history_octane.sap_step_type (etl_batch_id);

grant select on history_octane.sap_step_type to readonly;

grant insert, select, update on history_octane.sap_step_type to etl_loan;

create table history_octane.secondary_admin_event_entity_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.secondary_admin_event_entity_type owner to deployer;

create index idx_secondary_admin_event_entity_type__data_source_deleted_flag
    on history_octane.secondary_admin_event_entity_type (data_source_deleted_flag);

create index idx_80db9e8549a85ddf2fd0184c2e02cfed
    on history_octane.secondary_admin_event_entity_type (data_source_updated_datetime);

create index idx_secondary_admin_event_entity_type__etl_batch_id
    on history_octane.secondary_admin_event_entity_type (etl_batch_id);

grant select on history_octane.secondary_admin_event_entity_type to readonly;

grant insert, select, update on history_octane.secondary_admin_event_entity_type to etl_loan;

create table history_octane.secondary_admin_event
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    sae_pid bigint not null,
    sae_version integer,
    sae_account_pid bigint,
    sae_secondary_admin_event_entity_type varchar(128),
    sae_message varchar(256),
    sae_diff_list text,
    sae_unparsed_name varchar(128),
    sae_event_date date,
    sae_event_datetime timestamp,
    sae_target_entity_pid bigint,
    etl_batch_id text
);

alter table history_octane.secondary_admin_event owner to deployer;

create index idx_secondary_admin_event__data_source_deleted_flag
    on history_octane.secondary_admin_event (data_source_deleted_flag);

create index idx_secondary_admin_event__data_source_updated_datetime
    on history_octane.secondary_admin_event (data_source_updated_datetime);

create index idx_secondary_admin_event__pid
    on history_octane.secondary_admin_event (sae_pid);

create index idx_secondary_admin_event__pid_version
    on history_octane.secondary_admin_event (sae_pid, sae_version);

create index idx_secondary_admin_event__etl_batch_id
    on history_octane.secondary_admin_event (etl_batch_id);

grant select on history_octane.secondary_admin_event to readonly;

grant insert, select, update on history_octane.secondary_admin_event to etl_loan;

create table history_octane.section_of_act_coarse_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.section_of_act_coarse_type owner to deployer;

create index idx_section_of_act_coarse_type__data_source_deleted_flag
    on history_octane.section_of_act_coarse_type (data_source_deleted_flag);

create index idx_section_of_act_coarse_type__data_source_updated_datetime
    on history_octane.section_of_act_coarse_type (data_source_updated_datetime);

create index idx_section_of_act_coarse_type__etl_batch_id
    on history_octane.section_of_act_coarse_type (etl_batch_id);

grant select on history_octane.section_of_act_coarse_type to readonly;

grant insert, select, update on history_octane.section_of_act_coarse_type to etl_loan;

create table history_octane.security_instrument_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.security_instrument_type owner to deployer;

create index idx_security_instrument_type__data_source_deleted_flag
    on history_octane.security_instrument_type (data_source_deleted_flag);

create index idx_security_instrument_type__data_source_updated_datetime
    on history_octane.security_instrument_type (data_source_updated_datetime);

create index idx_security_instrument_type__etl_batch_id
    on history_octane.security_instrument_type (etl_batch_id);

grant select on history_octane.security_instrument_type to readonly;

grant insert, select, update on history_octane.security_instrument_type to etl_loan;

create table history_octane.senior_lien_restriction_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.senior_lien_restriction_type owner to deployer;

create index idx_senior_lien_restriction_type__data_source_deleted_flag
    on history_octane.senior_lien_restriction_type (data_source_deleted_flag);

create index idx_senior_lien_restriction_type__data_source_updated_datetime
    on history_octane.senior_lien_restriction_type (data_source_updated_datetime);

create index idx_senior_lien_restriction_type__etl_batch_id
    on history_octane.senior_lien_restriction_type (etl_batch_id);

grant select on history_octane.senior_lien_restriction_type to readonly;

grant insert, select, update on history_octane.senior_lien_restriction_type to etl_loan;

create table history_octane.servicer_loan_id_assign_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.servicer_loan_id_assign_type owner to deployer;

create index idx_servicer_loan_id_assign_type__data_source_deleted_flag
    on history_octane.servicer_loan_id_assign_type (data_source_deleted_flag);

create index idx_servicer_loan_id_assign_type__data_source_updated_datetime
    on history_octane.servicer_loan_id_assign_type (data_source_updated_datetime);

create index idx_servicer_loan_id_assign_type__etl_batch_id
    on history_octane.servicer_loan_id_assign_type (etl_batch_id);

grant select on history_octane.servicer_loan_id_assign_type to readonly;

grant insert, select, update on history_octane.servicer_loan_id_assign_type to etl_loan;

create table history_octane.servicer_loan_id_import_request_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.servicer_loan_id_import_request_status_type owner to deployer;

create index idx_a6d0e1d3fcf9c9932e2e1234ad1d82b9
    on history_octane.servicer_loan_id_import_request_status_type (data_source_deleted_flag);

create index idx_7b583499ad5743bf58f06ce69da8e282
    on history_octane.servicer_loan_id_import_request_status_type (data_source_updated_datetime);

create index idx_servicer_loan_id_import_request_status_type__etl_batch_id
    on history_octane.servicer_loan_id_import_request_status_type (etl_batch_id);

grant select on history_octane.servicer_loan_id_import_request_status_type to readonly;

grant insert, select, update on history_octane.servicer_loan_id_import_request_status_type to etl_loan;

create table history_octane.servicing_transfer_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.servicing_transfer_type owner to deployer;

create index idx_servicing_transfer_type__data_source_deleted_flag
    on history_octane.servicing_transfer_type (data_source_deleted_flag);

create index idx_servicing_transfer_type__data_source_updated_datetime
    on history_octane.servicing_transfer_type (data_source_updated_datetime);

create index idx_servicing_transfer_type__etl_batch_id
    on history_octane.servicing_transfer_type (etl_batch_id);

grant select on history_octane.servicing_transfer_type to readonly;

grant insert, select, update on history_octane.servicing_transfer_type to etl_loan;

create table history_octane.settlement_agent
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    sa_pid bigint not null,
    sa_version integer,
    sa_account_pid bigint,
    sa_active boolean,
    sa_admin_lock boolean,
    sa_license_id varchar(128),
    sa_company_name varchar(128),
    sa_preferred_vendor boolean,
    etl_batch_id text
);

alter table history_octane.settlement_agent owner to deployer;

create index idx_settlement_agent__data_source_deleted_flag
    on history_octane.settlement_agent (data_source_deleted_flag);

create index idx_settlement_agent__data_source_updated_datetime
    on history_octane.settlement_agent (data_source_updated_datetime);

create index idx_settlement_agent__pid
    on history_octane.settlement_agent (sa_pid);

create index idx_settlement_agent__pid_version
    on history_octane.settlement_agent (sa_pid, sa_version);

create index idx_settlement_agent__etl_batch_id
    on history_octane.settlement_agent (etl_batch_id);

grant select on history_octane.settlement_agent to readonly;

grant insert, select, update on history_octane.settlement_agent to etl_loan;

create table history_octane.settlement_agent_office
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    sao_pid bigint not null,
    sao_version integer,
    sao_settlement_agent_pid bigint,
    sao_active boolean,
    sao_address_street1 varchar(128),
    sao_address_street2 varchar(128),
    sao_address_city varchar(128),
    sao_address_state varchar(128),
    sao_address_postal_code varchar(128),
    sao_address_country varchar(128),
    sao_phone varchar(32),
    sao_fax varchar(32),
    sao_docs_email varchar(256),
    sao_fund_email varchar(256),
    sao_schedule_email varchar(256),
    etl_batch_id text
);

alter table history_octane.settlement_agent_office owner to deployer;

create index idx_settlement_agent_office__data_source_deleted_flag
    on history_octane.settlement_agent_office (data_source_deleted_flag);

create index idx_settlement_agent_office__data_source_updated_datetime
    on history_octane.settlement_agent_office (data_source_updated_datetime);

create index idx_settlement_agent_office__pid
    on history_octane.settlement_agent_office (sao_pid);

create index idx_settlement_agent_office__pid_version
    on history_octane.settlement_agent_office (sao_pid, sao_version);

create index idx_settlement_agent_office__etl_batch_id
    on history_octane.settlement_agent_office (etl_batch_id);

grant select on history_octane.settlement_agent_office to readonly;

grant insert, select, update on history_octane.settlement_agent_office to etl_loan;

create table history_octane.settlement_agent_wire
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    saw_pid bigint not null,
    saw_version integer,
    saw_settlement_agent_pid bigint,
    saw_active boolean,
    saw_create_datetime timestamp,
    saw_bank_name varchar(128),
    saw_address_street1 varchar(128),
    saw_address_street2 varchar(128),
    saw_address_city varchar(128),
    saw_address_state varchar(128),
    saw_address_postal_code varchar(128),
    saw_address_country varchar(128),
    saw_for_credit_to varchar(256),
    saw_for_further_credit_fixed_text varchar(256),
    saw_for_further_credit_prompt_text varchar(256),
    saw_verified_from_date date,
    saw_verified_through_date date,
    saw_verifier varchar(128),
    saw_notes varchar(1024),
    saw_for_further_credit_type varchar(128),
    saw_beneficiary_bank_name varchar(128),
    saw_beneficiary_address_street1 varchar(128),
    saw_beneficiary_address_street2 varchar(128),
    saw_beneficiary_address_city varchar(128),
    saw_beneficiary_address_state varchar(128),
    saw_beneficiary_address_postal_code varchar(128),
    saw_beneficiary_address_country varchar(128),
    saw_beneficiary_for_credit_to varchar(256),
    saw_beneficiary_for_further_credit_fixed_text varchar(256),
    saw_beneficiary_for_further_credit_prompt_text varchar(256),
    saw_beneficiary_for_further_credit_type varchar(128),
    saw_beneficiary_notes varchar(1024),
    etl_batch_id text
);

alter table history_octane.settlement_agent_wire owner to deployer;

create index idx_settlement_agent_wire__data_source_deleted_flag
    on history_octane.settlement_agent_wire (data_source_deleted_flag);

create index idx_settlement_agent_wire__data_source_updated_datetime
    on history_octane.settlement_agent_wire (data_source_updated_datetime);

create index idx_settlement_agent_wire__pid
    on history_octane.settlement_agent_wire (saw_pid);

create index idx_settlement_agent_wire__pid_version
    on history_octane.settlement_agent_wire (saw_pid, saw_version);

create index idx_settlement_agent_wire__etl_batch_id
    on history_octane.settlement_agent_wire (etl_batch_id);

grant select on history_octane.settlement_agent_wire to readonly;

grant insert, select, update on history_octane.settlement_agent_wire to etl_loan;

create table history_octane.sheet_format_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.sheet_format_type owner to deployer;

create index idx_sheet_format_type__data_source_deleted_flag
    on history_octane.sheet_format_type (data_source_deleted_flag);

create index idx_sheet_format_type__data_source_updated_datetime
    on history_octane.sheet_format_type (data_source_updated_datetime);

create index idx_sheet_format_type__etl_batch_id
    on history_octane.sheet_format_type (etl_batch_id);

grant select on history_octane.sheet_format_type to readonly;

grant insert, select, update on history_octane.sheet_format_type to etl_loan;

create table history_octane.google_sheet_export
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    gse_pid bigint not null,
    gse_version integer,
    gse_name varchar(128),
    gse_account_pid bigint,
    gse_export_type varchar(128),
    gse_stored_query_name varchar(128),
    gse_spreadsheet_id varchar(128),
    gse_control_sheet_id varchar(128),
    gse_results_sheet_id varchar(128),
    gse_cron_expression varchar(32),
    gse_format_type varchar(128),
    etl_batch_id text
);

alter table history_octane.google_sheet_export owner to deployer;

create index idx_google_sheet_export__data_source_deleted_flag
    on history_octane.google_sheet_export (data_source_deleted_flag);

create index idx_google_sheet_export__data_source_updated_datetime
    on history_octane.google_sheet_export (data_source_updated_datetime);

create index idx_google_sheet_export__pid
    on history_octane.google_sheet_export (gse_pid);

create index idx_google_sheet_export__pid_version
    on history_octane.google_sheet_export (gse_pid, gse_version);

create index idx_google_sheet_export__etl_batch_id
    on history_octane.google_sheet_export (etl_batch_id);

grant select on history_octane.google_sheet_export to readonly;

grant insert, select, update on history_octane.google_sheet_export to etl_loan;

create table history_octane.signature_part_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.signature_part_type owner to deployer;

create index idx_signature_part_type__data_source_deleted_flag
    on history_octane.signature_part_type (data_source_deleted_flag);

create index idx_signature_part_type__data_source_updated_datetime
    on history_octane.signature_part_type (data_source_updated_datetime);

create index idx_signature_part_type__etl_batch_id
    on history_octane.signature_part_type (etl_batch_id);

grant select on history_octane.signature_part_type to readonly;

grant insert, select, update on history_octane.signature_part_type to etl_loan;

create table history_octane.site_allowed_ip
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    saip_pid bigint not null,
    saip_version integer,
    saip_account_pid bigint,
    saip_name varchar(128),
    saip_ip_address varchar(32),
    etl_batch_id text
);

alter table history_octane.site_allowed_ip owner to deployer;

create index idx_site_allowed_ip__data_source_deleted_flag
    on history_octane.site_allowed_ip (data_source_deleted_flag);

create index idx_site_allowed_ip__data_source_updated_datetime
    on history_octane.site_allowed_ip (data_source_updated_datetime);

create index idx_site_allowed_ip__pid
    on history_octane.site_allowed_ip (saip_pid);

create index idx_site_allowed_ip__pid_version
    on history_octane.site_allowed_ip (saip_pid, saip_version);

create index idx_site_allowed_ip__etl_batch_id
    on history_octane.site_allowed_ip (etl_batch_id);

grant select on history_octane.site_allowed_ip to readonly;

grant insert, select, update on history_octane.site_allowed_ip to etl_loan;

create table history_octane.smart_charge_apr_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.smart_charge_apr_type owner to deployer;

create index idx_smart_charge_apr_type__data_source_deleted_flag
    on history_octane.smart_charge_apr_type (data_source_deleted_flag);

create index idx_smart_charge_apr_type__data_source_updated_datetime
    on history_octane.smart_charge_apr_type (data_source_updated_datetime);

create index idx_smart_charge_apr_type__etl_batch_id
    on history_octane.smart_charge_apr_type (etl_batch_id);

grant select on history_octane.smart_charge_apr_type to readonly;

grant insert, select, update on history_octane.smart_charge_apr_type to etl_loan;

create table history_octane.smart_charge
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    sc_pid bigint not null,
    sc_version integer,
    sc_account_pid bigint,
    sc_charge_type varchar(128),
    sc_loan_position_type varchar(128),
    sc_name varchar(128),
    sc_smart_charge_apr_type varchar(128),
    sc_apr_criteria_pid bigint,
    etl_batch_id text
);

alter table history_octane.smart_charge owner to deployer;

create index idx_smart_charge__data_source_deleted_flag
    on history_octane.smart_charge (data_source_deleted_flag);

create index idx_smart_charge__data_source_updated_datetime
    on history_octane.smart_charge (data_source_updated_datetime);

create index idx_smart_charge__pid
    on history_octane.smart_charge (sc_pid);

create index idx_smart_charge__pid_version
    on history_octane.smart_charge (sc_pid, sc_version);

create index idx_smart_charge__etl_batch_id
    on history_octane.smart_charge (etl_batch_id);

grant select on history_octane.smart_charge to readonly;

grant insert, select, update on history_octane.smart_charge to etl_loan;

create table history_octane.smart_charge_group
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    scg_pid bigint not null,
    scg_version integer,
    scg_smart_charge_pid bigint,
    scg_group_name varchar(128),
    etl_batch_id text
);

alter table history_octane.smart_charge_group owner to deployer;

create index idx_smart_charge_group__data_source_deleted_flag
    on history_octane.smart_charge_group (data_source_deleted_flag);

create index idx_smart_charge_group__data_source_updated_datetime
    on history_octane.smart_charge_group (data_source_updated_datetime);

create index idx_smart_charge_group__pid
    on history_octane.smart_charge_group (scg_pid);

create index idx_smart_charge_group__pid_version
    on history_octane.smart_charge_group (scg_pid, scg_version);

create index idx_smart_charge_group__etl_batch_id
    on history_octane.smart_charge_group (etl_batch_id);

grant select on history_octane.smart_charge_group to readonly;

grant insert, select, update on history_octane.smart_charge_group to etl_loan;

create table history_octane.smart_charge_group_case
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    scgc_pid bigint not null,
    scgc_version integer,
    scgc_smart_charge_group_pid bigint,
    scgc_from_date date,
    scgc_through_date date,
    etl_batch_id text
);

alter table history_octane.smart_charge_group_case owner to deployer;

create index idx_smart_charge_group_case__data_source_deleted_flag
    on history_octane.smart_charge_group_case (data_source_deleted_flag);

create index idx_smart_charge_group_case__data_source_updated_datetime
    on history_octane.smart_charge_group_case (data_source_updated_datetime);

create index idx_smart_charge_group_case__pid
    on history_octane.smart_charge_group_case (scgc_pid);

create index idx_smart_charge_group_case__pid_version
    on history_octane.smart_charge_group_case (scgc_pid, scgc_version);

create index idx_smart_charge_group_case__etl_batch_id
    on history_octane.smart_charge_group_case (etl_batch_id);

grant select on history_octane.smart_charge_group_case to readonly;

grant insert, select, update on history_octane.smart_charge_group_case to etl_loan;

create table history_octane.smart_charge_case
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    scc_pid bigint not null,
    scc_version integer,
    scc_smart_charge_group_case_pid bigint,
    scc_case_name varchar(128),
    scc_ordinal integer,
    scc_criteria_pid bigint,
    scc_amount_description varchar(256),
    scc_charge_payer_type varchar(128),
    scc_charge_payee_type varchar(128),
    scc_paid_by varchar(128),
    scc_paid_to varchar(128),
    scc_base_amount numeric(16,3),
    scc_charge_input_type varchar(128),
    scc_charge_input_type_percent numeric(11,9),
    scc_charge_input_type_currency numeric(16,3),
    scc_financed boolean,
    scc_financed_auto_compute boolean,
    scc_poc boolean,
    scc_reduction_amount numeric(15),
    scc_subtract_lenders_title_insurance_amount boolean,
    scc_case_label varchar(108),
    etl_batch_id text
);

alter table history_octane.smart_charge_case owner to deployer;

create index idx_smart_charge_case__data_source_deleted_flag
    on history_octane.smart_charge_case (data_source_deleted_flag);

create index idx_smart_charge_case__data_source_updated_datetime
    on history_octane.smart_charge_case (data_source_updated_datetime);

create index idx_smart_charge_case__pid
    on history_octane.smart_charge_case (scc_pid);

create index idx_smart_charge_case__pid_version
    on history_octane.smart_charge_case (scc_pid, scc_version);

create index idx_smart_charge_case__etl_batch_id
    on history_octane.smart_charge_case (etl_batch_id);

grant select on history_octane.smart_charge_case to readonly;

grant insert, select, update on history_octane.smart_charge_case to etl_loan;

create table history_octane.smart_message_delivery_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.smart_message_delivery_type owner to deployer;

create index idx_smart_message_delivery_type__data_source_deleted_flag
    on history_octane.smart_message_delivery_type (data_source_deleted_flag);

create index idx_smart_message_delivery_type__data_source_updated_datetime
    on history_octane.smart_message_delivery_type (data_source_updated_datetime);

create index idx_smart_message_delivery_type__etl_batch_id
    on history_octane.smart_message_delivery_type (etl_batch_id);

grant select on history_octane.smart_message_delivery_type to readonly;

grant insert, select, update on history_octane.smart_message_delivery_type to etl_loan;

create table history_octane.smart_message_email_recipient_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.smart_message_email_recipient_type owner to deployer;

create index idx_d2fc7d37027b873fdda165ddf2bc667d
    on history_octane.smart_message_email_recipient_type (data_source_deleted_flag);

create index idx_3cd54c6f7f99074cfa53517a295984a4
    on history_octane.smart_message_email_recipient_type (data_source_updated_datetime);

create index idx_smart_message_email_recipient_type__etl_batch_id
    on history_octane.smart_message_email_recipient_type (etl_batch_id);

grant select on history_octane.smart_message_email_recipient_type to readonly;

grant insert, select, update on history_octane.smart_message_email_recipient_type to etl_loan;

create table history_octane.smart_message_recipient_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.smart_message_recipient_type owner to deployer;

create index idx_smart_message_recipient_type__data_source_deleted_flag
    on history_octane.smart_message_recipient_type (data_source_deleted_flag);

create index idx_smart_message_recipient_type__data_source_updated_datetime
    on history_octane.smart_message_recipient_type (data_source_updated_datetime);

create index idx_smart_message_recipient_type__etl_batch_id
    on history_octane.smart_message_recipient_type (etl_batch_id);

grant select on history_octane.smart_message_recipient_type to readonly;

grant insert, select, update on history_octane.smart_message_recipient_type to etl_loan;

create table history_octane.smart_message_source_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.smart_message_source_type owner to deployer;

create index idx_smart_message_source_type__data_source_deleted_flag
    on history_octane.smart_message_source_type (data_source_deleted_flag);

create index idx_smart_message_source_type__data_source_updated_datetime
    on history_octane.smart_message_source_type (data_source_updated_datetime);

create index idx_smart_message_source_type__etl_batch_id
    on history_octane.smart_message_source_type (etl_batch_id);

grant select on history_octane.smart_message_source_type to readonly;

grant insert, select, update on history_octane.smart_message_source_type to etl_loan;

create table history_octane.smart_mi
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    sm_pid bigint not null,
    sm_version integer,
    sm_account_pid bigint,
    sm_mi_company_name_type varchar(128),
    etl_batch_id text
);

alter table history_octane.smart_mi owner to deployer;

create index idx_smart_mi__data_source_deleted_flag
    on history_octane.smart_mi (data_source_deleted_flag);

create index idx_smart_mi__data_source_updated_datetime
    on history_octane.smart_mi (data_source_updated_datetime);

create index idx_smart_mi__pid
    on history_octane.smart_mi (sm_pid);

create index idx_smart_mi__pid_version
    on history_octane.smart_mi (sm_pid, sm_version);

create index idx_smart_mi__etl_batch_id
    on history_octane.smart_mi (etl_batch_id);

grant select on history_octane.smart_mi to readonly;

grant insert, select, update on history_octane.smart_mi to etl_loan;

create table history_octane.smart_mi_eligibility_case
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    smec_pid bigint not null,
    smec_version integer,
    smec_smart_mi_pid bigint,
    smec_criteria_pid bigint,
    smec_from_date date,
    smec_through_date date,
    etl_batch_id text
);

alter table history_octane.smart_mi_eligibility_case owner to deployer;

create index idx_smart_mi_eligibility_case__data_source_deleted_flag
    on history_octane.smart_mi_eligibility_case (data_source_deleted_flag);

create index idx_smart_mi_eligibility_case__data_source_updated_datetime
    on history_octane.smart_mi_eligibility_case (data_source_updated_datetime);

create index idx_smart_mi_eligibility_case__pid
    on history_octane.smart_mi_eligibility_case (smec_pid);

create index idx_smart_mi_eligibility_case__pid_version
    on history_octane.smart_mi_eligibility_case (smec_pid, smec_version);

create index idx_smart_mi_eligibility_case__etl_batch_id
    on history_octane.smart_mi_eligibility_case (etl_batch_id);

grant select on history_octane.smart_mi_eligibility_case to readonly;

grant insert, select, update on history_octane.smart_mi_eligibility_case to etl_loan;

create table history_octane.smart_mi_rate_card
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    smrca_pid bigint not null,
    smrca_version integer,
    smrca_from_date date,
    smrca_mi_payment_type varchar(128),
    smrca_mi_payer_type varchar(128),
    smrca_minimum_rate_percent numeric(11,9),
    smrca_smart_mi_pid bigint,
    smrca_maximum_renewal_rate_percent numeric(11,9),
    etl_batch_id text
);

alter table history_octane.smart_mi_rate_card owner to deployer;

create index idx_smart_mi_rate_card__data_source_deleted_flag
    on history_octane.smart_mi_rate_card (data_source_deleted_flag);

create index idx_smart_mi_rate_card__data_source_updated_datetime
    on history_octane.smart_mi_rate_card (data_source_updated_datetime);

create index idx_smart_mi_rate_card__pid
    on history_octane.smart_mi_rate_card (smrca_pid);

create index idx_smart_mi_rate_card__pid_version
    on history_octane.smart_mi_rate_card (smrca_pid, smrca_version);

create index idx_smart_mi_rate_card__etl_batch_id
    on history_octane.smart_mi_rate_card (etl_batch_id);

grant select on history_octane.smart_mi_rate_card to readonly;

grant insert, select, update on history_octane.smart_mi_rate_card to etl_loan;

create table history_octane.smart_mi_rate_adjustment_case
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    smrac_pid bigint not null,
    smrac_version integer,
    smrac_smart_mi_rate_card_pid bigint,
    smrac_rate_adjustment_percent numeric(11,9),
    smrac_criteria_html varchar(16000),
    smrac_criteria_pid bigint,
    etl_batch_id text
);

alter table history_octane.smart_mi_rate_adjustment_case owner to deployer;

create index idx_smart_mi_rate_adjustment_case__data_source_deleted_flag
    on history_octane.smart_mi_rate_adjustment_case (data_source_deleted_flag);

create index idx_smart_mi_rate_adjustment_case__data_source_updated_datetime
    on history_octane.smart_mi_rate_adjustment_case (data_source_updated_datetime);

create index idx_smart_mi_rate_adjustment_case__pid
    on history_octane.smart_mi_rate_adjustment_case (smrac_pid);

create index idx_smart_mi_rate_adjustment_case__pid_version
    on history_octane.smart_mi_rate_adjustment_case (smrac_pid, smrac_version);

create index idx_smart_mi_rate_adjustment_case__etl_batch_id
    on history_octane.smart_mi_rate_adjustment_case (etl_batch_id);

grant select on history_octane.smart_mi_rate_adjustment_case to readonly;

grant insert, select, update on history_octane.smart_mi_rate_adjustment_case to etl_loan;

create table history_octane.smart_mi_rate_case
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    smrc_pid bigint not null,
    smrc_version integer,
    smrc_smart_mi_rate_card_pid bigint,
    smrc_criteria_html varchar(16000),
    smrc_ordinal integer,
    smrc_criteria_pid bigint,
    smrc_else_case boolean,
    smrc_amount_description varchar(256),
    smrc_upfront_percent numeric(11,9),
    smrc_initial_monthly_payment_annual_percent numeric(11,9),
    smrc_coverage_percent numeric(11,9),
    smrc_ltv_cutoff_percent numeric(11,9),
    smrc_midpoint_cutoff_required boolean,
    smrc_required_monthly_payment_count integer,
    smrc_initial_duration_months integer,
    etl_batch_id text
);

alter table history_octane.smart_mi_rate_case owner to deployer;

create index idx_smart_mi_rate_case__data_source_deleted_flag
    on history_octane.smart_mi_rate_case (data_source_deleted_flag);

create index idx_smart_mi_rate_case__data_source_updated_datetime
    on history_octane.smart_mi_rate_case (data_source_updated_datetime);

create index idx_smart_mi_rate_case__pid
    on history_octane.smart_mi_rate_case (smrc_pid);

create index idx_smart_mi_rate_case__pid_version
    on history_octane.smart_mi_rate_case (smrc_pid, smrc_version);

create index idx_smart_mi_rate_case__etl_batch_id
    on history_octane.smart_mi_rate_case (etl_batch_id);

grant select on history_octane.smart_mi_rate_case to readonly;

grant insert, select, update on history_octane.smart_mi_rate_case to etl_loan;

create table history_octane.smart_mi_surcharge
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    sms_pid bigint not null,
    sms_version integer,
    sms_account_pid bigint,
    sms_from_date date,
    etl_batch_id text
);

alter table history_octane.smart_mi_surcharge owner to deployer;

create index idx_smart_mi_surcharge__data_source_deleted_flag
    on history_octane.smart_mi_surcharge (data_source_deleted_flag);

create index idx_smart_mi_surcharge__data_source_updated_datetime
    on history_octane.smart_mi_surcharge (data_source_updated_datetime);

create index idx_smart_mi_surcharge__pid
    on history_octane.smart_mi_surcharge (sms_pid);

create index idx_smart_mi_surcharge__pid_version
    on history_octane.smart_mi_surcharge (sms_pid, sms_version);

create index idx_smart_mi_surcharge__etl_batch_id
    on history_octane.smart_mi_surcharge (etl_batch_id);

grant select on history_octane.smart_mi_surcharge to readonly;

grant insert, select, update on history_octane.smart_mi_surcharge to etl_loan;

create table history_octane.smart_mi_surcharge_case
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    smsc_pid bigint not null,
    smsc_version integer,
    smsc_smart_mi_surcharge_pid bigint,
    smsc_criteria_pid bigint,
    smsc_government_surcharge_percent numeric(11,9),
    smsc_minimum_surcharge_amount numeric(15,2),
    smsc_criteria_html varchar(16000),
    etl_batch_id text
);

alter table history_octane.smart_mi_surcharge_case owner to deployer;

create index idx_smart_mi_surcharge_case__data_source_deleted_flag
    on history_octane.smart_mi_surcharge_case (data_source_deleted_flag);

create index idx_smart_mi_surcharge_case__data_source_updated_datetime
    on history_octane.smart_mi_surcharge_case (data_source_updated_datetime);

create index idx_smart_mi_surcharge_case__pid
    on history_octane.smart_mi_surcharge_case (smsc_pid);

create index idx_smart_mi_surcharge_case__pid_version
    on history_octane.smart_mi_surcharge_case (smsc_pid, smsc_version);

create index idx_smart_mi_surcharge_case__etl_batch_id
    on history_octane.smart_mi_surcharge_case (etl_batch_id);

grant select on history_octane.smart_mi_surcharge_case to readonly;

grant insert, select, update on history_octane.smart_mi_surcharge_case to etl_loan;

create table history_octane.smart_stack
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ss_pid bigint not null,
    ss_version integer,
    ss_account_pid bigint,
    ss_name varchar(128),
    etl_batch_id text
);

alter table history_octane.smart_stack owner to deployer;

create index idx_smart_stack__data_source_deleted_flag
    on history_octane.smart_stack (data_source_deleted_flag);

create index idx_smart_stack__data_source_updated_datetime
    on history_octane.smart_stack (data_source_updated_datetime);

create index idx_smart_stack__pid
    on history_octane.smart_stack (ss_pid);

create index idx_smart_stack__pid_version
    on history_octane.smart_stack (ss_pid, ss_version);

create index idx_smart_stack__etl_batch_id
    on history_octane.smart_stack (etl_batch_id);

grant select on history_octane.smart_stack to readonly;

grant insert, select, update on history_octane.smart_stack to etl_loan;

create table history_octane.smart_stack_doc_set_include_option_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.smart_stack_doc_set_include_option_type owner to deployer;

create index idx_5c4005d0fddc17c523757df5dbf67392
    on history_octane.smart_stack_doc_set_include_option_type (data_source_deleted_flag);

create index idx_09ea9135341c15df2d1dba242cdbbd37
    on history_octane.smart_stack_doc_set_include_option_type (data_source_updated_datetime);

create index idx_smart_stack_doc_set_include_option_type__etl_batch_id
    on history_octane.smart_stack_doc_set_include_option_type (etl_batch_id);

grant select on history_octane.smart_stack_doc_set_include_option_type to readonly;

grant insert, select, update on history_octane.smart_stack_doc_set_include_option_type to etl_loan;

create table history_octane.smart_doc_set
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    sdst_pid bigint not null,
    sdst_version integer,
    sdst_account_pid bigint,
    sdst_name varchar(128),
    sdst_doc_set_type varchar(128),
    sdst_active boolean,
    sdst_smart_stack_doc_set_include_option_type varchar(128),
    etl_batch_id text
);

alter table history_octane.smart_doc_set owner to deployer;

create index idx_smart_doc_set__data_source_deleted_flag
    on history_octane.smart_doc_set (data_source_deleted_flag);

create index idx_smart_doc_set__data_source_updated_datetime
    on history_octane.smart_doc_set (data_source_updated_datetime);

create index idx_smart_doc_set__pid
    on history_octane.smart_doc_set (sdst_pid);

create index idx_smart_doc_set__pid_version
    on history_octane.smart_doc_set (sdst_pid, sdst_version);

create index idx_smart_doc_set__etl_batch_id
    on history_octane.smart_doc_set (etl_batch_id);

grant select on history_octane.smart_doc_set to readonly;

grant insert, select, update on history_octane.smart_doc_set to etl_loan;

create table history_octane.key_package
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    kp_pid bigint not null,
    kp_version integer,
    kp_account_pid bigint,
    kp_smart_doc_set_pid bigint,
    kp_key_package_type varchar(128),
    etl_batch_id text
);

alter table history_octane.key_package owner to deployer;

create index idx_key_package__data_source_deleted_flag
    on history_octane.key_package (data_source_deleted_flag);

create index idx_key_package__data_source_updated_datetime
    on history_octane.key_package (data_source_updated_datetime);

create index idx_key_package__pid
    on history_octane.key_package (kp_pid);

create index idx_key_package__pid_version
    on history_octane.key_package (kp_pid, kp_version);

create index idx_key_package__etl_batch_id
    on history_octane.key_package (etl_batch_id);

grant select on history_octane.key_package to readonly;

grant insert, select, update on history_octane.key_package to etl_loan;

create table history_octane.smart_stack_doc_set_include_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.smart_stack_doc_set_include_type owner to deployer;

create index idx_smart_stack_doc_set_include_type__data_source_deleted_flag
    on history_octane.smart_stack_doc_set_include_type (data_source_deleted_flag);

create index idx_c27fa5d1cddb1a2b57c2679e5f7241fc
    on history_octane.smart_stack_doc_set_include_type (data_source_updated_datetime);

create index idx_smart_stack_doc_set_include_type__etl_batch_id
    on history_octane.smart_stack_doc_set_include_type (etl_batch_id);

grant select on history_octane.smart_stack_doc_set_include_type to readonly;

grant insert, select, update on history_octane.smart_stack_doc_set_include_type to etl_loan;

create table history_octane.solar_panel_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.solar_panel_type owner to deployer;

create index idx_solar_panel_type__data_source_deleted_flag
    on history_octane.solar_panel_type (data_source_deleted_flag);

create index idx_solar_panel_type__data_source_updated_datetime
    on history_octane.solar_panel_type (data_source_updated_datetime);

create index idx_solar_panel_type__etl_batch_id
    on history_octane.solar_panel_type (etl_batch_id);

grant select on history_octane.solar_panel_type to readonly;

grant insert, select, update on history_octane.solar_panel_type to etl_loan;

create table history_octane.stack_doc_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.stack_doc_type owner to deployer;

create index idx_stack_doc_type__data_source_deleted_flag
    on history_octane.stack_doc_type (data_source_deleted_flag);

create index idx_stack_doc_type__data_source_updated_datetime
    on history_octane.stack_doc_type (data_source_updated_datetime);

create index idx_stack_doc_type__etl_batch_id
    on history_octane.stack_doc_type (etl_batch_id);

grant select on history_octane.stack_doc_type to readonly;

grant insert, select, update on history_octane.stack_doc_type to etl_loan;

create table history_octane.stack_export_file_name_format_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.stack_export_file_name_format_type owner to deployer;

create index idx_a59d745759acb87020fbd4ada6ca4a3c
    on history_octane.stack_export_file_name_format_type (data_source_deleted_flag);

create index idx_40e27eee26cab30f24440eab7fa7a60a
    on history_octane.stack_export_file_name_format_type (data_source_updated_datetime);

create index idx_stack_export_file_name_format_type__etl_batch_id
    on history_octane.stack_export_file_name_format_type (etl_batch_id);

grant select on history_octane.stack_export_file_name_format_type to readonly;

grant insert, select, update on history_octane.stack_export_file_name_format_type to etl_loan;

create table history_octane.stack_export_file_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.stack_export_file_type owner to deployer;

create index idx_stack_export_file_type__data_source_deleted_flag
    on history_octane.stack_export_file_type (data_source_deleted_flag);

create index idx_stack_export_file_type__data_source_updated_datetime
    on history_octane.stack_export_file_type (data_source_updated_datetime);

create index idx_stack_export_file_type__etl_batch_id
    on history_octane.stack_export_file_type (etl_batch_id);

grant select on history_octane.stack_export_file_type to readonly;

grant insert, select, update on history_octane.stack_export_file_type to etl_loan;

create table history_octane.stack_export_loan_name_format_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.stack_export_loan_name_format_type owner to deployer;

create index idx_3dc2cabc994c0f5321e22ec82d56f05e
    on history_octane.stack_export_loan_name_format_type (data_source_deleted_flag);

create index idx_ebf40efa982aa0e5b01929480cfc3b9c
    on history_octane.stack_export_loan_name_format_type (data_source_updated_datetime);

create index idx_stack_export_loan_name_format_type__etl_batch_id
    on history_octane.stack_export_loan_name_format_type (etl_batch_id);

grant select on history_octane.stack_export_loan_name_format_type to readonly;

grant insert, select, update on history_octane.stack_export_loan_name_format_type to etl_loan;

create table history_octane.stack_export_request_loan_export_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.stack_export_request_loan_export_type owner to deployer;

create index idx_782172dfbbafe081637d5817cd310c07
    on history_octane.stack_export_request_loan_export_type (data_source_deleted_flag);

create index idx_9c2d5783bb393705f43c0ba0115cac4f
    on history_octane.stack_export_request_loan_export_type (data_source_updated_datetime);

create index idx_stack_export_request_loan_export_type__etl_batch_id
    on history_octane.stack_export_request_loan_export_type (etl_batch_id);

grant select on history_octane.stack_export_request_loan_export_type to readonly;

grant insert, select, update on history_octane.stack_export_request_loan_export_type to etl_loan;

create table history_octane.stack_export_request_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.stack_export_request_status_type owner to deployer;

create index idx_stack_export_request_status_type__data_source_deleted_flag
    on history_octane.stack_export_request_status_type (data_source_deleted_flag);

create index idx_be36282c14483800cb24afad669c1cce
    on history_octane.stack_export_request_status_type (data_source_updated_datetime);

create index idx_stack_export_request_status_type__etl_batch_id
    on history_octane.stack_export_request_status_type (etl_batch_id);

grant select on history_octane.stack_export_request_status_type to readonly;

grant insert, select, update on history_octane.stack_export_request_status_type to etl_loan;

create table history_octane.state_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.state_type owner to deployer;

create index idx_state_type__data_source_deleted_flag
    on history_octane.state_type (data_source_deleted_flag);

create index idx_state_type__data_source_updated_datetime
    on history_octane.state_type (data_source_updated_datetime);

create index idx_state_type__etl_batch_id
    on history_octane.state_type (etl_batch_id);

grant select on history_octane.state_type to readonly;

grant insert, select, update on history_octane.state_type to etl_loan;

create table history_octane.county
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    c_pid bigint not null,
    c_version integer,
    c_name varchar(128),
    c_state_type varchar(128),
    c_county_fips varchar(16),
    c_recording_district_type varchar(128),
    c_torrens_available boolean,
    c_defunct boolean,
    c_mortech_name varchar(128),
    etl_batch_id text
);

alter table history_octane.county owner to deployer;

create index idx_county__data_source_deleted_flag
    on history_octane.county (data_source_deleted_flag);

create index idx_county__data_source_updated_datetime
    on history_octane.county (data_source_updated_datetime);

create index idx_county__pid
    on history_octane.county (c_pid);

create index idx_county__pid_version
    on history_octane.county (c_pid, c_version);

create index idx_county__etl_batch_id
    on history_octane.county (etl_batch_id);

grant select on history_octane.county to readonly;

grant insert, select, update on history_octane.county to etl_loan;

create table history_octane.area_median_income_row
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    amir_pid bigint not null,
    amir_version integer,
    amir_area_median_income_table_pid bigint,
    amir_state_type varchar(128),
    amir_county_pid bigint,
    amir_census_tract varchar(16),
    amir_area_median_income numeric(15,2),
    etl_batch_id text
);

alter table history_octane.area_median_income_row owner to deployer;

create index idx_area_median_income_row__data_source_deleted_flag
    on history_octane.area_median_income_row (data_source_deleted_flag);

create index idx_area_median_income_row__data_source_updated_datetime
    on history_octane.area_median_income_row (data_source_updated_datetime);

create index idx_area_median_income_row__pid
    on history_octane.area_median_income_row (amir_pid);

create index idx_area_median_income_row__pid_version
    on history_octane.area_median_income_row (amir_pid, amir_version);

create index idx_area_median_income_row__etl_batch_id
    on history_octane.area_median_income_row (etl_batch_id);

grant select on history_octane.area_median_income_row to readonly;

grant insert, select, update on history_octane.area_median_income_row to etl_loan;

create table history_octane.county_city
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    cci_pid bigint not null,
    cci_version integer,
    cci_county_pid bigint,
    cci_city_name varchar(128),
    etl_batch_id text
);

alter table history_octane.county_city owner to deployer;

create index idx_county_city__data_source_deleted_flag
    on history_octane.county_city (data_source_deleted_flag);

create index idx_county_city__data_source_updated_datetime
    on history_octane.county_city (data_source_updated_datetime);

create index idx_county_city__pid
    on history_octane.county_city (cci_pid);

create index idx_county_city__pid_version
    on history_octane.county_city (cci_pid, cci_version);

create index idx_county_city__etl_batch_id
    on history_octane.county_city (etl_batch_id);

grant select on history_octane.county_city to readonly;

grant insert, select, update on history_octane.county_city to etl_loan;

create table history_octane.county_sub_jurisdiction
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    csju_pid bigint not null,
    csju_version integer,
    csju_county_pid bigint,
    csju_sub_jurisdiction_name varchar(128),
    etl_batch_id text
);

alter table history_octane.county_sub_jurisdiction owner to deployer;

create index idx_county_sub_jurisdiction__data_source_deleted_flag
    on history_octane.county_sub_jurisdiction (data_source_deleted_flag);

create index idx_county_sub_jurisdiction__data_source_updated_datetime
    on history_octane.county_sub_jurisdiction (data_source_updated_datetime);

create index idx_county_sub_jurisdiction__pid
    on history_octane.county_sub_jurisdiction (csju_pid);

create index idx_county_sub_jurisdiction__pid_version
    on history_octane.county_sub_jurisdiction (csju_pid, csju_version);

create index idx_county_sub_jurisdiction__etl_batch_id
    on history_octane.county_sub_jurisdiction (etl_batch_id);

grant select on history_octane.county_sub_jurisdiction to readonly;

grant insert, select, update on history_octane.county_sub_jurisdiction to etl_loan;

create table history_octane.disaster_declaration
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dd_pid bigint not null,
    dd_version integer,
    dd_account_pid bigint,
    dd_fema_incident_id varchar(32),
    dd_state_type varchar(128),
    dd_county_pid bigint,
    dd_declared_disaster_date date,
    dd_last_processed_datetime timestamp,
    etl_batch_id text
);

alter table history_octane.disaster_declaration owner to deployer;

create index idx_disaster_declaration__data_source_deleted_flag
    on history_octane.disaster_declaration (data_source_deleted_flag);

create index idx_disaster_declaration__data_source_updated_datetime
    on history_octane.disaster_declaration (data_source_updated_datetime);

create index idx_disaster_declaration__pid
    on history_octane.disaster_declaration (dd_pid);

create index idx_disaster_declaration__pid_version
    on history_octane.disaster_declaration (dd_pid, dd_version);

create index idx_disaster_declaration__etl_batch_id
    on history_octane.disaster_declaration (etl_batch_id);

grant select on history_octane.disaster_declaration to readonly;

grant insert, select, update on history_octane.disaster_declaration to etl_loan;

create table history_octane.license_req
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    mlr_pid bigint not null,
    mlr_version integer,
    mlr_account_pid bigint,
    mlr_state_type varchar(128),
    mlr_license_type varchar(128),
    etl_batch_id text
);

alter table history_octane.license_req owner to deployer;

create index idx_license_req__data_source_deleted_flag
    on history_octane.license_req (data_source_deleted_flag);

create index idx_license_req__data_source_updated_datetime
    on history_octane.license_req (data_source_updated_datetime);

create index idx_license_req__pid
    on history_octane.license_req (mlr_pid);

create index idx_license_req__pid_version
    on history_octane.license_req (mlr_pid, mlr_version);

create index idx_license_req__etl_batch_id
    on history_octane.license_req (etl_batch_id);

grant select on history_octane.license_req to readonly;

grant insert, select, update on history_octane.license_req to etl_loan;

create table history_octane.loan_limit_row
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    llr_pid bigint not null,
    llr_version integer,
    llr_loan_limit_table_pid bigint,
    llr_loan_limit_type varchar(128),
    llr_state_type varchar(128),
    llr_county_pid bigint,
    llr_one_unit_limit_amount numeric(15,2),
    llr_two_unit_limit_amount numeric(15,2),
    llr_three_unit_limit_amount numeric(15,2),
    llr_four_unit_limit_amount numeric(15,2),
    etl_batch_id text
);

alter table history_octane.loan_limit_row owner to deployer;

create index idx_loan_limit_row__data_source_deleted_flag
    on history_octane.loan_limit_row (data_source_deleted_flag);

create index idx_loan_limit_row__data_source_updated_datetime
    on history_octane.loan_limit_row (data_source_updated_datetime);

create index idx_loan_limit_row__pid
    on history_octane.loan_limit_row (llr_pid);

create index idx_loan_limit_row__pid_version
    on history_octane.loan_limit_row (llr_pid, llr_version);

create index idx_loan_limit_row__etl_batch_id
    on history_octane.loan_limit_row (etl_batch_id);

grant select on history_octane.loan_limit_row to readonly;

grant insert, select, update on history_octane.loan_limit_row to etl_loan;

create table history_octane.recording_city
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    rc_pid bigint not null,
    rc_version integer,
    rc_city_name varchar(128),
    rc_state_type varchar(128),
    rc_recording_city_name varchar(128),
    etl_batch_id text
);

alter table history_octane.recording_city owner to deployer;

create index idx_recording_city__data_source_deleted_flag
    on history_octane.recording_city (data_source_deleted_flag);

create index idx_recording_city__data_source_updated_datetime
    on history_octane.recording_city (data_source_updated_datetime);

create index idx_recording_city__pid
    on history_octane.recording_city (rc_pid);

create index idx_recording_city__pid_version
    on history_octane.recording_city (rc_pid, rc_version);

create index idx_recording_city__etl_batch_id
    on history_octane.recording_city (etl_batch_id);

grant select on history_octane.recording_city to readonly;

grant insert, select, update on history_octane.recording_city to etl_loan;

create table history_octane.recording_district
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    rdi_pid bigint not null,
    rdi_version integer,
    rdi_state_type varchar(128),
    rdi_district_name_with_qualifier varchar(128),
    rdi_district_name varchar(128),
    etl_batch_id text
);

alter table history_octane.recording_district owner to deployer;

create index idx_recording_district__data_source_deleted_flag
    on history_octane.recording_district (data_source_deleted_flag);

create index idx_recording_district__data_source_updated_datetime
    on history_octane.recording_district (data_source_updated_datetime);

create index idx_recording_district__pid
    on history_octane.recording_district (rdi_pid);

create index idx_recording_district__pid_version
    on history_octane.recording_district (rdi_pid, rdi_version);

create index idx_recording_district__etl_batch_id
    on history_octane.recording_district (etl_batch_id);

grant select on history_octane.recording_district to readonly;

grant insert, select, update on history_octane.recording_district to etl_loan;

create table history_octane.county_recording_district
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    crdi_pid bigint not null,
    crdi_version integer,
    crdi_county_pid bigint,
    crdi_recording_district_pid bigint,
    etl_batch_id text
);

alter table history_octane.county_recording_district owner to deployer;

create index idx_county_recording_district__data_source_deleted_flag
    on history_octane.county_recording_district (data_source_deleted_flag);

create index idx_county_recording_district__data_source_updated_datetime
    on history_octane.county_recording_district (data_source_updated_datetime);

create index idx_county_recording_district__pid
    on history_octane.county_recording_district (crdi_pid);

create index idx_county_recording_district__pid_version
    on history_octane.county_recording_district (crdi_pid, crdi_version);

create index idx_county_recording_district__etl_batch_id
    on history_octane.county_recording_district (etl_batch_id);

grant select on history_octane.county_recording_district to readonly;

grant insert, select, update on history_octane.county_recording_district to etl_loan;

create table history_octane.region_ernst_page_rec
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    rerc_pid bigint not null,
    rerc_version integer,
    rerc_ernst_page_rec_type varchar(128),
    rerc_state_type varchar(128),
    rerc_county_pid bigint,
    rerc_county_city_pid bigint,
    rerc_recording_district_pid bigint,
    rerc_ernst_page_rec varchar(16),
    etl_batch_id text
);

alter table history_octane.region_ernst_page_rec owner to deployer;

create index idx_region_ernst_page_rec__data_source_deleted_flag
    on history_octane.region_ernst_page_rec (data_source_deleted_flag);

create index idx_region_ernst_page_rec__data_source_updated_datetime
    on history_octane.region_ernst_page_rec (data_source_updated_datetime);

create index idx_region_ernst_page_rec__pid
    on history_octane.region_ernst_page_rec (rerc_pid);

create index idx_region_ernst_page_rec__pid_version
    on history_octane.region_ernst_page_rec (rerc_pid, rerc_version);

create index idx_region_ernst_page_rec__etl_batch_id
    on history_octane.region_ernst_page_rec (etl_batch_id);

grant select on history_octane.region_ernst_page_rec to readonly;

grant insert, select, update on history_octane.region_ernst_page_rec to etl_loan;

create table history_octane.street_links_product_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.street_links_product_type owner to deployer;

create index idx_street_links_product_type__data_source_deleted_flag
    on history_octane.street_links_product_type (data_source_deleted_flag);

create index idx_street_links_product_type__data_source_updated_datetime
    on history_octane.street_links_product_type (data_source_updated_datetime);

create index idx_street_links_product_type__etl_batch_id
    on history_octane.street_links_product_type (etl_batch_id);

grant select on history_octane.street_links_product_type to readonly;

grant insert, select, update on history_octane.street_links_product_type to etl_loan;

create table history_octane.stripe_payment_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.stripe_payment_status_type owner to deployer;

create index idx_stripe_payment_status_type__data_source_deleted_flag
    on history_octane.stripe_payment_status_type (data_source_deleted_flag);

create index idx_stripe_payment_status_type__data_source_updated_datetime
    on history_octane.stripe_payment_status_type (data_source_updated_datetime);

create index idx_stripe_payment_status_type__etl_batch_id
    on history_octane.stripe_payment_status_type (etl_batch_id);

grant select on history_octane.stripe_payment_status_type to readonly;

grant insert, select, update on history_octane.stripe_payment_status_type to etl_loan;

create table history_octane.stripe_payment
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    stpm_pid bigint not null,
    stpm_version integer,
    stpm_account_pid bigint,
    stpm_submit_datetime timestamp,
    stpm_payer_unparsed_name varchar(128),
    stpm_invoice_amount numeric(15,2),
    stpm_payment_request_type varchar(128),
    stpm_stripe_payment_status_type varchar(128),
    stpm_payment_status_messages text,
    stpm_status_datetime timestamp,
    stpm_token varchar(128),
    stpm_receipt_email varchar(256),
    stpm_stripe_id varchar(128),
    stpm_refund_stripe_id varchar(128),
    stpm_receipt_url varchar(256),
    etl_batch_id text
);

alter table history_octane.stripe_payment owner to deployer;

create index idx_stripe_payment__data_source_deleted_flag
    on history_octane.stripe_payment (data_source_deleted_flag);

create index idx_stripe_payment__data_source_updated_datetime
    on history_octane.stripe_payment (data_source_updated_datetime);

create index idx_stripe_payment__pid
    on history_octane.stripe_payment (stpm_pid);

create index idx_stripe_payment__pid_version
    on history_octane.stripe_payment (stpm_pid, stpm_version);

create index idx_stripe_payment__etl_batch_id
    on history_octane.stripe_payment (etl_batch_id);

grant select on history_octane.stripe_payment to readonly;

grant insert, select, update on history_octane.stripe_payment to etl_loan;

create table history_octane.tax_filing_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.tax_filing_status_type owner to deployer;

create index idx_tax_filing_status_type__data_source_deleted_flag
    on history_octane.tax_filing_status_type (data_source_deleted_flag);

create index idx_tax_filing_status_type__data_source_updated_datetime
    on history_octane.tax_filing_status_type (data_source_updated_datetime);

create index idx_tax_filing_status_type__etl_batch_id
    on history_octane.tax_filing_status_type (etl_batch_id);

grant select on history_octane.tax_filing_status_type to readonly;

grant insert, select, update on history_octane.tax_filing_status_type to etl_loan;

create table history_octane.tax_transcript_request_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.tax_transcript_request_status_type owner to deployer;

create index idx_f796fadd84b7ddf44940c6fbcb745d37
    on history_octane.tax_transcript_request_status_type (data_source_deleted_flag);

create index idx_1210c62ce475577d167d68ea630571d9
    on history_octane.tax_transcript_request_status_type (data_source_updated_datetime);

create index idx_tax_transcript_request_status_type__etl_batch_id
    on history_octane.tax_transcript_request_status_type (etl_batch_id);

grant select on history_octane.tax_transcript_request_status_type to readonly;

grant insert, select, update on history_octane.tax_transcript_request_status_type to etl_loan;

create table history_octane.taxpayer_identifier_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.taxpayer_identifier_type owner to deployer;

create index idx_taxpayer_identifier_type__data_source_deleted_flag
    on history_octane.taxpayer_identifier_type (data_source_deleted_flag);

create index idx_taxpayer_identifier_type__data_source_updated_datetime
    on history_octane.taxpayer_identifier_type (data_source_updated_datetime);

create index idx_taxpayer_identifier_type__etl_batch_id
    on history_octane.taxpayer_identifier_type (etl_batch_id);

grant select on history_octane.taxpayer_identifier_type to readonly;

grant insert, select, update on history_octane.taxpayer_identifier_type to etl_loan;

create table history_octane.contractor
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ctr_pid bigint not null,
    ctr_version integer,
    ctr_account_pid bigint,
    ctr_contractor_company_name varchar(128),
    ctr_max_construction_credit_amount numeric(15,2),
    ctr_taxpayer_identifier_type varchar(128),
    ctr_first_name varchar(128),
    ctr_last_name varchar(128),
    ctr_work_phone varchar(32),
    ctr_work_phone_extension varchar(16),
    ctr_mobile_phone varchar(32),
    ctr_fax varchar(32),
    ctr_email varchar(256),
    ctr_address_street1 varchar(128),
    ctr_address_street2 varchar(128),
    ctr_address_city varchar(128),
    ctr_address_state varchar(128),
    ctr_address_postal_code varchar(128),
    ctr_address_country varchar(128),
    ctr_notes varchar(1024),
    ctr_has_employees varchar(128),
    ctr_verified boolean,
    ctr_validation_status_type varchar(128),
    etl_batch_id text
);

alter table history_octane.contractor owner to deployer;

create index idx_contractor__data_source_deleted_flag
    on history_octane.contractor (data_source_deleted_flag);

create index idx_contractor__data_source_updated_datetime
    on history_octane.contractor (data_source_updated_datetime);

create index idx_contractor__pid
    on history_octane.contractor (ctr_pid);

create index idx_contractor__pid_version
    on history_octane.contractor (ctr_pid, ctr_version);

create index fkt_ctr_has_employees
    on history_octane.contractor (ctr_has_employees);

create index fkt_ctr_validation_status_type
    on history_octane.contractor (ctr_validation_status_type);

create index idx_contractor__etl_batch_id
    on history_octane.contractor (etl_batch_id);

grant select on history_octane.contractor to readonly;

grant insert, select, update on history_octane.contractor to etl_loan;

create table history_octane.contractor_license
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ctrl_pid bigint not null,
    ctrl_version integer,
    ctrl_contractor_pid bigint,
    ctrl_state_type varchar(128),
    ctrl_license_number varchar(128),
    ctrl_from_date date,
    ctrl_through_date date,
    ctrl_note varchar(256),
    etl_batch_id text
);

alter table history_octane.contractor_license owner to deployer;

create index idx_contractor_license__data_source_deleted_flag
    on history_octane.contractor_license (data_source_deleted_flag);

create index idx_contractor_license__data_source_updated_datetime
    on history_octane.contractor_license (data_source_updated_datetime);

create index idx_contractor_license__pid
    on history_octane.contractor_license (ctrl_pid);

create index idx_contractor_license__pid_version
    on history_octane.contractor_license (ctrl_pid, ctrl_version);

create index idx_contractor_license__etl_batch_id
    on history_octane.contractor_license (etl_batch_id);

grant select on history_octane.contractor_license to readonly;

grant insert, select, update on history_octane.contractor_license to etl_loan;

create table history_octane.third_party_community_second_program_eligibility_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.third_party_community_second_program_eligibility_type owner to deployer;

create index idx_c6c9eaa644f24a2b226bcc9f8e6af26d
    on history_octane.third_party_community_second_program_eligibility_type (data_source_deleted_flag);

create index idx_00624c22e5567e075825b769cc1849af
    on history_octane.third_party_community_second_program_eligibility_type (data_source_updated_datetime);

create index idx_30277e36726606e5305b04f806830229
    on history_octane.third_party_community_second_program_eligibility_type (etl_batch_id);

grant select on history_octane.third_party_community_second_program_eligibility_type to readonly;

grant insert, select, update on history_octane.third_party_community_second_program_eligibility_type to etl_loan;

create table history_octane.time_zone_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.time_zone_type owner to deployer;

create index idx_time_zone_type__data_source_deleted_flag
    on history_octane.time_zone_type (data_source_deleted_flag);

create index idx_time_zone_type__data_source_updated_datetime
    on history_octane.time_zone_type (data_source_updated_datetime);

create index idx_time_zone_type__etl_batch_id
    on history_octane.time_zone_type (etl_batch_id);

grant select on history_octane.time_zone_type to readonly;

grant insert, select, update on history_octane.time_zone_type to etl_loan;

create table history_octane.admin_user
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    au_pid bigint not null,
    au_version integer,
    au_create_date date,
    au_email varchar(256),
    au_first_name varchar(32),
    au_last_name varchar(32),
    au_unparsed_name varchar(128),
    au_office_phone varchar(32),
    au_office_phone_extension varchar(16),
    au_through_date date,
    au_time_zone varchar(128),
    au_title varchar(128),
    au_admin_user_status_type varchar(128),
    au_username varchar(32),
    au_admin_user_administrator boolean,
    au_customer_support boolean,
    au_engineering boolean,
    au_management boolean,
    au_force_password_change boolean,
    au_last_password_change_date timestamp,
    au_last_sign_on_datetime timestamp,
    etl_batch_id text
);

alter table history_octane.admin_user owner to deployer;

create index idx_admin_user__data_source_deleted_flag
    on history_octane.admin_user (data_source_deleted_flag);

create index idx_admin_user__data_source_updated_datetime
    on history_octane.admin_user (data_source_updated_datetime);

create index idx_admin_user__pid
    on history_octane.admin_user (au_pid);

create index idx_admin_user__pid_version
    on history_octane.admin_user (au_pid, au_version);

create index idx_admin_user__etl_batch_id
    on history_octane.admin_user (etl_batch_id);

grant select on history_octane.admin_user to readonly;

grant insert, select, update on history_octane.admin_user to etl_loan;

create table history_octane.borrower_user
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    bu_pid bigint not null,
    bu_version integer,
    bu_account_pid bigint,
    bu_create_datetime timestamp,
    bu_email varchar(256),
    bu_last_sign_on_datetime timestamp,
    bu_time_zone varchar(128),
    bu_first_name varchar(32),
    bu_middle_name varchar(32),
    bu_last_name varchar(32),
    bu_name_suffix varchar(32),
    bu_unparsed_name varchar(128),
    bu_borrower_activation_id varchar(128),
    bu_challenge_question_type varchar(128),
    bu_challenge_question_answer varchar(128),
    bu_borrower_user_account_status_type varchar(128),
    bu_public_quote_request_cache_id integer,
    bu_create_sap_on_activation boolean,
    bu_nickname varchar(32),
    bu_plain_text_email boolean,
    bu_preferred_first_name varchar(32),
    etl_batch_id text
);

alter table history_octane.borrower_user owner to deployer;

create index idx_borrower_user__data_source_deleted_flag
    on history_octane.borrower_user (data_source_deleted_flag);

create index idx_borrower_user__data_source_updated_datetime
    on history_octane.borrower_user (data_source_updated_datetime);

create index idx_borrower_user__pid
    on history_octane.borrower_user (bu_pid);

create index idx_borrower_user__pid_version
    on history_octane.borrower_user (bu_pid, bu_version);

create index idx_borrower_user__etl_batch_id
    on history_octane.borrower_user (etl_batch_id);

grant select on history_octane.borrower_user to readonly;

grant insert, select, update on history_octane.borrower_user to etl_loan;

create table history_octane.timeout_time_zone_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.timeout_time_zone_type owner to deployer;

create index idx_timeout_time_zone_type__data_source_deleted_flag
    on history_octane.timeout_time_zone_type (data_source_deleted_flag);

create index idx_timeout_time_zone_type__data_source_updated_datetime
    on history_octane.timeout_time_zone_type (data_source_updated_datetime);

create index idx_timeout_time_zone_type__etl_batch_id
    on history_octane.timeout_time_zone_type (etl_batch_id);

grant select on history_octane.timeout_time_zone_type to readonly;

grant insert, select, update on history_octane.timeout_time_zone_type to etl_loan;

create table history_octane.title_company
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    tc_pid bigint not null,
    tc_version integer,
    tc_account_pid bigint,
    tc_company_name varchar(128),
    tc_admin_lock boolean,
    tc_active boolean,
    tc_preferred_vendor boolean,
    etl_batch_id text
);

alter table history_octane.title_company owner to deployer;

create index idx_title_company__data_source_deleted_flag
    on history_octane.title_company (data_source_deleted_flag);

create index idx_title_company__data_source_updated_datetime
    on history_octane.title_company (data_source_updated_datetime);

create index idx_title_company__pid
    on history_octane.title_company (tc_pid);

create index idx_title_company__pid_version
    on history_octane.title_company (tc_pid, tc_version);

create index idx_title_company__etl_batch_id
    on history_octane.title_company (etl_batch_id);

grant select on history_octane.title_company to readonly;

grant insert, select, update on history_octane.title_company to etl_loan;

create table history_octane.title_company_office
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    tco_pid bigint not null,
    tco_version integer,
    tco_title_company_pid bigint,
    tco_address_street1 varchar(128),
    tco_address_street2 varchar(128),
    tco_address_city varchar(128),
    tco_address_state varchar(128),
    tco_address_postal_code varchar(128),
    tco_address_country varchar(128),
    tco_phone varchar(32),
    tco_fax varchar(32),
    tco_email varchar(256),
    tco_active boolean,
    etl_batch_id text
);

alter table history_octane.title_company_office owner to deployer;

create index idx_title_company_office__data_source_deleted_flag
    on history_octane.title_company_office (data_source_deleted_flag);

create index idx_title_company_office__data_source_updated_datetime
    on history_octane.title_company_office (data_source_updated_datetime);

create index idx_title_company_office__pid
    on history_octane.title_company_office (tco_pid);

create index idx_title_company_office__pid_version
    on history_octane.title_company_office (tco_pid, tco_version);

create index idx_title_company_office__etl_batch_id
    on history_octane.title_company_office (etl_batch_id);

grant select on history_octane.title_company_office to readonly;

grant insert, select, update on history_octane.title_company_office to etl_loan;

create table history_octane.preferred_settlement
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    prs_pid bigint not null,
    prs_version integer,
    prs_account_pid bigint,
    prs_state varchar(16),
    prs_from_date date,
    prs_title_company_pid bigint,
    prs_title_company_office_pid bigint,
    prs_settlement_agent_pid bigint,
    prs_settlement_agent_office_pid bigint,
    prs_settlement_agent_wire_pid bigint,
    etl_batch_id text
);

alter table history_octane.preferred_settlement owner to deployer;

create index idx_preferred_settlement__data_source_deleted_flag
    on history_octane.preferred_settlement (data_source_deleted_flag);

create index idx_preferred_settlement__data_source_updated_datetime
    on history_octane.preferred_settlement (data_source_updated_datetime);

create index idx_preferred_settlement__pid
    on history_octane.preferred_settlement (prs_pid);

create index idx_preferred_settlement__pid_version
    on history_octane.preferred_settlement (prs_pid, prs_version);

create index idx_preferred_settlement__etl_batch_id
    on history_octane.preferred_settlement (etl_batch_id);

grant select on history_octane.preferred_settlement to readonly;

grant insert, select, update on history_octane.preferred_settlement to etl_loan;

create table history_octane.title_manner_held_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.title_manner_held_type owner to deployer;

create index idx_title_manner_held_type__data_source_deleted_flag
    on history_octane.title_manner_held_type (data_source_deleted_flag);

create index idx_title_manner_held_type__data_source_updated_datetime
    on history_octane.title_manner_held_type (data_source_updated_datetime);

create index idx_title_manner_held_type__etl_batch_id
    on history_octane.title_manner_held_type (etl_batch_id);

grant select on history_octane.title_manner_held_type to readonly;

grant insert, select, update on history_octane.title_manner_held_type to etl_loan;

create table history_octane.total_expert_account_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.total_expert_account_type owner to deployer;

create index idx_total_expert_account_type__data_source_deleted_flag
    on history_octane.total_expert_account_type (data_source_deleted_flag);

create index idx_total_expert_account_type__data_source_updated_datetime
    on history_octane.total_expert_account_type (data_source_updated_datetime);

create index idx_total_expert_account_type__etl_batch_id
    on history_octane.total_expert_account_type (etl_batch_id);

grant select on history_octane.total_expert_account_type to readonly;

grant insert, select, update on history_octane.total_expert_account_type to etl_loan;

create table history_octane.trade_audit_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.trade_audit_type owner to deployer;

create index idx_trade_audit_type__data_source_deleted_flag
    on history_octane.trade_audit_type (data_source_deleted_flag);

create index idx_trade_audit_type__data_source_updated_datetime
    on history_octane.trade_audit_type (data_source_updated_datetime);

create index idx_trade_audit_type__etl_batch_id
    on history_octane.trade_audit_type (etl_batch_id);

grant select on history_octane.trade_audit_type to readonly;

grant insert, select, update on history_octane.trade_audit_type to etl_loan;

create table history_octane.trade_fee_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    tft_pid bigint not null,
    tft_version integer,
    tft_account_pid bigint,
    tft_name varchar(128),
    etl_batch_id text
);

alter table history_octane.trade_fee_type owner to deployer;

create index idx_trade_fee_type__data_source_deleted_flag
    on history_octane.trade_fee_type (data_source_deleted_flag);

create index idx_trade_fee_type__data_source_updated_datetime
    on history_octane.trade_fee_type (data_source_updated_datetime);

create index idx_trade_fee_type__pid
    on history_octane.trade_fee_type (tft_pid);

create index idx_trade_fee_type__pid_version
    on history_octane.trade_fee_type (tft_pid, tft_version);

create index idx_trade_fee_type__etl_batch_id
    on history_octane.trade_fee_type (etl_batch_id);

grant select on history_octane.trade_fee_type to readonly;

grant insert, select, update on history_octane.trade_fee_type to etl_loan;

create table history_octane.trade_pricing_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.trade_pricing_type owner to deployer;

create index idx_trade_pricing_type__data_source_deleted_flag
    on history_octane.trade_pricing_type (data_source_deleted_flag);

create index idx_trade_pricing_type__data_source_updated_datetime
    on history_octane.trade_pricing_type (data_source_updated_datetime);

create index idx_trade_pricing_type__etl_batch_id
    on history_octane.trade_pricing_type (etl_batch_id);

grant select on history_octane.trade_pricing_type to readonly;

grant insert, select, update on history_octane.trade_pricing_type to etl_loan;

create table history_octane.trade_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.trade_status_type owner to deployer;

create index idx_trade_status_type__data_source_deleted_flag
    on history_octane.trade_status_type (data_source_deleted_flag);

create index idx_trade_status_type__data_source_updated_datetime
    on history_octane.trade_status_type (data_source_updated_datetime);

create index idx_trade_status_type__etl_batch_id
    on history_octane.trade_status_type (etl_batch_id);

grant select on history_octane.trade_status_type to readonly;

grant insert, select, update on history_octane.trade_status_type to etl_loan;

create table history_octane.trustee
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    tru_pid bigint not null,
    tru_version integer,
    tru_account_pid bigint,
    tru_name varchar(128),
    tru_address_street1 varchar(128),
    tru_address_street2 varchar(128),
    tru_address_city varchar(128),
    tru_address_state varchar(128),
    tru_address_postal_code varchar(128),
    tru_address_country varchar(128),
    tru_mers_org_id varchar(7),
    tru_from_date date,
    tru_through_date date,
    tru_phone_number varchar(32),
    etl_batch_id text
);

alter table history_octane.trustee owner to deployer;

create index idx_trustee__data_source_deleted_flag
    on history_octane.trustee (data_source_deleted_flag);

create index idx_trustee__data_source_updated_datetime
    on history_octane.trustee (data_source_updated_datetime);

create index idx_trustee__pid
    on history_octane.trustee (tru_pid);

create index idx_trustee__pid_version
    on history_octane.trustee (tru_pid, tru_version);

create index idx_trustee__etl_batch_id
    on history_octane.trustee (etl_batch_id);

grant select on history_octane.trustee to readonly;

grant insert, select, update on history_octane.trustee to etl_loan;

create table history_octane.underwrite_disposition_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.underwrite_disposition_type owner to deployer;

create index idx_underwrite_disposition_type__data_source_deleted_flag
    on history_octane.underwrite_disposition_type (data_source_deleted_flag);

create index idx_underwrite_disposition_type__data_source_updated_datetime
    on history_octane.underwrite_disposition_type (data_source_updated_datetime);

create index idx_underwrite_disposition_type__etl_batch_id
    on history_octane.underwrite_disposition_type (etl_batch_id);

grant select on history_octane.underwrite_disposition_type to readonly;

grant insert, select, update on history_octane.underwrite_disposition_type to etl_loan;

create table history_octane.underwrite_method_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.underwrite_method_type owner to deployer;

create index idx_underwrite_method_type__data_source_deleted_flag
    on history_octane.underwrite_method_type (data_source_deleted_flag);

create index idx_underwrite_method_type__data_source_updated_datetime
    on history_octane.underwrite_method_type (data_source_updated_datetime);

create index idx_underwrite_method_type__etl_batch_id
    on history_octane.underwrite_method_type (etl_batch_id);

grant select on history_octane.underwrite_method_type to readonly;

grant insert, select, update on history_octane.underwrite_method_type to etl_loan;

create table history_octane.underwrite_risk_assessment_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.underwrite_risk_assessment_type owner to deployer;

create index idx_underwrite_risk_assessment_type__data_source_deleted_flag
    on history_octane.underwrite_risk_assessment_type (data_source_deleted_flag);

create index idx_19b178f053393ae90076603fec1019d7
    on history_octane.underwrite_risk_assessment_type (data_source_updated_datetime);

create index idx_underwrite_risk_assessment_type__etl_batch_id
    on history_octane.underwrite_risk_assessment_type (etl_batch_id);

grant select on history_octane.underwrite_risk_assessment_type to readonly;

grant insert, select, update on history_octane.underwrite_risk_assessment_type to etl_loan;

create table history_octane.unique_dwelling_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.unique_dwelling_type owner to deployer;

create index idx_unique_dwelling_type__data_source_deleted_flag
    on history_octane.unique_dwelling_type (data_source_deleted_flag);

create index idx_unique_dwelling_type__data_source_updated_datetime
    on history_octane.unique_dwelling_type (data_source_updated_datetime);

create index idx_unique_dwelling_type__etl_batch_id
    on history_octane.unique_dwelling_type (etl_batch_id);

grant select on history_octane.unique_dwelling_type to readonly;

grant insert, select, update on history_octane.unique_dwelling_type to etl_loan;

create table history_octane.usda_rd_single_family_housing_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.usda_rd_single_family_housing_type owner to deployer;

create index idx_1560c2243b0e12f95735fbb63740d2f8
    on history_octane.usda_rd_single_family_housing_type (data_source_deleted_flag);

create index idx_ca2c375ae50e62c5e1174f1ee5f9568e
    on history_octane.usda_rd_single_family_housing_type (data_source_updated_datetime);

create index idx_usda_rd_single_family_housing_type__etl_batch_id
    on history_octane.usda_rd_single_family_housing_type (etl_batch_id);

grant select on history_octane.usda_rd_single_family_housing_type to readonly;

grant insert, select, update on history_octane.usda_rd_single_family_housing_type to etl_loan;

create table history_octane.uuts_loan_originator_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.uuts_loan_originator_type owner to deployer;

create index idx_uuts_loan_originator_type__data_source_deleted_flag
    on history_octane.uuts_loan_originator_type (data_source_deleted_flag);

create index idx_uuts_loan_originator_type__data_source_updated_datetime
    on history_octane.uuts_loan_originator_type (data_source_updated_datetime);

create index idx_uuts_loan_originator_type__etl_batch_id
    on history_octane.uuts_loan_originator_type (etl_batch_id);

grant select on history_octane.uuts_loan_originator_type to readonly;

grant insert, select, update on history_octane.uuts_loan_originator_type to etl_loan;

create table history_octane.va_borrower_certification_occupancy_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.va_borrower_certification_occupancy_type owner to deployer;

create index idx_286601f67cf74707c9212e168372f68a
    on history_octane.va_borrower_certification_occupancy_type (data_source_deleted_flag);

create index idx_5338409d8afdaa2c27664c5c867f210a
    on history_octane.va_borrower_certification_occupancy_type (data_source_updated_datetime);

create index idx_va_borrower_certification_occupancy_type__etl_batch_id
    on history_octane.va_borrower_certification_occupancy_type (etl_batch_id);

grant select on history_octane.va_borrower_certification_occupancy_type to readonly;

grant insert, select, update on history_octane.va_borrower_certification_occupancy_type to etl_loan;

create table history_octane.va_entitlement_code_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.va_entitlement_code_type owner to deployer;

create index idx_va_entitlement_code_type__data_source_deleted_flag
    on history_octane.va_entitlement_code_type (data_source_deleted_flag);

create index idx_va_entitlement_code_type__data_source_updated_datetime
    on history_octane.va_entitlement_code_type (data_source_updated_datetime);

create index idx_va_entitlement_code_type__etl_batch_id
    on history_octane.va_entitlement_code_type (etl_batch_id);

grant select on history_octane.va_entitlement_code_type to readonly;

grant insert, select, update on history_octane.va_entitlement_code_type to etl_loan;

create table history_octane.va_entitlement_restoration_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.va_entitlement_restoration_type owner to deployer;

create index idx_va_entitlement_restoration_type__data_source_deleted_flag
    on history_octane.va_entitlement_restoration_type (data_source_deleted_flag);

create index idx_d23cf13e8e4ab0b49776808637f30b71
    on history_octane.va_entitlement_restoration_type (data_source_updated_datetime);

create index idx_va_entitlement_restoration_type__etl_batch_id
    on history_octane.va_entitlement_restoration_type (etl_batch_id);

grant select on history_octane.va_entitlement_restoration_type to readonly;

grant insert, select, update on history_octane.va_entitlement_restoration_type to etl_loan;

create table history_octane.va_notice_of_value_source_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.va_notice_of_value_source_type owner to deployer;

create index idx_va_notice_of_value_source_type__data_source_deleted_flag
    on history_octane.va_notice_of_value_source_type (data_source_deleted_flag);

create index idx_2219a650a3a2503adce8b8f9bf815ee0
    on history_octane.va_notice_of_value_source_type (data_source_updated_datetime);

create index idx_va_notice_of_value_source_type__etl_batch_id
    on history_octane.va_notice_of_value_source_type (etl_batch_id);

grant select on history_octane.va_notice_of_value_source_type to readonly;

grant insert, select, update on history_octane.va_notice_of_value_source_type to etl_loan;

create table history_octane.va_past_credit_record_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.va_past_credit_record_type owner to deployer;

create index idx_va_past_credit_record_type__data_source_deleted_flag
    on history_octane.va_past_credit_record_type (data_source_deleted_flag);

create index idx_va_past_credit_record_type__data_source_updated_datetime
    on history_octane.va_past_credit_record_type (data_source_updated_datetime);

create index idx_va_past_credit_record_type__etl_batch_id
    on history_octane.va_past_credit_record_type (etl_batch_id);

grant select on history_octane.va_past_credit_record_type to readonly;

grant insert, select, update on history_octane.va_past_credit_record_type to etl_loan;

create table history_octane.va_regional_loan_center_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.va_regional_loan_center_type owner to deployer;

create index idx_va_regional_loan_center_type__data_source_deleted_flag
    on history_octane.va_regional_loan_center_type (data_source_deleted_flag);

create index idx_va_regional_loan_center_type__data_source_updated_datetime
    on history_octane.va_regional_loan_center_type (data_source_updated_datetime);

create index idx_va_regional_loan_center_type__etl_batch_id
    on history_octane.va_regional_loan_center_type (etl_batch_id);

grant select on history_octane.va_regional_loan_center_type to readonly;

grant insert, select, update on history_octane.va_regional_loan_center_type to etl_loan;

create table history_octane.va_relative_relationship_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.va_relative_relationship_type owner to deployer;

create index idx_va_relative_relationship_type__data_source_deleted_flag
    on history_octane.va_relative_relationship_type (data_source_deleted_flag);

create index idx_va_relative_relationship_type__data_source_updated_datetime
    on history_octane.va_relative_relationship_type (data_source_updated_datetime);

create index idx_va_relative_relationship_type__etl_batch_id
    on history_octane.va_relative_relationship_type (etl_batch_id);

grant select on history_octane.va_relative_relationship_type to readonly;

grant insert, select, update on history_octane.va_relative_relationship_type to etl_loan;

create table history_octane.vendor_credential_source_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.vendor_credential_source_type owner to deployer;

create index idx_vendor_credential_source_type__data_source_deleted_flag
    on history_octane.vendor_credential_source_type (data_source_deleted_flag);

create index idx_vendor_credential_source_type__data_source_updated_datetime
    on history_octane.vendor_credential_source_type (data_source_updated_datetime);

create index idx_vendor_credential_source_type__etl_batch_id
    on history_octane.vendor_credential_source_type (etl_batch_id);

grant select on history_octane.vendor_credential_source_type to readonly;

grant insert, select, update on history_octane.vendor_credential_source_type to etl_loan;

create table history_octane.vendor_document_event_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.vendor_document_event_type owner to deployer;

create index idx_vendor_document_event_type__data_source_deleted_flag
    on history_octane.vendor_document_event_type (data_source_deleted_flag);

create index idx_vendor_document_event_type__data_source_updated_datetime
    on history_octane.vendor_document_event_type (data_source_updated_datetime);

create index idx_vendor_document_event_type__etl_batch_id
    on history_octane.vendor_document_event_type (etl_batch_id);

grant select on history_octane.vendor_document_event_type to readonly;

grant insert, select, update on history_octane.vendor_document_event_type to etl_loan;

create table history_octane.vendor_import_document_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.vendor_import_document_type owner to deployer;

create index idx_vendor_import_document_type__data_source_deleted_flag
    on history_octane.vendor_import_document_type (data_source_deleted_flag);

create index idx_vendor_import_document_type__data_source_updated_datetime
    on history_octane.vendor_import_document_type (data_source_updated_datetime);

create index idx_vendor_import_document_type__etl_batch_id
    on history_octane.vendor_import_document_type (etl_batch_id);

grant select on history_octane.vendor_import_document_type to readonly;

grant insert, select, update on history_octane.vendor_import_document_type to etl_loan;

create table history_octane.veteran_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.veteran_status_type owner to deployer;

create index idx_veteran_status_type__data_source_deleted_flag
    on history_octane.veteran_status_type (data_source_deleted_flag);

create index idx_veteran_status_type__data_source_updated_datetime
    on history_octane.veteran_status_type (data_source_updated_datetime);

create index idx_veteran_status_type__etl_batch_id
    on history_octane.veteran_status_type (etl_batch_id);

grant select on history_octane.veteran_status_type to readonly;

grant insert, select, update on history_octane.veteran_status_type to etl_loan;

create table history_octane.voe_third_party_verifier_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.voe_third_party_verifier_type owner to deployer;

create index idx_voe_third_party_verifier_type__data_source_deleted_flag
    on history_octane.voe_third_party_verifier_type (data_source_deleted_flag);

create index idx_voe_third_party_verifier_type__data_source_updated_datetime
    on history_octane.voe_third_party_verifier_type (data_source_updated_datetime);

create index idx_voe_third_party_verifier_type__etl_batch_id
    on history_octane.voe_third_party_verifier_type (etl_batch_id);

grant select on history_octane.voe_third_party_verifier_type to readonly;

grant insert, select, update on history_octane.voe_third_party_verifier_type to etl_loan;

create table history_octane.voe_verbal_verify_method_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.voe_verbal_verify_method_type owner to deployer;

create index idx_voe_verbal_verify_method_type__data_source_deleted_flag
    on history_octane.voe_verbal_verify_method_type (data_source_deleted_flag);

create index idx_voe_verbal_verify_method_type__data_source_updated_datetime
    on history_octane.voe_verbal_verify_method_type (data_source_updated_datetime);

create index idx_voe_verbal_verify_method_type__etl_batch_id
    on history_octane.voe_verbal_verify_method_type (etl_batch_id);

grant select on history_octane.voe_verbal_verify_method_type to readonly;

grant insert, select, update on history_octane.voe_verbal_verify_method_type to etl_loan;

create table history_octane.voe_verify_method_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.voe_verify_method_type owner to deployer;

create index idx_voe_verify_method_type__data_source_deleted_flag
    on history_octane.voe_verify_method_type (data_source_deleted_flag);

create index idx_voe_verify_method_type__data_source_updated_datetime
    on history_octane.voe_verify_method_type (data_source_updated_datetime);

create index idx_voe_verify_method_type__etl_batch_id
    on history_octane.voe_verify_method_type (etl_batch_id);

grant select on history_octane.voe_verify_method_type to readonly;

grant insert, select, update on history_octane.voe_verify_method_type to etl_loan;

create table history_octane.water_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.water_type owner to deployer;

create index idx_water_type__data_source_deleted_flag
    on history_octane.water_type (data_source_deleted_flag);

create index idx_water_type__data_source_updated_datetime
    on history_octane.water_type (data_source_updated_datetime);

create index idx_water_type__etl_batch_id
    on history_octane.water_type (etl_batch_id);

grant select on history_octane.water_type to readonly;

grant insert, select, update on history_octane.water_type to etl_loan;

create table history_octane.wf_deal_process_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.wf_deal_process_status_type owner to deployer;

create index idx_wf_deal_process_status_type__data_source_deleted_flag
    on history_octane.wf_deal_process_status_type (data_source_deleted_flag);

create index idx_wf_deal_process_status_type__data_source_updated_datetime
    on history_octane.wf_deal_process_status_type (data_source_updated_datetime);

create index idx_wf_deal_process_status_type__etl_batch_id
    on history_octane.wf_deal_process_status_type (etl_batch_id);

grant select on history_octane.wf_deal_process_status_type to readonly;

grant insert, select, update on history_octane.wf_deal_process_status_type to etl_loan;

create table history_octane.wf_deal_step_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.wf_deal_step_status_type owner to deployer;

create index idx_wf_deal_step_status_type__data_source_deleted_flag
    on history_octane.wf_deal_step_status_type (data_source_deleted_flag);

create index idx_wf_deal_step_status_type__data_source_updated_datetime
    on history_octane.wf_deal_step_status_type (data_source_updated_datetime);

create index idx_wf_deal_step_status_type__etl_batch_id
    on history_octane.wf_deal_step_status_type (etl_batch_id);

grant select on history_octane.wf_deal_step_status_type to readonly;

grant insert, select, update on history_octane.wf_deal_step_status_type to etl_loan;

create table history_octane.wf_outcome_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.wf_outcome_type owner to deployer;

create index idx_wf_outcome_type__data_source_deleted_flag
    on history_octane.wf_outcome_type (data_source_deleted_flag);

create index idx_wf_outcome_type__data_source_updated_datetime
    on history_octane.wf_outcome_type (data_source_updated_datetime);

create index idx_wf_outcome_type__etl_batch_id
    on history_octane.wf_outcome_type (etl_batch_id);

grant select on history_octane.wf_outcome_type to readonly;

grant insert, select, update on history_octane.wf_outcome_type to etl_loan;

create table history_octane.wf_phase
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    wph_pid bigint not null,
    wph_version integer,
    wph_account_pid bigint,
    wph_phase_name varchar(128),
    wph_phase_number integer,
    etl_batch_id text
);

alter table history_octane.wf_phase owner to deployer;

create index idx_wf_phase__data_source_deleted_flag
    on history_octane.wf_phase (data_source_deleted_flag);

create index idx_wf_phase__data_source_updated_datetime
    on history_octane.wf_phase (data_source_updated_datetime);

create index idx_wf_phase__pid
    on history_octane.wf_phase (wph_pid);

create index idx_wf_phase__pid_version
    on history_octane.wf_phase (wph_pid, wph_version);

create index idx_wf_phase__etl_batch_id
    on history_octane.wf_phase (etl_batch_id);

grant select on history_octane.wf_phase to readonly;

grant insert, select, update on history_octane.wf_phase to etl_loan;

create table history_octane.wf_process_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.wf_process_status_type owner to deployer;

create index idx_wf_process_status_type__data_source_deleted_flag
    on history_octane.wf_process_status_type (data_source_deleted_flag);

create index idx_wf_process_status_type__data_source_updated_datetime
    on history_octane.wf_process_status_type (data_source_updated_datetime);

create index idx_wf_process_status_type__etl_batch_id
    on history_octane.wf_process_status_type (etl_batch_id);

grant select on history_octane.wf_process_status_type to readonly;

grant insert, select, update on history_octane.wf_process_status_type to etl_loan;

create table history_octane.wf_process_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.wf_process_type owner to deployer;

create index idx_wf_process_type__data_source_deleted_flag
    on history_octane.wf_process_type (data_source_deleted_flag);

create index idx_wf_process_type__data_source_updated_datetime
    on history_octane.wf_process_type (data_source_updated_datetime);

create index idx_wf_process_type__etl_batch_id
    on history_octane.wf_process_type (etl_batch_id);

grant select on history_octane.wf_process_type to readonly;

grant insert, select, update on history_octane.wf_process_type to etl_loan;

create table history_octane.wf_process
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    wpr_pid bigint not null,
    wpr_version integer,
    wpr_account_pid bigint,
    wpr_name varchar(128),
    wpr_wf_process_type varchar(128),
    wpr_criteria_pid bigint,
    wpr_wf_process_status_type varchar(128),
    etl_batch_id text
);

alter table history_octane.wf_process owner to deployer;

create index idx_wf_process__data_source_deleted_flag
    on history_octane.wf_process (data_source_deleted_flag);

create index idx_wf_process__data_source_updated_datetime
    on history_octane.wf_process (data_source_updated_datetime);

create index idx_wf_process__pid
    on history_octane.wf_process (wpr_pid);

create index idx_wf_process__pid_version
    on history_octane.wf_process (wpr_pid, wpr_version);

create index idx_wf_process__etl_batch_id
    on history_octane.wf_process (etl_batch_id);

grant select on history_octane.wf_process to readonly;

grant insert, select, update on history_octane.wf_process to etl_loan;

create table history_octane.wf_step_function_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.wf_step_function_type owner to deployer;

create index idx_wf_step_function_type__data_source_deleted_flag
    on history_octane.wf_step_function_type (data_source_deleted_flag);

create index idx_wf_step_function_type__data_source_updated_datetime
    on history_octane.wf_step_function_type (data_source_updated_datetime);

create index idx_wf_step_function_type__etl_batch_id
    on history_octane.wf_step_function_type (etl_batch_id);

grant select on history_octane.wf_step_function_type to readonly;

grant insert, select, update on history_octane.wf_step_function_type to etl_loan;

create table history_octane.wf_step_performer_assign_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.wf_step_performer_assign_type owner to deployer;

create index idx_wf_step_performer_assign_type__data_source_deleted_flag
    on history_octane.wf_step_performer_assign_type (data_source_deleted_flag);

create index idx_wf_step_performer_assign_type__data_source_updated_datetime
    on history_octane.wf_step_performer_assign_type (data_source_updated_datetime);

create index idx_wf_step_performer_assign_type__etl_batch_id
    on history_octane.wf_step_performer_assign_type (etl_batch_id);

grant select on history_octane.wf_step_performer_assign_type to readonly;

grant insert, select, update on history_octane.wf_step_performer_assign_type to etl_loan;

create table history_octane.wf_step_reassign_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.wf_step_reassign_type owner to deployer;

create index idx_wf_step_reassign_type__data_source_deleted_flag
    on history_octane.wf_step_reassign_type (data_source_deleted_flag);

create index idx_wf_step_reassign_type__data_source_updated_datetime
    on history_octane.wf_step_reassign_type (data_source_updated_datetime);

create index idx_wf_step_reassign_type__etl_batch_id
    on history_octane.wf_step_reassign_type (etl_batch_id);

grant select on history_octane.wf_step_reassign_type to readonly;

grant insert, select, update on history_octane.wf_step_reassign_type to etl_loan;

create table history_octane.wf_step_timeout_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.wf_step_timeout_type owner to deployer;

create index idx_wf_step_timeout_type__data_source_deleted_flag
    on history_octane.wf_step_timeout_type (data_source_deleted_flag);

create index idx_wf_step_timeout_type__data_source_updated_datetime
    on history_octane.wf_step_timeout_type (data_source_updated_datetime);

create index idx_wf_step_timeout_type__etl_batch_id
    on history_octane.wf_step_timeout_type (etl_batch_id);

grant select on history_octane.wf_step_timeout_type to readonly;

grant insert, select, update on history_octane.wf_step_timeout_type to etl_loan;

create table history_octane.wf_step_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.wf_step_type owner to deployer;

create index idx_wf_step_type__data_source_deleted_flag
    on history_octane.wf_step_type (data_source_deleted_flag);

create index idx_wf_step_type__data_source_updated_datetime
    on history_octane.wf_step_type (data_source_updated_datetime);

create index idx_wf_step_type__etl_batch_id
    on history_octane.wf_step_type (etl_batch_id);

grant select on history_octane.wf_step_type to readonly;

grant insert, select, update on history_octane.wf_step_type to etl_loan;

create table history_octane.wf_polling_time_slice
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    wts_pid bigint not null,
    wts_version integer,
    wts_time_slice timestamp,
    wts_when_fired timestamp,
    wts_when_complete timestamp,
    etl_batch_id text
);

alter table history_octane.wf_polling_time_slice owner to deployer;

create index idx_wf_wait_until_time_slice__data_source_deleted_flag
    on history_octane.wf_polling_time_slice (data_source_deleted_flag);

create index idx_wf_wait_until_time_slice__data_source_updated_datetime
    on history_octane.wf_polling_time_slice (data_source_updated_datetime);

create index idx_wf_wait_until_time_slice__pid
    on history_octane.wf_polling_time_slice (wts_pid);

create index idx_wf_wait_until_time_slice__pid_version
    on history_octane.wf_polling_time_slice (wts_pid, wts_version);

create index idx_wf_polling_time_slice__etl_batch_id
    on history_octane.wf_polling_time_slice (etl_batch_id);

grant select on history_octane.wf_polling_time_slice to readonly;

grant insert, select, update on history_octane.wf_polling_time_slice to etl_loan;

create table history_octane.yes_no_na_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.yes_no_na_type owner to deployer;

create index idx_yes_no_na_type__data_source_deleted_flag
    on history_octane.yes_no_na_type (data_source_deleted_flag);

create index idx_yes_no_na_type__data_source_updated_datetime
    on history_octane.yes_no_na_type (data_source_updated_datetime);

create index idx_yes_no_na_type__etl_batch_id
    on history_octane.yes_no_na_type (etl_batch_id);

grant select on history_octane.yes_no_na_type to readonly;

grant insert, select, update on history_octane.yes_no_na_type to etl_loan;

create table history_octane.yes_no_na_unknown_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.yes_no_na_unknown_type owner to deployer;

create index idx_yes_no_na_unknown_type__data_source_deleted_flag
    on history_octane.yes_no_na_unknown_type (data_source_deleted_flag);

create index idx_yes_no_na_unknown_type__data_source_updated_datetime
    on history_octane.yes_no_na_unknown_type (data_source_updated_datetime);

create index idx_yes_no_na_unknown_type__etl_batch_id
    on history_octane.yes_no_na_unknown_type (etl_batch_id);

grant select on history_octane.yes_no_na_unknown_type to readonly;

grant insert, select, update on history_octane.yes_no_na_unknown_type to etl_loan;

create table history_octane.yes_no_unknown_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.yes_no_unknown_type owner to deployer;

create index idx_yes_no_unknown_type__data_source_deleted_flag
    on history_octane.yes_no_unknown_type (data_source_deleted_flag);

create index idx_yes_no_unknown_type__data_source_updated_datetime
    on history_octane.yes_no_unknown_type (data_source_updated_datetime);

create index idx_yes_no_unknown_type__etl_batch_id
    on history_octane.yes_no_unknown_type (etl_batch_id);

grant select on history_octane.yes_no_unknown_type to readonly;

grant insert, select, update on history_octane.yes_no_unknown_type to etl_loan;

create table history_octane.application
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    apl_pid bigint not null,
    apl_version integer,
    apl_application_name varchar(128),
    apl_primary_application boolean,
    apl_urla boolean,
    apl_proposal_pid bigint,
    apl_fha_borrower_certification_own_other_property varchar(128),
    apl_fha_borrower_certification_property_to_be_sold varchar(128),
    apl_fha_borrower_certification_sales_price_amount numeric(15),
    apl_fha_borrower_certification_mortgage_amount numeric(15),
    apl_address_street1 varchar(128),
    apl_address_street2 varchar(128),
    apl_address_city varchar(128),
    apl_address_state varchar(128),
    apl_address_postal_code varchar(128),
    apl_address_country varchar(128),
    apl_fha_borrower_certification_rental varchar(128),
    apl_fha_borrower_certification_rental_explain varchar(256),
    apl_fha_borrower_certification_more_than_four_dwellings varchar(128),
    apl_va_borrower_certification_occupancy_type varchar(128),
    apl_fha_va_bor_cert_sales_price_exceeds_type varchar(128),
    etl_batch_id text
);

alter table history_octane.application owner to deployer;

create index idx_application__data_source_deleted_flag
    on history_octane.application (data_source_deleted_flag);

create index idx_application__data_source_updated_datetime
    on history_octane.application (data_source_updated_datetime);

create index idx_application__pid
    on history_octane.application (apl_pid);

create index idx_application__pid_version
    on history_octane.application (apl_pid, apl_version);

create index idx_application__etl_batch_id
    on history_octane.application (etl_batch_id);

grant select on history_octane.application to readonly;

grant insert, select, update on history_octane.application to etl_loan;

create table history_octane.asset
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    as_pid bigint not null,
    as_version integer,
    as_aggregate_description varchar(256),
    as_application_pid bigint,
    as_asset_type varchar(128),
    as_automobile_make_description varchar(32),
    as_automobile_model_year integer,
    as_cash_or_market_value_amount numeric(15,2),
    as_description varchar(128),
    as_donor_city varchar(128),
    as_donor_country varchar(128),
    as_donor_postal_code varchar(128),
    as_donor_state varchar(128),
    as_donor_street1 varchar(128),
    as_donor_street2 varchar(128),
    as_gift_funds_donor_phone varchar(32),
    as_gift_funds_donor_relationship varchar(128),
    as_gift_funds_donor_unparsed_name varchar(128),
    as_gift_funds_other_type_description varchar(32),
    as_gift_funds_depository_asset_pid bigint,
    as_gift_amount numeric(15,2),
    as_gift_funds_source_account_type varchar(128),
    as_gift_funds_source_holder_name varchar(128),
    as_gift_funds_type varchar(128),
    as_holder_name varchar(128),
    as_holder_city varchar(128),
    as_holder_country varchar(128),
    as_holder_postal_code varchar(128),
    as_holder_state varchar(128),
    as_holder_street1 varchar(128),
    as_holder_street2 varchar(128),
    as_life_insurance_face_value_amount numeric(15,2),
    as_liquid_amount numeric(15,2),
    as_liquid_percent numeric(11,9),
    as_source_verification_required varchar(128),
    as_stock_bond_mutual_fund_share_count integer,
    as_earnest_money_deposit_source_pid bigint,
    as_available_amount numeric(15,2),
    as_down_payment_amount numeric(15),
    as_closing_costs_amount numeric(15,2),
    as_gift_funds_account_holder_type varchar(128),
    as_penalty_amount numeric(15,2),
    as_earnest_money_deposit_is_gift varchar(128),
    as_deposit_date date,
    as_gift_funds_ein varchar(16),
    etl_batch_id text,
    as_snapshotted_pid bigint
);

alter table history_octane.asset owner to deployer;

create index idx_asset__data_source_deleted_flag
    on history_octane.asset (data_source_deleted_flag);

create index idx_asset__data_source_updated_datetime
    on history_octane.asset (data_source_updated_datetime);

create index idx_asset__pid
    on history_octane.asset (as_pid);

create index idx_asset__pid_version
    on history_octane.asset (as_pid, as_version);

create index fkt_as_earnest_money_deposit_is_gift
    on history_octane.asset (as_earnest_money_deposit_is_gift);

create index idx_asset__etl_batch_id
    on history_octane.asset (etl_batch_id);

grant select on history_octane.asset to readonly;

grant insert, select, update on history_octane.asset to etl_loan;

create table history_octane.asset_large_deposit
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ald_pid bigint not null,
    ald_version integer,
    ald_asset_pid bigint,
    ald_deposit_amount numeric(15,2),
    ald_deposit_date date,
    etl_batch_id text,
    ald_snapshotted_pid bigint
);

alter table history_octane.asset_large_deposit owner to deployer;

create index idx_asset_large_deposit__data_source_deleted_flag
    on history_octane.asset_large_deposit (data_source_deleted_flag);

create index idx_asset_large_deposit__data_source_updated_datetime
    on history_octane.asset_large_deposit (data_source_updated_datetime);

create index idx_asset_large_deposit__pid
    on history_octane.asset_large_deposit (ald_pid);

create index idx_asset_large_deposit__pid_version
    on history_octane.asset_large_deposit (ald_pid, ald_version);

create index idx_asset_large_deposit__etl_batch_id
    on history_octane.asset_large_deposit (etl_batch_id);

grant select on history_octane.asset_large_deposit to readonly;

grant insert, select, update on history_octane.asset_large_deposit to etl_loan;

create table history_octane.creditor
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    crd_pid bigint not null,
    crd_version integer,
    crd_account_pid bigint,
    crd_payoff_request_delivery_type varchar(128),
    crd_name varchar(128),
    crd_payoff_phone_1 varchar(32),
    crd_payoff_phone_1_extension varchar(16),
    crd_payoff_phone_2 varchar(32),
    crd_payoff_phone_2_extension varchar(16),
    crd_payoff_fax varchar(32),
    crd_payoff_email varchar(256),
    crd_payoff_auto_teller varchar(128),
    crd_last_updated date,
    crd_last_updated_by varchar(128),
    crd_payoff_notes varchar(1024),
    crd_address_street1 varchar(128),
    crd_address_street2 varchar(128),
    crd_address_city varchar(128),
    crd_address_state varchar(128),
    crd_address_postal_code varchar(128),
    crd_address_country varchar(128),
    crd_key_creditor_type varchar(128),
    etl_batch_id text
);

alter table history_octane.creditor owner to deployer;

create index idx_creditor__data_source_deleted_flag
    on history_octane.creditor (data_source_deleted_flag);

create index idx_creditor__data_source_updated_datetime
    on history_octane.creditor (data_source_updated_datetime);

create index idx_creditor__pid
    on history_octane.creditor (crd_pid);

create index idx_creditor__pid_version
    on history_octane.creditor (crd_pid, crd_version);

create index idx_creditor__etl_batch_id
    on history_octane.creditor (etl_batch_id);

grant select on history_octane.creditor to readonly;

grant insert, select, update on history_octane.creditor to etl_loan;

create table history_octane.creditor_lookup_name
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    cln_pid bigint not null,
    cln_version integer,
    cln_account_pid bigint,
    cln_creditor_pid bigint,
    cln_name varchar(128),
    etl_batch_id text
);

alter table history_octane.creditor_lookup_name owner to deployer;

create index idx_creditor_lookup_name__data_source_deleted_flag
    on history_octane.creditor_lookup_name (data_source_deleted_flag);

create index idx_creditor_lookup_name__data_source_updated_datetime
    on history_octane.creditor_lookup_name (data_source_updated_datetime);

create index idx_creditor_lookup_name__pid
    on history_octane.creditor_lookup_name (cln_pid);

create index idx_creditor_lookup_name__pid_version
    on history_octane.creditor_lookup_name (cln_pid, cln_version);

create index idx_creditor_lookup_name__etl_batch_id
    on history_octane.creditor_lookup_name (etl_batch_id);

grant select on history_octane.creditor_lookup_name to readonly;

grant insert, select, update on history_octane.creditor_lookup_name to etl_loan;

create table history_octane.investor
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    i_pid bigint not null,
    i_version integer,
    i_account_pid bigint,
    i_investor_id varchar(32),
    i_criteria_pid bigint,
    i_website_url varchar(256),
    i_investor_name varchar(128),
    i_investor_city varchar(128),
    i_investor_country varchar(128),
    i_investor_postal_code varchar(128),
    i_investor_state varchar(128),
    i_investor_street1 varchar(128),
    i_investor_street2 varchar(128),
    i_investor_county_pid bigint,
    i_beneficiary_name varchar(128),
    i_beneficiary_city varchar(128),
    i_beneficiary_country varchar(128),
    i_beneficiary_postal_code varchar(128),
    i_beneficiary_state varchar(128),
    i_beneficiary_street1 varchar(128),
    i_beneficiary_street2 varchar(128),
    i_beneficiary_county_pid bigint,
    i_loss_payee_name varchar(128),
    i_loss_payee_city varchar(128),
    i_loss_payee_country varchar(128),
    i_loss_payee_postal_code varchar(128),
    i_loss_payee_state varchar(128),
    i_loss_payee_street1 varchar(128),
    i_loss_payee_street2 varchar(128),
    i_loss_payee_county_pid bigint,
    i_loss_payee_assignee_name varchar(128),
    i_when_recorded_mail_to_name varchar(128),
    i_when_recorded_mail_to_city varchar(128),
    i_when_recorded_mail_to_country varchar(128),
    i_when_recorded_mail_to_postal_code varchar(128),
    i_when_recorded_mail_to_state varchar(128),
    i_when_recorded_mail_to_street1 varchar(128),
    i_when_recorded_mail_to_street2 varchar(128),
    i_when_recorded_mail_to_county_pid bigint,
    i_servicer_name varchar(128),
    i_servicer_address_street1 varchar(128),
    i_servicer_address_street2 varchar(128),
    i_servicer_address_city varchar(128),
    i_servicer_address_state varchar(128),
    i_servicer_address_postal_code varchar(128),
    i_servicer_address_country varchar(128),
    i_servicer_county_pid bigint,
    i_sub_servicer_name varchar(128),
    i_sub_servicer_address_street1 varchar(128),
    i_sub_servicer_address_street2 varchar(128),
    i_sub_servicer_address_city varchar(128),
    i_sub_servicer_address_state varchar(128),
    i_sub_servicer_address_postal_code varchar(128),
    i_sub_servicer_address_country varchar(128),
    i_sub_servicer_mers_org_id varchar(7),
    i_custodian_pid bigint,
    i_file_delivery_name varchar(128),
    i_file_delivery_address_street1 varchar(128),
    i_file_delivery_address_street2 varchar(128),
    i_file_delivery_address_city varchar(128),
    i_file_delivery_address_state varchar(128),
    i_file_delivery_address_postal_code varchar(128),
    i_file_delivery_address_country varchar(128),
    i_initial_beneficiary_candidate boolean,
    i_initial_servicer_candidate boolean,
    i_mers_org_member varchar(128),
    i_mers_org_id varchar(7),
    i_allonge_transfer_to_name varchar(128),
    i_lock_expiration_delivery_subtrahend_days integer,
    i_maximum_lock_extensions_allowed integer,
    i_maximum_lock_extension_days_allowed integer,
    i_mortech_investor_id varchar(16),
    i_fnma_servicer_id varchar(16),
    i_loan_file_delivery_method_type varchar(128),
    i_investor_group_pid bigint,
    i_mbs_investor boolean,
    i_investor_hmda_purchaser_of_loan_type varchar(128),
    i_lock_disable_time time,
    i_allow_weekend_holiday_locks boolean,
    i_nmls_id varchar(16),
    i_nmls_id_applicable varchar(128),
    i_fnm_investor_remittance_type varchar(128),
    i_fnm_mbs_investor_remittance_day_of_month integer,
    i_fnm_mbs_loan_default_loss_party_type varchar(128),
    i_fnm_mbs_reo_marketing_party_type varchar(128),
    i_offers_secondary_financing boolean,
    i_secondary_financing_source_type varchar(128),
    i_ein varchar(10),
    etl_batch_id text
);

alter table history_octane.investor owner to deployer;

create index idx_investor__data_source_deleted_flag
    on history_octane.investor (data_source_deleted_flag);

create index idx_investor__data_source_updated_datetime
    on history_octane.investor (data_source_updated_datetime);

create index idx_investor__pid
    on history_octane.investor (i_pid);

create index idx_investor__pid_version
    on history_octane.investor (i_pid, i_version);

create index idx_investor__etl_batch_id
    on history_octane.investor (etl_batch_id);

grant select on history_octane.investor to readonly;

grant insert, select, update on history_octane.investor to etl_loan;

create table history_octane.company
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    cm_pid bigint not null,
    cm_version integer,
    cm_account_pid bigint,
    cm_origination_source_type varchar(128),
    cm_company_id varchar(32),
    cm_nmls_company_id varchar(16),
    cm_federal_tax_id varchar(32),
    cm_mers_org_id varchar(7),
    cm_mers_mom boolean,
    cm_company_name varchar(128),
    cm_company_mailing_address_name varchar(128),
    cm_company_name_for_header_and_footer varchar(128),
    cm_casual_company_name varchar(128),
    cm_company_address_street1 varchar(128),
    cm_company_address_street2 varchar(128),
    cm_company_address_city varchar(128),
    cm_company_address_state varchar(128),
    cm_company_address_postal_code varchar(128),
    cm_company_address_country varchar(128),
    cm_company_phone varchar(32),
    cm_customer_service_email varchar(256),
    cm_customer_service_phone varchar(32),
    cm_customer_service_phone_extension varchar(16),
    cm_borrower_app_company_host varchar(256),
    cm_borrower_app_company_ip_address varchar(32),
    cm_borrower_app_company_enabled boolean,
    cm_borrower_user_email_from varchar(256),
    cm_company_legal_entity_type varchar(128),
    cm_company_legal_entity_organization_state_type varchar(128),
    cm_broker_participating_with_less_than_four_lenders varchar(128),
    cm_broker_participating_lender_1 varchar(256),
    cm_broker_participating_lender_2 varchar(256),
    cm_broker_participating_lender_3 varchar(256),
    cm_correspondent_investor_pid bigint,
    cm_total_expert_account_type varchar(128),
    etl_batch_id text
);

alter table history_octane.company owner to deployer;

create index idx_company__data_source_deleted_flag
    on history_octane.company (data_source_deleted_flag);

create index idx_company__data_source_updated_datetime
    on history_octane.company (data_source_updated_datetime);

create index idx_company__pid
    on history_octane.company (cm_pid);

create index idx_company__pid_version
    on history_octane.company (cm_pid, cm_version);

create index idx_company__etl_batch_id
    on history_octane.company (etl_batch_id);

grant select on history_octane.company to readonly;

grant insert, select, update on history_octane.company to etl_loan;

create table history_octane.branch
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    br_pid bigint not null,
    br_version integer,
    br_company_pid bigint,
    br_branch_name varchar(128),
    br_fha_field_office_code varchar(16),
    br_branch_id varchar(16),
    br_branch_status_type varchar(128),
    br_nmls_branch_id varchar(16),
    br_uuts_loan_originator_type varchar(128),
    br_address_street1 varchar(128),
    br_address_street2 varchar(128),
    br_address_city varchar(128),
    br_address_state varchar(128),
    br_address_postal_code varchar(128),
    br_address_country varchar(128),
    br_office_phone varchar(32),
    br_office_phone_extension varchar(16),
    br_fax varchar(32),
    br_lp_lender_branch_id varchar(16),
    br_dsi_customer_id varchar(16),
    br_clg_flood_cert_internal_account_id varchar(16),
    br_street_links_branch_id varchar(32),
    br_fha_branch_id varchar(16),
    br_fha_branch_id_qualified varchar(16),
    br_lender_paid_broker_compensation_percent numeric(11,9),
    br_location_pid bigint,
    etl_batch_id text
);

alter table history_octane.branch owner to deployer;

create index idx_branch__data_source_deleted_flag
    on history_octane.branch (data_source_deleted_flag);

create index idx_branch__data_source_updated_datetime
    on history_octane.branch (data_source_updated_datetime);

create index idx_branch__pid
    on history_octane.branch (br_pid);

create index idx_branch__pid_version
    on history_octane.branch (br_pid, br_version);

create index fk_branch_2
    on history_octane.branch (br_location_pid);

create index idx_branch__etl_batch_id
    on history_octane.branch (etl_batch_id);

grant select on history_octane.branch to readonly;

grant insert, select, update on history_octane.branch to etl_loan;

create table history_octane.branch_license
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    brml_pid bigint not null,
    brml_version integer,
    brml_branch_pid bigint,
    brml_license_type varchar(128),
    brml_state_type varchar(128),
    brml_license_number varchar(128),
    brml_from_date date,
    brml_through_date date,
    brml_note varchar(256),
    brml_company_pid bigint,
    brml_location_pid bigint,
    etl_batch_id text
);

alter table history_octane.branch_license owner to deployer;

create index idx_branch_license__data_source_deleted_flag
    on history_octane.branch_license (data_source_deleted_flag);

create index idx_branch_license__data_source_updated_datetime
    on history_octane.branch_license (data_source_updated_datetime);

create index idx_branch_license__pid
    on history_octane.branch_license (brml_pid);

create index idx_branch_license__pid_version
    on history_octane.branch_license (brml_pid, brml_version);

create index fk_branch_license_2
    on history_octane.branch_license (brml_company_pid);

create index fk_branch_license_3
    on history_octane.branch_license (brml_location_pid);

create index idx_branch_license__etl_batch_id
    on history_octane.branch_license (etl_batch_id);

grant select on history_octane.branch_license to readonly;

grant insert, select, update on history_octane.branch_license to etl_loan;

create table history_octane.company_license
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    cml_pid bigint not null,
    cml_version integer,
    cml_company_pid bigint,
    cml_license_type varchar(128),
    cml_state_type varchar(128),
    cml_company_state_license_type varchar(128),
    cml_company_state_legal_name varchar(128),
    cml_use_state_specific_company_name boolean,
    cml_license_number varchar(128),
    cml_from_date date,
    cml_through_date date,
    cml_note varchar(256),
    etl_batch_id text
);

alter table history_octane.company_license owner to deployer;

create index idx_company_license__data_source_deleted_flag
    on history_octane.company_license (data_source_deleted_flag);

create index idx_company_license__data_source_updated_datetime
    on history_octane.company_license (data_source_updated_datetime);

create index idx_company_license__pid
    on history_octane.company_license (cml_pid);

create index idx_company_license__pid_version
    on history_octane.company_license (cml_pid, cml_version);

create index idx_company_license__etl_batch_id
    on history_octane.company_license (etl_batch_id);

grant select on history_octane.company_license to readonly;

grant insert, select, update on history_octane.company_license to etl_loan;

create table history_octane.deal
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    d_pid bigint not null,
    d_version integer,
    d_account_pid bigint,
    d_company_pid bigint,
    d_active_proposal_pid bigint,
    d_branch_pid bigint,
    d_deal_create_date date,
    d_deal_status_type varchar(128),
    d_velocify_lead_id varchar(32),
    d_lead_zillow_zq varchar(256),
    d_lead_tracking_id varchar(256),
    d_lead_reference_id varchar(256),
    d_los_loan_id_main bigint,
    d_los_loan_id_piggyback bigint,
    d_mers_min_main varchar(20),
    d_mers_min_piggyback varchar(20),
    d_external_loan_id_main varchar(32),
    d_external_loan_id_piggyback varchar(32),
    d_lead_source_pid bigint,
    d_disclosure_mode_date date,
    d_deal_status_date date,
    d_sap_deal boolean,
    d_hmda_action_date date,
    d_hmda_action_type varchar(128),
    d_hmda_denial_reason_type_1 varchar(128),
    d_hmda_denial_reason_type_2 varchar(128),
    d_hmda_denial_reason_type_3 varchar(128),
    d_hmda_denial_reason_type_4 varchar(128),
    d_borrower_esign boolean,
    d_application_type varchar(128),
    d_welcome_call_datetime timestamp,
    d_realty_agent_scenario_type varchar(128),
    d_test_loan boolean,
    d_charges_enabled_date date,
    d_credit_bureau_type varchar(128),
    d_performer_team_pid bigint,
    d_deal_create_type varchar(128),
    d_hmda_denial_reason_other_description varchar(255),
    d_effective_hmda_action_date date,
    d_copy_source_los_loan_id_main bigint,
    d_copy_source_los_loan_id_piggyback bigint,
    d_referred_by_name varchar(128),
    d_hmda_universal_loan_id_main varchar(45),
    d_hmda_universal_loan_id_piggyback varchar(45),
    d_calyx_loan_guid varchar(128),
    d_invoices_enabled_date date,
    d_invoices_enabled boolean,
    d_training_loan boolean,
    d_deal_orphan_status_type varchar(128),
    d_deal_orphan_earliest_check_date date,
    d_deal_create_date_time timestamp,
    d_early_wire_request boolean,
    d_enable_electronic_transaction boolean,
    d_initial_cancel_status_date date,
    d_license_location_pid bigint,
    etl_batch_id text
);

alter table history_octane.deal owner to deployer;

create index idx_deal__data_source_deleted_flag
    on history_octane.deal (data_source_deleted_flag);

create index idx_deal__data_source_updated_datetime
    on history_octane.deal (data_source_updated_datetime);

create index idx_deal__pid
    on history_octane.deal (d_pid);

create index idx_deal__pid_version
    on history_octane.deal (d_pid, d_version);

create index fk_deal_3
    on history_octane.deal (d_license_location_pid);

create index idx_deal__etl_batch_id
    on history_octane.deal (etl_batch_id);

grant select on history_octane.deal to readonly;

grant insert, select, update on history_octane.deal to etl_loan;

create table history_octane.appraisal
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    apr_pid bigint not null,
    apr_version integer,
    apr_appraised_value_amount bigint,
    apr_effective_date date,
    apr_deal_pid bigint,
    apr_decision_appraisal boolean,
    apr_appraisal_condition_type varchar(128),
    apr_appraiser_address_city varchar(128),
    apr_appraiser_address_country varchar(128),
    apr_appraiser_address_postal_code varchar(128),
    apr_appraiser_address_state varchar(128),
    apr_appraiser_address_street1 varchar(128),
    apr_appraiser_address_street2 varchar(128),
    apr_appraiser_company_name varchar(128),
    apr_appraiser_email varchar(256),
    apr_appraiser_fax varchar(32),
    apr_appraiser_first_name varchar(32),
    apr_appraiser_last_name varchar(32),
    apr_appraiser_middle_name varchar(32),
    apr_appraiser_mobile_phone varchar(32),
    apr_appraiser_name_suffix varchar(32),
    apr_appraiser_office_phone varchar(32),
    apr_appraiser_office_phone_extension varchar(16),
    apr_appraiser_title varchar(128),
    apr_appraiser_license_number varchar(128),
    apr_appraiser_supervisory_license_number varchar(128),
    apr_appraiser_license_state varchar(128),
    apr_appraisal_order_status_type varchar(128),
    apr_appraisal_order_id varchar(32),
    apr_appraisal_order_instructions varchar(1024),
    apr_property_address_city varchar(128),
    apr_property_address_country varchar(128),
    apr_property_address_postal_code varchar(128),
    apr_property_address_state varchar(128),
    apr_property_address_street1 varchar(128),
    apr_property_address_street2 varchar(128),
    apr_property_county_name varchar(128),
    apr_obtained_from_transfer boolean,
    apr_hud_provided boolean,
    apr_bedroom_count_unit_1 integer,
    apr_bedroom_count_unit_2 integer,
    apr_bedroom_count_unit_3 integer,
    apr_bedroom_count_unit_4 integer,
    apr_bathroom_count_unit_1 integer,
    apr_bathroom_count_unit_2 integer,
    apr_bathroom_count_unit_3 integer,
    apr_bathroom_count_unit_4 integer,
    apr_total_room_count_unit_1 integer,
    apr_total_room_count_unit_2 integer,
    apr_total_room_count_unit_3 integer,
    apr_total_room_count_unit_4 integer,
    apr_gross_living_area_square_feet_unit_1 integer,
    apr_gross_living_area_square_feet_unit_2 integer,
    apr_gross_living_area_square_feet_unit_3 integer,
    apr_gross_living_area_square_feet_unit_4 integer,
    apr_appraisal_underwriter_type varchar(128),
    apr_ucdp_doc_file_id varchar(10),
    apr_inspection_date date,
    apr_appraisal_reference_id varchar(32),
    apr_ucdp_ssr_id varchar(16),
    apr_sale_price_amount numeric(15),
    apr_property_tax_id varchar(128),
    apr_property_category_type varchar(128),
    apr_cost_to_build_new numeric(15),
    apr_monthly_hoa_amount numeric(15,2),
    apr_structure_built_year integer,
    apr_structure_built_month integer,
    apr_project_name varchar(128),
    apr_road_type varchar(128),
    apr_water_type varchar(128),
    apr_sanitation_type varchar(128),
    apr_neighborhood_location_type varchar(128),
    apr_site_area numeric(15),
    apr_due_date date,
    apr_order_date date,
    apr_payment_type varchar(128),
    apr_payment_received_date date,
    apr_appraisal_source_type varchar(128),
    apr_appraisal_purpose_type varchar(128),
    apr_exclude boolean,
    apr_order_appraisal varchar(128),
    apr_appraisal_id integer,
    apr_mortgage_type varchar(128),
    apr_remaining_economic_life_years integer,
    apr_deficient_economic_life_explanation varchar(1024),
    apr_hve_point_value_estimate_amount numeric(15,2),
    apr_hve_forecast_standard_deviation_percent numeric(11,9),
    apr_hve_confidence_level_type varchar(128),
    apr_hve_variance_percent numeric(11,9),
    apr_hve_excessive_value_message varchar(1024),
    apr_cu_risk_score numeric(10,2),
    apr_license_expiration_date date,
    apr_supervisor_required boolean,
    apr_supervisory_appraiser_first_name varchar(32),
    apr_supervisory_appraiser_middle_name varchar(32),
    apr_supervisory_appraiser_last_name varchar(32),
    apr_supervisory_appraiser_name_suffix varchar(32),
    apr_supervisory_license_state varchar(128),
    apr_supervisory_license_expiration_date date,
    apr_synthetic_unique boolean,
    apr_appraisal_invoice_amount numeric(17,2),
    apr_second_decision_appraisal boolean,
    etl_batch_id text
);

alter table history_octane.appraisal owner to deployer;

create index idx_appraisal__data_source_deleted_flag
    on history_octane.appraisal (data_source_deleted_flag);

create index idx_appraisal__data_source_updated_datetime
    on history_octane.appraisal (data_source_updated_datetime);

create index idx_appraisal__pid
    on history_octane.appraisal (apr_pid);

create index idx_appraisal__pid_version
    on history_octane.appraisal (apr_pid, apr_version);

create index idx_appraisal__etl_batch_id
    on history_octane.appraisal (etl_batch_id);

grant select on history_octane.appraisal to readonly;

grant insert, select, update on history_octane.appraisal to etl_loan;

create table history_octane.appraisal_form
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    aprfm_pid bigint not null,
    aprfm_version integer,
    aprfm_appraisal_pid bigint,
    aprfm_appraisal_source_type varchar(128),
    aprfm_appraisal_form_type varchar(128),
    etl_batch_id text
);

alter table history_octane.appraisal_form owner to deployer;

create index idx_appraisal_form__data_source_deleted_flag
    on history_octane.appraisal_form (data_source_deleted_flag);

create index idx_appraisal_form__data_source_updated_datetime
    on history_octane.appraisal_form (data_source_updated_datetime);

create index idx_appraisal_form__pid
    on history_octane.appraisal_form (aprfm_pid);

create index idx_appraisal_form__pid_version
    on history_octane.appraisal_form (aprfm_pid, aprfm_version);

create index idx_appraisal_form__etl_batch_id
    on history_octane.appraisal_form (etl_batch_id);

grant select on history_octane.appraisal_form to readonly;

grant insert, select, update on history_octane.appraisal_form to etl_loan;

create table history_octane.appraisal_id_ticker
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    aprtk_pid bigint not null,
    aprtk_version integer,
    aprtk_deal_pid bigint,
    aprtk_next_id integer,
    etl_batch_id text
);

alter table history_octane.appraisal_id_ticker owner to deployer;

create index idx_appraisal_id_ticker__data_source_deleted_flag
    on history_octane.appraisal_id_ticker (data_source_deleted_flag);

create index idx_appraisal_id_ticker__data_source_updated_datetime
    on history_octane.appraisal_id_ticker (data_source_updated_datetime);

create index idx_appraisal_id_ticker__pid
    on history_octane.appraisal_id_ticker (aprtk_pid);

create index idx_appraisal_id_ticker__pid_version
    on history_octane.appraisal_id_ticker (aprtk_pid, aprtk_version);

create index idx_appraisal_id_ticker__etl_batch_id
    on history_octane.appraisal_id_ticker (etl_batch_id);

grant select on history_octane.appraisal_id_ticker to readonly;

grant insert, select, update on history_octane.appraisal_id_ticker to etl_loan;

create table history_octane.deal_appraisal
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dappr_pid bigint not null,
    dappr_version integer,
    dappr_deal_pid bigint,
    dappr_door_lock_combination boolean,
    dappr_appraisal_entry_contact_type varchar(128),
    dappr_appraisal_hold_type varchar(128),
    dappr_appraisal_hold_reason_type varchar(128),
    dappr_hold_release_date date,
    dappr_rush_request boolean,
    dappr_transfer_specified boolean,
    dappr_calculated_appraisal_required boolean,
    dappr_override_calculated_appraisal_required boolean,
    dappr_override_calculated_appraisal_required_reason varchar(16000),
    dappr_borrower_requires_appraisal varchar(128),
    dappr_lender_requires_appraisal boolean,
    dappr_product_requires_appraisal boolean,
    dappr_appraisal_required boolean,
    etl_batch_id text
);

alter table history_octane.deal_appraisal owner to deployer;

create index idx_deal_appraisal__data_source_deleted_flag
    on history_octane.deal_appraisal (data_source_deleted_flag);

create index idx_deal_appraisal__data_source_updated_datetime
    on history_octane.deal_appraisal (data_source_updated_datetime);

create index idx_deal_appraisal__pid
    on history_octane.deal_appraisal (dappr_pid);

create index idx_deal_appraisal__pid_version
    on history_octane.deal_appraisal (dappr_pid, dappr_version);

create index idx_deal_appraisal__etl_batch_id
    on history_octane.deal_appraisal (etl_batch_id);

grant select on history_octane.deal_appraisal to readonly;

grant insert, select, update on history_octane.deal_appraisal to etl_loan;

create table history_octane.deal_contact
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dc_pid bigint not null,
    dc_version integer,
    dc_address_city varchar(128),
    dc_address_country varchar(128),
    dc_address_postal_code varchar(128),
    dc_address_state varchar(128),
    dc_address_street1 varchar(128),
    dc_address_street2 varchar(128),
    dc_company_name varchar(128),
    dc_deal_pid bigint,
    dc_email varchar(256),
    dc_fax varchar(32),
    dc_first_name varchar(32),
    dc_last_name varchar(32),
    dc_middle_name varchar(32),
    dc_mobile_phone varchar(32),
    dc_name_suffix varchar(32),
    dc_office_phone varchar(32),
    dc_office_phone_extension varchar(16),
    dc_role_type varchar(128),
    dc_title varchar(128),
    dc_company_license_id varchar(128),
    etl_batch_id text
);

alter table history_octane.deal_contact owner to deployer;

create index idx_deal_contact__data_source_deleted_flag
    on history_octane.deal_contact (data_source_deleted_flag);

create index idx_deal_contact__data_source_updated_datetime
    on history_octane.deal_contact (data_source_updated_datetime);

create index idx_deal_contact__pid
    on history_octane.deal_contact (dc_pid);

create index idx_deal_contact__pid_version
    on history_octane.deal_contact (dc_pid, dc_version);

create index idx_deal_contact__etl_batch_id
    on history_octane.deal_contact (etl_batch_id);

grant select on history_octane.deal_contact to readonly;

grant insert, select, update on history_octane.deal_contact to etl_loan;

create table history_octane.deal_disaster_declaration
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ddd_pid bigint not null,
    ddd_version integer,
    ddd_deal_pid bigint,
    ddd_disaster_declaration_pid bigint,
    etl_batch_id text
);

alter table history_octane.deal_disaster_declaration owner to deployer;

create index idx_deal_disaster_declaration__data_source_deleted_flag
    on history_octane.deal_disaster_declaration (data_source_deleted_flag);

create index idx_deal_disaster_declaration__data_source_updated_datetime
    on history_octane.deal_disaster_declaration (data_source_updated_datetime);

create index idx_deal_disaster_declaration__pid
    on history_octane.deal_disaster_declaration (ddd_pid);

create index idx_deal_disaster_declaration__pid_version
    on history_octane.deal_disaster_declaration (ddd_pid, ddd_version);

create index idx_deal_disaster_declaration__etl_batch_id
    on history_octane.deal_disaster_declaration (etl_batch_id);

grant select on history_octane.deal_disaster_declaration to readonly;

grant insert, select, update on history_octane.deal_disaster_declaration to etl_loan;

create table history_octane.deal_du
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ddu_pid bigint not null,
    ddu_version integer,
    ddu_deal_pid bigint,
    ddu_du_casefile_id varchar(32),
    ddu_du_institution_id varchar(16),
    etl_batch_id text
);

alter table history_octane.deal_du owner to deployer;

create index idx_deal_du__data_source_deleted_flag
    on history_octane.deal_du (data_source_deleted_flag);

create index idx_deal_du__data_source_updated_datetime
    on history_octane.deal_du (data_source_updated_datetime);

create index idx_deal_du__pid
    on history_octane.deal_du (ddu_pid);

create index idx_deal_du__pid_version
    on history_octane.deal_du (ddu_pid, ddu_version);

create index idx_deal_du__etl_batch_id
    on history_octane.deal_du (etl_batch_id);

grant select on history_octane.deal_du to readonly;

grant insert, select, update on history_octane.deal_du to etl_loan;

create table history_octane.deal_event
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    de_pid bigint not null,
    de_version integer,
    de_create_datetime timestamp,
    de_deal_event_type varchar(128),
    de_deal_pid bigint,
    de_deal_task_pid bigint,
    de_deal_note_pid bigint,
    de_deal_message_log_pid bigint,
    de_proposal_doc_pid bigint,
    de_proposal_doc_file_pid bigint,
    de_wf_deal_step_pid bigint,
    de_proposal_pid bigint,
    de_detail varchar(16000),
    de_source_unparsed_name varchar(128),
    de_coarse_event_type varchar(128),
    de_borrower_text varchar(1024),
    de_create_nanoseconds integer,
    etl_batch_id text
);

alter table history_octane.deal_event owner to deployer;

create index idx_deal_event__data_source_deleted_flag
    on history_octane.deal_event (data_source_deleted_flag);

create index idx_deal_event__data_source_updated_datetime
    on history_octane.deal_event (data_source_updated_datetime);

create index idx_deal_event__pid
    on history_octane.deal_event (de_pid);

create index idx_deal_event__pid_version
    on history_octane.deal_event (de_pid, de_version);

create index idx_deal_event__etl_batch_id
    on history_octane.deal_event (etl_batch_id);

grant select on history_octane.deal_event to readonly;

grant insert, select, update on history_octane.deal_event to etl_loan;

create table history_octane.deal_housing_counselors_request
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dhcr_pid bigint not null,
    dhcr_version integer,
    dhcr_deal_pid bigint,
    dhcr_centroid_address_street1 varchar(128),
    dhcr_centroid_address_street2 varchar(128),
    dhcr_centroid_address_city varchar(128),
    dhcr_centroid_address_state varchar(128),
    dhcr_centroid_address_postal_code varchar(128),
    dhcr_centroid_address_country varchar(128),
    dhcr_error_messages text,
    etl_batch_id text
);

alter table history_octane.deal_housing_counselors_request owner to deployer;

create index idx_deal_housing_counselors_request__data_source_deleted_flag
    on history_octane.deal_housing_counselors_request (data_source_deleted_flag);

create index idx_7b17954e0c86ba97a1a153429a2558f6
    on history_octane.deal_housing_counselors_request (data_source_updated_datetime);

create index idx_deal_housing_counselors_request__pid
    on history_octane.deal_housing_counselors_request (dhcr_pid);

create index idx_deal_housing_counselors_request__pid_version
    on history_octane.deal_housing_counselors_request (dhcr_pid, dhcr_version);

create index idx_deal_housing_counselors_request__etl_batch_id
    on history_octane.deal_housing_counselors_request (etl_batch_id);

grant select on history_octane.deal_housing_counselors_request to readonly;

grant insert, select, update on history_octane.deal_housing_counselors_request to etl_loan;

create table history_octane.deal_housing_counselor_candidate
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dhcc_pid bigint not null,
    dhcc_version integer,
    dhcc_deal_pid bigint,
    dhcc_deal_housing_counselors_request_pid bigint,
    dhcc_counseling_agency_id varchar(16),
    dhcc_office_name varchar(256),
    dhcc_office_address_street1 varchar(128),
    dhcc_office_address_street2 varchar(128),
    dhcc_office_address_city varchar(128),
    dhcc_office_address_state varchar(128),
    dhcc_office_address_postal_code varchar(128),
    dhcc_office_address_country varchar(128),
    dhcc_office_email varchar(256),
    dhcc_office_fax varchar(32),
    dhcc_office_phone1 varchar(32),
    dhcc_office_phone2 varchar(32),
    dhcc_mailing_address_street1 varchar(128),
    dhcc_mailing_address_street2 varchar(128),
    dhcc_mailing_address_city varchar(128),
    dhcc_mailing_address_state varchar(128),
    dhcc_mailing_address_postal_code varchar(128),
    dhcc_mailing_address_country varchar(128),
    dhcc_web_url varchar(256),
    dhcc_language_codes varchar(256),
    dhcc_address_latitude numeric(15,3),
    dhcc_address_longitude numeric(15,3),
    dhcc_service_codes varchar(1500),
    dhcc_county_name varchar(128),
    dhcc_faith_based boolean,
    dhcc_migrant_workers boolean,
    dhcc_colonias boolean,
    dhcc_parent_org_id varchar(16),
    dhcc_ordinal integer,
    etl_batch_id text
);

alter table history_octane.deal_housing_counselor_candidate owner to deployer;

create index idx_deal_housing_counselor_candidate__data_source_deleted_flag
    on history_octane.deal_housing_counselor_candidate (data_source_deleted_flag);

create index idx_f0d200309765aca171d0babd52ac08e8
    on history_octane.deal_housing_counselor_candidate (data_source_updated_datetime);

create index idx_deal_housing_counselor_candidate__pid
    on history_octane.deal_housing_counselor_candidate (dhcc_pid);

create index idx_deal_housing_counselor_candidate__pid_version
    on history_octane.deal_housing_counselor_candidate (dhcc_pid, dhcc_version);

create index idx_deal_housing_counselor_candidate__etl_batch_id
    on history_octane.deal_housing_counselor_candidate (etl_batch_id);

grant select on history_octane.deal_housing_counselor_candidate to readonly;

grant insert, select, update on history_octane.deal_housing_counselor_candidate to etl_loan;

create table history_octane.deal_invoice
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    di_pid bigint not null,
    di_version integer,
    di_deal_pid bigint,
    di_create_datetime timestamp,
    di_invoice_amount numeric(15,2),
    di_refund_amount numeric(15,2),
    di_smart_invoice boolean,
    di_invoice_status_type varchar(128),
    di_description varchar(256),
    di_internal_notes varchar(1024),
    etl_batch_id text
);

alter table history_octane.deal_invoice owner to deployer;

create index idx_deal_invoice__data_source_deleted_flag
    on history_octane.deal_invoice (data_source_deleted_flag);

create index idx_deal_invoice__data_source_updated_datetime
    on history_octane.deal_invoice (data_source_updated_datetime);

create index idx_deal_invoice__pid
    on history_octane.deal_invoice (di_pid);

create index idx_deal_invoice__pid_version
    on history_octane.deal_invoice (di_pid, di_version);

create index idx_deal_invoice__etl_batch_id
    on history_octane.deal_invoice (etl_batch_id);

grant select on history_octane.deal_invoice to readonly;

grant insert, select, update on history_octane.deal_invoice to etl_loan;

create table history_octane.deal_invoice_item
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dii_pid bigint not null,
    dii_version integer,
    dii_deal_invoice_pid bigint,
    dii_charge_type varchar(128),
    dii_item_amount numeric(15,2),
    dii_smart_item boolean,
    dii_adjustment boolean,
    etl_batch_id text
);

alter table history_octane.deal_invoice_item owner to deployer;

create index idx_deal_invoice_item__data_source_deleted_flag
    on history_octane.deal_invoice_item (data_source_deleted_flag);

create index idx_deal_invoice_item__data_source_updated_datetime
    on history_octane.deal_invoice_item (data_source_updated_datetime);

create index idx_deal_invoice_item__pid
    on history_octane.deal_invoice_item (dii_pid);

create index idx_deal_invoice_item__pid_version
    on history_octane.deal_invoice_item (dii_pid, dii_version);

create index idx_deal_invoice_item__etl_batch_id
    on history_octane.deal_invoice_item (etl_batch_id);

grant select on history_octane.deal_invoice_item to readonly;

grant insert, select, update on history_octane.deal_invoice_item to etl_loan;

create table history_octane.deal_lender_user_event
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dlue_pid bigint not null,
    dlue_version integer,
    dlue_deal_pid bigint,
    dlue_subject_lender_user_pid bigint,
    dlue_role_pid bigint,
    dlue_create_datetime timestamp,
    dlue_unparsed_text varchar(1024),
    etl_batch_id text
);

alter table history_octane.deal_lender_user_event owner to deployer;

create index idx_deal_lender_user_event__data_source_deleted_flag
    on history_octane.deal_lender_user_event (data_source_deleted_flag);

create index idx_deal_lender_user_event__data_source_updated_datetime
    on history_octane.deal_lender_user_event (data_source_updated_datetime);

create index idx_deal_lender_user_event__pid
    on history_octane.deal_lender_user_event (dlue_pid);

create index idx_deal_lender_user_event__pid_version
    on history_octane.deal_lender_user_event (dlue_pid, dlue_version);

create index idx_deal_lender_user_event__etl_batch_id
    on history_octane.deal_lender_user_event (etl_batch_id);

grant select on history_octane.deal_lender_user_event to readonly;

grant insert, select, update on history_octane.deal_lender_user_event to etl_loan;

create table history_octane.deal_lp
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dlp_pid bigint not null,
    dlp_version integer,
    dlp_deal_pid bigint,
    dlp_lp_loan_id varchar(32),
    dlp_lp_key_id varchar(32),
    etl_batch_id text
);

alter table history_octane.deal_lp owner to deployer;

create index idx_deal_lp__data_source_deleted_flag
    on history_octane.deal_lp (data_source_deleted_flag);

create index idx_deal_lp__data_source_updated_datetime
    on history_octane.deal_lp (data_source_updated_datetime);

create index idx_deal_lp__pid
    on history_octane.deal_lp (dlp_pid);

create index idx_deal_lp__pid_version
    on history_octane.deal_lp (dlp_pid, dlp_version);

create index idx_deal_lp__etl_batch_id
    on history_octane.deal_lp (etl_batch_id);

grant select on history_octane.deal_lp to readonly;

grant insert, select, update on history_octane.deal_lp to etl_loan;

create table history_octane.deal_performer_team
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dptm_pid bigint not null,
    dptm_version integer,
    dptm_deal_pid bigint,
    dptm_performer_team_pid bigint,
    etl_batch_id text
);

alter table history_octane.deal_performer_team owner to deployer;

create index idx_deal_performer_team__data_source_deleted_flag
    on history_octane.deal_performer_team (data_source_deleted_flag);

create index idx_deal_performer_team__data_source_updated_datetime
    on history_octane.deal_performer_team (data_source_updated_datetime);

create index idx_deal_performer_team__pid
    on history_octane.deal_performer_team (dptm_pid);

create index idx_deal_performer_team__pid_version
    on history_octane.deal_performer_team (dptm_pid, dptm_version);

create index idx_deal_performer_team__etl_batch_id
    on history_octane.deal_performer_team (etl_batch_id);

grant select on history_octane.deal_performer_team to readonly;

grant insert, select, update on history_octane.deal_performer_team to etl_loan;

create table history_octane.deal_real_estate_agent
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    drea_pid bigint not null,
    drea_version integer,
    drea_deal_pid bigint,
    drea_first_name varchar(32),
    drea_middle_name varchar(32),
    drea_last_name varchar(32),
    drea_name_suffix varchar(32),
    drea_company_name varchar(128),
    drea_title varchar(128),
    drea_office_phone varchar(32),
    drea_office_phone_extension varchar(16),
    drea_mobile_phone varchar(32),
    drea_email varchar(256),
    drea_fax varchar(32),
    drea_street_1 varchar(128),
    drea_street_2 varchar(128),
    drea_city varchar(128),
    drea_state varchar(128),
    drea_country varchar(128),
    drea_postal_code varchar(128),
    drea_license_id varchar(128),
    drea_company_license_id varchar(128),
    drea_agency_type varchar(128),
    etl_batch_id text
);

alter table history_octane.deal_real_estate_agent owner to deployer;

create index idx_deal_real_estate_agent__data_source_deleted_flag
    on history_octane.deal_real_estate_agent (data_source_deleted_flag);

create index idx_deal_real_estate_agent__data_source_updated_datetime
    on history_octane.deal_real_estate_agent (data_source_updated_datetime);

create index idx_deal_real_estate_agent__pid
    on history_octane.deal_real_estate_agent (drea_pid);

create index idx_deal_real_estate_agent__pid_version
    on history_octane.deal_real_estate_agent (drea_pid, drea_version);

create index idx_deal_real_estate_agent__etl_batch_id
    on history_octane.deal_real_estate_agent (etl_batch_id);

grant select on history_octane.deal_real_estate_agent to readonly;

grant insert, select, update on history_octane.deal_real_estate_agent to etl_loan;

create table history_octane.deal_settlement
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dsmt_pid bigint not null,
    dsmt_version integer,
    dsmt_account_pid bigint,
    dsmt_deal_pid bigint,
    dsmt_borrower_elected_preferred_settlement varchar(128),
    dsmt_settlement_agent_escrow_id varchar(64),
    dsmt_title_company_reference_id varchar(32),
    dsmt_settlement_agent_pid bigint,
    dsmt_settlement_agent_office_pid bigint,
    dsmt_settlement_agent_wire_pid bigint,
    dsmt_settlement_agent_first_name varchar(128),
    dsmt_settlement_agent_last_name varchar(128),
    dsmt_settlement_agent_phone varchar(32),
    dsmt_settlement_agent_phone_extension varchar(16),
    dsmt_settlement_agent_email varchar(256),
    dsmt_settlement_agent_contact_license_id varchar(128),
    dsmt_settlement_agent_preferred_vendor boolean,
    dsmt_for_further_credit varchar(128),
    dsmt_beneficiary_for_further_credit varchar(128),
    dsmt_title_company_pid bigint,
    dsmt_title_company_office_pid bigint,
    dsmt_title_company_first_name varchar(128),
    dsmt_title_company_last_name varchar(128),
    dsmt_title_company_phone varchar(32),
    dsmt_title_company_phone_extension varchar(16),
    dsmt_title_company_email varchar(256),
    dsmt_title_company_contact_license_id varchar(128),
    dsmt_title_company_preferred_vendor boolean,
    dsmt_title_insurance_underwriter_company_name varchar(256),
    dsmt_title_insurance_attorney_first_name varchar(32),
    dsmt_title_insurance_attorney_middle_name varchar(32),
    dsmt_title_insurance_attorney_last_name varchar(32),
    dsmt_title_insurance_attorney_name_suffix varchar(32),
    dsmt_title_insurance_attorney_license_number varchar(64),
    etl_batch_id text
);

alter table history_octane.deal_settlement owner to deployer;

create index idx_deal_settlement__data_source_deleted_flag
    on history_octane.deal_settlement (data_source_deleted_flag);

create index idx_deal_settlement__data_source_updated_datetime
    on history_octane.deal_settlement (data_source_updated_datetime);

create index idx_deal_settlement__pid
    on history_octane.deal_settlement (dsmt_pid);

create index idx_deal_settlement__pid_version
    on history_octane.deal_settlement (dsmt_pid, dsmt_version);

create index idx_deal_settlement__etl_batch_id
    on history_octane.deal_settlement (etl_batch_id);

grant select on history_octane.deal_settlement to readonly;

grant insert, select, update on history_octane.deal_settlement to etl_loan;

create table history_octane.deal_signer
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dsi_pid bigint not null,
    dsi_version integer,
    dsi_deal_pid bigint,
    dsi_email varchar(256),
    dsi_first_name varchar(32),
    dsi_middle_name varchar(32),
    dsi_last_name varchar(32),
    dsi_name_suffix varchar(32),
    dsi_signer_id varchar(256),
    etl_batch_id text
);

alter table history_octane.deal_signer owner to deployer;

create index idx_deal_signer__data_source_deleted_flag
    on history_octane.deal_signer (data_source_deleted_flag);

create index idx_deal_signer__data_source_updated_datetime
    on history_octane.deal_signer (data_source_updated_datetime);

create index idx_deal_signer__pid
    on history_octane.deal_signer (dsi_pid);

create index idx_deal_signer__pid_version
    on history_octane.deal_signer (dsi_pid, dsi_version);

create index idx_deal_signer__etl_batch_id
    on history_octane.deal_signer (etl_batch_id);

grant select on history_octane.deal_signer to readonly;

grant insert, select, update on history_octane.deal_signer to etl_loan;

create table history_octane.deal_stage
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dst_pid bigint not null,
    dst_version integer,
    dst_deal_pid bigint,
    dst_deal_stage_type varchar(128),
    dst_from_date date,
    dst_from_datetime timestamp,
    dst_through_date date,
    dst_through_datetime timestamp,
    dst_duration_seconds bigint,
    dst_business_hours_duration_seconds bigint,
    etl_batch_id text
);

alter table history_octane.deal_stage owner to deployer;

create index idx_deal_stage__data_source_deleted_flag
    on history_octane.deal_stage (data_source_deleted_flag);

create index idx_deal_stage__data_source_updated_datetime
    on history_octane.deal_stage (data_source_updated_datetime);

create index idx_deal_stage__pid
    on history_octane.deal_stage (dst_pid);

create index idx_deal_stage__pid_version
    on history_octane.deal_stage (dst_pid, dst_version);

create index idx_deal_stage__etl_batch_id
    on history_octane.deal_stage (etl_batch_id);

grant select on history_octane.deal_stage to readonly;

grant insert, select, update on history_octane.deal_stage to etl_loan;

create table history_octane.deal_summary
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ds_pid bigint not null,
    ds_version integer,
    ds_deal_pid bigint,
    ds_lender_lock_expiration_datetime_main timestamp,
    ds_lender_lock_expiration_datetime_piggyback timestamp,
    ds_lender_lock_status_type_main varchar(128),
    ds_lender_lock_status_type_piggyback varchar(128),
    ds_decision_appraisal_condition_type varchar(128),
    ds_funding_status_type_main varchar(128),
    ds_funding_status_type_piggyback varchar(128),
    ds_purchase_advice_date_main date,
    ds_purchase_advice_date_piggyback date,
    ds_last_wf_phase_number integer,
    ds_last_wf_phase_name varchar(128),
    ds_eligible_investor_ids_main varchar(16000),
    ds_eligible_investor_ids_piggyback varchar(16000),
    ds_decision_appraisal_cu_risk_score numeric(10,2),
    ds_deal_stage_type varchar(128),
    ds_deal_stage_from_datetime timestamp,
    ds_funded_main boolean,
    ds_funded_piggyback boolean,
    ds_most_recent_user_update_date date,
    ds_lock_vintage_date_main date,
    ds_lock_vintage_date_piggyback date,
    ds_lender_lock_datetime_main timestamp,
    ds_lender_lock_datetime_piggyback timestamp,
    ds_any_unrequested_packages boolean,
    etl_batch_id text
);

alter table history_octane.deal_summary owner to deployer;

create index idx_deal_summary__data_source_deleted_flag
    on history_octane.deal_summary (data_source_deleted_flag);

create index idx_deal_summary__data_source_updated_datetime
    on history_octane.deal_summary (data_source_updated_datetime);

create index idx_deal_summary__pid
    on history_octane.deal_summary (ds_pid);

create index idx_deal_summary__pid_version
    on history_octane.deal_summary (ds_pid, ds_version);

create index idx_deal_summary__etl_batch_id
    on history_octane.deal_summary (etl_batch_id);

grant select on history_octane.deal_summary to readonly;

grant insert, select, update on history_octane.deal_summary to etl_loan;

create table history_octane.investor_lock_extension_setting
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    iles_pid bigint not null,
    iles_version integer,
    iles_investor_pid bigint,
    iles_from_date date,
    iles_through_date date,
    iles_extension_days integer,
    iles_price_adjustment_percent numeric(11,9),
    iles_auto_confirm boolean,
    etl_batch_id text
);

alter table history_octane.investor_lock_extension_setting owner to deployer;

create index idx_investor_lock_extension_setting__data_source_deleted_flag
    on history_octane.investor_lock_extension_setting (data_source_deleted_flag);

create index idx_bef384a66ce455683523a4af94c2afa1
    on history_octane.investor_lock_extension_setting (data_source_updated_datetime);

create index idx_investor_lock_extension_setting__pid
    on history_octane.investor_lock_extension_setting (iles_pid);

create index idx_investor_lock_extension_setting__pid_version
    on history_octane.investor_lock_extension_setting (iles_pid, iles_version);

create index idx_investor_lock_extension_setting__etl_batch_id
    on history_octane.investor_lock_extension_setting (etl_batch_id);

grant select on history_octane.investor_lock_extension_setting to readonly;

grant insert, select, update on history_octane.investor_lock_extension_setting to etl_loan;

create table history_octane.lead
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ld_pid bigint not null,
    ld_version integer,
    ld_deal_pid bigint,
    ld_lead_datetime varchar(32),
    ld_velocify_campaign_id varchar(32),
    ld_velocify_campaign_title varchar(32),
    ld_originator_email varchar(256),
    ld_customer_service_rep_name varchar(128),
    ld_velocify_lead_id varchar(32),
    ld_tracking_id varchar(256),
    ld_zillow_zq varchar(256),
    ld_reference_id varchar(256),
    ld_apr_percent varchar(16),
    ld_interest_rate varchar(16),
    ld_rate_type varchar(32),
    ld_fico_score varchar(16),
    ld_loan_type varchar(32),
    ld_notes varchar(1024),
    ld_loan_purpose_type varchar(32),
    ld_purchase_price varchar(32),
    ld_existing_home_value varchar(32),
    ld_loan_amount varchar(32),
    ld_property_use varchar(32),
    ld_subject_property_street varchar(128),
    ld_subject_property_city varchar(128),
    ld_subject_property_state varchar(128),
    ld_subject_property_postal_code varchar(128),
    ld_subject_property_type varchar(32),
    ld_borrower_first_name varchar(32),
    ld_borrower_last_name varchar(32),
    ld_borrower_home_phone varchar(32),
    ld_borrower_mobile_phone varchar(32),
    ld_borrower_email varchar(256),
    ld_borrower_birth_date varchar(32),
    ld_borrower_residence_street varchar(128),
    ld_borrower_residence_city varchar(128),
    ld_borrower_residence_state varchar(128),
    ld_borrower_residence_postal_code varchar(128),
    ld_coborrower_first_name varchar(32),
    ld_coborrower_middle_name varchar(32),
    ld_coborrower_last_name varchar(32),
    ld_coborrower_email varchar(256),
    ld_coborrower_birth_date varchar(32),
    ld_borrower_current_job_employer_name varchar(128),
    ld_borrower_current_job_position varchar(32),
    ld_borrower_years_on_job varchar(16),
    ld_borrower_gross_monthly_income varchar(32),
    etl_batch_id text
);

alter table history_octane.lead owner to deployer;

create index idx_lead__data_source_deleted_flag
    on history_octane.lead (data_source_deleted_flag);

create index idx_lead__data_source_updated_datetime
    on history_octane.lead (data_source_updated_datetime);

create index idx_lead__pid
    on history_octane.lead (ld_pid);

create index idx_lead__pid_version
    on history_octane.lead (ld_pid, ld_version);

create index idx_lead__etl_batch_id
    on history_octane.lead (etl_batch_id);

grant select on history_octane.lead to readonly;

grant insert, select, update on history_octane.lead to etl_loan;

create table history_octane.lender_user
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lu_pid bigint not null,
    lu_version integer,
    lu_branch_pid bigint,
    lu_account_owner boolean,
    lu_account_pid bigint,
    lu_create_date date,
    lu_first_name varchar(32),
    lu_last_name varchar(32),
    lu_middle_name varchar(32),
    lu_name_suffix varchar(32),
    lu_company_name varchar(128),
    lu_title varchar(128),
    lu_office_phone varchar(32),
    lu_office_phone_extension varchar(16),
    lu_email varchar(256),
    lu_fax varchar(32),
    lu_city varchar(128),
    lu_country varchar(128),
    lu_postal_code varchar(128),
    lu_state varchar(128),
    lu_street1 varchar(128),
    lu_street2 varchar(128),
    lu_office_phone_use_branch boolean,
    lu_fax_use_branch boolean,
    lu_address_use_branch boolean,
    lu_start_date date,
    lu_through_date date,
    lu_time_zone varchar(128),
    lu_unparsed_name varchar(128),
    lu_lender_user_status_type varchar(128),
    lu_username varchar(32),
    lu_nmls_loan_originator_id varchar(16),
    lu_fha_chums_id varchar(16),
    lu_va_agent_id varchar(32),
    lu_search_text varchar(256),
    lu_company_user_id varchar(32),
    lu_force_password_change boolean,
    lu_last_password_change_date timestamp,
    lu_challenge_question_type varchar(128),
    lu_allow_external_ip boolean,
    lu_total_workload_cap integer,
    lu_schedule_once_booking_page_id varchar(128),
    lu_performer_team_pid bigint,
    lu_esign_only boolean,
    lu_work_step_start_notices_enabled boolean,
    lu_smart_app_enabled boolean,
    lu_default_lead_source_pid bigint,
    lu_default_credit_bureau_type varchar(128),
    lu_originator_id varchar(32),
    lu_name_qualifier varchar(16),
    lu_training_mode boolean,
    lu_about_me varchar(2000),
    lu_lender_user_type varchar(128),
    lu_hire_date date,
    lu_mercury_client_group_pid bigint,
    lu_nickname varchar(32),
    lu_preferred_first_name varchar(32),
    lu_hub_directory boolean,
    lu_email_signature_title varchar(128),
    lu_termination_date date,
    lu_marketing_details_enabled boolean,
    lu_marketing_details_featured_review varchar(1024),
    etl_batch_id text
);

alter table history_octane.lender_user owner to deployer;

create index idx_lender_user__data_source_deleted_flag
    on history_octane.lender_user (data_source_deleted_flag);

create index idx_lender_user__data_source_updated_datetime
    on history_octane.lender_user (data_source_updated_datetime);

create index idx_lender_user__pid
    on history_octane.lender_user (lu_pid);

create index idx_lender_user__pid_version
    on history_octane.lender_user (lu_pid, lu_version);

create index idx_lender_user__etl_batch_id
    on history_octane.lender_user (etl_batch_id);

grant select on history_octane.lender_user to readonly;

grant insert, select, update on history_octane.lender_user to etl_loan;

create table history_octane.backfill_status
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    bfs_pid bigint not null,
    bfs_version integer,
    bfs_account_pid bigint,
    bfs_batch_id varchar(128),
    bfs_name varchar(128),
    bfs_lender_user_pid bigint,
    bfs_submit_datetime timestamp,
    bfs_completed_datetime timestamp,
    bfs_num_loans integer,
    bfs_backfill_status_type varchar(128),
    bfs_failure_info varchar(16000),
    bfs_raw_header_row varchar(16000),
    etl_batch_id text
);

alter table history_octane.backfill_status owner to deployer;

create index idx_backfill_status__data_source_deleted_flag
    on history_octane.backfill_status (data_source_deleted_flag);

create index idx_backfill_status__data_source_updated_datetime
    on history_octane.backfill_status (data_source_updated_datetime);

create index idx_backfill_status__pid
    on history_octane.backfill_status (bfs_pid);

create index idx_backfill_status__pid_version
    on history_octane.backfill_status (bfs_pid, bfs_version);

create index idx_backfill_status__etl_batch_id
    on history_octane.backfill_status (etl_batch_id);

grant select on history_octane.backfill_status to readonly;

grant insert, select, update on history_octane.backfill_status to etl_loan;

create table history_octane.backfill_loan_status
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    bfls_pid bigint not null,
    bfls_version integer,
    bfls_backfill_status_pid bigint,
    bfls_los_loan_id varchar(32),
    bfls_started_datetime timestamp,
    bfls_completed_datetime timestamp,
    bfls_backfill_status_type varchar(128),
    bfls_failure_info varchar(16000),
    bfls_raw_loan_row varchar(16000),
    bfls_warning_info varchar(16000),
    etl_batch_id text
);

alter table history_octane.backfill_loan_status owner to deployer;

create index idx_backfill_loan_status__data_source_deleted_flag
    on history_octane.backfill_loan_status (data_source_deleted_flag);

create index idx_backfill_loan_status__data_source_updated_datetime
    on history_octane.backfill_loan_status (data_source_updated_datetime);

create index idx_backfill_loan_status__pid
    on history_octane.backfill_loan_status (bfls_pid);

create index idx_backfill_loan_status__pid_version
    on history_octane.backfill_loan_status (bfls_pid, bfls_version);

create index idx_backfill_loan_status__etl_batch_id
    on history_octane.backfill_loan_status (etl_batch_id);

grant select on history_octane.backfill_loan_status to readonly;

grant insert, select, update on history_octane.backfill_loan_status to etl_loan;

create table history_octane.bid_pool_note
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    bpn_pid bigint not null,
    bpn_version integer,
    bpn_bid_pool_pid bigint,
    bpn_create_datetime timestamp,
    bpn_content varchar(16000),
    bpn_author_lender_user_pid bigint,
    bpn_author_unparsed_name varchar(128),
    etl_batch_id text
);

alter table history_octane.bid_pool_note owner to deployer;

create index idx_bid_pool_note__data_source_deleted_flag
    on history_octane.bid_pool_note (data_source_deleted_flag);

create index idx_bid_pool_note__data_source_updated_datetime
    on history_octane.bid_pool_note (data_source_updated_datetime);

create index idx_bid_pool_note__pid
    on history_octane.bid_pool_note (bpn_pid);

create index idx_bid_pool_note__pid_version
    on history_octane.bid_pool_note (bpn_pid, bpn_version);

create index idx_bid_pool_note__etl_batch_id
    on history_octane.bid_pool_note (etl_batch_id);

grant select on history_octane.bid_pool_note to readonly;

grant insert, select, update on history_octane.bid_pool_note to etl_loan;

create table history_octane.bid_pool_note_comment
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    bpnc_pid bigint not null,
    bpnc_version integer,
    bpnc_bid_pool_note_pid bigint,
    bpnc_create_datetime timestamp,
    bpnc_content varchar(16000),
    bpnc_author_lender_user_pid bigint,
    bpnc_author_unparsed_name varchar(128),
    etl_batch_id text
);

alter table history_octane.bid_pool_note_comment owner to deployer;

create index idx_bid_pool_note_comment__data_source_deleted_flag
    on history_octane.bid_pool_note_comment (data_source_deleted_flag);

create index idx_bid_pool_note_comment__data_source_updated_datetime
    on history_octane.bid_pool_note_comment (data_source_updated_datetime);

create index idx_bid_pool_note_comment__pid
    on history_octane.bid_pool_note_comment (bpnc_pid);

create index idx_bid_pool_note_comment__pid_version
    on history_octane.bid_pool_note_comment (bpnc_pid, bpnc_version);

create index idx_bid_pool_note_comment__etl_batch_id
    on history_octane.bid_pool_note_comment (etl_batch_id);

grant select on history_octane.bid_pool_note_comment to readonly;

grant insert, select, update on history_octane.bid_pool_note_comment to etl_loan;

create table history_octane.bid_pool_note_monitor
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    bpnm_pid bigint not null,
    bpnm_version integer,
    bpnm_bid_pool_note_pid bigint,
    bpnm_lender_user_pid bigint,
    etl_batch_id text
);

alter table history_octane.bid_pool_note_monitor owner to deployer;

create index idx_bid_pool_note_monitor__data_source_deleted_flag
    on history_octane.bid_pool_note_monitor (data_source_deleted_flag);

create index idx_bid_pool_note_monitor__data_source_updated_datetime
    on history_octane.bid_pool_note_monitor (data_source_updated_datetime);

create index idx_bid_pool_note_monitor__pid
    on history_octane.bid_pool_note_monitor (bpnm_pid);

create index idx_bid_pool_note_monitor__pid_version
    on history_octane.bid_pool_note_monitor (bpnm_pid, bpnm_version);

create index idx_bid_pool_note_monitor__etl_batch_id
    on history_octane.bid_pool_note_monitor (etl_batch_id);

grant select on history_octane.bid_pool_note_monitor to readonly;

grant insert, select, update on history_octane.bid_pool_note_monitor to etl_loan;

create table history_octane.branch_account_executive
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    brae_pid bigint not null,
    brae_version integer,
    brae_branch_pid bigint,
    brae_lender_user_pid bigint,
    brae_from_date date,
    etl_batch_id text
);

alter table history_octane.branch_account_executive owner to deployer;

create index idx_branch_account_executive__data_source_deleted_flag
    on history_octane.branch_account_executive (data_source_deleted_flag);

create index idx_branch_account_executive__data_source_updated_datetime
    on history_octane.branch_account_executive (data_source_updated_datetime);

create index idx_branch_account_executive__pid
    on history_octane.branch_account_executive (brae_pid);

create index idx_branch_account_executive__pid_version
    on history_octane.branch_account_executive (brae_pid, brae_version);

create index idx_branch_account_executive__etl_batch_id
    on history_octane.branch_account_executive (etl_batch_id);

grant select on history_octane.branch_account_executive to readonly;

grant insert, select, update on history_octane.branch_account_executive to etl_loan;

create table history_octane.deal_invoice_payment_method
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dipm_pid bigint not null,
    dipm_version integer,
    dipm_deal_invoice_pid bigint,
    dipm_payer_type varchar(128),
    dipm_configured_payer_type varchar(128),
    dipm_payer_unparsed_name varchar(128),
    dipm_payment_fulfill_type varchar(128),
    dipm_payment_transfer_los_loan_id_main bigint,
    dipm_payment_processing_company_type varchar(128),
    dipm_stripe_payment_pid bigint,
    dipm_stripe_payment_refund_pid bigint,
    dipm_requester_agent_type varchar(128),
    dipm_requester_lender_user_pid bigint,
    dipm_requester_unparsed_name varchar(128),
    dipm_payment_submission_type varchar(128),
    dipm_payment_completed_date date,
    etl_batch_id text
);

alter table history_octane.deal_invoice_payment_method owner to deployer;

create index idx_deal_invoice_payment_method__data_source_deleted_flag
    on history_octane.deal_invoice_payment_method (data_source_deleted_flag);

create index idx_deal_invoice_payment_method__data_source_updated_datetime
    on history_octane.deal_invoice_payment_method (data_source_updated_datetime);

create index idx_deal_invoice_payment_method__pid
    on history_octane.deal_invoice_payment_method (dipm_pid);

create index idx_deal_invoice_payment_method__pid_version
    on history_octane.deal_invoice_payment_method (dipm_pid, dipm_version);

create index idx_deal_invoice_payment_method__etl_batch_id
    on history_octane.deal_invoice_payment_method (etl_batch_id);

grant select on history_octane.deal_invoice_payment_method to readonly;

grant insert, select, update on history_octane.deal_invoice_payment_method to etl_loan;

create table history_octane.deal_key_roles
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dkrs_pid bigint not null,
    dkrs_version integer,
    dkrs_deal_pid bigint,
    dkrs_originator_lender_user_pid bigint,
    dkrs_originator_first_name varchar(32),
    dkrs_originator_last_name varchar(32),
    dkrs_originator_middle_name varchar(32),
    dkrs_originator_fmls_basic varchar(128),
    dkrs_originator_nmls_id varchar(16),
    dkrs_supplemental_originator_lender_user_pid bigint,
    dkrs_supplemental_originator_fmls varchar(128),
    dkrs_account_executive_lender_user_pid bigint,
    dkrs_account_executive_fmls varchar(128),
    dkrs_investor_conditions_lender_user_pid bigint,
    dkrs_investor_conditions_fmls varchar(128),
    dkrs_investor_stack_to_investor_lender_user_pid bigint,
    dkrs_investor_stack_to_investor_fmls varchar(128),
    dkrs_collateral_to_custodian_lender_user_pid bigint,
    dkrs_collateral_to_custodian_fmls varchar(128),
    dkrs_collateral_to_investor_lender_user_pid bigint,
    dkrs_collateral_to_investor_fmls varchar(128),
    dkrs_transaction_assistant_lender_user_pid bigint,
    dkrs_transaction_assistant_fmls varchar(128),
    dkrs_final_documents_to_investor_lender_user_pid bigint,
    dkrs_final_documents_to_investor_fmls varchar(128),
    dkrs_government_insurance_lender_user_pid bigint,
    dkrs_government_insurance_fmls varchar(128),
    dkrs_funder_lender_user_pid bigint,
    dkrs_funder_fmls varchar(128),
    dkrs_processor_lender_user_pid bigint,
    dkrs_processor_fmls varchar(128),
    dkrs_underwriter_lender_user_pid bigint,
    dkrs_underwriter_fmls varchar(128),
    dkrs_project_underwriter_lender_user_pid bigint,
    dkrs_project_underwriter_fmls varchar(128),
    dkrs_closing_doc_specialist_lender_user_pid bigint,
    dkrs_closing_doc_specialist_fmls varchar(128),
    dkrs_wholesale_client_advocate_lender_user_pid bigint,
    dkrs_wholesale_client_advocate_fmls varchar(128),
    dkrs_closing_scheduler_lender_user_pid bigint,
    dkrs_closing_scheduler_fmls varchar(128),
    dkrs_collateral_underwriter_lender_user_pid bigint,
    dkrs_collateral_underwriter_fmls varchar(128),
    dkrs_correspondent_client_advocate_lender_user_pid bigint,
    dkrs_correspondent_client_advocate_fmls varchar(128),
    dkrs_flood_insurance_specialist_lender_user_pid bigint,
    dkrs_flood_insurance_specialist_fmls varchar(128),
    dkrs_hoa_specialist_lender_user_pid bigint,
    dkrs_hoa_specialist_fmls varchar(128),
    dkrs_hoi_specialist_lender_user_pid bigint,
    dkrs_hoi_specialist_fmls varchar(128),
    dkrs_ho6_specialist_lender_user_pid bigint,
    dkrs_ho6_specialist_fmls varchar(128),
    dkrs_hud_va_lender_officer_lender_user_pid bigint,
    dkrs_hud_va_lender_officer_fmls varchar(128),
    dkrs_loan_officer_assistant_lender_user_pid bigint,
    dkrs_loan_officer_assistant_fmls varchar(128),
    dkrs_loan_payoff_specialist_lender_user_pid bigint,
    dkrs_loan_payoff_specialist_fmls varchar(128),
    dkrs_subordination_specialist_lender_user_pid bigint,
    dkrs_subordination_specialist_fmls varchar(128),
    dkrs_title_specialist_lender_user_pid bigint,
    dkrs_title_specialist_fmls varchar(128),
    dkrs_underwriting_manager_lender_user_pid bigint,
    dkrs_underwriting_manager_fmls varchar(128),
    dkrs_va_specialist_lender_user_pid bigint,
    dkrs_va_specialist_fmls varchar(128),
    dkrs_verbal_voe_specialist_lender_user_pid bigint,
    dkrs_verbal_voe_specialist_fmls varchar(128),
    dkrs_voe_specialist_lender_user_pid bigint,
    dkrs_voe_specialist_fmls varchar(128),
    dkrs_wire_specialist_lender_user_pid bigint,
    dkrs_wire_specialist_fmls varchar(128),
    dkrs_internal_construction_manager_lender_user_pid bigint,
    dkrs_internal_construction_manager_fmls varchar(128),
    dkrs_review_requester_1_lender_user_pid bigint,
    dkrs_review_requester_1_fmls varchar(128),
    dkrs_review_requester_2_lender_user_pid bigint,
    dkrs_review_requester_2_fmls varchar(128),
    dkrs_review_requester_3_lender_user_pid bigint,
    dkrs_review_requester_3_fmls varchar(128),
    dkrs_review_requester_4_lender_user_pid bigint,
    dkrs_review_requester_4_fmls varchar(128),
    dkrs_review_requester_5_lender_user_pid bigint,
    dkrs_review_requester_5_fmls varchar(128),
    etl_batch_id text
);

alter table history_octane.deal_key_roles owner to deployer;

create index idx_deal_key_roles__data_source_deleted_flag
    on history_octane.deal_key_roles (data_source_deleted_flag);

create index idx_deal_key_roles__data_source_updated_datetime
    on history_octane.deal_key_roles (data_source_updated_datetime);

create index idx_deal_key_roles__pid
    on history_octane.deal_key_roles (dkrs_pid);

create index idx_deal_key_roles__pid_version
    on history_octane.deal_key_roles (dkrs_pid, dkrs_version);

create index fk_deal_key_roles_35
    on history_octane.deal_key_roles (dkrs_internal_construction_manager_lender_user_pid);

create index fk_deal_key_roles_36
    on history_octane.deal_key_roles (dkrs_review_requester_1_lender_user_pid);

create index fk_deal_key_roles_37
    on history_octane.deal_key_roles (dkrs_review_requester_2_lender_user_pid);

create index fk_deal_key_roles_38
    on history_octane.deal_key_roles (dkrs_review_requester_3_lender_user_pid);

create index fk_deal_key_roles_39
    on history_octane.deal_key_roles (dkrs_review_requester_4_lender_user_pid);

create index fk_deal_key_roles_40
    on history_octane.deal_key_roles (dkrs_review_requester_5_lender_user_pid);

create index idx_deal_key_roles__etl_batch_id
    on history_octane.deal_key_roles (etl_batch_id);

grant select on history_octane.deal_key_roles to readonly;

grant insert, select, update on history_octane.deal_key_roles to etl_loan;

create table history_octane.deal_lender_user
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dlu_pid bigint not null,
    dlu_version integer,
    dlu_deal_pid bigint,
    dlu_lender_user_pid bigint,
    dlu_role_pid bigint,
    dlu_loan_access_type varchar(128),
    dlu_legacy_role_assignment_type varchar(128),
    dlu_legacy_role_assignment_date date,
    dlu_synthetic_unique varchar(32),
    etl_batch_id text
);

alter table history_octane.deal_lender_user owner to deployer;

create index idx_deal_lender_user__data_source_deleted_flag
    on history_octane.deal_lender_user (data_source_deleted_flag);

create index idx_deal_lender_user__data_source_updated_datetime
    on history_octane.deal_lender_user (data_source_updated_datetime);

create index idx_deal_lender_user__pid
    on history_octane.deal_lender_user (dlu_pid);

create index idx_deal_lender_user__pid_version
    on history_octane.deal_lender_user (dlu_pid, dlu_version);

create index idx_deal_lender_user__etl_batch_id
    on history_octane.deal_lender_user (etl_batch_id);

grant select on history_octane.deal_lender_user to readonly;

grant insert, select, update on history_octane.deal_lender_user to etl_loan;

create table history_octane.deal_performer_team_user
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dptu_pid bigint not null,
    dptu_version integer,
    dptu_deal_pid bigint,
    dptu_performer_team_pid bigint,
    dptu_user_pid bigint,
    etl_batch_id text
);

alter table history_octane.deal_performer_team_user owner to deployer;

create index idx_deal_performer_team_user__data_source_deleted_flag
    on history_octane.deal_performer_team_user (data_source_deleted_flag);

create index idx_deal_performer_team_user__data_source_updated_datetime
    on history_octane.deal_performer_team_user (data_source_updated_datetime);

create index idx_deal_performer_team_user__pid
    on history_octane.deal_performer_team_user (dptu_pid);

create index idx_deal_performer_team_user__pid_version
    on history_octane.deal_performer_team_user (dptu_pid, dptu_version);

create index idx_deal_performer_team_user__etl_batch_id
    on history_octane.deal_performer_team_user (etl_batch_id);

grant select on history_octane.deal_performer_team_user to readonly;

grant insert, select, update on history_octane.deal_performer_team_user to etl_loan;

create table history_octane.dw_export_request
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dwer_pid bigint not null,
    dwer_version integer,
    dwer_account_pid bigint,
    dwer_create_datetime timestamp,
    dwer_start_datetime timestamp,
    dwer_end_datetime timestamp,
    dwer_request_status_type varchar(128),
    dwer_request_status_messages text,
    dwer_requester_lender_user_pid bigint,
    dwer_requester_unparsed_name varchar(128),
    dwer_exported_deal_count integer,
    dwer_export_id varchar(16),
    etl_batch_id text
);

alter table history_octane.dw_export_request owner to deployer;

create index idx_dw_export_request__data_source_deleted_flag
    on history_octane.dw_export_request (data_source_deleted_flag);

create index idx_dw_export_request__data_source_updated_datetime
    on history_octane.dw_export_request (data_source_updated_datetime);

create index idx_dw_export_request__pid
    on history_octane.dw_export_request (dwer_pid);

create index idx_dw_export_request__pid_version
    on history_octane.dw_export_request (dwer_pid, dwer_version);

create index idx_dw_export_request__etl_batch_id
    on history_octane.dw_export_request (etl_batch_id);

grant select on history_octane.dw_export_request to readonly;

grant insert, select, update on history_octane.dw_export_request to etl_loan;

create table history_octane.lender_settings
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lss_pid bigint not null,
    lss_version integer,
    lss_account_pid bigint,
    lss_company_time_zone_type varchar(128),
    lss_va_lender_id varchar(16),
    lss_usda_lender_id varchar(16),
    lss_fha_lender_id varchar(16),
    lss_fha_home_office_branch_pid bigint,
    lss_fha_sponsor_id varchar(16),
    lss_fha_sponsor_company_name varchar(32),
    lss_fha_sponsor_address_street1 varchar(128),
    lss_fha_sponsor_address_street2 varchar(128),
    lss_fha_sponsor_address_city varchar(128),
    lss_fha_sponsor_address_state varchar(128),
    lss_fha_sponsor_address_postal_code varchar(128),
    lss_fha_sponsor_address_country varchar(128),
    lss_fha_non_supervised_mortgagee boolean,
    lss_fnma_seller_id varchar(16),
    lss_fre_seller_id varchar(16),
    lss_lp_submission_type varchar(128),
    lss_lender_user_email_from varchar(256),
    lss_hmda_contact_pid bigint,
    lss_hmda_legal_entity_id varchar(20),
    lss_hmda_respondent_id varchar(32),
    lss_hmda_agency_id_type varchar(128),
    lss_prequalification_program boolean,
    lss_preapproval_program boolean,
    lss_pest_inspector_company_name varchar(128),
    lss_pest_inspector_phone varchar(32),
    lss_pest_inspector_website_url varchar(256),
    lss_pest_inspector_address_street1 varchar(128),
    lss_pest_inspector_address_street2 varchar(128),
    lss_pest_inspector_address_city varchar(128),
    lss_pest_inspector_address_state varchar(128),
    lss_pest_inspector_address_postal_code varchar(128),
    lss_take_application_hours varchar(128),
    lss_originator_title varchar(128),
    lss_default_credit_bureau_type varchar(128),
    lss_sap_minimum_decision_credit_score integer,
    lss_default_standalone_lock_term_setting_pid bigint,
    lss_default_combo_lock_term_setting_pid bigint,
    lss_preferred_aus_type varchar(128),
    lss_borrower_quote_filter_pivot_type varchar(128),
    lss_borrower_quote_filter_pivot_lower_count integer,
    lss_borrower_quote_filter_pivot_higher_count integer,
    lss_fha_home_office_location_pid bigint,
    etl_batch_id text,
    lss_equifax_submitting_party_name varchar(256),
    lss_factual_data_submitting_party_name varchar(256),
    lss_factual_data_submitting_party_id varchar(256),
    lss_meridian_link_submitting_party_id varchar(256)
);

alter table history_octane.lender_settings owner to deployer;

create index idx_lender_settings__data_source_deleted_flag
    on history_octane.lender_settings (data_source_deleted_flag);

create index idx_lender_settings__data_source_updated_datetime
    on history_octane.lender_settings (data_source_updated_datetime);

create index idx_lender_settings__pid
    on history_octane.lender_settings (lss_pid);

create index idx_lender_settings__pid_version
    on history_octane.lender_settings (lss_pid, lss_version);

create index fk_lender_settings_6
    on history_octane.lender_settings (lss_fha_home_office_location_pid);

create index idx_lender_settings__etl_batch_id
    on history_octane.lender_settings (etl_batch_id);

grant select on history_octane.lender_settings to readonly;

grant insert, select, update on history_octane.lender_settings to etl_loan;

create table history_octane.lender_user_allowed_ip
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    luip_pid bigint not null,
    luip_version integer,
    luip_lender_user_pid bigint,
    luip_status varchar(128),
    luip_ip_address varchar(32),
    luip_request_id varchar(128),
    luip_request_expiration_datetime timestamp,
    luip_last_used_datetime timestamp,
    luip_first_used_datetime timestamp,
    etl_batch_id text
);

alter table history_octane.lender_user_allowed_ip owner to deployer;

create index idx_lender_user_allowed_ip__data_source_deleted_flag
    on history_octane.lender_user_allowed_ip (data_source_deleted_flag);

create index idx_lender_user_allowed_ip__data_source_updated_datetime
    on history_octane.lender_user_allowed_ip (data_source_updated_datetime);

create index idx_lender_user_allowed_ip__pid
    on history_octane.lender_user_allowed_ip (luip_pid);

create index idx_lender_user_allowed_ip__pid_version
    on history_octane.lender_user_allowed_ip (luip_pid, luip_version);

create index idx_lender_user_allowed_ip__etl_batch_id
    on history_octane.lender_user_allowed_ip (etl_batch_id);

grant select on history_octane.lender_user_allowed_ip to readonly;

grant insert, select, update on history_octane.lender_user_allowed_ip to etl_loan;

create table history_octane.lender_user_deal_visit
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ludv_pid bigint not null,
    ludv_version integer,
    ludv_deal_pid bigint,
    ludv_lender_user_pid bigint,
    ludv_visited_datetime timestamp,
    etl_batch_id text
);

alter table history_octane.lender_user_deal_visit owner to deployer;

create index idx_lender_user_deal_visit__data_source_deleted_flag
    on history_octane.lender_user_deal_visit (data_source_deleted_flag);

create index idx_lender_user_deal_visit__data_source_updated_datetime
    on history_octane.lender_user_deal_visit (data_source_updated_datetime);

create index idx_lender_user_deal_visit__pid
    on history_octane.lender_user_deal_visit (ludv_pid);

create index idx_lender_user_deal_visit__pid_version
    on history_octane.lender_user_deal_visit (ludv_pid, ludv_version);

create index idx_lender_user_deal_visit__etl_batch_id
    on history_octane.lender_user_deal_visit (etl_batch_id);

grant select on history_octane.lender_user_deal_visit to readonly;

grant insert, select, update on history_octane.lender_user_deal_visit to etl_loan;

create table history_octane.lender_user_lead_source
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lulds_pid bigint not null,
    lulds_version integer,
    lulds_lender_user_pid bigint,
    lulds_lead_source_pid bigint,
    etl_batch_id text
);

alter table history_octane.lender_user_lead_source owner to deployer;

create index idx_lender_user_lead_source__data_source_deleted_flag
    on history_octane.lender_user_lead_source (data_source_deleted_flag);

create index idx_lender_user_lead_source__data_source_updated_datetime
    on history_octane.lender_user_lead_source (data_source_updated_datetime);

create index idx_lender_user_lead_source__pid
    on history_octane.lender_user_lead_source (lulds_pid);

create index idx_lender_user_lead_source__pid_version
    on history_octane.lender_user_lead_source (lulds_pid, lulds_version);

create index idx_lender_user_lead_source__etl_batch_id
    on history_octane.lender_user_lead_source (etl_batch_id);

grant select on history_octane.lender_user_lead_source to readonly;

grant insert, select, update on history_octane.lender_user_lead_source to etl_loan;

create table history_octane.lender_user_license
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    luml_pid bigint not null,
    luml_version integer,
    luml_lender_user_pid bigint,
    luml_license_type varchar(128),
    luml_state_type varchar(128),
    luml_license_number varchar(128),
    luml_from_date date,
    luml_through_date date,
    luml_note varchar(256),
    etl_batch_id text
);

alter table history_octane.lender_user_license owner to deployer;

create index idx_lender_user_license__data_source_deleted_flag
    on history_octane.lender_user_license (data_source_deleted_flag);

create index idx_lender_user_license__data_source_updated_datetime
    on history_octane.lender_user_license (data_source_updated_datetime);

create index idx_lender_user_license__pid
    on history_octane.lender_user_license (luml_pid);

create index idx_lender_user_license__pid_version
    on history_octane.lender_user_license (luml_pid, luml_version);

create index idx_lender_user_license__etl_batch_id
    on history_octane.lender_user_license (etl_batch_id);

grant select on history_octane.lender_user_license to readonly;

grant insert, select, update on history_octane.lender_user_license to etl_loan;

create table history_octane.lender_user_notice
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lun_pid bigint not null,
    lun_version integer,
    lun_lender_user_pid bigint,
    lun_deal_pid bigint,
    lun_create_datetime timestamp,
    lun_lender_user_notice_type varchar(128),
    lun_detail varchar(16000),
    lun_source_unparsed_name varchar(128),
    etl_batch_id text
);

alter table history_octane.lender_user_notice owner to deployer;

create index idx_lender_user_notice__data_source_deleted_flag
    on history_octane.lender_user_notice (data_source_deleted_flag);

create index idx_lender_user_notice__data_source_updated_datetime
    on history_octane.lender_user_notice (data_source_updated_datetime);

create index idx_lender_user_notice__pid
    on history_octane.lender_user_notice (lun_pid);

create index idx_lender_user_notice__pid_version
    on history_octane.lender_user_notice (lun_pid, lun_version);

create index idx_lender_user_notice__etl_batch_id
    on history_octane.lender_user_notice (etl_batch_id);

grant select on history_octane.lender_user_notice to readonly;

grant insert, select, update on history_octane.lender_user_notice to etl_loan;

create table history_octane.lender_user_role
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lur_pid bigint not null,
    lur_version integer,
    lur_lender_user_pid bigint,
    lur_role_pid bigint,
    lur_criteria_pid bigint,
    lur_workload_cap integer,
    lur_daily_cap integer,
    lur_assignment_gap_minutes integer,
    lur_secondary_role boolean,
    lur_subscribe_smart_messages boolean,
    lur_for_training_only boolean,
    lur_notes varchar(16000),
    lur_queue_type varchar(128),
    lur_queue_datetime timestamp,
    etl_batch_id text
);

alter table history_octane.lender_user_role owner to deployer;

create index idx_lender_user_role__data_source_deleted_flag
    on history_octane.lender_user_role (data_source_deleted_flag);

create index idx_lender_user_role__data_source_updated_datetime
    on history_octane.lender_user_role (data_source_updated_datetime);

create index idx_lender_user_role__pid
    on history_octane.lender_user_role (lur_pid);

create index idx_lender_user_role__pid_version
    on history_octane.lender_user_role (lur_pid, lur_version);

create index idx_lender_user_role__etl_batch_id
    on history_octane.lender_user_role (etl_batch_id);

grant select on history_octane.lender_user_role to readonly;

grant insert, select, update on history_octane.lender_user_role to etl_loan;

create table history_octane.exclusive_assignment
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ea_pid bigint not null,
    ea_version integer,
    ea_lender_user_role_pid bigint,
    ea_criteria_pid bigint,
    ea_priority integer,
    ea_name varchar(128),
    etl_batch_id text
);

alter table history_octane.exclusive_assignment owner to deployer;

create index idx_exclusive_assignment__data_source_deleted_flag
    on history_octane.exclusive_assignment (data_source_deleted_flag);

create index idx_exclusive_assignment__data_source_updated_datetime
    on history_octane.exclusive_assignment (data_source_updated_datetime);

create index idx_exclusive_assignment__pid
    on history_octane.exclusive_assignment (ea_pid);

create index idx_exclusive_assignment__pid_version
    on history_octane.exclusive_assignment (ea_pid, ea_version);

create index idx_exclusive_assignment__etl_batch_id
    on history_octane.exclusive_assignment (etl_batch_id);

grant select on history_octane.exclusive_assignment to readonly;

grant insert, select, update on history_octane.exclusive_assignment to etl_loan;

create table history_octane.lender_user_role_addendum
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lura_pid bigint not null,
    lura_version integer,
    lura_lender_user_pid bigint,
    lura_lender_user_role_pid bigint,
    lura_role_pid bigint,
    etl_batch_id text
);

alter table history_octane.lender_user_role_addendum owner to deployer;

create index idx_lender_user_role_addendum__data_source_deleted_flag
    on history_octane.lender_user_role_addendum (data_source_deleted_flag);

create index idx_lender_user_role_addendum__data_source_updated_datetime
    on history_octane.lender_user_role_addendum (data_source_updated_datetime);

create index idx_lender_user_role_addendum__pid
    on history_octane.lender_user_role_addendum (lura_pid);

create index idx_lender_user_role_addendum__pid_version
    on history_octane.lender_user_role_addendum (lura_pid, lura_version);

create index idx_lender_user_role_addendum__etl_batch_id
    on history_octane.lender_user_role_addendum (etl_batch_id);

grant select on history_octane.lender_user_role_addendum to readonly;

grant insert, select, update on history_octane.lender_user_role_addendum to etl_loan;

create table history_octane.lender_user_sign_on
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    luso_pid bigint not null,
    luso_version integer,
    luso_lender_user_pid bigint,
    luso_last_sign_on_datetime timestamp,
    etl_batch_id text
);

alter table history_octane.lender_user_sign_on owner to deployer;

create index idx_lender_user_sign_on__data_source_deleted_flag
    on history_octane.lender_user_sign_on (data_source_deleted_flag);

create index idx_lender_user_sign_on__data_source_updated_datetime
    on history_octane.lender_user_sign_on (data_source_updated_datetime);

create index idx_lender_user_sign_on__pid
    on history_octane.lender_user_sign_on (luso_pid);

create index idx_lender_user_sign_on__pid_version
    on history_octane.lender_user_sign_on (luso_pid, luso_version);

create index idx_lender_user_sign_on__etl_batch_id
    on history_octane.lender_user_sign_on (etl_batch_id);

grant select on history_octane.lender_user_sign_on to readonly;

grant insert, select, update on history_octane.lender_user_sign_on to etl_loan;

create table history_octane.lender_user_unavailable
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    luu_pid bigint not null,
    luu_version integer,
    luu_lender_user_pid bigint,
    luu_from_date date,
    luu_through_date date,
    etl_batch_id text
);

alter table history_octane.lender_user_unavailable owner to deployer;

create index idx_lender_user_unavailable__data_source_deleted_flag
    on history_octane.lender_user_unavailable (data_source_deleted_flag);

create index idx_lender_user_unavailable__data_source_updated_datetime
    on history_octane.lender_user_unavailable (data_source_updated_datetime);

create index idx_lender_user_unavailable__pid
    on history_octane.lender_user_unavailable (luu_pid);

create index idx_lender_user_unavailable__pid_version
    on history_octane.lender_user_unavailable (luu_pid, luu_version);

create index idx_lender_user_unavailable__etl_batch_id
    on history_octane.lender_user_unavailable (etl_batch_id);

grant select on history_octane.lender_user_unavailable to readonly;

grant insert, select, update on history_octane.lender_user_unavailable to etl_loan;

create table history_octane.mercury_network_status_request
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    mnsr_pid bigint not null,
    mnsr_version integer,
    mnsr_deal_pid bigint,
    mnsr_mercury_network_order_id varchar(128),
    mnsr_mercury_network_status_type varchar(128),
    mnsr_status_message varchar(16000),
    etl_batch_id text
);

alter table history_octane.mercury_network_status_request owner to deployer;

create index idx_mercury_network_status_request__data_source_deleted_flag
    on history_octane.mercury_network_status_request (data_source_deleted_flag);

create index idx_ce7e4fd55e05f73cc655286b4e43f702
    on history_octane.mercury_network_status_request (data_source_updated_datetime);

create index idx_mercury_network_status_request__pid
    on history_octane.mercury_network_status_request (mnsr_pid);

create index idx_mercury_network_status_request__pid_version
    on history_octane.mercury_network_status_request (mnsr_pid, mnsr_version);

create index idx_mercury_network_status_request__etl_batch_id
    on history_octane.mercury_network_status_request (etl_batch_id);

grant select on history_octane.mercury_network_status_request to readonly;

grant insert, select, update on history_octane.mercury_network_status_request to etl_loan;

create table history_octane.performer_assignment
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    pa_pid bigint not null,
    pa_version integer,
    pa_role_pid bigint,
    pa_lender_user_pid bigint,
    pa_last_assign_datetime timestamp,
    etl_batch_id text
);

alter table history_octane.performer_assignment owner to deployer;

create index idx_performer_assignment__data_source_deleted_flag
    on history_octane.performer_assignment (data_source_deleted_flag);

create index idx_performer_assignment__data_source_updated_datetime
    on history_octane.performer_assignment (data_source_updated_datetime);

create index idx_performer_assignment__pid
    on history_octane.performer_assignment (pa_pid);

create index idx_performer_assignment__pid_version
    on history_octane.performer_assignment (pa_pid, pa_version);

create index idx_performer_assignment__etl_batch_id
    on history_octane.performer_assignment (etl_batch_id);

grant select on history_octane.performer_assignment to readonly;

grant insert, select, update on history_octane.performer_assignment to etl_loan;

create table history_octane.product
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    p_pid bigint not null,
    p_version integer,
    p_account_pid bigint,
    p_investor_pid bigint,
    p_fund_source_type varchar(128),
    p_investor_product_id varchar(32),
    p_investor_product_name varchar(128),
    p_from_date date,
    p_through_date date,
    p_fnm_product_name varchar(15),
    p_lock_auto_confirm boolean,
    p_description varchar(1024),
    p_product_side_type varchar(128),
    p_parent_product_pid bigint,
    etl_batch_id text
);

alter table history_octane.product owner to deployer;

create index idx_product__data_source_deleted_flag
    on history_octane.product (data_source_deleted_flag);

create index idx_product__data_source_updated_datetime
    on history_octane.product (data_source_updated_datetime);

create index idx_product__pid
    on history_octane.product (p_pid);

create index idx_product__pid_version
    on history_octane.product (p_pid, p_version);

create index idx_product__etl_batch_id
    on history_octane.product (etl_batch_id);

grant select on history_octane.product to readonly;

grant insert, select, update on history_octane.product to etl_loan;

create table history_octane.offering_product
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ofp_pid bigint not null,
    ofp_version integer,
    ofp_offering_pid bigint,
    ofp_product_pid bigint,
    ofp_from_date date,
    ofp_through_date date,
    ofp_price_adjustment_percent numeric(11,9),
    etl_batch_id text
);

alter table history_octane.offering_product owner to deployer;

create index idx_offering_product__data_source_deleted_flag
    on history_octane.offering_product (data_source_deleted_flag);

create index idx_offering_product__data_source_updated_datetime
    on history_octane.offering_product (data_source_updated_datetime);

create index idx_offering_product__pid
    on history_octane.offering_product (ofp_pid);

create index idx_offering_product__pid_version
    on history_octane.offering_product (ofp_pid, ofp_version);

create index idx_offering_product__etl_batch_id
    on history_octane.offering_product (etl_batch_id);

grant select on history_octane.offering_product to readonly;

grant insert, select, update on history_octane.offering_product to etl_loan;

create table history_octane.product_add_on
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    pao_pid bigint not null,
    pao_version integer,
    pao_product_pid bigint,
    pao_from_date date,
    etl_batch_id text
);

alter table history_octane.product_add_on owner to deployer;

create index idx_product_add_on__data_source_deleted_flag
    on history_octane.product_add_on (data_source_deleted_flag);

create index idx_product_add_on__data_source_updated_datetime
    on history_octane.product_add_on (data_source_updated_datetime);

create index idx_product_add_on__pid
    on history_octane.product_add_on (pao_pid);

create index idx_product_add_on__pid_version
    on history_octane.product_add_on (pao_pid, pao_version);

create index idx_product_add_on__etl_batch_id
    on history_octane.product_add_on (etl_batch_id);

grant select on history_octane.product_add_on to readonly;

grant insert, select, update on history_octane.product_add_on to etl_loan;

create table history_octane.product_add_on_rule
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    par_pid bigint not null,
    par_version integer,
    par_product_add_on_pid bigint,
    par_summary varchar(16000),
    par_note varchar(256),
    par_rate_adjustment_percent numeric(11,9),
    par_investor_price_adjustment_percent numeric(11,9),
    par_account_price_adjustment_percent numeric(11,9),
    par_arm_margin_adjustment_percent numeric(11,9),
    par_loan_purpose_input_type varchar(128),
    par_property_usage_input_type varchar(128),
    par_doc_level_input_type varchar(128),
    par_property_category_input_type varchar(128),
    par_first_time_homebuyer_input_type varchar(128),
    par_self_employed_input_type varchar(128),
    par_amortization_input_type varchar(128),
    par_non_resident_alien_input_type varchar(128),
    par_hazardous_lava_zone_input_type varchar(128),
    par_property_rights_input_type varchar(128),
    par_property_acres_input_type varchar(128),
    par_arms_length_input_type varchar(128),
    par_state_input_type varchar(128),
    par_escrow_waiver_input_type varchar(128),
    par_subordinate_financing_input_type varchar(128),
    par_minimum_credit_score_input boolean,
    par_maximum_credit_score_input boolean,
    par_minimum_loan_amount_input boolean,
    par_maximum_loan_amount_input boolean,
    par_minimum_ltv_ratio_input boolean,
    par_maximum_ltv_ratio_input boolean,
    par_minimum_cltv_ratio_input boolean,
    par_maximum_cltv_ratio_input boolean,
    par_maximum_housing_ratio_input boolean,
    par_minimum_debt_ratio_input boolean,
    par_maximum_debt_ratio_input boolean,
    par_loan_purpose_purchase boolean,
    par_loan_purpose_change_in_rate_term boolean,
    par_loan_purpose_cash_out boolean,
    par_property_usage_primary_residence boolean,
    par_property_usage_second_home boolean,
    par_property_usage_investment boolean,
    par_doc_level_full boolean,
    par_doc_level_lite boolean,
    par_doc_level_limited boolean,
    par_doc_level_streamline_refinance boolean,
    par_property_category_detached boolean,
    par_property_category_attached boolean,
    par_property_category_condo_hotel boolean,
    par_property_category_duplex boolean,
    par_property_category_triplex boolean,
    par_property_category_fourplex boolean,
    par_property_category_commercial_residential boolean,
    par_property_category_condo_1_to_4_story boolean,
    par_property_category_condo_5_over_story boolean,
    par_property_category_manufactured_multi_wide boolean,
    par_property_category_manufactured_single_wide boolean,
    par_property_category_townhouse_rowhouse boolean,
    par_property_category_land_and_lots boolean,
    par_property_category_farm boolean,
    par_first_time_homebuyer boolean,
    par_not_first_time_homebuyer boolean,
    par_self_employed boolean,
    par_not_self_employed boolean,
    par_amortization_fully boolean,
    par_amortization_interest_only boolean,
    par_non_resident_alien boolean,
    par_not_non_resident_alien boolean,
    par_arms_length boolean,
    par_not_arms_length boolean,
    par_hazardous_lava_zone boolean,
    par_not_hazardous_lava_zone boolean,
    par_property_rights_fee_simple boolean,
    par_property_rights_leasehold boolean,
    par_under_10_acres boolean,
    par_not_under_10_acres boolean,
    par_escrow_waiver boolean,
    par_not_escrow_waiver boolean,
    par_subordinate_financing boolean,
    par_not_subordinate_financing boolean,
    par_minimum_credit_score integer,
    par_maximum_credit_score integer,
    par_minimum_loan_amount numeric(15),
    par_maximum_loan_amount numeric(15),
    par_minimum_ltv_ratio_percent numeric(11,9),
    par_maximum_ltv_ratio_percent numeric(11,9),
    par_minimum_cltv_ratio_percent numeric(11,9),
    par_maximum_cltv_ratio_percent numeric(11,9),
    par_maximum_housing_ratio_percent numeric(11,9),
    par_minimum_debt_ratio_percent numeric(11,9),
    par_maximum_debt_ratio_percent numeric(11,9),
    par_state_al boolean,
    par_state_ak boolean,
    par_state_az boolean,
    par_state_ar boolean,
    par_state_ca boolean,
    par_state_co boolean,
    par_state_ct boolean,
    par_state_de boolean,
    par_state_dc boolean,
    par_state_fl boolean,
    par_state_ga boolean,
    par_state_gu boolean,
    par_state_hi boolean,
    par_state_id boolean,
    par_state_il boolean,
    par_state_in boolean,
    par_state_ia boolean,
    par_state_ks boolean,
    par_state_ky boolean,
    par_state_la boolean,
    par_state_me boolean,
    par_state_md boolean,
    par_state_ma boolean,
    par_state_mi boolean,
    par_state_mn boolean,
    par_state_ms boolean,
    par_state_mo boolean,
    par_state_mt boolean,
    par_state_ne boolean,
    par_state_nv boolean,
    par_state_nh boolean,
    par_state_nj boolean,
    par_state_nm boolean,
    par_state_ny boolean,
    par_state_nc boolean,
    par_state_nd boolean,
    par_state_oh boolean,
    par_state_ok boolean,
    par_state_or boolean,
    par_state_pa boolean,
    par_state_pr boolean,
    par_state_ri boolean,
    par_state_sc boolean,
    par_state_sd boolean,
    par_state_tn boolean,
    par_state_tx boolean,
    par_state_ut boolean,
    par_state_vt boolean,
    par_state_va boolean,
    par_state_vi boolean,
    par_state_wa boolean,
    par_state_wv boolean,
    par_state_wi boolean,
    par_state_wy boolean,
    etl_batch_id text
);

alter table history_octane.product_add_on_rule owner to deployer;

create index idx_product_add_on_rule__data_source_deleted_flag
    on history_octane.product_add_on_rule (data_source_deleted_flag);

create index idx_product_add_on_rule__data_source_updated_datetime
    on history_octane.product_add_on_rule (data_source_updated_datetime);

create index idx_product_add_on_rule__pid
    on history_octane.product_add_on_rule (par_pid);

create index idx_product_add_on_rule__pid_version
    on history_octane.product_add_on_rule (par_pid, par_version);

create index idx_product_add_on_rule__etl_batch_id
    on history_octane.product_add_on_rule (etl_batch_id);

grant select on history_octane.product_add_on_rule to readonly;

grant insert, select, update on history_octane.product_add_on_rule to etl_loan;

create table history_octane.product_branch
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    pbr_pid bigint not null,
    pbr_version integer,
    pbr_product_pid bigint,
    pbr_branch_pid bigint,
    pbr_from_date date,
    pbr_through_date date,
    pbr_price_adjustment_percent numeric(11,9),
    etl_batch_id text
);

alter table history_octane.product_branch owner to deployer;

create index idx_product_branch__data_source_deleted_flag
    on history_octane.product_branch (data_source_deleted_flag);

create index idx_product_branch__data_source_updated_datetime
    on history_octane.product_branch (data_source_updated_datetime);

create index idx_product_branch__pid
    on history_octane.product_branch (pbr_pid);

create index idx_product_branch__pid_version
    on history_octane.product_branch (pbr_pid, pbr_version);

create index idx_product_branch__etl_batch_id
    on history_octane.product_branch (etl_batch_id);

grant select on history_octane.product_branch to readonly;

grant insert, select, update on history_octane.product_branch to etl_loan;

create table history_octane.product_deal_check_exclusion
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    pdce_pid bigint not null,
    pdce_version integer,
    pdce_product_pid bigint,
    pdce_deal_check_type varchar(128),
    etl_batch_id text
);

alter table history_octane.product_deal_check_exclusion owner to deployer;

create index idx_product_deal_check_exclusion__data_source_deleted_flag
    on history_octane.product_deal_check_exclusion (data_source_deleted_flag);

create index idx_product_deal_check_exclusion__data_source_updated_datetime
    on history_octane.product_deal_check_exclusion (data_source_updated_datetime);

create index idx_product_deal_check_exclusion__pid
    on history_octane.product_deal_check_exclusion (pdce_pid);

create index idx_product_deal_check_exclusion__pid_version
    on history_octane.product_deal_check_exclusion (pdce_pid, pdce_version);

create index idx_product_deal_check_exclusion__etl_batch_id
    on history_octane.product_deal_check_exclusion (etl_batch_id);

grant select on history_octane.product_deal_check_exclusion to readonly;

grant insert, select, update on history_octane.product_deal_check_exclusion to etl_loan;

create table history_octane.product_eligibility
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    pe_pid bigint not null,
    pe_version integer,
    pe_product_pid bigint,
    pe_from_date date,
    etl_batch_id text
);

alter table history_octane.product_eligibility owner to deployer;

create index idx_product_eligibility__data_source_deleted_flag
    on history_octane.product_eligibility (data_source_deleted_flag);

create index idx_product_eligibility__data_source_updated_datetime
    on history_octane.product_eligibility (data_source_updated_datetime);

create index idx_product_eligibility__pid
    on history_octane.product_eligibility (pe_pid);

create index idx_product_eligibility__pid_version
    on history_octane.product_eligibility (pe_pid, pe_version);

create index idx_product_eligibility__etl_batch_id
    on history_octane.product_eligibility (etl_batch_id);

grant select on history_octane.product_eligibility to readonly;

grant insert, select, update on history_octane.product_eligibility to etl_loan;

create table history_octane.product_eligibility_rule
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    per_pid bigint not null,
    per_version integer,
    per_product_eligibility_pid bigint,
    per_summary varchar(16000),
    per_note varchar(256),
    per_group_id integer,
    per_loan_purpose_input_type varchar(128),
    per_property_usage_input_type varchar(128),
    per_doc_level_input_type varchar(128),
    per_property_category_input_type varchar(128),
    per_first_time_homebuyer_input_type varchar(128),
    per_self_employed_input_type varchar(128),
    per_amortization_input_type varchar(128),
    per_non_resident_alien_input_type varchar(128),
    per_hazardous_lava_zone_input_type varchar(128),
    per_property_rights_input_type varchar(128),
    per_property_acres_input_type varchar(128),
    per_arms_length_input_type varchar(128),
    per_underwrite_accepted_input_type varchar(128),
    per_state_input_type varchar(128),
    per_escrow_waiver_input_type varchar(128),
    per_minimum_credit_score_input boolean,
    per_minimum_loan_amount_input boolean,
    per_maximum_loan_amount_input boolean,
    per_maximum_ltv_ratio_input boolean,
    per_newly_built_maximum_ltv_ratio_input boolean,
    per_subordinate_maximum_ltv_ratio_input boolean,
    per_maximum_cltv_ratio_input boolean,
    per_maximum_housing_ratio_input boolean,
    per_maximum_debt_ratio_input boolean,
    per_lp_risk_assessment_accepted boolean,
    per_du_risk_assessment_accepted boolean,
    per_manual_risk_assessment_accepted boolean,
    per_loan_purpose_purchase boolean,
    per_loan_purpose_change_in_rate_term boolean,
    per_loan_purpose_cash_out boolean,
    per_property_usage_primary_residence boolean,
    per_property_usage_second_home boolean,
    per_property_usage_investment boolean,
    per_doc_level_full boolean,
    per_doc_level_lite boolean,
    per_doc_level_limited boolean,
    per_doc_level_streamline_refinance boolean,
    per_property_category_detached boolean,
    per_property_category_attached boolean,
    per_property_category_condo_hotel boolean,
    per_property_category_duplex boolean,
    per_property_category_triplex boolean,
    per_property_category_fourplex boolean,
    per_property_category_commercial_residential boolean,
    per_property_category_condo_1_to_4_story boolean,
    per_property_category_condo_5_over_story boolean,
    per_property_category_manufactured_multi_wide boolean,
    per_property_category_manufactured_single_wide boolean,
    per_property_category_townhouse_rowhouse boolean,
    per_property_category_land_and_lots boolean,
    per_property_category_farm boolean,
    per_first_time_homebuyer boolean,
    per_not_first_time_homebuyer boolean,
    per_self_employed boolean,
    per_not_self_employed boolean,
    per_amortization_fully boolean,
    per_amortization_interest_only boolean,
    per_non_resident_alien boolean,
    per_not_non_resident_alien boolean,
    per_arms_length boolean,
    per_not_arms_length boolean,
    per_hazardous_lava_zone boolean,
    per_not_hazardous_lava_zone boolean,
    per_property_rights_fee_simple boolean,
    per_property_rights_leasehold boolean,
    per_under_10_acres boolean,
    per_not_under_10_acres boolean,
    per_escrow_waiver boolean,
    per_not_escrow_waiver boolean,
    per_minimum_credit_score integer,
    per_minimum_loan_amount numeric(15),
    per_maximum_loan_amount numeric(15),
    per_maximum_ltv_ratio_percent numeric(11,9),
    per_newly_built_maximum_ltv_ratio_percent numeric(11,9),
    per_subordinate_maximum_ltv_ratio_percent numeric(11,9),
    per_maximum_cltv_ratio_percent numeric(11,9),
    per_maximum_housing_ratio_percent numeric(11,9),
    per_maximum_debt_ratio_percent numeric(11,9),
    per_state_al boolean,
    per_state_ak boolean,
    per_state_az boolean,
    per_state_ar boolean,
    per_state_ca boolean,
    per_state_co boolean,
    per_state_ct boolean,
    per_state_de boolean,
    per_state_dc boolean,
    per_state_fl boolean,
    per_state_ga boolean,
    per_state_gu boolean,
    per_state_hi boolean,
    per_state_id boolean,
    per_state_il boolean,
    per_state_in boolean,
    per_state_ia boolean,
    per_state_ks boolean,
    per_state_ky boolean,
    per_state_la boolean,
    per_state_me boolean,
    per_state_md boolean,
    per_state_ma boolean,
    per_state_mi boolean,
    per_state_mn boolean,
    per_state_ms boolean,
    per_state_mo boolean,
    per_state_mt boolean,
    per_state_ne boolean,
    per_state_nv boolean,
    per_state_nh boolean,
    per_state_nj boolean,
    per_state_nm boolean,
    per_state_ny boolean,
    per_state_nc boolean,
    per_state_nd boolean,
    per_state_oh boolean,
    per_state_ok boolean,
    per_state_or boolean,
    per_state_pa boolean,
    per_state_pr boolean,
    per_state_ri boolean,
    per_state_sc boolean,
    per_state_sd boolean,
    per_state_tn boolean,
    per_state_tx boolean,
    per_state_ut boolean,
    per_state_vt boolean,
    per_state_va boolean,
    per_state_vi boolean,
    per_state_wa boolean,
    per_state_wv boolean,
    per_state_wi boolean,
    per_state_wy boolean,
    etl_batch_id text
);

alter table history_octane.product_eligibility_rule owner to deployer;

create index idx_product_eligibility_rule__data_source_deleted_flag
    on history_octane.product_eligibility_rule (data_source_deleted_flag);

create index idx_product_eligibility_rule__data_source_updated_datetime
    on history_octane.product_eligibility_rule (data_source_updated_datetime);

create index idx_product_eligibility_rule__pid
    on history_octane.product_eligibility_rule (per_pid);

create index idx_product_eligibility_rule__pid_version
    on history_octane.product_eligibility_rule (per_pid, per_version);

create index idx_product_eligibility_rule__etl_batch_id
    on history_octane.product_eligibility_rule (etl_batch_id);

grant select on history_octane.product_eligibility_rule to readonly;

grant insert, select, update on history_octane.product_eligibility_rule to etl_loan;

create table history_octane.product_lock_term
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    plt_pid bigint not null,
    plt_version integer,
    plt_product_pid bigint,
    plt_lock_term_setting_pid bigint,
    plt_from_date date,
    plt_through_date date,
    plt_price_adjustment_percent numeric(11,9),
    etl_batch_id text
);

alter table history_octane.product_lock_term owner to deployer;

create index idx_product_lock_term__data_source_deleted_flag
    on history_octane.product_lock_term (data_source_deleted_flag);

create index idx_product_lock_term__data_source_updated_datetime
    on history_octane.product_lock_term (data_source_updated_datetime);

create index idx_product_lock_term__pid
    on history_octane.product_lock_term (plt_pid);

create index idx_product_lock_term__pid_version
    on history_octane.product_lock_term (plt_pid, plt_version);

create index idx_product_lock_term__etl_batch_id
    on history_octane.product_lock_term (etl_batch_id);

grant select on history_octane.product_lock_term to readonly;

grant insert, select, update on history_octane.product_lock_term to etl_loan;

create table history_octane.product_maximum_investor_price
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    pmip_pid bigint not null,
    pmip_version integer,
    pmip_product_pid bigint,
    pmip_from_date date,
    pmip_maximum_investor_price_percent numeric(11,9),
    pmip_maximum_includes_srp boolean,
    pmip_loan_amount_min numeric(15),
    pmip_loan_amount_max numeric(15),
    etl_batch_id text
);

alter table history_octane.product_maximum_investor_price owner to deployer;

create index idx_product_maximum_investor_price__data_source_deleted_flag
    on history_octane.product_maximum_investor_price (data_source_deleted_flag);

create index idx_c1226fd344ab1136f9876fb689406413
    on history_octane.product_maximum_investor_price (data_source_updated_datetime);

create index idx_product_maximum_investor_price__pid
    on history_octane.product_maximum_investor_price (pmip_pid);

create index idx_product_maximum_investor_price__pid_version
    on history_octane.product_maximum_investor_price (pmip_pid, pmip_version);

create index idx_product_maximum_investor_price__etl_batch_id
    on history_octane.product_maximum_investor_price (etl_batch_id);

grant select on history_octane.product_maximum_investor_price to readonly;

grant insert, select, update on history_octane.product_maximum_investor_price to etl_loan;

create table history_octane.product_maximum_rebate
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    pmr_pid bigint not null,
    pmr_version integer,
    pmr_product_pid bigint,
    pmr_from_date date,
    pmr_maximum_rebate_percent numeric(11,9),
    etl_batch_id text
);

alter table history_octane.product_maximum_rebate owner to deployer;

create index idx_product_maximum_rebate__data_source_deleted_flag
    on history_octane.product_maximum_rebate (data_source_deleted_flag);

create index idx_product_maximum_rebate__data_source_updated_datetime
    on history_octane.product_maximum_rebate (data_source_updated_datetime);

create index idx_product_maximum_rebate__pid
    on history_octane.product_maximum_rebate (pmr_pid);

create index idx_product_maximum_rebate__pid_version
    on history_octane.product_maximum_rebate (pmr_pid, pmr_version);

create index idx_product_maximum_rebate__etl_batch_id
    on history_octane.product_maximum_rebate (etl_batch_id);

grant select on history_octane.product_maximum_rebate to readonly;

grant insert, select, update on history_octane.product_maximum_rebate to etl_loan;

create table history_octane.product_minimum_investor_price
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    pminip_pid bigint not null,
    pminip_version integer,
    pminip_product_pid bigint,
    pminip_from_date date,
    pminip_minimum_investor_price_percent numeric(11,9),
    pminip_minimum_includes_srp boolean,
    pminip_loan_amount_min numeric(15),
    pminip_loan_amount_max numeric(15),
    etl_batch_id text
);

alter table history_octane.product_minimum_investor_price owner to deployer;

create index idx_product_minimum_investor_price__data_source_deleted_flag
    on history_octane.product_minimum_investor_price (data_source_deleted_flag);

create index idx_3b025cbe2c86f18dff4ee158839919e1
    on history_octane.product_minimum_investor_price (data_source_updated_datetime);

create index idx_product_minimum_investor_price__pid
    on history_octane.product_minimum_investor_price (pminip_pid);

create index idx_product_minimum_investor_price__pid_version
    on history_octane.product_minimum_investor_price (pminip_pid, pminip_version);

create index idx_product_minimum_investor_price__etl_batch_id
    on history_octane.product_minimum_investor_price (etl_batch_id);

grant select on history_octane.product_minimum_investor_price to readonly;

grant insert, select, update on history_octane.product_minimum_investor_price to etl_loan;

create table history_octane.product_originator
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    po_pid bigint not null,
    po_version integer,
    po_product_pid bigint,
    po_lender_user_pid bigint,
    po_from_date date,
    po_through_date date,
    po_price_adjustment_percent numeric(11,9),
    etl_batch_id text
);

alter table history_octane.product_originator owner to deployer;

create index idx_product_originator__data_source_deleted_flag
    on history_octane.product_originator (data_source_deleted_flag);

create index idx_product_originator__data_source_updated_datetime
    on history_octane.product_originator (data_source_updated_datetime);

create index idx_product_originator__pid
    on history_octane.product_originator (po_pid);

create index idx_product_originator__pid_version
    on history_octane.product_originator (po_pid, po_version);

create index idx_product_originator__etl_batch_id
    on history_octane.product_originator (etl_batch_id);

grant select on history_octane.product_originator to readonly;

grant insert, select, update on history_octane.product_originator to etl_loan;

create table history_octane.product_terms
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    pt_pid bigint not null,
    pt_version integer,
    pt_amortization_term_months integer,
    pt_arm_index_type varchar(128),
    pt_arm_payment_adjustment_calculation_type varchar(128),
    pt_assumable boolean,
    pt_product_category varchar(128),
    pt_conditions_to_assumability boolean,
    pt_demand_feature boolean,
    pt_due_in_term_months integer,
    pt_escrow_cushion_months integer,
    pt_from_date date,
    pt_initial_payment_adjustment_term_months integer,
    pt_initial_rate_adjustment_cap_percent numeric(11,9),
    pt_initial_rate_adjustment_term_months integer,
    pt_lien_priority_type varchar(128),
    pt_loan_amortization_type varchar(128),
    pt_minimum_payment_rate_percent numeric(11,9),
    pt_minimum_rate_term_months integer,
    pt_mortgage_type varchar(128),
    pt_negative_amortization_type varchar(128),
    pt_negative_amortization_limit_percent numeric(11,9),
    pt_negative_amortization_recast_period_months integer,
    pt_payment_adjustment_lifetime_cap_percent numeric(11,9),
    pt_payment_adjustment_periodic_cap numeric(11,9),
    pt_payment_frequency_type varchar(128),
    pt_prepayment_finance_charge_refund boolean,
    pt_product_pid bigint,
    pt_rate_adjustment_lifetime_cap_percent numeric(11,9),
    pt_subsequent_payment_adjustment_term_months integer,
    pt_subsequent_rate_adjustment_cap_percent numeric(11,9),
    pt_subsequent_rate_adjustment_term_months integer,
    pt_prepay_penalty_type varchar(128),
    pt_lender_hazard_insurance_available boolean,
    pt_lender_hazard_insurance_premium_amount numeric(15,2),
    pt_lender_hazard_insurance_term_months integer,
    pt_loan_requires_hazard_insurance boolean,
    pt_arm_convertible boolean,
    pt_arm_convertible_from_month integer,
    pt_arm_convertible_through_month integer,
    pt_arm_floor_rate_percent numeric(11,9),
    pt_arm_lookback_period_days integer,
    pt_escrow_waiver_allowed boolean,
    pt_days_per_year_type varchar(128),
    pt_lp_risk_assessment_accepted boolean,
    pt_du_risk_assessment_accepted boolean,
    pt_manual_risk_assessment_accepted boolean,
    pt_internal_underwrite_accepted boolean,
    pt_external_fha_underwrite_accepted boolean,
    pt_external_va_underwrite_accepted boolean,
    pt_external_usda_underwrite_accepted boolean,
    pt_external_investor_underwrite_accepted boolean,
    pt_heloc_cancel_fee_applicable_type varchar(128),
    pt_heloc_cancel_fee_period_months integer,
    pt_heloc_cancel_fee_amount numeric(15,2),
    pt_heloc_draw_period_months integer,
    pt_heloc_repayment_period_duration_months integer,
    pt_heloc_maximum_initial_draw boolean,
    pt_heloc_maximum_initial_draw_amount numeric(15),
    pt_heloc_minimum_draw boolean,
    pt_heloc_minimum_draw_amount numeric(15),
    pt_gpm_adjustment_years integer,
    pt_gpm_adjustment_percent numeric(11,9),
    pt_qualifying_monthly_payment_type varchar(128),
    pt_qualifying_rate_type varchar(128),
    pt_qualifying_rate_input_percent numeric(11,9),
    pt_ipc_calc_type varchar(128),
    pt_ipc_limit_percent1 numeric(11,9),
    pt_ipc_property_usage_type1 varchar(128),
    pt_ipc_comparison_operator_type1 varchar(128),
    pt_ipc_cltv_ratio_percent1 numeric(11,9),
    pt_ipc_limit_percent2 numeric(11,9),
    pt_ipc_property_usage_type2 varchar(128),
    pt_ipc_comparison_operator_type2 varchar(128),
    pt_ipc_cltv_ratio_percent2 numeric(11,9),
    pt_ipc_limit_percent3 numeric(11,9),
    pt_ipc_property_usage_type3 varchar(128),
    pt_ipc_comparison_operator_type3 varchar(128),
    pt_ipc_cltv_ratio_percent3 numeric(11,9),
    pt_ipc_limit_percent4 numeric(11,9),
    pt_ipc_property_usage_type4 varchar(128),
    pt_ipc_comparison_operator_type4 varchar(128),
    pt_ipc_cltv_ratio_percent4 numeric(11,9),
    pt_buydown_base_date_type varchar(128),
    pt_buydown_subsidy_calculation_type varchar(128),
    pt_prepaid_interest_rate_type varchar(128),
    pt_fnm_arm_plan_type varchar(128),
    pt_dsi_plan_code varchar(128),
    pt_credit_qualifying boolean,
    pt_product_special_program_type varchar(128),
    pt_section_of_act_coarse_type varchar(128),
    pt_fha_rehab_program_type varchar(128),
    pt_fha_special_program_type varchar(128),
    pt_third_party_grant_eligible boolean,
    pt_servicing_transfer_type varchar(128),
    pt_no_mi_product boolean,
    pt_mortgage_credit_certificate_eligible boolean,
    pt_fre_community_program_type varchar(128),
    pt_fnm_community_lending_product_type varchar(128),
    pt_zero_note_rate boolean,
    pt_third_party_community_second_program_eligibility_type varchar(128),
    pt_texas_veterans_land_board varchar(128),
    pt_security_instrument_page_count integer,
    pt_deed_page_count integer,
    pt_partial_payment_policy_type varchar(128),
    pt_payment_structure_type varchar(128),
    pt_deferred_payment_months integer,
    pt_always_current_market_price boolean,
    pt_rate_protect boolean,
    pt_non_conforming boolean,
    pt_allow_loan_amount_cents boolean,
    pt_product_appraisal_requirement_type varchar(128),
    pt_family_advantage boolean,
    pt_community_lending_type varchar(128),
    pt_high_balance varchar(128),
    pt_decision_credit_score_calc_type varchar(128),
    pt_new_york boolean,
    pt_maximum_number_of_construction_draws integer,
    etl_batch_id text
);

alter table history_octane.product_terms owner to deployer;

create index idx_product_terms__data_source_deleted_flag
    on history_octane.product_terms (data_source_deleted_flag);

create index idx_product_terms__data_source_updated_datetime
    on history_octane.product_terms (data_source_updated_datetime);

create index idx_product_terms__pid
    on history_octane.product_terms (pt_pid);

create index idx_product_terms__pid_version
    on history_octane.product_terms (pt_pid, pt_version);

create index idx_product_terms__etl_batch_id
    on history_octane.product_terms (etl_batch_id);

grant select on history_octane.product_terms to readonly;

grant insert, select, update on history_octane.product_terms to etl_loan;

create table history_octane.product_buydown
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    pbd_pid bigint not null,
    pbd_version integer,
    pbd_product_terms_pid bigint,
    pbd_buydown_schedule_type varchar(128),
    etl_batch_id text
);

alter table history_octane.product_buydown owner to deployer;

create index idx_product_buydown__data_source_deleted_flag
    on history_octane.product_buydown (data_source_deleted_flag);

create index idx_product_buydown__data_source_updated_datetime
    on history_octane.product_buydown (data_source_updated_datetime);

create index idx_product_buydown__pid
    on history_octane.product_buydown (pbd_pid);

create index idx_product_buydown__pid_version
    on history_octane.product_buydown (pbd_pid, pbd_version);

create index idx_product_buydown__etl_batch_id
    on history_octane.product_buydown (etl_batch_id);

grant select on history_octane.product_buydown to readonly;

grant insert, select, update on history_octane.product_buydown to etl_loan;

create table history_octane.product_interest_only
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    pio_pid bigint not null,
    pio_version integer,
    pio_product_terms_pid bigint,
    pio_interest_only_type varchar(128),
    pio_balloon_payment boolean,
    etl_batch_id text
);

alter table history_octane.product_interest_only owner to deployer;

create index idx_product_interest_only__data_source_deleted_flag
    on history_octane.product_interest_only (data_source_deleted_flag);

create index idx_product_interest_only__data_source_updated_datetime
    on history_octane.product_interest_only (data_source_updated_datetime);

create index idx_product_interest_only__pid
    on history_octane.product_interest_only (pio_pid);

create index idx_product_interest_only__pid_version
    on history_octane.product_interest_only (pio_pid, pio_version);

create index idx_product_interest_only__etl_batch_id
    on history_octane.product_interest_only (etl_batch_id);

grant select on history_octane.product_interest_only to readonly;

grant insert, select, update on history_octane.product_interest_only to etl_loan;

create table history_octane.product_prepay_penalty
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ppp_pid bigint not null,
    ppp_version integer,
    ppp_product_terms_pid bigint,
    ppp_prepay_penalty_schedule_type varchar(128),
    etl_batch_id text
);

alter table history_octane.product_prepay_penalty owner to deployer;

create index idx_product_prepay_penalty__data_source_deleted_flag
    on history_octane.product_prepay_penalty (data_source_deleted_flag);

create index idx_product_prepay_penalty__data_source_updated_datetime
    on history_octane.product_prepay_penalty (data_source_updated_datetime);

create index idx_product_prepay_penalty__pid
    on history_octane.product_prepay_penalty (ppp_pid);

create index idx_product_prepay_penalty__pid_version
    on history_octane.product_prepay_penalty (ppp_pid, ppp_version);

create index idx_product_prepay_penalty__etl_batch_id
    on history_octane.product_prepay_penalty (etl_batch_id);

grant select on history_octane.product_prepay_penalty to readonly;

grant insert, select, update on history_octane.product_prepay_penalty to etl_loan;

create table history_octane.rate_sheet
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    rs_pid bigint not null,
    rs_version integer,
    rs_product_pid bigint,
    rs_from_datetime timestamp,
    etl_batch_id text,
    rs_rate_sheet_group_pid bigint
);

alter table history_octane.rate_sheet owner to deployer;

create index idx_rate_sheet__data_source_deleted_flag
    on history_octane.rate_sheet (data_source_deleted_flag);

create index idx_rate_sheet__data_source_updated_datetime
    on history_octane.rate_sheet (data_source_updated_datetime);

create index idx_rate_sheet__pid
    on history_octane.rate_sheet (rs_pid);

create index idx_rate_sheet__pid_version
    on history_octane.rate_sheet (rs_pid, rs_version);

create index idx_rate_sheet__etl_batch_id
    on history_octane.rate_sheet (etl_batch_id);

create index fk_rate_sheet_2
    on history_octane.rate_sheet (rs_rate_sheet_group_pid);

grant select on history_octane.rate_sheet to readonly;

grant insert, select, update on history_octane.rate_sheet to etl_loan;

create table history_octane.rate_sheet_rate
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    rsr_pid bigint not null,
    rsr_version integer,
    rsr_rate_sheet_pid bigint,
    rsr_rate_percent numeric(11,9),
    rsr_arm_margin_percent numeric(11,9),
    rsr_available boolean,
    etl_batch_id text
);

alter table history_octane.rate_sheet_rate owner to deployer;

create index idx_rate_sheet_rate__data_source_deleted_flag
    on history_octane.rate_sheet_rate (data_source_deleted_flag);

create index idx_rate_sheet_rate__data_source_updated_datetime
    on history_octane.rate_sheet_rate (data_source_updated_datetime);

create index idx_rate_sheet_rate__pid
    on history_octane.rate_sheet_rate (rsr_pid);

create index idx_rate_sheet_rate__pid_version
    on history_octane.rate_sheet_rate (rsr_pid, rsr_version);

create index idx_rate_sheet_rate__etl_batch_id
    on history_octane.rate_sheet_rate (etl_batch_id);

grant select on history_octane.rate_sheet_rate to readonly;

grant insert, select, update on history_octane.rate_sheet_rate to etl_loan;

create table history_octane.rate_sheet_price
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    rsp_pid bigint not null,
    rsp_version integer,
    rsp_rate_sheet_rate_pid bigint,
    rsp_lock_duration_days integer,
    rsp_lock_commitment_type varchar(128),
    rsp_price_percent numeric(11,9),
    etl_batch_id text
);

alter table history_octane.rate_sheet_price owner to deployer;

create index idx_rate_sheet_price__data_source_deleted_flag
    on history_octane.rate_sheet_price (data_source_deleted_flag);

create index idx_rate_sheet_price__data_source_updated_datetime
    on history_octane.rate_sheet_price (data_source_updated_datetime);

create index idx_rate_sheet_price__pid
    on history_octane.rate_sheet_price (rsp_pid);

create index idx_rate_sheet_price__pid_version
    on history_octane.rate_sheet_price (rsp_pid, rsp_version);

create index idx_rate_sheet_price__etl_batch_id
    on history_octane.rate_sheet_price (etl_batch_id);

grant select on history_octane.rate_sheet_price to readonly;

grant insert, select, update on history_octane.rate_sheet_price to etl_loan;

create table history_octane.repository_file
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    rf_pid bigint not null,
    rf_version integer,
    rf_account_pid bigint,
    rf_repository_type varchar(128),
    rf_client_filename varchar(128),
    rf_repository_filename varchar(128),
    rf_upload_datetime timestamp,
    rf_uploader_name varchar(128),
    rf_uploader_agent_type varchar(128),
    rf_uploader_lender_user_pid bigint,
    rf_uploader_borrower_user_pid bigint,
    rf_description varchar(256),
    rf_file_size bigint,
    rf_mime_type varchar(128),
    rf_delete_datetime timestamp,
    rf_file_checksum varchar(128),
    etl_batch_id text
);

alter table history_octane.repository_file owner to deployer;

create index idx_repository_file__data_source_deleted_flag
    on history_octane.repository_file (data_source_deleted_flag);

create index idx_repository_file__data_source_updated_datetime
    on history_octane.repository_file (data_source_updated_datetime);

create index idx_repository_file__pid
    on history_octane.repository_file (rf_pid);

create index idx_repository_file__pid_version
    on history_octane.repository_file (rf_pid, rf_version);

create index idx_repository_file__etl_batch_id
    on history_octane.repository_file (etl_batch_id);

grant select on history_octane.repository_file to readonly;

grant insert, select, update on history_octane.repository_file to etl_loan;

create table history_octane.bid_pool_file
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    bpf_pid bigint not null,
    bpf_version integer,
    bpf_bid_pool_pid bigint,
    bpf_repository_file_pid bigint,
    etl_batch_id text
);

alter table history_octane.bid_pool_file owner to deployer;

create index idx_bid_pool_file__data_source_deleted_flag
    on history_octane.bid_pool_file (data_source_deleted_flag);

create index idx_bid_pool_file__data_source_updated_datetime
    on history_octane.bid_pool_file (data_source_updated_datetime);

create index idx_bid_pool_file__pid
    on history_octane.bid_pool_file (bpf_pid);

create index idx_bid_pool_file__pid_version
    on history_octane.bid_pool_file (bpf_pid, bpf_version);

create index idx_bid_pool_file__etl_batch_id
    on history_octane.bid_pool_file (etl_batch_id);

grant select on history_octane.bid_pool_file to readonly;

grant insert, select, update on history_octane.bid_pool_file to etl_loan;

create table history_octane.compass_analytics_report_request
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    carr_pid bigint not null,
    carr_version integer,
    carr_account_pid bigint,
    carr_create_datetime timestamp,
    carr_start_datetime timestamp,
    carr_end_datetime timestamp,
    carr_request_status_type varchar(128),
    carr_request_status_messages text,
    carr_requester_unparsed_name varchar(128),
    carr_exported_deal_count integer,
    carr_total_deal_count integer,
    carr_sold_from_date date,
    carr_sold_through_date date,
    carr_cancelled_from_date date,
    carr_cancelled_through_date date,
    carr_export_csv_repository_file_pid bigint,
    carr_error_file_pid bigint,
    carr_use_loan_hedge_data boolean,
    etl_batch_id text
);

alter table history_octane.compass_analytics_report_request owner to deployer;

create index idx_compass_analytics_report_request__data_source_deleted_flag
    on history_octane.compass_analytics_report_request (data_source_deleted_flag);

create index idx_a2987eba562bb417cbf94ade3ebf6176
    on history_octane.compass_analytics_report_request (data_source_updated_datetime);

create index idx_compass_analytics_report_request__pid
    on history_octane.compass_analytics_report_request (carr_pid);

create index idx_compass_analytics_report_request__pid_version
    on history_octane.compass_analytics_report_request (carr_pid, carr_version);

create index idx_compass_analytics_report_request__etl_batch_id
    on history_octane.compass_analytics_report_request (etl_batch_id);

grant select on history_octane.compass_analytics_report_request to readonly;

grant insert, select, update on history_octane.compass_analytics_report_request to etl_loan;

create table history_octane.consumer_privacy_request
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    cpr_pid bigint not null,
    cpr_version integer,
    cpr_request_id integer,
    cpr_receiver_lender_user_pid bigint,
    cpr_account_pid bigint,
    cpr_borrower_last_name varchar(128),
    cpr_searched_email varchar(256),
    cpr_searched_phone varchar(32),
    cpr_searched_los_loan_id bigint,
    cpr_searched_subject_property_street varchar(128),
    cpr_searched_subject_property_city varchar(128),
    cpr_searched_subject_property_state_type varchar(128),
    cpr_received_date timestamp,
    cpr_know_datetime timestamp,
    cpr_delete_datetime timestamp,
    cpr_request_type varchar(128),
    cpr_request_todo varchar(128),
    cpr_know_repository_file_pid bigint,
    cpr_delete_repository_file_pid bigint,
    etl_batch_id text
);

alter table history_octane.consumer_privacy_request owner to deployer;

create index idx_consumer_privacy_request__data_source_deleted_flag
    on history_octane.consumer_privacy_request (data_source_deleted_flag);

create index idx_consumer_privacy_request__data_source_updated_datetime
    on history_octane.consumer_privacy_request (data_source_updated_datetime);

create index idx_consumer_privacy_request__pid
    on history_octane.consumer_privacy_request (cpr_pid);

create index idx_consumer_privacy_request__pid_version
    on history_octane.consumer_privacy_request (cpr_pid, cpr_version);

create index idx_consumer_privacy_request__etl_batch_id
    on history_octane.consumer_privacy_request (etl_batch_id);

grant select on history_octane.consumer_privacy_request to readonly;

grant insert, select, update on history_octane.consumer_privacy_request to etl_loan;

create table history_octane.custom_form
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    cf_pid bigint not null,
    cf_version integer,
    cf_account_pid bigint,
    cf_merge_form boolean,
    cf_repository_file_pid bigint,
    etl_batch_id text
);

alter table history_octane.custom_form owner to deployer;

create index idx_custom_form__data_source_deleted_flag
    on history_octane.custom_form (data_source_deleted_flag);

create index idx_custom_form__data_source_updated_datetime
    on history_octane.custom_form (data_source_updated_datetime);

create index idx_custom_form__pid
    on history_octane.custom_form (cf_pid);

create index idx_custom_form__pid_version
    on history_octane.custom_form (cf_pid, cf_version);

create index idx_custom_form__etl_batch_id
    on history_octane.custom_form (etl_batch_id);

grant select on history_octane.custom_form to readonly;

grant insert, select, update on history_octane.custom_form to etl_loan;

create table history_octane.custom_form_merge_field
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    cfmf_pid bigint not null,
    cfmf_version integer,
    cfmf_custom_form_pid bigint,
    cfmf_field_type varchar(128),
    etl_batch_id text
);

alter table history_octane.custom_form_merge_field owner to deployer;

create index idx_custom_form_merge_field__data_source_deleted_flag
    on history_octane.custom_form_merge_field (data_source_deleted_flag);

create index idx_custom_form_merge_field__data_source_updated_datetime
    on history_octane.custom_form_merge_field (data_source_updated_datetime);

create index idx_custom_form_merge_field__pid
    on history_octane.custom_form_merge_field (cfmf_pid);

create index idx_custom_form_merge_field__pid_version
    on history_octane.custom_form_merge_field (cfmf_pid, cfmf_version);

create index idx_custom_form_merge_field__etl_batch_id
    on history_octane.custom_form_merge_field (etl_batch_id);

grant select on history_octane.custom_form_merge_field to readonly;

grant insert, select, update on history_octane.custom_form_merge_field to etl_loan;

create table history_octane.deal_file
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    df_pid bigint not null,
    df_version integer,
    df_deal_pid bigint,
    df_repository_file_pid bigint,
    df_archive boolean,
    df_borrower_uploaded boolean,
    etl_batch_id text
);

alter table history_octane.deal_file owner to deployer;

create index idx_deal_file__data_source_deleted_flag
    on history_octane.deal_file (data_source_deleted_flag);

create index idx_deal_file__data_source_updated_datetime
    on history_octane.deal_file (data_source_updated_datetime);

create index idx_deal_file__pid
    on history_octane.deal_file (df_pid);

create index idx_deal_file__pid_version
    on history_octane.deal_file (df_pid, df_version);

create index idx_deal_file__etl_batch_id
    on history_octane.deal_file (etl_batch_id);

grant select on history_octane.deal_file to readonly;

grant insert, select, update on history_octane.deal_file to etl_loan;

create table history_octane.appraisal_file
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    aprf_pid bigint not null,
    aprf_version integer,
    aprf_appraisal_pid bigint,
    aprf_deal_file_pid bigint,
    aprf_appraisal_file_type varchar(128),
    etl_batch_id text
);

alter table history_octane.appraisal_file owner to deployer;

create index idx_appraisal_file__data_source_deleted_flag
    on history_octane.appraisal_file (data_source_deleted_flag);

create index idx_appraisal_file__data_source_updated_datetime
    on history_octane.appraisal_file (data_source_updated_datetime);

create index idx_appraisal_file__pid
    on history_octane.appraisal_file (aprf_pid);

create index idx_appraisal_file__pid_version
    on history_octane.appraisal_file (aprf_pid, aprf_version);

create index idx_appraisal_file__etl_batch_id
    on history_octane.appraisal_file (etl_batch_id);

grant select on history_octane.appraisal_file to readonly;

grant insert, select, update on history_octane.appraisal_file to etl_loan;

create table history_octane.deal_dropbox_file
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ddf_pid bigint not null,
    ddf_version integer,
    ddf_deal_file_pid bigint,
    etl_batch_id text
);

alter table history_octane.deal_dropbox_file owner to deployer;

create index idx_deal_dropbox_file__data_source_deleted_flag
    on history_octane.deal_dropbox_file (data_source_deleted_flag);

create index idx_deal_dropbox_file__data_source_updated_datetime
    on history_octane.deal_dropbox_file (data_source_updated_datetime);

create index idx_deal_dropbox_file__pid
    on history_octane.deal_dropbox_file (ddf_pid);

create index idx_deal_dropbox_file__pid_version
    on history_octane.deal_dropbox_file (ddf_pid, ddf_version);

create index idx_deal_dropbox_file__etl_batch_id
    on history_octane.deal_dropbox_file (etl_batch_id);

grant select on history_octane.deal_dropbox_file to readonly;

grant insert, select, update on history_octane.deal_dropbox_file to etl_loan;

create table history_octane.deal_file_signature
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dfs_pid bigint not null,
    dfs_version integer,
    dfs_deal_file_pid bigint,
    dfs_deal_signer_pid bigint,
    dfs_x numeric(15,7),
    dfs_y numeric(15,7),
    dfs_page_number integer,
    dfs_page_height numeric(15,7),
    dfs_signature_part_type varchar(128),
    dfs_charge_type varchar(128),
    dfs_charge_amount numeric(15,2),
    etl_batch_id text
);

alter table history_octane.deal_file_signature owner to deployer;

create index idx_deal_file_signature__data_source_deleted_flag
    on history_octane.deal_file_signature (data_source_deleted_flag);

create index idx_deal_file_signature__data_source_updated_datetime
    on history_octane.deal_file_signature (data_source_updated_datetime);

create index idx_deal_file_signature__pid
    on history_octane.deal_file_signature (dfs_pid);

create index idx_deal_file_signature__pid_version
    on history_octane.deal_file_signature (dfs_pid, dfs_version);

create index idx_deal_file_signature__etl_batch_id
    on history_octane.deal_file_signature (etl_batch_id);

grant select on history_octane.deal_file_signature to readonly;

grant insert, select, update on history_octane.deal_file_signature to etl_loan;

create table history_octane.deal_fraud_risk
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dfr_pid bigint not null,
    dfr_version integer,
    dfr_deal_pid bigint,
    dfr_loan_safe_risk_manager_status_messages text,
    dfr_loan_safe_risk_manager_order_number varchar(128),
    dfr_loan_safe_risk_manager_html_deal_file_pid bigint,
    dfr_loan_safe_risk_manager_pdf_deal_file_pid bigint,
    dfr_loan_safe_fraud_risk_score integer,
    dfr_loan_safe_collateral_risk_score integer,
    dfr_loan_safe_product_type varchar(128),
    etl_batch_id text
);

alter table history_octane.deal_fraud_risk owner to deployer;

create index idx_deal_fraud_risk__data_source_deleted_flag
    on history_octane.deal_fraud_risk (data_source_deleted_flag);

create index idx_deal_fraud_risk__data_source_updated_datetime
    on history_octane.deal_fraud_risk (data_source_updated_datetime);

create index idx_deal_fraud_risk__pid
    on history_octane.deal_fraud_risk (dfr_pid);

create index idx_deal_fraud_risk__pid_version
    on history_octane.deal_fraud_risk (dfr_pid, dfr_version);

create index idx_deal_fraud_risk__etl_batch_id
    on history_octane.deal_fraud_risk (etl_batch_id);

grant select on history_octane.deal_fraud_risk to readonly;

grant insert, select, update on history_octane.deal_fraud_risk to etl_loan;

create table history_octane.deal_invoice_file
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dif_pid bigint not null,
    dif_version integer,
    dif_deal_invoice_file_type varchar(128),
    dif_deal_file_pid bigint,
    dif_deal_invoice_pid bigint,
    dif_create_datetime timestamp,
    etl_batch_id text
);

alter table history_octane.deal_invoice_file owner to deployer;

create index idx_deal_invoice_file__data_source_deleted_flag
    on history_octane.deal_invoice_file (data_source_deleted_flag);

create index idx_deal_invoice_file__data_source_updated_datetime
    on history_octane.deal_invoice_file (data_source_updated_datetime);

create index idx_deal_invoice_file__pid
    on history_octane.deal_invoice_file (dif_pid);

create index idx_deal_invoice_file__pid_version
    on history_octane.deal_invoice_file (dif_pid, dif_version);

create index idx_deal_invoice_file__etl_batch_id
    on history_octane.deal_invoice_file (etl_batch_id);

grant select on history_octane.deal_invoice_file to readonly;

grant insert, select, update on history_octane.deal_invoice_file to etl_loan;

create table history_octane.deal_message_log
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dmlog_pid bigint not null,
    dmlog_version integer,
    dmlog_deal_pid bigint,
    dmlog_sent_datetime timestamp,
    dmlog_delivery_type varchar(128),
    dmlog_to_recipients varchar(16000),
    dmlog_email_reply_to varchar(256),
    dmlog_name varchar(256),
    dmlog_email_subject varchar(1024),
    dmlog_email_body text,
    dmlog_sent_securely boolean,
    dmlog_cover_letter_deal_file_pid bigint,
    dmlog_attachment_deal_file_pid bigint,
    dmlog_cc_recipients varchar(16000),
    dmlog_bcc_recipients varchar(16000),
    dmlog_plain_text boolean,
    etl_batch_id text
);

alter table history_octane.deal_message_log owner to deployer;

create index idx_deal_message_log__data_source_deleted_flag
    on history_octane.deal_message_log (data_source_deleted_flag);

create index idx_deal_message_log__data_source_updated_datetime
    on history_octane.deal_message_log (data_source_updated_datetime);

create index idx_deal_message_log__pid
    on history_octane.deal_message_log (dmlog_pid);

create index idx_deal_message_log__pid_version
    on history_octane.deal_message_log (dmlog_pid, dmlog_version);

create index idx_deal_message_log__etl_batch_id
    on history_octane.deal_message_log (etl_batch_id);

grant select on history_octane.deal_message_log to readonly;

grant insert, select, update on history_octane.deal_message_log to etl_loan;

create table history_octane.deal_system_file
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dsf_pid bigint not null,
    dsf_version integer,
    dsf_deal_pid bigint,
    dsf_repository_file_pid bigint,
    etl_batch_id text
);

alter table history_octane.deal_system_file owner to deployer;

create index idx_deal_system_file__data_source_deleted_flag
    on history_octane.deal_system_file (data_source_deleted_flag);

create index idx_deal_system_file__data_source_updated_datetime
    on history_octane.deal_system_file (data_source_updated_datetime);

create index idx_deal_system_file__pid
    on history_octane.deal_system_file (dsf_pid);

create index idx_deal_system_file__pid_version
    on history_octane.deal_system_file (dsf_pid, dsf_version);

create index idx_deal_system_file__etl_batch_id
    on history_octane.deal_system_file (etl_batch_id);

grant select on history_octane.deal_system_file to readonly;

grant insert, select, update on history_octane.deal_system_file to etl_loan;

create table history_octane.appraisal_order_request
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    aprq_pid bigint not null,
    aprq_version integer,
    aprq_deal_pid bigint,
    aprq_appraisal_pid bigint,
    aprq_mercury_network_status_request_pid bigint,
    aprq_appraisal_order_coarse_status_type varchar(128),
    aprq_order_id varchar(128),
    aprq_order_instructions varchar(1024),
    aprq_address_street1 varchar(128),
    aprq_address_street2 varchar(128),
    aprq_address_city varchar(128),
    aprq_address_state varchar(128),
    aprq_address_postal_code varchar(128),
    aprq_appraisal_fee_amount numeric(15,2),
    aprq_order_request_date date,
    aprq_response_xml_deal_system_file_pid bigint,
    aprq_mismo_xml_deal_system_file_pid bigint,
    aprq_appraisal_order_request_type varchar(128),
    aprq_status_check_datetime timestamp,
    aprq_appraisal_management_company_type varchar(128),
    aprq_requester_lender_user_pid bigint,
    aprq_requester_unparsed_name varchar(128),
    aprq_requester_agent_type varchar(128),
    aprq_vendor_status_unique_id varchar(128),
    etl_batch_id text
);

alter table history_octane.appraisal_order_request owner to deployer;

create index idx_appraisal_order_request__data_source_deleted_flag
    on history_octane.appraisal_order_request (data_source_deleted_flag);

create index idx_appraisal_order_request__data_source_updated_datetime
    on history_octane.appraisal_order_request (data_source_updated_datetime);

create index idx_appraisal_order_request__pid
    on history_octane.appraisal_order_request (aprq_pid);

create index idx_appraisal_order_request__pid_version
    on history_octane.appraisal_order_request (aprq_pid, aprq_version);

create index idx_appraisal_order_request__etl_batch_id
    on history_octane.appraisal_order_request (etl_batch_id);

grant select on history_octane.appraisal_order_request to readonly;

grant insert, select, update on history_octane.appraisal_order_request to etl_loan;

create table history_octane.appraisal_order_request_file
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    aorf_pid bigint not null,
    aorf_version integer,
    aorf_appraisal_order_request_pid bigint,
    aorf_deal_file_pid bigint,
    aorf_appraisal_order_request_file_type varchar(128),
    aorf_vendor_document_datetime timestamp,
    aorf_vendor_document_id varchar(128),
    etl_batch_id text
);

alter table history_octane.appraisal_order_request_file owner to deployer;

create index idx_appraisal_order_request_file__data_source_deleted_flag
    on history_octane.appraisal_order_request_file (data_source_deleted_flag);

create index idx_appraisal_order_request_file__data_source_updated_datetime
    on history_octane.appraisal_order_request_file (data_source_updated_datetime);

create index idx_appraisal_order_request_file__pid
    on history_octane.appraisal_order_request_file (aorf_pid);

create index idx_appraisal_order_request_file__pid_version
    on history_octane.appraisal_order_request_file (aorf_pid, aorf_version);

create index idx_appraisal_order_request_file__etl_batch_id
    on history_octane.appraisal_order_request_file (etl_batch_id);

grant select on history_octane.appraisal_order_request_file to readonly;

grant insert, select, update on history_octane.appraisal_order_request_file to etl_loan;

create table history_octane.deal_file_thumbnail
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dft_pid bigint not null,
    dft_version integer,
    dft_deal_file_pid bigint,
    dft_deal_system_file_pid bigint,
    dft_page_number integer,
    etl_batch_id text
);

alter table history_octane.deal_file_thumbnail owner to deployer;

create index idx_deal_file_thumbnail__data_source_deleted_flag
    on history_octane.deal_file_thumbnail (data_source_deleted_flag);

create index idx_deal_file_thumbnail__data_source_updated_datetime
    on history_octane.deal_file_thumbnail (data_source_updated_datetime);

create index idx_deal_file_thumbnail__pid
    on history_octane.deal_file_thumbnail (dft_pid);

create index idx_deal_file_thumbnail__pid_version
    on history_octane.deal_file_thumbnail (dft_pid, dft_version);

create index idx_deal_file_thumbnail__etl_batch_id
    on history_octane.deal_file_thumbnail (etl_batch_id);

grant select on history_octane.deal_file_thumbnail to readonly;

grant insert, select, update on history_octane.deal_file_thumbnail to etl_loan;

create table history_octane.du_request
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dur_pid bigint not null,
    dur_version integer,
    dur_proposal_pid bigint,
    dur_proposal_snapshot_pid bigint,
    dur_uw_findings_html_deal_file_pid bigint,
    dur_uw_analysis_html_deal_file_pid bigint,
    dur_uw_findings_pdf_deal_file_pid bigint,
    dur_uw_findings_xml_provided boolean,
    dur_requester_agent_type varchar(128),
    dur_requester_lender_user_pid bigint,
    dur_requester_unparsed_name varchar(128),
    dur_create_datetime timestamp,
    dur_mismo_version_type varchar(128),
    dur_credit_bureau_type varchar(128),
    dur_globally_unique_id varchar(128),
    dur_response_deal_system_file_pid bigint,
    dur_du_casefile_id varchar(32),
    dur_du_request_status_type varchar(128),
    dur_status_message varchar(1024),
    dur_mp_status_log varchar(16000),
    dur_du_recommendation_type varchar(128),
    dur_du_version varchar(16),
    dur_du_submission_number integer,
    dur_loan_amount numeric(17,2),
    dur_initial_pi_amount numeric(15,2),
    dur_note_rate_percent numeric(11,9),
    dur_initial_note_rate_percent numeric(11,9),
    dur_ltv_ratio_percent numeric(11,9),
    dur_cltv_ratio_percent numeric(11,9),
    dur_housing_ratio_percent numeric(11,9),
    dur_debt_ratio_percent numeric(11,9),
    dur_du_ltv_ratio_percent numeric(11,9),
    dur_du_cltv_ratio_percent numeric(11,9),
    dur_du_housing_ratio_percent numeric(11,9),
    dur_du_debt_ratio_percent numeric(11,9),
    dur_aus_request_number integer,
    dur_cash_from_borrower_amount numeric(15,2),
    dur_aus_cash_from_borrower_amount numeric(15,2),
    dur_gse_version_type varchar(128),
    etl_batch_id text
);

alter table history_octane.du_request owner to deployer;

create index idx_du_request__data_source_deleted_flag
    on history_octane.du_request (data_source_deleted_flag);

create index idx_du_request__data_source_updated_datetime
    on history_octane.du_request (data_source_updated_datetime);

create index idx_du_request__pid
    on history_octane.du_request (dur_pid);

create index idx_du_request__pid_version
    on history_octane.du_request (dur_pid, dur_version);

create index idx_du_request__etl_batch_id
    on history_octane.du_request (etl_batch_id);

grant select on history_octane.du_request to readonly;

grant insert, select, update on history_octane.du_request to etl_loan;

create table history_octane.du_request_credit
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    durc_pid bigint not null,
    durc_version integer,
    durc_du_request_pid bigint,
    durc_du_casefile_id varchar(32),
    durc_create_datetime timestamp,
    durc_credit_report_create_datetime timestamp,
    durc_credit_bureau_type varchar(128),
    durc_credit_report_identifier varchar(32),
    durc_credit_report_name varchar(256),
    durc_aus_credit_service_type varchar(128),
    durc_borrower_1_borrower_tiny_id_type varchar(128),
    durc_borrower_2_borrower_tiny_id_type varchar(128),
    etl_batch_id text
);

alter table history_octane.du_request_credit owner to deployer;

create index idx_du_request_credit__data_source_deleted_flag
    on history_octane.du_request_credit (data_source_deleted_flag);

create index idx_du_request_credit__data_source_updated_datetime
    on history_octane.du_request_credit (data_source_updated_datetime);

create index idx_du_request_credit__pid
    on history_octane.du_request_credit (durc_pid);

create index idx_du_request_credit__pid_version
    on history_octane.du_request_credit (durc_pid, durc_version);

create index idx_du_request_credit__etl_batch_id
    on history_octane.du_request_credit (etl_batch_id);

grant select on history_octane.du_request_credit to readonly;

grant insert, select, update on history_octane.du_request_credit to etl_loan;

create table history_octane.du_special_feature_code
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dusfc_pid bigint not null,
    dusfc_version integer,
    dusfc_du_request_pid bigint,
    dusfc_special_feature_code varchar(32),
    dusfc_special_feature_description varchar(128),
    etl_batch_id text
);

alter table history_octane.du_special_feature_code owner to deployer;

create index idx_du_special_feature_code__data_source_deleted_flag
    on history_octane.du_special_feature_code (data_source_deleted_flag);

create index idx_du_special_feature_code__data_source_updated_datetime
    on history_octane.du_special_feature_code (data_source_updated_datetime);

create index idx_du_special_feature_code__pid
    on history_octane.du_special_feature_code (dusfc_pid);

create index idx_du_special_feature_code__pid_version
    on history_octane.du_special_feature_code (dusfc_pid, dusfc_version);

create index idx_du_special_feature_code__etl_batch_id
    on history_octane.du_special_feature_code (etl_batch_id);

grant select on history_octane.du_special_feature_code to readonly;

grant insert, select, update on history_octane.du_special_feature_code to etl_loan;

create table history_octane.flood_cert
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    fc_pid bigint not null,
    fc_version integer,
    fc_deal_pid bigint,
    fc_flood_certificate_type varchar(128),
    fc_flood_cert_vendor_type varchar(128),
    fc_flood_certification_reference_number varchar(32),
    fc_flood_cert_effective_date date,
    fc_nfip_community_name varchar(256),
    fc_nfip_counties varchar(256),
    fc_nfip_state varchar(2),
    fc_nfip_community_number varchar(16),
    fc_nfip_community_firm_date date,
    fc_nfip_community_participation_start_date date,
    fc_flood_partial varchar(128),
    fc_nfip_map_number varchar(8),
    fc_nfip_map_panel varchar(8),
    fc_nfip_map_panel_suffix varchar(8),
    fc_nfip_map_panel_date date,
    fc_nfip_map_exists varchar(128),
    fc_nfip_letter_of_map_date date,
    fc_nfip_letter_of_map_case_number varchar(32),
    fc_fema_flood_zone_designation_type varchar(128),
    fc_nfip_community_participation_status_type varchar(128),
    fc_protected_area varchar(128),
    fc_protected_area_designation_date date,
    fc_special_flood_hazard_area varchar(128),
    fc_property_county_fips varchar(32),
    fc_property_state_fips varchar(32),
    fc_flood_cert_deal_file_pid bigint,
    fc_property_address_city varchar(128),
    fc_property_address_country varchar(128),
    fc_property_address_postal_code varchar(128),
    fc_property_address_state varchar(128),
    fc_property_address_street1 varchar(128),
    fc_property_address_street2 varchar(128),
    fc_property_county_name varchar(128),
    fc_clg_flood_cert_messages text,
    fc_clg_flood_cert_status_type varchar(128),
    fc_clg_flood_cert_request_datetime timestamp,
    fc_clg_flood_cert_requester_agent_type varchar(128),
    fc_clg_flood_cert_requester_lender_user_pid bigint,
    fc_clg_flood_cert_requester_unparsed_name varchar(128),
    etl_batch_id text
);

alter table history_octane.flood_cert owner to deployer;

create index idx_flood_cert__data_source_deleted_flag
    on history_octane.flood_cert (data_source_deleted_flag);

create index idx_flood_cert__data_source_updated_datetime
    on history_octane.flood_cert (data_source_updated_datetime);

create index idx_flood_cert__pid
    on history_octane.flood_cert (fc_pid);

create index idx_flood_cert__pid_version
    on history_octane.flood_cert (fc_pid, fc_version);

create index idx_flood_cert__etl_batch_id
    on history_octane.flood_cert (etl_batch_id);

grant select on history_octane.flood_cert to readonly;

grant insert, select, update on history_octane.flood_cert to etl_loan;

create table history_octane.hmda_report_request
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    hrr_pid bigint not null,
    hrr_version integer,
    hrr_account_pid bigint,
    hrr_create_datetime timestamp,
    hrr_start_datetime timestamp,
    hrr_end_datetime timestamp,
    hrr_request_status_type varchar(128),
    hrr_request_status_messages text,
    hrr_requester_unparsed_name varchar(128),
    hrr_row_count integer,
    hrr_from_date date,
    hrr_through_date date,
    hrr_error_protection boolean,
    hrr_error_limit integer,
    hrr_repository_file_pid bigint,
    etl_batch_id text
);

alter table history_octane.hmda_report_request owner to deployer;

create index idx_hmda_report_request__data_source_deleted_flag
    on history_octane.hmda_report_request (data_source_deleted_flag);

create index idx_hmda_report_request__data_source_updated_datetime
    on history_octane.hmda_report_request (data_source_updated_datetime);

create index idx_hmda_report_request__pid
    on history_octane.hmda_report_request (hrr_pid);

create index idx_hmda_report_request__pid_version
    on history_octane.hmda_report_request (hrr_pid, hrr_version);

create index idx_hmda_report_request__etl_batch_id
    on history_octane.hmda_report_request (etl_batch_id);

grant select on history_octane.hmda_report_request to readonly;

grant insert, select, update on history_octane.hmda_report_request to etl_loan;

create table history_octane.lender_user_photo
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lup_pid bigint not null,
    lup_version integer,
    lup_lender_user_pid bigint,
    lup_repository_file_pid bigint,
    etl_batch_id text
);

alter table history_octane.lender_user_photo owner to deployer;

create index idx_lender_user_photo__data_source_deleted_flag
    on history_octane.lender_user_photo (data_source_deleted_flag);

create index idx_lender_user_photo__data_source_updated_datetime
    on history_octane.lender_user_photo (data_source_updated_datetime);

create index idx_lender_user_photo__pid
    on history_octane.lender_user_photo (lup_pid);

create index idx_lender_user_photo__pid_version
    on history_octane.lender_user_photo (lup_pid, lup_version);

create index idx_lender_user_photo__etl_batch_id
    on history_octane.lender_user_photo (etl_batch_id);

grant select on history_octane.lender_user_photo to readonly;

grant insert, select, update on history_octane.lender_user_photo to etl_loan;

create table history_octane.lp_request
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lpr_pid bigint not null,
    lpr_version integer,
    lpr_proposal_pid bigint,
    lpr_proposal_snapshot_pid bigint,
    lpr_full_feedback_pdf_deal_file_pid bigint,
    lpr_hve_pdf_deal_file_pid bigint,
    lpr_requester_agent_type varchar(128),
    lpr_requester_lender_user_pid bigint,
    lpr_requester_unparsed_name varchar(128),
    lpr_create_datetime timestamp,
    lpr_lp_interface_version_type varchar(128),
    lpr_lp_dtd_version_type varchar(128),
    lpr_mismo_version_type varchar(128),
    lpr_fre_lp_transaction_id varchar(32),
    lpr_lp_transaction_id varchar(32),
    lpr_globally_unique_id varchar(128),
    lpr_lp_request_status_type varchar(128),
    lpr_lp_evaluation_status_type varchar(128),
    lpr_status_messages text,
    lpr_xml_response_deal_system_file_pid bigint,
    lpr_loan_amount numeric(17,2),
    lpr_initial_pi_amount numeric(15,2),
    lpr_note_rate_percent numeric(11,9),
    lpr_initial_note_rate_percent numeric(11,9),
    lpr_ltv_ratio_percent numeric(11,9),
    lpr_cltv_ratio_percent numeric(11,9),
    lpr_hcltv_ratio_percent numeric(11,9),
    lpr_hcltv_applicable boolean,
    lpr_housing_ratio_percent numeric(11,9),
    lpr_debt_ratio_percent numeric(11,9),
    lpr_lp_ltv_ratio_percent numeric(11,9),
    lpr_lp_total_ltv_ratio_percent numeric(11,9),
    lpr_lp_high_total_ltv_ratio_percent numeric(11,9),
    lpr_lp_housing_ratio_percent numeric(11,9),
    lpr_lp_debt_ratio_percent numeric(11,9),
    lpr_lp_submission_number integer,
    lpr_lp_credit_risk_classification_type varchar(128),
    lpr_fre_doc_level_description_type varchar(128),
    lpr_fre_purchase_eligibility_type varchar(128),
    lpr_lp_case_state_type varchar(128),
    lpr_lp_async_id varchar(128),
    lpr_lp_async_polling_interval integer,
    lpr_lp_total_funds_to_be_verified_amount numeric(15,2),
    lpr_lp_required_borrower_funds_amount numeric(15,2),
    lpr_lp_paid_off_debt_amount numeric(15,2),
    lpr_lp_required_reserves_amount numeric(15,2),
    lpr_lp_total_eligible_assets_amount numeric(15,2),
    lpr_lp_proceeds_from_subordinate_financing_amount numeric(15,2),
    lpr_lp_calculated_reserves_amount numeric(15,2),
    lpr_aus_request_number integer,
    lpr_cash_from_borrower_amount numeric(15,2),
    lpr_aus_cash_from_borrower_amount numeric(15,2),
    lpr_gse_version_type varchar(128),
    etl_batch_id text
);

alter table history_octane.lp_request owner to deployer;

create index idx_lp_request__data_source_deleted_flag
    on history_octane.lp_request (data_source_deleted_flag);

create index idx_lp_request__data_source_updated_datetime
    on history_octane.lp_request (data_source_updated_datetime);

create index idx_lp_request__pid
    on history_octane.lp_request (lpr_pid);

create index idx_lp_request__pid_version
    on history_octane.lp_request (lpr_pid, lpr_version);

create index idx_lp_request__etl_batch_id
    on history_octane.lp_request (etl_batch_id);

grant select on history_octane.lp_request to readonly;

grant insert, select, update on history_octane.lp_request to etl_loan;

create table history_octane.credit_request
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    crdr_pid bigint not null,
    crdr_version integer,
    crdr_deal_pid bigint,
    crdr_credit_report_file_pid bigint,
    crdr_credit_score_disclosure_file_pid bigint,
    crdr_create_datetime timestamp,
    crdr_requester_agent_type varchar(128),
    crdr_requester_lender_user_pid bigint,
    crdr_requester_unparsed_name varchar(128),
    crdr_credit_request_via_type varchar(128),
    crdr_lp_request_pid bigint,
    crdr_du_request_pid bigint,
    crdr_mismo_version_type varchar(128),
    crdr_credit_bureau_type varchar(128),
    crdr_credit_report_request_action_type varchar(128),
    crdr_credit_report_type varchar(128),
    crdr_credit_report_product_description varchar(32),
    crdr_credit_request_type varchar(128),
    crdr_credit_repositories_selected_count integer,
    crdr_equifax_included boolean,
    crdr_experian_included boolean,
    crdr_trans_union_included boolean,
    crdr_borrower1_first_name varchar(32),
    crdr_borrower1_middle_name varchar(32),
    crdr_borrower1_last_name varchar(32),
    crdr_borrower1_name_suffix varchar(32),
    crdr_borrower1_birth_date date,
    crdr_borrower1_residence_city varchar(128),
    crdr_borrower1_residence_country varchar(128),
    crdr_borrower1_residence_postal_code varchar(128),
    crdr_borrower1_residence_state varchar(128),
    crdr_borrower1_residence_street1 varchar(128),
    crdr_borrower1_residence_street2 varchar(128),
    crdr_borrower1_experian_credit_score integer,
    crdr_borrower1_equifax_credit_score integer,
    crdr_borrower1_trans_union_credit_score integer,
    crdr_borrower1_equifax_credit_score_model_type varchar(128),
    crdr_borrower1_experian_credit_score_model_type varchar(128),
    crdr_borrower1_trans_union_credit_score_model_type varchar(128),
    crdr_borrower2_first_name varchar(32),
    crdr_borrower2_middle_name varchar(32),
    crdr_borrower2_last_name varchar(32),
    crdr_borrower2_name_suffix varchar(32),
    crdr_borrower2_birth_date date,
    crdr_borrower2_residence_city varchar(128),
    crdr_borrower2_residence_country varchar(128),
    crdr_borrower2_residence_postal_code varchar(128),
    crdr_borrower2_residence_state varchar(128),
    crdr_borrower2_residence_street1 varchar(128),
    crdr_borrower2_residence_street2 varchar(128),
    crdr_borrower2_experian_credit_score integer,
    crdr_borrower2_equifax_credit_score integer,
    crdr_borrower2_trans_union_credit_score integer,
    crdr_borrower2_equifax_credit_score_model_type varchar(128),
    crdr_borrower2_experian_credit_score_model_type varchar(128),
    crdr_borrower2_trans_union_credit_score_model_type varchar(128),
    crdr_contains_importable_data boolean,
    crdr_credit_report_identifier varchar(32),
    crdr_credit_report_price numeric(15,2),
    crdr_credit_request_status_type varchar(128),
    crdr_request_error_messages text,
    crdr_bureau_status_messages text,
    crdr_bureau_credit_report_url varchar(1024),
    crdr_last_status_query_datetime timestamp,
    crdr_xml_response_file_pid bigint,
    etl_batch_id text
);

alter table history_octane.credit_request owner to deployer;

create index idx_credit_request__data_source_deleted_flag
    on history_octane.credit_request (data_source_deleted_flag);

create index idx_credit_request__data_source_updated_datetime
    on history_octane.credit_request (data_source_updated_datetime);

create index idx_credit_request__pid
    on history_octane.credit_request (crdr_pid);

create index idx_credit_request__pid_version
    on history_octane.credit_request (crdr_pid, crdr_version);

create index idx_credit_request__etl_batch_id
    on history_octane.credit_request (etl_batch_id);

grant select on history_octane.credit_request to readonly;

grant insert, select, update on history_octane.credit_request to etl_loan;

create table history_octane.borrower
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    b_pid bigint not null,
    b_version integer,
    b_alimony_child_support varchar(128),
    b_alimony_child_support_explanation varchar(128),
    b_application_pid bigint,
    b_application_signed_date date,
    b_application_taken_method_type varchar(128),
    b_bankruptcy varchar(128),
    b_bankruptcy_explanation varchar(128),
    b_birth_date date,
    b_borrowed_down_payment varchar(128),
    b_borrowed_down_payment_explanation varchar(128),
    b_applicant_role_type varchar(128),
    b_required_to_sign boolean,
    b_spousal_homestead varchar(128),
    b_has_no_ssn boolean,
    b_citizenship_residency_type varchar(128),
    b_credit_request_pid bigint,
    b_credit_report_identifier varchar(32),
    b_credit_report_authorization boolean,
    b_has_dependents varchar(128),
    b_dependent_count integer,
    b_dependents_age_years varchar(32),
    b_email varchar(256),
    b_fax varchar(32),
    b_first_name varchar(32),
    b_nickname varchar(32),
    b_first_time_homebuyer boolean,
    b_lender_employee varchar(128),
    b_lender_employee_status_confirmed boolean,
    b_sex_refused varchar(128),
    b_sex_collected_visual_or_surname varchar(128),
    b_sex_male boolean,
    b_sex_female boolean,
    b_sex_not_obtainable boolean,
    b_ethnicity_refused varchar(128),
    b_ethnicity_collected_visual_or_surname varchar(128),
    b_ethnicity_hispanic_or_latino boolean,
    b_ethnicity_mexican boolean,
    b_ethnicity_puerto_rican boolean,
    b_ethnicity_cuban boolean,
    b_ethnicity_other_hispanic_or_latino boolean,
    b_ethnicity_other_hispanic_or_latino_description varchar(100),
    b_ethnicity_not_hispanic_or_latino boolean,
    b_ethnicity_not_obtainable boolean,
    b_homeowner_past_three_years varchar(128),
    b_home_phone varchar(32),
    b_intend_to_occupy varchar(128),
    b_last_name varchar(32),
    b_mailing_place_pid bigint,
    b_marital_status_type varchar(128),
    b_spouse_borrower_pid bigint,
    b_middle_name varchar(32),
    b_mobile_phone varchar(32),
    b_name_suffix varchar(32),
    b_note_endorser varchar(128),
    b_note_endorser_explanation varchar(128),
    b_obligated_loan_foreclosure varchar(128),
    b_obligated_loan_foreclosure_explanation varchar(128),
    b_office_phone varchar(32),
    b_office_phone_extension varchar(16),
    b_other_race_national_origin_description varchar(32),
    b_outstanding_judgements varchar(128),
    b_outstanding_judgments_explanation varchar(128),
    b_party_to_lawsuit varchar(128),
    b_party_to_lawsuit_explanation varchar(128),
    b_power_of_attorney varchar(128),
    b_power_of_attorney_signing_capacity varchar(1024),
    b_power_of_attorney_first_name varchar(32),
    b_power_of_attorney_last_name varchar(32),
    b_power_of_attorney_middle_name varchar(32),
    b_power_of_attorney_name_suffix varchar(32),
    b_power_of_attorney_company_name varchar(128),
    b_power_of_attorney_title varchar(128),
    b_power_of_attorney_office_phone varchar(32),
    b_power_of_attorney_office_phone_extension varchar(16),
    b_power_of_attorney_mobile_phone varchar(32),
    b_power_of_attorney_email varchar(256),
    b_power_of_attorney_fax varchar(32),
    b_power_of_attorney_city varchar(128),
    b_power_of_attorney_country varchar(128),
    b_power_of_attorney_postal_code varchar(128),
    b_power_of_attorney_state varchar(128),
    b_power_of_attorney_street1 varchar(128),
    b_power_of_attorney_street2 varchar(128),
    b_presently_delinquent varchar(128),
    b_presently_delinquent_explanation varchar(128),
    b_prior_property_title_type varchar(128),
    b_prior_property_usage_type varchar(128),
    b_property_foreclosure varchar(128),
    b_property_foreclosure_explanation varchar(128),
    b_race_refused varchar(128),
    b_race_collected_visual_or_surname varchar(128),
    b_race_american_indian_or_alaska_native boolean,
    b_race_other_american_indian_or_alaska_native_description varchar(100),
    b_race_asian boolean,
    b_race_asian_indian boolean,
    b_race_chinese boolean,
    b_race_filipino boolean,
    b_race_japanese boolean,
    b_race_korean boolean,
    b_race_vietnamese boolean,
    b_race_other_asian boolean,
    b_race_other_asian_description varchar(100),
    b_race_black_or_african_american boolean,
    b_race_information_not_provided boolean,
    b_race_national_origin_refusal boolean,
    b_race_native_hawaiian_or_other_pacific_islander boolean,
    b_race_native_hawaiian boolean,
    b_race_guamanian_or_chamorro boolean,
    b_race_samoan boolean,
    b_race_other_pacific_islander boolean,
    b_race_not_obtainable boolean,
    b_race_other_pacific_islander_description varchar(100),
    b_race_not_applicable boolean,
    b_race_white boolean,
    b_schooling_years integer,
    b_titleholder varchar(128),
    b_experian_credit_score integer,
    b_equifax_credit_score integer,
    b_trans_union_credit_score integer,
    b_decision_credit_score integer,
    b_borrower_tiny_id_type varchar(128),
    b_first_time_home_buyer_explain varchar(1024),
    b_first_time_home_buyer_auto_compute boolean,
    b_caivrs_id varchar(16),
    b_caivrs_messages text,
    b_on_ldp_list varchar(128),
    b_on_gsa_list varchar(128),
    b_monthly_job_federal_tax_amount numeric(15,2),
    b_monthly_job_state_tax_amount numeric(15,2),
    b_monthly_job_retirement_tax_amount numeric(15,2),
    b_monthly_job_medicare_tax_amount numeric(15,2),
    b_monthly_job_state_disability_insurance_amount numeric(15,2),
    b_monthly_job_other_tax_1_amount numeric(15,2),
    b_monthly_job_other_tax_1_description varchar(128),
    b_monthly_job_other_tax_2_amount numeric(15,2),
    b_monthly_job_other_tax_2_description varchar(128),
    b_monthly_job_other_tax_3_amount numeric(15,2),
    b_monthly_job_other_tax_3_description varchar(128),
    b_monthly_job_total_tax_amount numeric(15,2),
    b_homeownership_education_type varchar(128),
    b_homeownership_education_agency_type varchar(128),
    b_homeownership_education_id varchar(128),
    b_homeownership_education_name varchar(128),
    b_homeownership_education_complete_date date,
    b_housing_counseling_type varchar(128),
    b_housing_counseling_agency_type varchar(128),
    b_housing_counseling_id varchar(128),
    b_housing_counseling_name varchar(128),
    b_housing_counseling_complete_date date,
    b_legal_entity_type varchar(128),
    b_credit_report_authorization_datetime timestamp,
    b_credit_report_authorization_method varchar(128),
    b_credit_report_authorization_obtained_by_unparsed_name varchar(128),
    b_disabled varchar(128),
    b_usda_annual_child_care_expenses numeric(15,2),
    b_usda_disability_expenses numeric(15,2),
    b_usda_medical_expenses numeric(15,2),
    b_usda_income_from_assets numeric(15,2),
    b_usda_moderate_income_limit numeric(15,2),
    b_hud_employee boolean,
    b_relationship_to_primary_borrower_type varchar(128),
    b_relationship_to_seller_type varchar(128),
    b_preferred_first_name varchar(32),
    b_domestic_relationship_state_type varchar(128),
    b_credit_report_required boolean,
    b_closing_disclosure_signer boolean,
    b_snapshotted_pid bigint,
    etl_batch_id text
);

alter table history_octane.borrower owner to deployer;

create index idx_borrower__data_source_deleted_flag
    on history_octane.borrower (data_source_deleted_flag);

create index idx_borrower__data_source_updated_datetime
    on history_octane.borrower (data_source_updated_datetime);

create index idx_borrower__pid
    on history_octane.borrower (b_pid);

create index idx_borrower__pid_version
    on history_octane.borrower (b_pid, b_version);

create index idx_borrower__etl_batch_id
    on history_octane.borrower (etl_batch_id);

grant select on history_octane.borrower to readonly;

grant insert, select, update on history_octane.borrower to etl_loan;

create table history_octane.borrower_alias
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ba_pid bigint not null,
    ba_version integer,
    ba_account_number varchar(32),
    ba_borrower_pid bigint,
    ba_credit_request_pid bigint,
    ba_creditor_name varchar(32),
    ba_first_name varchar(32),
    ba_last_name varchar(32),
    ba_middle_name varchar(32),
    ba_name_suffix varchar(32),
    ba_credit_report_identifier varchar(32),
    etl_batch_id text
);

alter table history_octane.borrower_alias owner to deployer;

create index idx_borrower_alias__data_source_deleted_flag
    on history_octane.borrower_alias (data_source_deleted_flag);

create index idx_borrower_alias__data_source_updated_datetime
    on history_octane.borrower_alias (data_source_updated_datetime);

create index idx_borrower_alias__pid
    on history_octane.borrower_alias (ba_pid);

create index idx_borrower_alias__pid_version
    on history_octane.borrower_alias (ba_pid, ba_version);

create index idx_borrower_alias__etl_batch_id
    on history_octane.borrower_alias (etl_batch_id);

grant select on history_octane.borrower_alias to readonly;

grant insert, select, update on history_octane.borrower_alias to etl_loan;

create table history_octane.borrower_asset
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    bas_pid bigint not null,
    bas_version integer,
    bas_borrower_pid bigint,
    bas_asset_pid bigint,
    etl_batch_id text
);

alter table history_octane.borrower_asset owner to deployer;

create index idx_borrower_asset__data_source_deleted_flag
    on history_octane.borrower_asset (data_source_deleted_flag);

create index idx_borrower_asset__data_source_updated_datetime
    on history_octane.borrower_asset (data_source_updated_datetime);

create index idx_borrower_asset__pid
    on history_octane.borrower_asset (bas_pid);

create index idx_borrower_asset__pid_version
    on history_octane.borrower_asset (bas_pid, bas_version);

create index idx_borrower_asset__etl_batch_id
    on history_octane.borrower_asset (etl_batch_id);

grant select on history_octane.borrower_asset to readonly;

grant insert, select, update on history_octane.borrower_asset to etl_loan;

create table history_octane.borrower_associated_address
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    baa_pid bigint not null,
    baa_version integer,
    baa_borrower_pid bigint,
    baa_credit_request_pid bigint,
    baa_credit_report_identifier varchar(32),
    baa_borrower_associated_address_source_type varchar(128),
    baa_reported_month integer,
    baa_reported_year integer,
    baa_reported_date_verified boolean,
    baa_reported_address_street1 varchar(128),
    baa_reported_address_street2 varchar(128),
    baa_reported_address_city varchar(128),
    baa_reported_address_state varchar(128),
    baa_reported_address_postal_code varchar(128),
    baa_reported_address_country varchar(16),
    baa_current varchar(128),
    baa_internal_note varchar(1024),
    baa_requires_explanation boolean,
    baa_force_requires_explanation boolean,
    baa_borrower_associated_address_explanation_type varchar(128),
    baa_explanation_type_other_explanation varchar(128),
    baa_typo_of_loan_app_address varchar(128),
    baa_known_to_borrower varchar(128),
    baa_owned_by_borrower varchar(128),
    baa_resided_at_address varchar(128),
    baa_used_as_mailing_address varchar(128),
    baa_current_mailing_address varchar(128),
    baa_current_residence varchar(128),
    baa_borrower_resided_at_address_after_date varchar(128),
    etl_batch_id text
);

alter table history_octane.borrower_associated_address owner to deployer;

create index idx_borrower_associated_address__data_source_deleted_flag
    on history_octane.borrower_associated_address (data_source_deleted_flag);

create index idx_borrower_associated_address__data_source_updated_datetime
    on history_octane.borrower_associated_address (data_source_updated_datetime);

create index idx_borrower_associated_address__pid
    on history_octane.borrower_associated_address (baa_pid);

create index idx_borrower_associated_address__pid_version
    on history_octane.borrower_associated_address (baa_pid, baa_version);

create index idx_borrower_associated_address__etl_batch_id
    on history_octane.borrower_associated_address (etl_batch_id);

grant select on history_octane.borrower_associated_address to readonly;

grant insert, select, update on history_octane.borrower_associated_address to etl_loan;

create table history_octane.borrower_dependent
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    bd_pid bigint not null,
    bd_version integer,
    bd_borrower_pid bigint,
    bd_first_name varchar(32),
    bd_last_name varchar(32),
    bd_age integer,
    bd_disabled varchar(128),
    bd_full_time_student varchar(128),
    bd_receives_income varchar(128),
    bd_income_source text,
    bd_income_amount numeric(15,2),
    etl_batch_id text
);

alter table history_octane.borrower_dependent owner to deployer;

create index idx_borrower_dependent__data_source_deleted_flag
    on history_octane.borrower_dependent (data_source_deleted_flag);

create index idx_borrower_dependent__data_source_updated_datetime
    on history_octane.borrower_dependent (data_source_updated_datetime);

create index idx_borrower_dependent__pid
    on history_octane.borrower_dependent (bd_pid);

create index idx_borrower_dependent__pid_version
    on history_octane.borrower_dependent (bd_pid, bd_version);

create index idx_borrower_dependent__etl_batch_id
    on history_octane.borrower_dependent (etl_batch_id);

grant select on history_octane.borrower_dependent to readonly;

grant insert, select, update on history_octane.borrower_dependent to etl_loan;

create table history_octane.borrower_income
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    bi_pid bigint not null,
    bi_version integer,
    bi_borrower_pid bigint,
    bi_borrower_income_category_type varchar(128),
    bi_job_gap_reason_type varchar(128),
    bi_job_gap_reason_explanation varchar(1024),
    bi_business_ownership_type varchar(128),
    bi_from_date date,
    bi_through_date date,
    bi_current boolean,
    bi_primary boolean,
    bi_source_name varchar(128),
    bi_source_address_street1 varchar(128),
    bi_source_address_street2 varchar(128),
    bi_source_address_city varchar(128),
    bi_source_address_state varchar(128),
    bi_source_address_postal_code varchar(128),
    bi_source_address_country varchar(128),
    bi_source_phone varchar(32),
    bi_source_phone_extension varchar(16),
    bi_synthetic_unique boolean,
    etl_batch_id text,
    bi_snapshotted_pid bigint
);

alter table history_octane.borrower_income owner to deployer;

create index idx_borrower_income__data_source_deleted_flag
    on history_octane.borrower_income (data_source_deleted_flag);

create index idx_borrower_income__data_source_updated_datetime
    on history_octane.borrower_income (data_source_updated_datetime);

create index idx_borrower_income__pid
    on history_octane.borrower_income (bi_pid);

create index idx_borrower_income__pid_version
    on history_octane.borrower_income (bi_pid, bi_version);

create index idx_borrower_income__etl_batch_id
    on history_octane.borrower_income (etl_batch_id);

grant select on history_octane.borrower_income to readonly;

grant insert, select, update on history_octane.borrower_income to etl_loan;

create table history_octane.borrower_job_gap
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    bjg_pid bigint not null,
    bjg_version integer,
    bjg_borrower_pid bigint,
    bjg_from_date date,
    bjg_through_date date,
    bjg_primary_job boolean,
    etl_batch_id text
);

alter table history_octane.borrower_job_gap owner to deployer;

create index idx_borrower_job_gap__data_source_deleted_flag
    on history_octane.borrower_job_gap (data_source_deleted_flag);

create index idx_borrower_job_gap__data_source_updated_datetime
    on history_octane.borrower_job_gap (data_source_updated_datetime);

create index idx_borrower_job_gap__pid
    on history_octane.borrower_job_gap (bjg_pid);

create index idx_borrower_job_gap__pid_version
    on history_octane.borrower_job_gap (bjg_pid, bjg_version);

create index idx_borrower_job_gap__etl_batch_id
    on history_octane.borrower_job_gap (etl_batch_id);

grant select on history_octane.borrower_job_gap to readonly;

grant insert, select, update on history_octane.borrower_job_gap to etl_loan;

create table history_octane.borrower_user_deal
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    bud_pid bigint not null,
    bud_version integer,
    bud_borrower_user_pid bigint,
    bud_deal_pid bigint,
    bud_borrower_pid bigint,
    bud_borrower_user_deal_access_type varchar(128),
    bud_loan_key varchar(128),
    bud_electronic_transaction_consent boolean,
    bud_electronic_transaction_consent_datetime timestamp,
    bud_electronic_transaction_consent_ip_address varchar(32),
    bud_create_datetime timestamp,
    bud_uuid varchar(36),
    etl_batch_id text
);

alter table history_octane.borrower_user_deal owner to deployer;

create index idx_borrower_user_deal__data_source_deleted_flag
    on history_octane.borrower_user_deal (data_source_deleted_flag);

create index idx_borrower_user_deal__data_source_updated_datetime
    on history_octane.borrower_user_deal (data_source_updated_datetime);

create index idx_borrower_user_deal__pid
    on history_octane.borrower_user_deal (bud_pid);

create index idx_borrower_user_deal__pid_version
    on history_octane.borrower_user_deal (bud_pid, bud_version);

create index idx_borrower_user_deal__etl_batch_id
    on history_octane.borrower_user_deal (etl_batch_id);

grant select on history_octane.borrower_user_deal to readonly;

grant insert, select, update on history_octane.borrower_user_deal to etl_loan;

create table history_octane.borrower_user_change_email
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    buce_pid bigint not null,
    buce_version integer,
    buce_borrower_user_pid bigint,
    buce_create_datetime timestamp,
    buce_change_email_id varchar(128),
    buce_email varchar(256),
    buce_borrower_user_deal_pid bigint,
    etl_batch_id text
);

alter table history_octane.borrower_user_change_email owner to deployer;

create index idx_borrower_user_change_email__data_source_deleted_flag
    on history_octane.borrower_user_change_email (data_source_deleted_flag);

create index idx_borrower_user_change_email__data_source_updated_datetime
    on history_octane.borrower_user_change_email (data_source_updated_datetime);

create index idx_borrower_user_change_email__pid
    on history_octane.borrower_user_change_email (buce_pid);

create index idx_borrower_user_change_email__pid_version
    on history_octane.borrower_user_change_email (buce_pid, buce_version);

create index idx_borrower_user_change_email__etl_batch_id
    on history_octane.borrower_user_change_email (etl_batch_id);

grant select on history_octane.borrower_user_change_email to readonly;

grant insert, select, update on history_octane.borrower_user_change_email to etl_loan;

create table history_octane.business_income
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    bui_pid bigint not null,
    bui_version integer,
    bui_borrower_income_pid bigint,
    bui_business_income_type varchar(128),
    bui_business_disposition_type varchar(128),
    bui_company_ein varchar(16),
    bui_estimated_net_income_amount numeric(15,2),
    bui_estimated_mode boolean,
    bui_worksheet_monthly_total_amount numeric(15,2),
    bui_monthly_total_amount numeric(15,2),
    bui_borrower_income_percent numeric(11,9),
    bui_calc_method_type varchar(128),
    bui_common_year1_year integer,
    bui_common_year1_year_include boolean,
    bui_common_year1_from_date date,
    bui_common_year1_through_date date,
    bui_common_year1_months numeric(4,2),
    bui_common_year1_annual_total_amount numeric(15,2),
    bui_common_year1_monthly_total_amount numeric(15,2),
    bui_common_year2_year integer,
    bui_common_year2_year_include boolean,
    bui_common_year2_from_date date,
    bui_common_year2_through_date date,
    bui_common_year2_months numeric(4,2),
    bui_common_year2_annual_total_amount numeric(15,2),
    bui_common_year2_monthly_total_amount numeric(15,2),
    bui_common_year3_year integer,
    bui_common_year3_year_include boolean,
    bui_common_year3_from_date date,
    bui_common_year3_through_date date,
    bui_common_year3_months numeric(4,2),
    bui_common_year3_annual_total_amount numeric(15,2),
    bui_common_year3_monthly_total_amount numeric(15,2),
    bui_sole_year1_gross_receipts numeric(15,2),
    bui_sole_year1_other_income_loss_exp numeric(15,2),
    bui_sole_year1_depletion numeric(15,2),
    bui_sole_year1_depreciation numeric(15,2),
    bui_sole_year1_meal_exclusions numeric(15,2),
    bui_sole_year1_business_use_home numeric(15,2),
    bui_sole_year1_amortization_loss numeric(15,2),
    bui_sole_year1_business_miles integer,
    bui_sole_year1_depreciation_mile numeric(11,9),
    bui_sole_year1_mileage_depreciation numeric(15,2),
    bui_sole_year2_gross_receipts numeric(15,2),
    bui_sole_year2_other_income_loss_exp numeric(15,2),
    bui_sole_year2_depletion numeric(15,2),
    bui_sole_year2_depreciation numeric(15,2),
    bui_sole_year2_meal_exclusions numeric(15,2),
    bui_sole_year2_business_use_home numeric(15,2),
    bui_sole_year2_amortization_loss numeric(15,2),
    bui_sole_year2_business_miles integer,
    bui_sole_year2_depreciation_mile numeric(11,9),
    bui_sole_year2_mileage_depreciation numeric(15,2),
    bui_sole_year3_gross_receipts numeric(15,2),
    bui_sole_year3_other_income_loss_exp numeric(15,2),
    bui_sole_year3_depletion numeric(15,2),
    bui_sole_year3_depreciation numeric(15,2),
    bui_sole_year3_meal_exclusions numeric(15,2),
    bui_sole_year3_business_use_home numeric(15,2),
    bui_sole_year3_amortization_loss numeric(15,2),
    bui_sole_year3_business_miles integer,
    bui_sole_year3_depreciation_mile numeric(11,9),
    bui_sole_year3_mileage_depreciation numeric(15,2),
    bui_partner_year1_amortization_loss numeric(15,2),
    bui_partner_year1_depletion numeric(15,2),
    bui_partner_year1_depreciation numeric(15,2),
    bui_partner_year1_guaranteed_payments numeric(15,2),
    bui_partner_year1_meals_exclusion numeric(15,2),
    bui_partner_year1_net_rental_income_loss numeric(15,2),
    bui_partner_year1_notes_payable_less_year numeric(15,2),
    bui_partner_year1_ordinary_income_loss numeric(15,2),
    bui_partner_year1_other_income_loss numeric(15,2),
    bui_partner_year1_ownership_percent numeric(11,9),
    bui_partner_year1_form_k_1_total numeric(15,2),
    bui_partner_year1_form_1065_subtotal numeric(15,2),
    bui_partner_year1_form_1065_total numeric(15,2),
    bui_partner_year2_amortization_loss numeric(15,2),
    bui_partner_year2_depletion numeric(15,2),
    bui_partner_year2_depreciation numeric(15,2),
    bui_partner_year2_guaranteed_payments numeric(15,2),
    bui_partner_year2_meals_exclusion numeric(15,2),
    bui_partner_year2_net_rental_income_loss numeric(15,2),
    bui_partner_year2_notes_payable_less_year numeric(15,2),
    bui_partner_year2_ordinary_income_loss numeric(15,2),
    bui_partner_year2_other_income_loss numeric(15,2),
    bui_partner_year2_ownership_percent numeric(11,9),
    bui_partner_year2_form_k_1_total numeric(15,2),
    bui_partner_year2_form_1065_subtotal numeric(15,2),
    bui_partner_year2_form_1065_total numeric(15,2),
    bui_partner_year3_amortization_loss numeric(15,2),
    bui_partner_year3_depletion numeric(15,2),
    bui_partner_year3_depreciation numeric(15,2),
    bui_partner_year3_guaranteed_payments numeric(15,2),
    bui_partner_year3_meals_exclusion numeric(15,2),
    bui_partner_year3_net_rental_income_loss numeric(15,2),
    bui_partner_year3_notes_payable_less_year numeric(15,2),
    bui_partner_year3_ordinary_income_loss numeric(15,2),
    bui_partner_year3_other_income_loss numeric(15,2),
    bui_partner_year3_ownership_percent numeric(11,9),
    bui_partner_year3_form_k_1_total numeric(15,2),
    bui_partner_year3_form_1065_subtotal numeric(15,2),
    bui_partner_year3_form_1065_total numeric(15,2),
    bui_form_1065_available boolean,
    bui_scorp_year1_ordinary_income_loss numeric(15,2),
    bui_scorp_year1_net_rental_income_loss numeric(15,2),
    bui_scorp_year1_other_income_loss numeric(15,2),
    bui_scorp_year1_depletion numeric(15,2),
    bui_scorp_year1_depreciation numeric(15,2),
    bui_scorp_year1_amortization_loss numeric(15,2),
    bui_scorp_year1_notes_payable_less_year numeric(15,2),
    bui_scorp_year1_meals_exclusion numeric(15,2),
    bui_scorp_year1_ownership_percent numeric(11,9),
    bui_scorp_year1_form_k_1_total numeric(15,2),
    bui_scorp_year1_form_1120s_subtotal numeric(15,2),
    bui_scorp_year1_form_1120s_total numeric(15,2),
    bui_scorp_year2_ordinary_income_loss numeric(15,2),
    bui_scorp_year2_net_rental_income_loss numeric(15,2),
    bui_scorp_year2_other_income_loss numeric(15,2),
    bui_scorp_year2_depletion numeric(15,2),
    bui_scorp_year2_depreciation numeric(15,2),
    bui_scorp_year2_amortization_loss numeric(15,2),
    bui_scorp_year2_notes_payable_less_year numeric(15,2),
    bui_scorp_year2_meals_exclusion numeric(15,2),
    bui_scorp_year2_ownership_percent numeric(11,9),
    bui_scorp_year2_form_k_1_total numeric(15,2),
    bui_scorp_year2_form_1120s_subtotal numeric(15,2),
    bui_scorp_year2_form_1120s_total numeric(15,2),
    bui_scorp_year3_ordinary_income_loss numeric(15,2),
    bui_scorp_year3_net_rental_income_loss numeric(15,2),
    bui_scorp_year3_other_income_loss numeric(15,2),
    bui_scorp_year3_depletion numeric(15,2),
    bui_scorp_year3_depreciation numeric(15,2),
    bui_scorp_year3_amortization_loss numeric(15,2),
    bui_scorp_year3_notes_payable_less_year numeric(15,2),
    bui_scorp_year3_meals_exclusion numeric(15,2),
    bui_scorp_year3_ownership_percent numeric(11,9),
    bui_scorp_year3_form_k_1_total numeric(15,2),
    bui_scorp_year3_form_1120s_subtotal numeric(15,2),
    bui_scorp_year3_form_1120s_total numeric(15,2),
    bui_form_1120s_available boolean,
    bui_corp_year1_taxable_income numeric(15,2),
    bui_corp_year1_total_tax numeric(15,2),
    bui_corp_year1_gain_loss numeric(15,2),
    bui_corp_year1_other_income_loss numeric(15,2),
    bui_corp_year1_depreciation numeric(15,2),
    bui_corp_year1_depletion numeric(15,2),
    bui_corp_year1_domestic_production_activities numeric(15,2),
    bui_corp_year1_other_deductions numeric(15,2),
    bui_corp_year1_net_operating_loss_special_deductions numeric(15,2),
    bui_corp_year1_notes_payable_less_one_year numeric(15,2),
    bui_corp_year1_meals_exclusion numeric(15,2),
    bui_corp_year1_dividends_paid_to_borrower numeric(15,2),
    bui_corp_year1_annual_subtotal numeric(15,2),
    bui_corp_year1_ownership_percent numeric(11,9),
    bui_corp_year1_annual_subtotal_ownership_applied numeric(15,2),
    bui_corp_year2_taxable_income numeric(15,2),
    bui_corp_year2_total_tax numeric(15,2),
    bui_corp_year2_gain_loss numeric(15,2),
    bui_corp_year2_other_income_loss numeric(15,2),
    bui_corp_year2_depreciation numeric(15,2),
    bui_corp_year2_depletion numeric(15,2),
    bui_corp_year2_domestic_production_activities numeric(15,2),
    bui_corp_year2_other_deductions numeric(15,2),
    bui_corp_year2_net_operating_loss_special_deductions numeric(15,2),
    bui_corp_year2_notes_payable_less_one_year numeric(15,2),
    bui_corp_year2_meals_exclusion numeric(15,2),
    bui_corp_year2_dividends_paid_to_borrower numeric(15,2),
    bui_corp_year2_annual_subtotal numeric(15,2),
    bui_corp_year2_ownership_percent numeric(11,9),
    bui_corp_year2_annual_subtotal_ownership_applied numeric(15,2),
    bui_corp_year3_taxable_income numeric(15,2),
    bui_corp_year3_total_tax numeric(15,2),
    bui_corp_year3_gain_loss numeric(15,2),
    bui_corp_year3_other_income_loss numeric(15,2),
    bui_corp_year3_depreciation numeric(15,2),
    bui_corp_year3_depletion numeric(15,2),
    bui_corp_year3_domestic_production_activities numeric(15,2),
    bui_corp_year3_other_deductions numeric(15,2),
    bui_corp_year3_net_operating_loss_special_deductions numeric(15,2),
    bui_corp_year3_notes_payable_less_one_year numeric(15,2),
    bui_corp_year3_meals_exclusion numeric(15,2),
    bui_corp_year3_dividends_paid_to_borrower numeric(15,2),
    bui_corp_year3_annual_subtotal numeric(15,2),
    bui_corp_year3_ownership_percent numeric(11,9),
    bui_corp_year3_annual_subtotal_ownership_applied numeric(15,2),
    bui_sch_f_year1_specific_income_loss numeric(15,2),
    bui_sch_f_year1_nonrecurring_income_loss numeric(15,2),
    bui_sch_f_year1_depreciation numeric(15,2),
    bui_sch_f_year1_amortization_loss_depletion numeric(15,2),
    bui_sch_f_year1_business_use_home numeric(15,2),
    bui_sch_f_year2_specific_income_loss numeric(15,2),
    bui_sch_f_year2_nonrecurring_income_loss numeric(15,2),
    bui_sch_f_year2_depreciation numeric(15,2),
    bui_sch_f_year2_amortization_loss_depletion numeric(15,2),
    bui_sch_f_year2_business_use_home numeric(15,2),
    bui_sch_f_year3_specific_income_loss numeric(15,2),
    bui_sch_f_year3_nonrecurring_income_loss numeric(15,2),
    bui_sch_f_year3_depreciation numeric(15,2),
    bui_sch_f_year3_amortization_loss_depletion numeric(15,2),
    bui_sch_f_year3_business_use_home numeric(15,2),
    bui_underwriter_comments varchar(1024),
    etl_batch_id text
);

alter table history_octane.business_income owner to deployer;

create index idx_business_income__data_source_deleted_flag
    on history_octane.business_income (data_source_deleted_flag);

create index idx_business_income__data_source_updated_datetime
    on history_octane.business_income (data_source_updated_datetime);

create index idx_business_income__pid
    on history_octane.business_income (bui_pid);

create index idx_business_income__pid_version
    on history_octane.business_income (bui_pid, bui_version);

create index idx_business_income__etl_batch_id
    on history_octane.business_income (etl_batch_id);

grant select on history_octane.business_income to readonly;

grant insert, select, update on history_octane.business_income to etl_loan;

create table history_octane.consumer_privacy_affected_borrower
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    cpab_pid bigint not null,
    cpab_version integer,
    cpab_consumer_privacy_request_pid bigint,
    cpab_deal_pid bigint,
    cpab_borrower_pid bigint,
    etl_batch_id text
);

alter table history_octane.consumer_privacy_affected_borrower owner to deployer;

create index idx_346a25b840c2a776e6a1f449adbf9718
    on history_octane.consumer_privacy_affected_borrower (data_source_deleted_flag);

create index idx_80f21523e2d55c562acd806a5983c7d2
    on history_octane.consumer_privacy_affected_borrower (data_source_updated_datetime);

create index idx_consumer_privacy_affected_borrower__pid
    on history_octane.consumer_privacy_affected_borrower (cpab_pid);

create index idx_consumer_privacy_affected_borrower__pid_version
    on history_octane.consumer_privacy_affected_borrower (cpab_pid, cpab_version);

create index idx_consumer_privacy_affected_borrower__etl_batch_id
    on history_octane.consumer_privacy_affected_borrower (etl_batch_id);

grant select on history_octane.consumer_privacy_affected_borrower to readonly;

grant insert, select, update on history_octane.consumer_privacy_affected_borrower to etl_loan;

create table history_octane.job_income
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ji_pid bigint not null,
    ji_version integer,
    ji_borrower_income_pid bigint,
    ji_estimated_mode boolean,
    ji_line_of_work_years integer,
    ji_voe_written_required boolean,
    ji_voe_written_system boolean,
    ji_voe_written_forced boolean,
    ji_base_income_calc_method_type varchar(128),
    ji_monthly_base_unadjusted_amount numeric(15,2),
    ji_monthly_base_adjustment_amount numeric(15,2),
    ji_overtime_income_calc_method_type varchar(128),
    ji_monthly_overtime_unadjusted_amount numeric(15,2),
    ji_monthly_overtime_adjustment_amount numeric(15,2),
    ji_bonus_income_calc_method_type varchar(128),
    ji_monthly_bonus_unadjusted_amount numeric(15,2),
    ji_monthly_bonus_adjustment_amount numeric(15,2),
    ji_commissions_income_calc_method_type varchar(128),
    ji_monthly_commissions_unadjusted_amount numeric(15,2),
    ji_monthly_commissions_adjustment_amount numeric(15,2),
    ji_tip_income_calc_method_type varchar(128),
    ji_monthly_tip_unadjusted_amount numeric(15,2),
    ji_monthly_tip_adjustment_amount numeric(15,2),
    ji_adjustment_income_calc_method_type varchar(128),
    ji_monthly_adjustment_amount numeric(15,2),
    ji_position varchar(32),
    ji_employer_relative boolean,
    ji_employer_property_seller boolean,
    ji_employer_real_estate_broker boolean,
    ji_military_job boolean,
    ji_estimated_monthly_military_amount numeric(15,2),
    ji_monthly_military_base_pay_amount numeric(15,2),
    ji_monthly_military_clothes_allowance_ungrossed_amount numeric(15,2),
    ji_monthly_military_combat_pay_amount numeric(15,2),
    ji_monthly_military_flight_pay_amount numeric(15,2),
    ji_monthly_military_hazard_pay_amount numeric(15,2),
    ji_monthly_military_housing_allowance_ungrossed_amount numeric(15,2),
    ji_monthly_military_overseas_pay_amount numeric(15,2),
    ji_monthly_military_prop_pay_amount numeric(15,2),
    ji_monthly_military_quarters_allowance_ungrossed_amount numeric(15,2),
    ji_monthly_military_rations_allowance_ungrossed_amount numeric(15,2),
    ji_military_gross_up boolean,
    ji_military_gross_up_percent numeric(11,9),
    ji_monthly_military_clothes_allowance_amount numeric(15,2),
    ji_monthly_military_quarters_allowance_amount numeric(15,2),
    ji_monthly_military_rations_allowance_amount numeric(15,2),
    ji_monthly_military_housing_allowance_amount numeric(15,2),
    ji_military_pay_subtotal_amount numeric(15,2),
    ji_military_allowance_subtotal_amount numeric(15,2),
    ji_monthly_military_total_amount numeric(15,2),
    ji_annual_military_total_amount numeric(15,2),
    ji_job_year1_year integer,
    ji_job_year1_year_include boolean,
    ji_job_year1_from_date date,
    ji_job_year1_through_date date,
    ji_job_year1_months numeric(4,2),
    ji_job_year1_base_input_amount numeric(15,2),
    ji_job_year1_monthly_base_amount numeric(15,2),
    ji_job_year1_overtime_input_amount numeric(15,2),
    ji_job_year1_monthly_overtime_amount numeric(15,2),
    ji_job_year1_bonus_input_amount numeric(15,2),
    ji_job_year1_monthly_bonus_amount numeric(15,2),
    ji_job_year1_commissions_input_amount numeric(15,2),
    ji_job_year1_monthly_commissions_amount numeric(15,2),
    ji_job_year1_tip_input_amount numeric(15,2),
    ji_job_year1_monthly_tip_amount numeric(15,2),
    ji_job_year1_adjustment_input_amount numeric(15,2),
    ji_job_year1_monthly_adjustment_amount numeric(15,2),
    ji_job_year1_monthly_total_amount numeric(15,2),
    ji_job_year1_annual_total_amount numeric(15,2),
    ji_job_year1_monthly_total_commissions_percent numeric(11,9),
    ji_job_year2_year integer,
    ji_job_year2_year_include boolean,
    ji_job_year2_from_date date,
    ji_job_year2_through_date date,
    ji_job_year2_months numeric(4,2),
    ji_job_year2_base_input_amount numeric(15,2),
    ji_job_year2_monthly_base_amount numeric(15,2),
    ji_job_year2_overtime_input_amount numeric(15,2),
    ji_job_year2_monthly_overtime_amount numeric(15,2),
    ji_job_year2_bonus_input_amount numeric(15,2),
    ji_job_year2_monthly_bonus_amount numeric(15,2),
    ji_job_year2_commissions_input_amount numeric(15,2),
    ji_job_year2_monthly_commissions_amount numeric(15,2),
    ji_job_year2_tip_input_amount numeric(15,2),
    ji_job_year2_monthly_tip_amount numeric(15,2),
    ji_job_year2_adjustment_input_amount numeric(15,2),
    ji_job_year2_monthly_adjustment_amount numeric(15,2),
    ji_job_year2_monthly_total_amount numeric(15,2),
    ji_job_year2_annual_total_amount numeric(15,2),
    ji_job_year2_monthly_total_commissions_percent numeric(11,9),
    ji_job_year3_year integer,
    ji_job_year3_year_include boolean,
    ji_job_year3_from_date date,
    ji_job_year3_through_date date,
    ji_job_year3_months numeric(4,2),
    ji_job_year3_base_input_amount numeric(15,2),
    ji_job_year3_monthly_base_amount numeric(15,2),
    ji_job_year3_overtime_input_amount numeric(15,2),
    ji_job_year3_monthly_overtime_amount numeric(15,2),
    ji_job_year3_bonus_input_amount numeric(15,2),
    ji_job_year3_monthly_bonus_amount numeric(15,2),
    ji_job_year3_commissions_input_amount numeric(15,2),
    ji_job_year3_monthly_commissions_amount numeric(15,2),
    ji_job_year3_tip_input_amount numeric(15,2),
    ji_job_year3_monthly_tip_amount numeric(15,2),
    ji_job_year3_adjustment_input_amount numeric(15,2),
    ji_job_year3_monthly_adjustment_amount numeric(15,2),
    ji_job_year3_monthly_total_amount numeric(15,2),
    ji_job_year3_annual_total_amount numeric(15,2),
    ji_job_year3_monthly_total_commissions_percent numeric(11,9),
    ji_estimated_monthly_base_amount numeric(15,2),
    ji_estimated_monthly_bonus_amount numeric(15,2),
    ji_estimated_monthly_overtime_amount numeric(15,2),
    ji_estimated_monthly_commissions_amount numeric(15,2),
    ji_estimated_monthly_tip_amount numeric(15,2),
    ji_estimated_monthly_total_amount numeric(15,2),
    ji_estimated_annual_total_amount numeric(15,2),
    ji_estimated_monthly_total_commissions_percent numeric(11,9),
    ji_worksheet_monthly_base_amount numeric(15,2),
    ji_worksheet_monthly_bonus_amount numeric(15,2),
    ji_worksheet_monthly_overtime_amount numeric(15,2),
    ji_worksheet_monthly_commissions_amount numeric(15,2),
    ji_worksheet_monthly_tip_amount numeric(15,2),
    ji_worksheet_monthly_total_amount numeric(15,2),
    ji_worksheet_annual_total_amount numeric(15,2),
    ji_worksheet_monthly_total_commissions_percent numeric(11,9),
    ji_working_monthly_base_amount numeric(15,2),
    ji_working_monthly_bonus_amount numeric(15,2),
    ji_working_monthly_overtime_amount numeric(15,2),
    ji_working_monthly_commissions_amount numeric(15,2),
    ji_working_monthly_tip_amount numeric(15,2),
    ji_working_monthly_total_amount numeric(15,2),
    ji_working_annual_total_amount numeric(15,2),
    ji_working_monthly_total_commissions_percent numeric(11,9),
    ji_underwriter_comments varchar(1024),
    ji_foreign_income boolean,
    ji_seasonal_income boolean,
    ji_voe_third_party_verifier_order_id varchar(16),
    ji_employer_voe_name varchar(128),
    ji_employer_voe_title varchar(128),
    ji_employer_voe_phone varchar(32),
    ji_employer_voe_phone_extension varchar(16),
    ji_employer_voe_fax varchar(32),
    ji_employer_voe_email varchar(256),
    ji_phone_voe_verify_method_type varchar(128),
    ji_address_voe_verify_method_type varchar(128),
    ji_verified_date date,
    ji_verified_by varchar(128),
    ji_voe_verbal_verify_method_type varchar(128),
    ji_voe_third_party_verifier_type varchar(128),
    ji_employer_other_interested_party boolean,
    ji_employer_other_interested_party_description varchar(128),
    ji_line_of_work_months integer,
    etl_batch_id text
);

alter table history_octane.job_income owner to deployer;

create index idx_job_income__data_source_deleted_flag
    on history_octane.job_income (data_source_deleted_flag);

create index idx_job_income__data_source_updated_datetime
    on history_octane.job_income (data_source_updated_datetime);

create index idx_job_income__pid
    on history_octane.job_income (ji_pid);

create index idx_job_income__pid_version
    on history_octane.job_income (ji_pid, ji_version);

create index idx_job_income__etl_batch_id
    on history_octane.job_income (etl_batch_id);

grant select on history_octane.job_income to readonly;

grant insert, select, update on history_octane.job_income to etl_loan;

create table history_octane.lp_finding
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lpf_pid bigint not null,
    lpf_version integer,
    lpf_lp_request_pid bigint,
    lpf_lp_finding_message_type varchar(128),
    lpf_finding_yes_no_unknown_type varchar(128),
    lpf_finding_value varchar(128),
    etl_batch_id text
);

alter table history_octane.lp_finding owner to deployer;

create index idx_lp_finding__data_source_deleted_flag
    on history_octane.lp_finding (data_source_deleted_flag);

create index idx_lp_finding__data_source_updated_datetime
    on history_octane.lp_finding (data_source_updated_datetime);

create index idx_lp_finding__pid
    on history_octane.lp_finding (lpf_pid);

create index idx_lp_finding__pid_version
    on history_octane.lp_finding (lpf_pid, lpf_version);

create index idx_lp_finding__etl_batch_id
    on history_octane.lp_finding (etl_batch_id);

grant select on history_octane.lp_finding to readonly;

grant insert, select, update on history_octane.lp_finding to etl_loan;

create table history_octane.lp_request_credit
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lprc_pid bigint not null,
    lprc_version integer,
    lprc_lp_request_pid bigint,
    lprc_create_datetime timestamp,
    lprc_credit_report_create_datetime timestamp,
    lprc_credit_bureau_type varchar(128),
    lprc_credit_report_identifier varchar(32),
    lprc_credit_report_name varchar(256),
    lprc_aus_credit_service_type varchar(128),
    lprc_borrower_1_borrower_tiny_id_type varchar(128),
    lprc_borrower_2_borrower_tiny_id_type varchar(128),
    etl_batch_id text
);

alter table history_octane.lp_request_credit owner to deployer;

create index idx_lp_request_credit__data_source_deleted_flag
    on history_octane.lp_request_credit (data_source_deleted_flag);

create index idx_lp_request_credit__data_source_updated_datetime
    on history_octane.lp_request_credit (data_source_updated_datetime);

create index idx_lp_request_credit__pid
    on history_octane.lp_request_credit (lprc_pid);

create index idx_lp_request_credit__pid_version
    on history_octane.lp_request_credit (lprc_pid, lprc_version);

create index idx_lp_request_credit__etl_batch_id
    on history_octane.lp_request_credit (etl_batch_id);

grant select on history_octane.lp_request_credit to readonly;

grant insert, select, update on history_octane.lp_request_credit to etl_loan;

create table history_octane.mers_daily_report
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    medr_pid bigint not null,
    medr_version integer,
    medr_account_pid bigint,
    medr_create_datetime timestamp,
    medr_report_date date,
    medr_import_status_type varchar(128),
    medr_import_status_messages text,
    medr_import_attempt_count integer,
    medr_imported_loan_count integer,
    medr_consolidated_report_text_repository_file_pid bigint,
    etl_batch_id text
);

alter table history_octane.mers_daily_report owner to deployer;

create index idx_mers_daily_report__data_source_deleted_flag
    on history_octane.mers_daily_report (data_source_deleted_flag);

create index idx_mers_daily_report__data_source_updated_datetime
    on history_octane.mers_daily_report (data_source_updated_datetime);

create index idx_mers_daily_report__pid
    on history_octane.mers_daily_report (medr_pid);

create index idx_mers_daily_report__pid_version
    on history_octane.mers_daily_report (medr_pid, medr_version);

create index idx_mers_daily_report__etl_batch_id
    on history_octane.mers_daily_report (etl_batch_id);

grant select on history_octane.mers_daily_report to readonly;

grant insert, select, update on history_octane.mers_daily_report to etl_loan;

create table history_octane.military_service
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ms_pid bigint not null,
    ms_version integer,
    ms_borrower_pid bigint,
    ms_from_date date,
    ms_through_date date,
    ms_name_used_during_service varchar(128),
    ms_service_number varchar(32),
    ms_military_branch_type varchar(128),
    ms_military_service_type varchar(128),
    ms_military_status_type varchar(128),
    etl_batch_id text
);

alter table history_octane.military_service owner to deployer;

create index idx_military_service__data_source_deleted_flag
    on history_octane.military_service (data_source_deleted_flag);

create index idx_military_service__data_source_updated_datetime
    on history_octane.military_service (data_source_updated_datetime);

create index idx_military_service__pid
    on history_octane.military_service (ms_pid);

create index idx_military_service__pid_version
    on history_octane.military_service (ms_pid, ms_version);

create index idx_military_service__etl_batch_id
    on history_octane.military_service (etl_batch_id);

grant select on history_octane.military_service to readonly;

grant insert, select, update on history_octane.military_service to etl_loan;

create table history_octane.other_income
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    oi_pid bigint not null,
    oi_version integer,
    oi_other_income_type varchar(128),
    oi_borrower_income_pid bigint,
    oi_estimated_net_income_amount numeric(15,2),
    oi_estimated_mode boolean,
    oi_worksheet_monthly_total_amount numeric(15,2),
    oi_monthly_total_amount numeric(15,2),
    oi_borrower_income_percent numeric(11,9),
    oi_description varchar(128),
    oi_calc_method_type varchar(128),
    oi_common_year1_year integer,
    oi_common_year1_year_include boolean,
    oi_common_year1_from_date date,
    oi_common_year1_through_date date,
    oi_common_year1_months numeric(4,2),
    oi_common_year1_annual_total_amount numeric(15,2),
    oi_common_year1_monthly_total_amount numeric(15,2),
    oi_common_year2_year integer,
    oi_common_year2_year_include boolean,
    oi_common_year2_from_date date,
    oi_common_year2_through_date date,
    oi_common_year2_months numeric(4,2),
    oi_common_year2_annual_total_amount numeric(15,2),
    oi_common_year2_monthly_total_amount numeric(15,2),
    oi_common_year3_year integer,
    oi_common_year3_year_include boolean,
    oi_common_year3_from_date date,
    oi_common_year3_through_date date,
    oi_common_year3_months numeric(4,2),
    oi_common_year3_annual_total_amount numeric(15,2),
    oi_common_year3_monthly_total_amount numeric(15,2),
    oi_simple_year1_unadjusted_amount numeric(15,2),
    oi_simple_year1_income_federal_tax_exempt boolean,
    oi_simple_year1_tax_exempt_tax_rate_percent numeric(11,9),
    oi_simple_year1_tax_exempt_amount numeric(15,2),
    oi_simple_year2_unadjusted_amount numeric(15,2),
    oi_simple_year2_income_federal_tax_exempt boolean,
    oi_simple_year2_tax_exempt_tax_rate_percent numeric(11,9),
    oi_simple_year2_tax_exempt_amount numeric(15,2),
    oi_simple_year3_unadjusted_amount numeric(15,2),
    oi_simple_year3_income_federal_tax_exempt boolean,
    oi_simple_year3_tax_exempt_tax_rate_percent numeric(11,9),
    oi_simple_year3_tax_exempt_amount numeric(15,2),
    oi_simple_unadjusted_monthly_amount numeric(15,2),
    oi_simple_income_federal_tax_exempt boolean,
    oi_simple_tax_exempt_tax_rate_percent numeric(11,9),
    oi_simple_tax_exempt_amount numeric(15,2),
    oi_simple_calculated_monthly_amount numeric(15,2),
    oi_underwriter_comments varchar(1024),
    oi_mortgage_credit_certificate_issuer_pid bigint,
    oi_mcc_reservation_number varchar(128),
    oi_mcc_reservation_date date,
    oi_mcc_reservation_expiration_date date,
    oi_mcc_commitment_number varchar(128),
    oi_mcc_underwriting_certification_deadline_date date,
    oi_mcc_delivered_by_date date,
    oi_unadjusted_monthly_total_amount numeric(15,2),
    oi_simple_year1_unadjusted_monthly_amount numeric(15,2),
    oi_simple_year2_unadjusted_monthly_amount numeric(15,2),
    oi_simple_year3_unadjusted_monthly_amount numeric(15,2),
    etl_batch_id text
);

alter table history_octane.other_income owner to deployer;

create index idx_other_income__data_source_deleted_flag
    on history_octane.other_income (data_source_deleted_flag);

create index idx_other_income__data_source_updated_datetime
    on history_octane.other_income (data_source_updated_datetime);

create index idx_other_income__pid
    on history_octane.other_income (oi_pid);

create index idx_other_income__pid_version
    on history_octane.other_income (oi_pid, oi_version);

create index idx_other_income__etl_batch_id
    on history_octane.other_income (etl_batch_id);

grant select on history_octane.other_income to readonly;

grant insert, select, update on history_octane.other_income to etl_loan;

create table history_octane.proposal
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    prp_pid bigint not null,
    prp_version integer,
    prp_decision_lp_request_pid bigint,
    prp_decision_du_request_pid bigint,
    prp_proposal_type varchar(128),
    prp_description varchar(256),
    prp_doc_level_type varchar(128),
    prp_loan_purpose_type varchar(128),
    prp_name varchar(128),
    prp_create_datetime timestamp,
    prp_effective_funding_date date,
    prp_estimated_funding_date date,
    prp_calculated_earliest_allowed_consummation_date date,
    prp_overridden_earliest_allowed_consummation_date date,
    prp_effective_earliest_allowed_consummation_date date,
    prp_earliest_allowed_consummation_date_override_reason text,
    prp_last_requested_disclosure_date date,
    prp_closing_document_sign_datetime timestamp,
    prp_scheduled_closing_document_sign_datetime timestamp,
    prp_rescission_through_date date,
    prp_rescission_notification_date date,
    prp_rescission_notification_by varchar(256),
    prp_rescission_notification_type varchar(128),
    prp_rescission_effective_date date,
    prp_first_payment_date date,
    prp_first_payment_date_auto_compute boolean,
    prp_property_usage_type varchar(128),
    prp_estimated_property_value_amount numeric(15),
    prp_smart_charges_enabled boolean,
    prp_charges_updated_datetime timestamp,
    prp_smart_docs_enabled boolean,
    prp_docs_enabled_datetime timestamp,
    prp_request_fha_mip_refund_required boolean,
    prp_request_recording_fees_required boolean,
    prp_request_property_taxes_required boolean,
    prp_property_tax_request_error_messages text,
    prp_fha_mip_refund_request_input_error boolean,
    prp_recording_fees_request_input_error boolean,
    prp_property_taxes_request_input_error boolean,
    prp_publish boolean,
    prp_publish_date date,
    prp_ipc_auto_compute boolean,
    prp_ipc_limit_percent numeric(11,9),
    prp_ipc_maximum_amount_allowed numeric(15,2),
    prp_ipc_amount numeric(15,2),
    prp_ipc_percent numeric(11,9),
    prp_ipc_financing_concession_amount numeric(15,2),
    prp_ipc_non_cash_concession_amount numeric(15,2),
    prp_sale_price_amount numeric(15),
    prp_structure_type varchar(128),
    prp_deal_pid bigint,
    prp_gfe_interest_rate_expiration_date date,
    prp_gfe_lock_duration_days integer,
    prp_gfe_lock_before_settlement_days integer,
    prp_proposal_expiration_date date,
    prp_uuts_master_contact_name varchar(128),
    prp_uuts_master_contact_title varchar(128),
    prp_uuts_master_office_phone varchar(32),
    prp_uuts_master_office_phone_extension varchar(16),
    prp_underwrite_risk_assessment_type varchar(128),
    prp_underwriting_comments varchar(1024),
    prp_reserves_auto_compute boolean,
    prp_reserves_amount numeric(15,2),
    prp_reserves_months integer,
    prp_underwrite_disposition_type varchar(128),
    prp_underwrite_publish_date date,
    prp_underwrite_expiration_date date,
    prp_usda_gsa_sam_exclusion varchar(128),
    prp_usda_gsa_sam_checked_date date,
    prp_usda_rd_single_family_housing_type varchar(128),
    prp_underwrite_method_type varchar(128),
    prp_mi_required boolean,
    prp_decision_credit_score_borrower_pid bigint,
    prp_decision_credit_score integer,
    prp_estimated_credit_score integer,
    prp_effective_credit_score integer,
    prp_mortgagee_builder_seller_relationship varchar(128),
    prp_fha_prior_agency_case_id varchar(32),
    prp_fha_prior_agency_case_endorsement_date date,
    prp_fha_refinance_authorization_number varchar(16),
    prp_fha_refinance_authorization_expiration_date date,
    prp_fhac_refinance_authorization_messages text,
    prp_fha_203k_consultant_id varchar(8),
    prp_hud_fha_de_approval_type varchar(128),
    prp_owner_occupancy_not_required boolean,
    prp_va_monthly_utilities_included varchar(128),
    prp_va_maintenance_utilities_auto_compute boolean,
    prp_va_monthly_maintenance_utilities_amount numeric(15,2),
    prp_va_maintenance_utilities_per_square_feet_amount numeric(15,2),
    prp_household_size_count integer,
    prp_va_past_credit_record_type varchar(128),
    prp_va_meets_credit_standards varchar(128),
    prp_va_prior_paid_in_full_loan_number varchar(32),
    prp_note_date date,
    prp_security_instrument_type varchar(128),
    prp_trustee_pid bigint,
    prp_trustee_name varchar(128),
    prp_trustee_address_street1 varchar(128),
    prp_trustee_address_street2 varchar(128),
    prp_trustee_address_city varchar(128),
    prp_trustee_address_state varchar(128),
    prp_trustee_address_postal_code varchar(128),
    prp_trustee_address_country varchar(128),
    prp_trustee_mers_org_id varchar(7),
    prp_trustee_phone_number varchar(32),
    prp_fre_ctp_closing_feature_type varchar(128),
    prp_fre_ctp_closing_type varchar(128),
    prp_fre_ctp_first_payment_due_date date,
    prp_purchase_contract_date date,
    prp_purchase_contract_financing_contingency_date date,
    prp_purchase_contract_funding_date date,
    prp_effective_property_value_type varchar(128),
    prp_effective_property_value_amount numeric(15),
    prp_decision_appraised_value_amount numeric(15),
    prp_fha_va_reasonable_value_amount numeric(15),
    prp_cd_clear_date date,
    prp_disaster_declaration_check_date_type varchar(128),
    prp_disaster_declaration_check_date date,
    prp_any_disaster_declaration_before_appraisal boolean,
    prp_any_disaster_declaration_after_appraisal boolean,
    prp_any_disaster_declaration boolean,
    prp_early_first_payment varchar(128),
    prp_property_acquired_through_inheritance varchar(128),
    prp_property_acquired_through_ancillary_relief varchar(128),
    prp_delayed_financing_exception_guidelines_applicable boolean,
    prp_delayed_financing_exception_verified boolean,
    prp_effective_property_value_explanation_type varchar(128),
    prp_taxes_escrowed varchar(128),
    prp_flood_insurance_applicable varchar(128),
    prp_windstorm_insurance_applicable varchar(128),
    prp_earthquake_insurance_applicable varchar(128),
    prp_arms_length varchar(128),
    prp_fha_non_arms_length_ltv_exception_type varchar(128),
    prp_fha_non_arms_length_ltv_exception_verified boolean,
    prp_escrow_cushion_months integer,
    prp_escrow_cushion_months_auto_compute boolean,
    prp_fha_eligible_maximum_financing varchar(128),
    prp_hazard_insurance_applicable varchar(128),
    prp_property_repairs_required_type varchar(128),
    prp_property_repairs_description varchar(1024),
    prp_property_repairs_cost_amount numeric(15,2),
    prp_property_repairs_holdback_calc_type varchar(128),
    prp_property_repairs_holdback_amount numeric(15,2),
    prp_property_repairs_holdback_payer_type varchar(128),
    prp_property_repairs_holdback_administrator varchar(128),
    prp_property_repairs_holdback_required_completion_date date,
    prp_property_repairs_completed_notification_date date,
    prp_property_repairs_inspection_ordered_date date,
    prp_property_repairs_inspection_completed_date date,
    prp_property_repairs_funds_released_contractor_date date,
    prp_anti_steering_lowest_rate_option_rate_percent numeric(11,9),
    prp_anti_steering_lowest_rate_option_fee_amount numeric(15,2),
    prp_anti_steering_lowest_rate_wo_neg_option_rate_percent numeric(11,9),
    prp_anti_steering_lowest_rate_wo_neg_option_fee_amount numeric(15,2),
    prp_anti_steering_lowest_cost_option_rate_percent numeric(11,9),
    prp_anti_steering_lowest_cost_option_fee_amount numeric(15,2),
    prp_initial_uw_submit_datetime timestamp,
    prp_va_notice_of_value_source_type varchar(128),
    prp_va_notice_of_value_date date,
    prp_va_notice_of_value_estimated_reasonable_value_amount numeric(15),
    prp_sar_significant_adjustments boolean,
    prp_separate_transaction_for_land_acquisition varchar(128),
    prp_land_acquisition_transaction_date date,
    prp_land_acquisition_price numeric(15),
    prp_cash_out_reason_home_improvement boolean,
    prp_cash_out_reason_debt_or_debt_consolidation boolean,
    prp_cash_out_reason_personal_use boolean,
    prp_cash_out_reason_future_investment_not_under_contract boolean,
    prp_cash_out_reason_future_investment_under_contract boolean,
    prp_cash_out_reason_other boolean,
    prp_cash_out_reason_other_text varchar(128),
    prp_decision_veteran_borrower_pid bigint,
    prp_signed_closing_doc_received_datetime timestamp,
    prp_other_lender_requires_appraisal boolean,
    prp_other_lender_requires_appraisal_reason text,
    prp_texas_equity_determination_datetime timestamp,
    prp_texas_equity_conversion_determination_datetime timestamp,
    prp_texas_equity_determination_datetime_override boolean,
    prp_texas_equity_determination_datetime_override_reason text,
    prp_texas_equity_conversion_determination_datetime_override boolean,
    prp_texas_equity_conversion_determ_datetime_override_reason text,
    prp_cema varchar(128),
    prp_cema_borrower_savings numeric(15,2),
    prp_any_vesting_changes varchar(128),
    prp_vesting_change_titleholder_added varchar(128),
    prp_vesting_change_titleholder_removed varchar(128),
    prp_vesting_change_titleholder_name_change varchar(128),
    prp_deed_taxes_applicable boolean,
    prp_deed_taxes_applicable_explanation varchar(1024),
    prp_deed_taxes_auto_compute boolean,
    prp_deed_taxes_auto_compute_override_reason varchar(1024),
    prp_intent_to_proceed_date date,
    prp_intent_to_proceed_type varchar(128),
    prp_intent_to_proceed_provider_unparsed_name varchar(128),
    prp_intent_to_proceed_obtainer_unparsed_name varchar(128),
    prp_cash_out_reason_student_loans boolean,
    prp_household_income_exclusive_edit boolean,
    prp_purchase_contract_received_date date,
    prp_down_payment_percent_mode boolean,
    prp_lender_escrow_loan_amount numeric(15,2),
    prp_underwrite_disposition_note varchar(1024),
    prp_rescission_applicable boolean,
    prp_area_median_income numeric(15,2),
    prp_total_income_to_ami_ratio numeric(14,9),
    prp_cr_tracker_url varchar(1024),
    prp_construction_borrower_contribution_amount numeric(15,2),
    prp_construction_lot_ownership_status_type varchar(128),
    prp_intent_to_proceed_provided boolean,
    prp_effective_signing_location_state varchar(128),
    prp_effective_signing_location_city varchar(128),
    prp_va_required_guaranty_amount numeric(15,2),
    prp_va_amount_used_to_calculate_maximum_guaranty numeric(15,2),
    prp_va_actual_guaranty_amount numeric(15,2),
    prp_last_corrective_disclosure_processed_datetime timestamp,
    prp_user_entered_note_date date,
    prp_effective_note_date date,
    prp_lender_escrow_loan_due_date date,
    prp_va_maximum_base_loan_amount numeric(15,2),
    prp_va_maximum_funding_fee_amount numeric(15,2),
    prp_va_maximum_total_loan_amount numeric(15,2),
    prp_va_required_cash_amount numeric(15,2),
    prp_va_guaranty_percent numeric(11,9),
    prp_gse_version_type varchar(128),
    prp_minimum_household_income_amount numeric(15,2),
    prp_minimum_residual_income_amount numeric(15,2),
    prp_minimum_residual_income_auto_compute boolean,
    prp_financed_property_improvements_category_type varchar(128),
    prp_adjusted_as_is_value_amount numeric(15),
    prp_after_improved_value_amount numeric(15),
    prp_hud_consultant varchar(128),
    prp_disclosure_action_type varchar(128),
    prp_financed_property_improvements boolean,
    prp_estimated_hard_construction_cost_amount bigint,
    prp_initial_uw_disposition_datetime timestamp,
    prp_preapproval_uw_submit_datetime timestamp,
    prp_preapproval_uw_disposition_datetime timestamp,
    prp_down_payment_percent numeric(11,9),
    prp_cash_out_reason_investment_or_business_property boolean,
    prp_cash_out_reason_business_debt_or_debt_consolidation boolean,
    prp_non_business_cash_out_reason_acknowledged varchar(128),
    prp_va_energy_efficient_improvements_amount numeric(15,2),
    prp_proposed_additional_monthly_payment numeric(17,2),
    prp_term_borrower_intends_to_retain_property integer,
    etl_batch_id text
);

alter table history_octane.proposal owner to deployer;

create index idx_proposal__data_source_deleted_flag
    on history_octane.proposal (data_source_deleted_flag);

create index idx_proposal__data_source_updated_datetime
    on history_octane.proposal (data_source_updated_datetime);

create index idx_proposal__pid
    on history_octane.proposal (prp_pid);

create index idx_proposal__pid_version
    on history_octane.proposal (prp_pid, prp_version);

create index fkt_prp_hud_consultant
    on history_octane.proposal (prp_hud_consultant);

create index fkt_prp_disclosure_action_type
    on history_octane.proposal (prp_disclosure_action_type);

create index fkt_prp_non_business_cash_out_reason_acknowledged
    on history_octane.proposal (prp_non_business_cash_out_reason_acknowledged);

create index idx_proposal__etl_batch_id
    on history_octane.proposal (etl_batch_id);

grant select on history_octane.proposal to readonly;

grant insert, select, update on history_octane.proposal to etl_loan;

create table history_octane.aus_request_number_ticker
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    arnt_pid bigint not null,
    arnt_version integer,
    arnt_proposal_pid bigint,
    arnt_next_aus_request_number integer,
    etl_batch_id text
);

alter table history_octane.aus_request_number_ticker owner to deployer;

create index idx_aus_request_number_ticker__data_source_deleted_flag
    on history_octane.aus_request_number_ticker (data_source_deleted_flag);

create index idx_aus_request_number_ticker__data_source_updated_datetime
    on history_octane.aus_request_number_ticker (data_source_updated_datetime);

create index idx_aus_request_number_ticker__pid
    on history_octane.aus_request_number_ticker (arnt_pid);

create index idx_aus_request_number_ticker__pid_version
    on history_octane.aus_request_number_ticker (arnt_pid, arnt_version);

create index idx_aus_request_number_ticker__etl_batch_id
    on history_octane.aus_request_number_ticker (etl_batch_id);

grant select on history_octane.aus_request_number_ticker to readonly;

grant insert, select, update on history_octane.aus_request_number_ticker to etl_loan;

create table history_octane.construction_draw
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    cd_pid bigint not null,
    cd_version integer,
    cd_proposal_pid bigint,
    cd_construction_draw_type varchar(128),
    cd_construction_draw_status_type varchar(128),
    cd_scheduled_disbursement_date date,
    cd_confirmation_datetime timestamp,
    cd_inspection_datetime timestamp,
    cd_disbursement_datetime timestamp,
    cd_boarded_datetime timestamp,
    cd_voided_datetime timestamp,
    cd_construction_draw_notes varchar(1024),
    cd_total_draw_amount numeric(15,2),
    cd_borrower_contribution_amount numeric(15,2),
    cd_lender_contribution_amount numeric(15,2),
    cd_construction_draw_number integer,
    cd_construction_draw_disbursed_at_closing boolean,
    etl_batch_id text
);

alter table history_octane.construction_draw owner to deployer;

create index idx_construction_draw__data_source_deleted_flag
    on history_octane.construction_draw (data_source_deleted_flag);

create index idx_construction_draw__data_source_updated_datetime
    on history_octane.construction_draw (data_source_updated_datetime);

create index idx_construction_draw__pid
    on history_octane.construction_draw (cd_pid);

create index idx_construction_draw__pid_version
    on history_octane.construction_draw (cd_pid, cd_version);

create index idx_construction_draw__etl_batch_id
    on history_octane.construction_draw (etl_batch_id);

grant select on history_octane.construction_draw to readonly;

grant insert, select, update on history_octane.construction_draw to etl_loan;

create table history_octane.construction_draw_number_ticker
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    cdnt_pid bigint not null,
    cdnt_version integer,
    cdnt_proposal_pid bigint,
    cdnt_next_construction_draw_number integer,
    etl_batch_id text
);

alter table history_octane.construction_draw_number_ticker owner to deployer;

create index idx_construction_draw_number_ticker__data_source_deleted_flag
    on history_octane.construction_draw_number_ticker (data_source_deleted_flag);

create index idx_4dc415afa171940e92646ce89e9f9385
    on history_octane.construction_draw_number_ticker (data_source_updated_datetime);

create index idx_construction_draw_number_ticker__pid
    on history_octane.construction_draw_number_ticker (cdnt_pid);

create index idx_construction_draw_number_ticker__pid_version
    on history_octane.construction_draw_number_ticker (cdnt_pid, cdnt_version);

create index idx_construction_draw_number_ticker__etl_batch_id
    on history_octane.construction_draw_number_ticker (etl_batch_id);

grant select on history_octane.construction_draw_number_ticker to readonly;

grant insert, select, update on history_octane.construction_draw_number_ticker to etl_loan;

create table history_octane.credit_inquiry
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ci_pid bigint not null,
    ci_version integer,
    ci_proposal_pid bigint,
    ci_credit_request_pid bigint,
    ci_inquiry_date date,
    ci_name varchar(128),
    ci_address_street1 varchar(128),
    ci_address_street2 varchar(128),
    ci_address_city varchar(128),
    ci_address_state varchar(128),
    ci_address_postal_code varchar(128),
    ci_address_country varchar(128),
    ci_phone varchar(32),
    ci_credit_inquiry_result_type varchar(128),
    ci_credit_business_type varchar(128),
    ci_credit_loan_type varchar(128),
    ci_equifax_included boolean,
    ci_experian_included boolean,
    ci_trans_union_included boolean,
    ci_explanation_type varchar(128),
    ci_explanation_info varchar(1024),
    ci_credit_report_identifier varchar(32),
    ci_inquiry_date_provided boolean,
    etl_batch_id text
);

alter table history_octane.credit_inquiry owner to deployer;

create index idx_credit_inquiry__data_source_deleted_flag
    on history_octane.credit_inquiry (data_source_deleted_flag);

create index idx_credit_inquiry__data_source_updated_datetime
    on history_octane.credit_inquiry (data_source_updated_datetime);

create index idx_credit_inquiry__pid
    on history_octane.credit_inquiry (ci_pid);

create index idx_credit_inquiry__pid_version
    on history_octane.credit_inquiry (ci_pid, ci_version);

create index idx_credit_inquiry__etl_batch_id
    on history_octane.credit_inquiry (etl_batch_id);

grant select on history_octane.credit_inquiry to readonly;

grant insert, select, update on history_octane.credit_inquiry to etl_loan;

create table history_octane.borrower_credit_inquiry
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    bci_pid bigint not null,
    bci_version integer,
    bci_credit_inquiry_pid bigint,
    bci_borrower_pid bigint,
    etl_batch_id text
);

alter table history_octane.borrower_credit_inquiry owner to deployer;

create index idx_borrower_credit_inquiry__data_source_deleted_flag
    on history_octane.borrower_credit_inquiry (data_source_deleted_flag);

create index idx_borrower_credit_inquiry__data_source_updated_datetime
    on history_octane.borrower_credit_inquiry (data_source_updated_datetime);

create index idx_borrower_credit_inquiry__pid
    on history_octane.borrower_credit_inquiry (bci_pid);

create index idx_borrower_credit_inquiry__pid_version
    on history_octane.borrower_credit_inquiry (bci_pid, bci_version);

create index idx_borrower_credit_inquiry__etl_batch_id
    on history_octane.borrower_credit_inquiry (etl_batch_id);

grant select on history_octane.borrower_credit_inquiry to readonly;

grant insert, select, update on history_octane.borrower_credit_inquiry to etl_loan;

create table history_octane.deal_snapshot
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    desn_pid bigint not null,
    desn_version integer,
    desn_snapshot_proposal_pid bigint,
    desn_decision_appraisal_condition_type varchar(128),
    desn_lender_lock_effective_expiration_datetime_main timestamp,
    desn_lender_lock_effective_expiration_datetime_piggyback timestamp,
    desn_lender_lock_status_type_main varchar(128),
    desn_lender_lock_status_type_piggyback varchar(128),
    desn_lender_lock_id_main varchar(11),
    desn_lender_lock_id_piggyback varchar(11),
    desn_preferred_vendor_used boolean,
    desn_lender_lock_start_datetime_main timestamp,
    desn_lender_lock_start_datetime_piggyback timestamp,
    desn_lender_lock_effective_duration_days_main integer,
    desn_lender_lock_effective_duration_days_piggyback integer,
    desn_lead_source_name varchar(128),
    desn_appraisal_rush_request boolean,
    desn_appraisal_transfer_specified boolean,
    desn_borrower_requires_appraisal boolean,
    desn_lender_requires_appraisal boolean,
    desn_product_requires_appraisal boolean,
    desn_override_calculated_appraisal_required boolean,
    desn_decision_appraisal_appraised_value_amount numeric(15),
    desn_appraisal_required boolean,
    desn_lender_concession_total_approved_amount_main numeric(15,2),
    desn_lender_concession_total_approved_amount_piggyback numeric(15,2),
    desn_relock_fee_gross_amount_main numeric(15,2),
    desn_relock_fee_gross_amount_piggyback numeric(15,2),
    desn_relock_fee_amount_less_concessions_main numeric(15,2),
    desn_relock_fee_amount_less_concessions_piggyback numeric(15,2),
    desn_relock_fee_amount_concessed_main numeric(15,2),
    desn_relock_fee_amount_concessed_piggyback numeric(15,2),
    desn_lock_extension_fee_gross_amount_main numeric(15,2),
    desn_lock_extension_fee_gross_amount_piggyback numeric(15,2),
    desn_lock_extension_fee_amount_less_concessions_main numeric(15,2),
    desn_lock_extension_fee_amount_less_concessions_piggyback numeric(15,2),
    desn_lock_extension_fee_amount_concessed_main numeric(15,2),
    desn_lock_extension_fee_amount_concessed_piggyback numeric(15,2),
    desn_lender_concession_remaining_amount_main numeric(15,2),
    desn_lender_concession_remaining_amount_piggyback numeric(15,2),
    desn_charge_credit_for_interest_rate_main numeric(15,2),
    desn_charge_credit_for_interest_rate_piggyback numeric(15,2),
    etl_batch_id text
);

alter table history_octane.deal_snapshot owner to deployer;

create index idx_deal_snapshot__data_source_deleted_flag
    on history_octane.deal_snapshot (data_source_deleted_flag);

create index idx_deal_snapshot__data_source_updated_datetime
    on history_octane.deal_snapshot (data_source_updated_datetime);

create index idx_deal_snapshot__pid
    on history_octane.deal_snapshot (desn_pid);

create index idx_deal_snapshot__pid_version
    on history_octane.deal_snapshot (desn_pid, desn_version);

create index idx_deal_snapshot__etl_batch_id
    on history_octane.deal_snapshot (etl_batch_id);

grant select on history_octane.deal_snapshot to readonly;

grant insert, select, update on history_octane.deal_snapshot to etl_loan;

create table history_octane.docusign_package
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dcsp_pid bigint not null,
    dcsp_version integer,
    dcsp_proposal_pid bigint,
    dcsp_envelope_id varchar(128),
    dcsp_esign_package_status_type varchar(128),
    dcsp_status_datetime timestamp,
    etl_batch_id text
);

alter table history_octane.docusign_package owner to deployer;

create index idx_docusign_package__data_source_deleted_flag
    on history_octane.docusign_package (data_source_deleted_flag);

create index idx_docusign_package__data_source_updated_datetime
    on history_octane.docusign_package (data_source_updated_datetime);

create index idx_docusign_package__pid
    on history_octane.docusign_package (dcsp_pid);

create index idx_docusign_package__pid_version
    on history_octane.docusign_package (dcsp_pid, dcsp_version);

create index idx_docusign_package__etl_batch_id
    on history_octane.docusign_package (etl_batch_id);

grant select on history_octane.docusign_package to readonly;

grant insert, select, update on history_octane.docusign_package to etl_loan;

create table history_octane.master_property_insurance
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    mpi_pid bigint not null,
    mpi_version integer,
    mpi_proposal_pid bigint,
    mpi_master_property_insurance_type varchar(128),
    mpi_policy_effective_date date,
    mpi_policy_expiration_date date,
    mpi_next_payment_date date,
    mpi_policy_property_coverage_amount numeric(15),
    mpi_policy_liability_coverage_amount numeric(15),
    mpi_policy_fidelity_coverage_amount numeric(15),
    mpi_policy_deductible_amount numeric(15),
    mpi_replacement_cost_amount numeric(15),
    mpi_coinsurance varchar(128),
    mpi_agreed_amount_endorsement varchar(128),
    mpi_company_name varchar(128),
    mpi_first_name varchar(32),
    mpi_middle_name varchar(32),
    mpi_last_name varchar(32),
    mpi_name_suffix varchar(32),
    mpi_title varchar(128),
    mpi_email varchar(256),
    mpi_mobile_phone varchar(32),
    mpi_office_phone varchar(32),
    mpi_office_phone_extension varchar(16),
    mpi_fax varchar(32),
    mpi_address_street1 varchar(128),
    mpi_address_street2 varchar(128),
    mpi_address_city varchar(128),
    mpi_address_state varchar(128),
    mpi_address_postal_code varchar(128),
    mpi_address_country varchar(16),
    mpi_policy_id varchar(128),
    etl_batch_id text
);

alter table history_octane.master_property_insurance owner to deployer;

create index idx_master_property_insurance__data_source_deleted_flag
    on history_octane.master_property_insurance (data_source_deleted_flag);

create index idx_master_property_insurance__data_source_updated_datetime
    on history_octane.master_property_insurance (data_source_updated_datetime);

create index idx_master_property_insurance__pid
    on history_octane.master_property_insurance (mpi_pid);

create index idx_master_property_insurance__pid_version
    on history_octane.master_property_insurance (mpi_pid, mpi_version);

create index idx_master_property_insurance__etl_batch_id
    on history_octane.master_property_insurance (etl_batch_id);

grant select on history_octane.master_property_insurance to readonly;

grant insert, select, update on history_octane.master_property_insurance to etl_loan;

create table history_octane.mi_integration_vendor_request
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    mivr_pid bigint not null,
    mivr_version integer,
    mivr_proposal_pid bigint,
    mivr_create_datetime timestamp,
    mivr_mi_company_name_type varchar(128),
    mivr_request_type varchar(128),
    mivr_mi_payment_type varchar(128),
    mivr_mi_payer_type varchar(128),
    mivr_mi_coverage_percentage numeric(11,9),
    mivr_mi_upfront_percentage numeric(11,9),
    mivr_mi_initial_monthly_annual_percentage numeric(11,9),
    mivr_mi_renewal_monthly_annual_percentage numeric(11,9),
    mivr_mi_initial_duration_months integer,
    mivr_mi_rate_quote_id varchar(128),
    mivr_mi_certificate_id varchar(128),
    mivr_request_status_type varchar(128),
    mivr_request_time_to_completion_ms bigint,
    mivr_eligible_mi_products boolean,
    mivr_input_errors text,
    mivr_service_errors text,
    mivr_internal_errors text,
    mivr_request_xml_pid bigint,
    mivr_response_xml_pid bigint,
    mivr_response_pdf_file_pid bigint,
    etl_batch_id text
);

alter table history_octane.mi_integration_vendor_request owner to deployer;

create index idx_mi_integration_vendor_request__data_source_deleted_flag
    on history_octane.mi_integration_vendor_request (data_source_deleted_flag);

create index idx_mi_integration_vendor_request__data_source_updated_datetime
    on history_octane.mi_integration_vendor_request (data_source_updated_datetime);

create index idx_mi_integration_vendor_request__pid
    on history_octane.mi_integration_vendor_request (mivr_pid);

create index idx_mi_integration_vendor_request__pid_version
    on history_octane.mi_integration_vendor_request (mivr_pid, mivr_version);

create index idx_mi_integration_vendor_request__etl_batch_id
    on history_octane.mi_integration_vendor_request (etl_batch_id);

grant select on history_octane.mi_integration_vendor_request to readonly;

grant insert, select, update on history_octane.mi_integration_vendor_request to etl_loan;

create table history_octane.loan
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    l_pid bigint not null,
    l_version integer,
    l_proposal_pid bigint,
    l_offering_pid bigint,
    l_product_terms_pid bigint,
    l_mortgage_type varchar(128),
    l_interest_only_type varchar(128),
    l_buydown_schedule_type varchar(128),
    l_prepay_penalty_schedule_type varchar(128),
    l_aus_type varchar(128),
    l_agency_case_id varchar(32),
    l_arm_index_datetime timestamp,
    l_arm_index_current_value_percent numeric(11,9),
    l_arm_margin_percent numeric(11,9),
    l_base_loan_amount numeric(17,2),
    l_buydown_contributor_type varchar(128),
    l_target_cash_out_amount numeric(15,2),
    l_heloc_maximum_balance_amount numeric(15),
    l_note_rate_percent numeric(11,9),
    l_initial_note_rate_percent numeric(11,9),
    l_lien_priority_type varchar(128),
    l_loan_amount numeric(17,2),
    l_financed_amount numeric(15),
    l_ltv_ratio_percent numeric(11,9),
    l_base_loan_amount_ltv_ratio_percent numeric(11,9),
    l_mi_requirement_ltv_ratio_percent numeric(11,9),
    l_mi_auto_compute boolean,
    l_mi_no_mi_product boolean,
    l_mi_input_type varchar(128),
    l_mi_company_name_type varchar(128),
    l_mi_certificate_id varchar(32),
    l_mi_premium_refundable_type varchar(128),
    l_mi_initial_calculation_type varchar(128),
    l_mi_renewal_calculation_type varchar(128),
    l_mi_payer_type varchar(128),
    l_mi_coverage_percent numeric(11,9),
    l_mi_ltv_cutoff_percent numeric(11,9),
    l_mi_midpoint_cutoff_required boolean,
    l_mi_required_monthly_payment_count integer,
    l_mi_actual_monthly_payment_count integer,
    l_mi_payment_type varchar(128),
    l_mi_upfront_amount numeric(15,2),
    l_mi_upfront_percent numeric(11,9),
    l_mi_initial_monthly_payment_amount numeric(15,2),
    l_mi_renewal_monthly_payment_annual_percent numeric(11,9),
    l_mi_renewal_monthly_payment_amount numeric(15,2),
    l_mi_initial_duration_months integer,
    l_mi_initial_monthly_payment_annual_percent numeric(11,9),
    l_mi_initial_calculated_rate_type varchar(128),
    l_mi_renewal_calculated_rate_type varchar(128),
    l_mi_base_rate_label varchar(16000),
    l_mi_base_monthly_payment_annual_percent numeric(11,9),
    l_mi_base_upfront_percent numeric(11,9),
    l_mi_base_monthly_payment_amount numeric(15,2),
    l_mi_base_upfront_payment_amount numeric(15,2),
    l_qualifying_rate_type varchar(128),
    l_qualifying_rate_input_percent numeric(11,9),
    l_qualifying_rate_percent numeric(11,9),
    l_fha_program_code_type varchar(128),
    l_fha_principal_write_down boolean,
    l_fhac_case_assignment_messages text,
    l_initial_pi_amount numeric(15,2),
    l_qualifying_pi_amount numeric(15,2),
    l_base_note_rate_percent numeric(11,9),
    l_base_arm_margin_percent numeric(11,9),
    l_base_price_percent numeric(11,9),
    l_lock_price_percent numeric(11,9),
    l_lock_duration_days integer,
    l_lock_commitment_type varchar(128),
    l_product_choice_datetime timestamp,
    l_hmda_purchaser_of_loan_2017_type varchar(128),
    l_hmda_purchaser_of_loan_2018_type varchar(128),
    l_texas_equity varchar(128),
    l_texas_equity_auto varchar(128),
    l_fnm_mbs_investor_contract_id varchar(6),
    l_base_guaranty_fee_basis_points numeric(15,2),
    l_guaranty_fee_basis_points numeric(15,2),
    l_guaranty_fee_after_alternate_payment_method_basis_points numeric(15,2),
    l_fnm_investor_product_plan_id varchar(5),
    l_uldd_loan_comment varchar(60),
    l_principal_curtailment_amount numeric(15,2),
    l_agency_case_id_assigned_date date,
    l_mi_lender_paid_rate_adjustment_percent numeric(11,9),
    l_apr numeric(11,9),
    l_finance_charge_amount numeric(15,2),
    l_apor_percent numeric(11,9),
    l_apor_date date,
    l_hmda_rate_spread_percent numeric(11,9),
    l_hoepa_apr numeric(11,9),
    l_hoepa_rate_spread numeric(11,9),
    l_hoepa_fees_dollar_amount numeric(15,2),
    l_hmda_hoepa_status_type varchar(128),
    l_rate_sheet_undiscounted_rate_percent numeric(11,9),
    l_effective_undiscounted_rate_percent numeric(11,9),
    l_last_unprocessed_changes_datetime timestamp,
    l_locked_price_change_percent numeric(11,9),
    l_interest_rate_fee_change_amount numeric(15,2),
    l_lender_concession_candidate boolean,
    l_durp_eligibility_opt_out boolean,
    l_qualified_mortgage_status_type varchar(128),
    l_qualified_mortgage boolean,
    l_lqa_purchase_eligibility_type varchar(128),
    l_student_loan_cash_out_refinance boolean,
    l_mi_rate_quote_id varchar(128),
    l_mi_integration_vendor_request_pid bigint,
    l_secondary_clear_to_commit boolean,
    l_qm_eligible boolean,
    l_fha_endorsement_date date,
    l_va_guaranty_date date,
    l_usda_guarantee_date date,
    l_hpml boolean,
    l_qualified_mortgage_rule_version_type varchar(128),
    l_qualified_mortgage_apr numeric(11,9),
    l_qualified_mortgage_max_allowed_rate_spread numeric(11,9),
    l_buyup_buydown_basis_points numeric(15,2),
    l_va_agency_case_id varchar(32),
    l_fha_agency_case_id varchar(32),
    l_usda_agency_case_id varchar(32),
    l_va_agency_case_id_assigned_date date,
    l_fha_agency_case_id_assigned_date date,
    l_usda_agency_case_id_assigned_date date,
    l_post_interest_only_first_payment_date date,
    etl_batch_id text
);

alter table history_octane.loan owner to deployer;

create index idx_loan__data_source_deleted_flag
    on history_octane.loan (data_source_deleted_flag);

create index idx_loan__data_source_updated_datetime
    on history_octane.loan (data_source_updated_datetime);

create index idx_loan__pid
    on history_octane.loan (l_pid);

create index idx_loan__pid_version
    on history_octane.loan (l_pid, l_version);

create index fkt_l_qualified_mortgage_rule_version_type
    on history_octane.loan (l_qualified_mortgage_rule_version_type);

create index idx_loan__etl_batch_id
    on history_octane.loan (etl_batch_id);

grant select on history_octane.loan to readonly;

grant insert, select, update on history_octane.loan to etl_loan;

create table history_octane.circumstance_change
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    cc_pid bigint not null,
    cc_version integer,
    cc_loan_pid bigint,
    cc_create_datetime timestamp,
    cc_circumstance_change_type varchar(128),
    cc_source_unparsed_name varchar(128),
    cc_expired boolean,
    cc_previous_formatted_value varchar(1024),
    cc_to_formatted_value varchar(1024),
    cc_expiration_date date,
    cc_system_added boolean,
    etl_batch_id text
);

alter table history_octane.circumstance_change owner to deployer;

create index idx_circumstance_change__data_source_deleted_flag
    on history_octane.circumstance_change (data_source_deleted_flag);

create index idx_circumstance_change__data_source_updated_datetime
    on history_octane.circumstance_change (data_source_updated_datetime);

create index idx_circumstance_change__pid
    on history_octane.circumstance_change (cc_pid);

create index idx_circumstance_change__pid_version
    on history_octane.circumstance_change (cc_pid, cc_version);

create index idx_circumstance_change__etl_batch_id
    on history_octane.circumstance_change (etl_batch_id);

grant select on history_octane.circumstance_change to readonly;

grant insert, select, update on history_octane.circumstance_change to etl_loan;

create table history_octane.ernst_request
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    enst_pid bigint not null,
    enst_version integer,
    enst_loan_pid bigint,
    enst_response_deal_system_file_pid bigint,
    enst_auto_compute boolean,
    enst_create_datetime timestamp,
    enst_ernst_request_status_type varchar(128),
    enst_error_messages text,
    enst_state varchar(2),
    enst_ernst_page_rec varchar(16),
    enst_sub_jurisdiction_name varchar(128),
    enst_torrens boolean,
    enst_security_instrument_request_type varchar(128),
    enst_security_instrument_index_fee_requested boolean,
    enst_security_instrument_index_fee_grantor_count integer,
    enst_security_instrument_index_fee_grantees_count integer,
    enst_security_instrument_index_fee_surnames_count integer,
    enst_security_instrument_index_fee_signatures_count integer,
    enst_security_instrument_page_count integer,
    enst_security_instrument_modification_amendment_page_count integer,
    enst_security_instrument_page_breakdown varchar(1024),
    enst_mortgage_new_debt_amount numeric(15),
    enst_mortgage_original_debt_amount numeric(15),
    enst_mortgage_unpaid_balance_amount numeric(15,2),
    enst_deed_request_type varchar(128),
    enst_deed_index_fee_requested boolean,
    enst_deed_index_fee_grantor_count integer,
    enst_deed_index_fee_grantees_count integer,
    enst_deed_index_fee_surnames_count integer,
    enst_deed_index_fee_signatures_count integer,
    enst_deed_page_count integer,
    enst_deed_page_breakdown varchar(256),
    enst_deed_consideration_amount numeric(15),
    enst_deed_amendment_page_count integer,
    enst_include_assignment boolean,
    enst_assign_index_fee_requested boolean,
    enst_assign_index_fee_grantor_count integer,
    enst_assign_index_fee_grantees_count integer,
    enst_assign_index_fee_surnames_count integer,
    enst_assign_index_fee_signatures_count integer,
    enst_assignment_page_count_per_doc integer,
    enst_assignment_count integer,
    enst_include_poa boolean,
    enst_poa_page_count integer,
    enst_include_subordination boolean,
    enst_subord_index_fee_requested boolean,
    enst_subord_index_fee_grantor_count integer,
    enst_subord_index_fee_grantees_count integer,
    enst_subord_index_fee_surnames_count integer,
    enst_subord_index_fee_signatures_count integer,
    enst_subordination_page_count_per_doc integer,
    enst_subordination_count integer,
    enst_loan_position_type varchar(128),
    etl_batch_id text
);

alter table history_octane.ernst_request owner to deployer;

create index idx_ernst_request__data_source_deleted_flag
    on history_octane.ernst_request (data_source_deleted_flag);

create index idx_ernst_request__data_source_updated_datetime
    on history_octane.ernst_request (data_source_updated_datetime);

create index idx_ernst_request__pid
    on history_octane.ernst_request (enst_pid);

create index idx_ernst_request__pid_version
    on history_octane.ernst_request (enst_pid, enst_version);

create index idx_ernst_request__etl_batch_id
    on history_octane.ernst_request (etl_batch_id);

grant select on history_octane.ernst_request to readonly;

grant insert, select, update on history_octane.ernst_request to etl_loan;

create table history_octane.ernst_request_question
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    enstq_pid bigint not null,
    enstq_version integer,
    enstq_ernst_request_pid bigint,
    enstq_ernst_question_id varchar(8),
    enstq_question varchar(1024),
    enstq_yes_no_answer boolean,
    enstq_answer varchar(16),
    etl_batch_id text
);

alter table history_octane.ernst_request_question owner to deployer;

create index idx_ernst_request_question__data_source_deleted_flag
    on history_octane.ernst_request_question (data_source_deleted_flag);

create index idx_ernst_request_question__data_source_updated_datetime
    on history_octane.ernst_request_question (data_source_updated_datetime);

create index idx_ernst_request_question__pid
    on history_octane.ernst_request_question (enstq_pid);

create index idx_ernst_request_question__pid_version
    on history_octane.ernst_request_question (enstq_pid, enstq_version);

create index idx_ernst_request_question__etl_batch_id
    on history_octane.ernst_request_question (etl_batch_id);

grant select on history_octane.ernst_request_question to readonly;

grant insert, select, update on history_octane.ernst_request_question to etl_loan;

create table history_octane.loan_beneficiary
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lb_pid bigint not null,
    lb_version integer,
    lb_loan_pid bigint,
    lb_investor_pid bigint,
    lb_investor_loan_id varchar(32),
    lb_from_date date,
    lb_through_date date,
    lb_current boolean,
    lb_initial boolean,
    lb_loan_benef_transfer_status_type varchar(128),
    lb_loan_file_ship_date date,
    lb_approved_with_conditions_date date,
    lb_rejected_date date,
    lb_pending_wire_date date,
    lb_purchase_advice_amount numeric(15,2),
    lb_mers_mom boolean,
    lb_mers_transfer_status_type varchar(128),
    lb_mers_transfer_creation_date date,
    lb_mers_transfer_override boolean,
    lb_mers_transfer_batch_pid bigint,
    lb_loan_file_courier_type varchar(128),
    lb_loan_file_tracking_number varchar(32),
    lb_collateral_courier_type varchar(128),
    lb_collateral_tracking_number varchar(32),
    lb_loan_file_delivery_method_type varchar(128),
    lb_pool_id varchar(32),
    lb_mbs_final_purchaser_investor_pid bigint,
    lb_early_funding varchar(128),
    lb_early_funding_date date,
    lb_delivery_aus_type varchar(128),
    lb_synthetic_unique_current boolean,
    lb_synthetic_unique_initial boolean,
    etl_batch_id text
);

alter table history_octane.loan_beneficiary owner to deployer;

create index idx_loan_beneficiary__data_source_deleted_flag
    on history_octane.loan_beneficiary (data_source_deleted_flag);

create index idx_loan_beneficiary__data_source_updated_datetime
    on history_octane.loan_beneficiary (data_source_updated_datetime);

create index idx_loan_beneficiary__pid
    on history_octane.loan_beneficiary (lb_pid);

create index idx_loan_beneficiary__pid_version
    on history_octane.loan_beneficiary (lb_pid, lb_version);

create index idx_loan_beneficiary__etl_batch_id
    on history_octane.loan_beneficiary (etl_batch_id);

grant select on history_octane.loan_beneficiary to readonly;

grant insert, select, update on history_octane.loan_beneficiary to etl_loan;

create table history_octane.loan_closing_doc
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lcd_pid bigint not null,
    lcd_version integer,
    lcd_loan_pid bigint,
    lcd_dsi_websheet_number varchar(16),
    lcd_dsi_doc_code varchar(32),
    lcd_dsi_transaction_id varchar(128),
    lcd_dsi_closing_document_status_type varchar(128),
    lcd_dsi_fatal_messages text,
    lcd_dsi_warning_messages text,
    lcd_unsigned_closing_doc_deal_file_pid bigint,
    etl_batch_id text
);

alter table history_octane.loan_closing_doc owner to deployer;

create index idx_loan_closing_doc__data_source_deleted_flag
    on history_octane.loan_closing_doc (data_source_deleted_flag);

create index idx_loan_closing_doc__data_source_updated_datetime
    on history_octane.loan_closing_doc (data_source_updated_datetime);

create index idx_loan_closing_doc__pid
    on history_octane.loan_closing_doc (lcd_pid);

create index idx_loan_closing_doc__pid_version
    on history_octane.loan_closing_doc (lcd_pid, lcd_version);

create index idx_loan_closing_doc__etl_batch_id
    on history_octane.loan_closing_doc (etl_batch_id);

grant select on history_octane.loan_closing_doc to readonly;

grant insert, select, update on history_octane.loan_closing_doc to etl_loan;

create table history_octane.loan_eligible_investor
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lei_pid bigint not null,
    lei_version integer,
    lei_loan_pid bigint,
    lei_investor_pid bigint,
    etl_batch_id text
);

alter table history_octane.loan_eligible_investor owner to deployer;

create index idx_loan_eligible_investor__data_source_deleted_flag
    on history_octane.loan_eligible_investor (data_source_deleted_flag);

create index idx_loan_eligible_investor__data_source_updated_datetime
    on history_octane.loan_eligible_investor (data_source_updated_datetime);

create index idx_loan_eligible_investor__pid
    on history_octane.loan_eligible_investor (lei_pid);

create index idx_loan_eligible_investor__pid_version
    on history_octane.loan_eligible_investor (lei_pid, lei_version);

create index idx_loan_eligible_investor__etl_batch_id
    on history_octane.loan_eligible_investor (etl_batch_id);

grant select on history_octane.loan_eligible_investor to readonly;

grant insert, select, update on history_octane.loan_eligible_investor to etl_loan;

create table history_octane.loan_funding
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lf_pid bigint not null,
    lf_version integer,
    lf_loan_pid bigint,
    lf_interim_funder_pid bigint,
    lf_proposal_snapshot_pid bigint,
    lf_interim_funder_loan_id varchar(32),
    lf_funding_status_type varchar(128),
    lf_requested_date date,
    lf_confirmed_release_datetime timestamp,
    lf_wire_amount numeric(15,2),
    lf_interim_funder_fee_amount numeric(15,2),
    lf_release_wire_federal_reference_number varchar(32),
    lf_disbursement_date date,
    lf_return_request_date date,
    lf_return_confirmed_date date,
    lf_funds_authorization_code varchar(32),
    lf_scheduled_release_date date,
    lf_funds_authorized_datetime timestamp,
    lf_funding_date date,
    lf_collateral_sent_date date,
    lf_collateral_tracking_number varchar(32),
    lf_collateral_courier_type varchar(128),
    lf_post_wire_adjustment_amount numeric(15,2),
    lf_net_wire_amount numeric(15,2),
    lf_early_wire_charge_day_count integer,
    lf_early_wire_daily_charge_amount numeric(15,2),
    lf_early_wire_total_charge_amount numeric(15,2),
    lf_scheduled_release_date_auto_compute boolean,
    lf_early_wire_request boolean,
    lf_synthetic_unique_active boolean,
    etl_batch_id text
);

alter table history_octane.loan_funding owner to deployer;

create index idx_loan_funding__data_source_deleted_flag
    on history_octane.loan_funding (data_source_deleted_flag);

create index idx_loan_funding__data_source_updated_datetime
    on history_octane.loan_funding (data_source_updated_datetime);

create index idx_loan_funding__pid
    on history_octane.loan_funding (lf_pid);

create index idx_loan_funding__pid_version
    on history_octane.loan_funding (lf_pid, lf_version);

create index idx_loan_funding__etl_batch_id
    on history_octane.loan_funding (etl_batch_id);

grant select on history_octane.loan_funding to readonly;

grant insert, select, update on history_octane.loan_funding to etl_loan;

create table history_octane.loan_hedge
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lh_pid bigint not null,
    lh_version integer,
    lh_loan_pid bigint,
    lh_update_datetime timestamp,
    lh_update_pending_datetime timestamp,
    lh_transaction_status_date date,
    lh_loan_number bigint,
    lh_product_code varchar(128),
    lh_note_rate numeric(11,9),
    lh_loan_amount numeric(17,2),
    lh_lock_date timestamp,
    lh_buy_side_lock_expires_date timestamp,
    lh_lock_expiration_date timestamp,
    lh_secondary_cost numeric(11,9),
    lh_total_cost_basis numeric(11,9),
    lh_total_lender_margin numeric(17,9),
    lh_stage varchar(128),
    lh_fund_date timestamp,
    lh_allocation_date timestamp,
    lh_estimated_fund_date date,
    lh_purchased_by_investor_date date,
    lh_commitment_number varchar(32),
    lh_property_occupancy varchar(128),
    lh_property_type varchar(128),
    lh_property_type_supplemental varchar(16),
    lh_property_state varchar(128),
    lh_property_zip varchar(128),
    lh_property_number_of_units integer,
    lh_purchase_price numeric(15),
    lh_appraised_value numeric(15),
    lh_purpose varchar(128),
    lh_refinance_type varchar(128),
    lh_lien_position varchar(128),
    lh_impounds varchar(16),
    lh_buydown_type varchar(128),
    lh_buydown varchar(8),
    lh_ltv numeric(11,9),
    lh_original_ltv numeric(11,9),
    lh_cltv numeric(11,9),
    lh_original_cltv numeric(11,9),
    lh_effective_credit_score integer,
    lh_doc_type varchar(128),
    lh_debt_to_income numeric(11,9),
    lh_prepayment_penalty boolean,
    lh_prepayment_penalty_term integer,
    lh_interest_only boolean,
    lh_lock_type varchar(128),
    lh_lock_period integer,
    lh_fees_collected_bps varchar(8),
    lh_channel varchar(32),
    lh_loan_officer varchar(128),
    lh_branch varchar(128),
    lh_broker varchar(8),
    lh_correspondent varchar(8),
    lh_origination_source varchar(32),
    lh_investor varchar(128),
    lh_investor_total_price numeric(11,9),
    lh_investor_base_price numeric(11,9),
    lh_investor_srp_paid varchar(8),
    lh_investor_loan_number varchar(32),
    lh_pmi boolean,
    lh_pmi_percent numeric(11,9),
    lh_mi_cert_number varchar(128),
    lh_srp_paid varchar(8),
    lh_discount_points varchar(8),
    lh_date_docs_back varchar(8),
    lh_note_date date,
    lh_close_date timestamp,
    lh_first_payment_date date,
    lh_last_payment_date date,
    lh_next_scheduled_payment_due_date varchar(8),
    lh_scheduled_principal_and_interest numeric(15,2),
    lh_current_principal_and_interest numeric(15,2),
    lh_minimum_principal_and_interest numeric(15,2),
    lh_current_unpaid_principal_balance numeric(17,2),
    lh_original_interest_rate numeric(11,9),
    lh_maturity_date date,
    lh_amortization_term integer,
    lh_yearly_payment_cap varchar(8),
    lh_arm_margin numeric(11,9),
    lh_arm_adjustment_date date,
    lh_first_arm_period integer,
    lh_first_arm_adjustment_cap numeric(11,9),
    lh_arm_life_floor numeric(11,9),
    lh_arm_life_ceiling numeric(11,9),
    lh_first_arm_payment_adjustment_date varchar(8),
    lh_arm_period_after_first varchar(8),
    lh_arm_adjustment_cap_after_first numeric(11,9),
    lh_first_payment_cap varchar(8),
    lh_payment_cap_option varchar(8),
    lh_neg_am_flag varchar(8),
    lh_maximum_negative_amortization varchar(8),
    lh_arm_convertible varchar(8),
    lh_arm_index varchar(8),
    lh_dual_loan_flag varchar(8),
    lh_other_loan_number varchar(8),
    lh_agency_extract_fields varchar(8),
    lh_warehouse_bank varchar(128),
    lh_wire_amount numeric(15,2),
    lh_credit_rating_agency_fields varchar(8),
    lh_levels_fields varchar(8),
    lh_data_fields varchar(8),
    lh_loan_status varchar(128),
    lh_suspense_yes_no varchar(8),
    lh_loan_type varchar(128),
    lh_hud_borr_paid_by_for_borr_other_amount varchar(8),
    lh_fees_line_user_def_fee_one_borr varchar(8),
    lh_uw_suspended_cleared_date varchar(8),
    lh_underwriting_suspended_date varchar(8),
    lh_line_orig_charge numeric(15,2),
    lh_amortization_type varchar(32),
    lh_milestone varchar(128),
    lh_msa varchar(8),
    lh_county_code varchar(8),
    lh_ship_date_to_investor date,
    lh_borrower_last_name varchar(32),
    lh_purchase_advice_suspense_fee varchar(8),
    lh_purchase_advice_early_delivery_amount varchar(8),
    lh_purchase_advice_llpa varchar(8),
    lh_purchase_advice_fmna varchar(8),
    lh_purchase_advice_rp varchar(8),
    lh_lock_info_relock_amount varchar(8),
    lh_lock_info_loan_basis numeric(11,9),
    lh_lock_info_lock_request_fulfilled_date_time varchar(8),
    lh_lock_info_rate_lock_request_rate_sheet_id varchar(8),
    lh_current_status_change_date date,
    lh_aus_type varchar(8),
    lh_buy_side_base_arm_margin varchar(8),
    lh_uldd_poolid varchar(32),
    lh_warehouse_co_name varchar(128),
    lh_underwriting_investor_eligibility_wells_fargo varchar(8),
    lh_underwriting_investor_eligibility_chase varchar(8),
    lh_du_fail_reason varchar(8),
    lh_lpmi_total_costs_on_lock varchar(8),
    lh_lpmi_after_lock_required varchar(8),
    lh_lpmi_after_lock_bps varchar(8),
    lh_mi_company_name_type varchar(128),
    lh_lpmi_frequency varchar(128),
    lh_lpmi_estimated_amount_of_lender_paid_mi varchar(8),
    lh_mortgage_insurance_premium_source_type varchar(16),
    lh_loan_amount_repeat numeric(17,2),
    lh_product_code_repeat varchar(128),
    lh_note_rate_repeat numeric(11,9),
    lh_loan_info_loan_id varchar(8),
    lh_salable_loan varchar(8),
    lh_sale_hold varchar(8),
    lh_sale_hold_comments varchar(8),
    lh_pf_disbursement_ledger_date date,
    lh_aus_eligibility varchar(8),
    lh_texas_cash_out boolean,
    lh_acceptable_du boolean,
    lh_acceptable_lp boolean,
    lh_financed_property_count integer,
    lh_payoff_primary_lien_holder_company varchar(8),
    lh_payoff_junior_lien_holder_company varchar(8),
    lh_base_loan_amount numeric(17,2),
    lh_funding_authorized varchar(32),
    lh_credit_committee_fico_exception varchar(8),
    lh_home_ready_eligibility varchar(8),
    lh_home_ready_borr_acceptance varchar(8),
    lh_home_ready_eligibility_review varchar(8),
    lh_home_possible_eligibility varchar(8),
    lh_home_possible_eligibility_review varchar(8),
    lh_piw varchar(8),
    lh_piw_fee varchar(8),
    lh_uw_investor_eligibility_fnma varchar(8),
    lh_uw_investor_eligibility_fhlmc varchar(8),
    lh_appraisal_form varchar(128),
    lh_ext_cos_total_amt varchar(8),
    lh_fnmcu_risk_score varchar(8),
    lh_borrower_income_verification varchar(8),
    lh_co_borrower_income_verification varchar(8),
    lh_day_one_income_verification_available varchar(8),
    lh_subject_property_estimated_value numeric(15),
    lh_transaction_status varchar(128),
    lh_buy_status varchar(128),
    lh_appraisal_exists boolean,
    lh_du_piw_eligible boolean,
    lh_lp_appraisal_waiver_eligible boolean,
    lh_borrower_first_name varchar(32),
    lh_co_borrower_first_name varchar(32),
    lh_co_borrower_last_name varchar(32),
    lh_total_borrower_income numeric(15,2),
    lh_subject_property_city varchar(128),
    lh_subject_property_county varchar(128),
    lh_subject_property_zip varchar(128),
    lh_borrower_decision_credit_score integer,
    lh_co_borrower_decision_credit_score integer,
    lh_underwriter_disposition varchar(128),
    lh_underwrite_risk_assessment_type varchar(128),
    lh_subject_property_address varchar(1024),
    lh_original_lock_date timestamp,
    lh_original_lock_period integer,
    lh_borrower_income_docs_required_count integer,
    lh_borrower_income_docs_fulfilled_count integer,
    lh_borrower_income_docs_approved_count integer,
    lh_borrower_asset_docs_required_count integer,
    lh_borrower_asset_docs_fulfilled_count integer,
    lh_borrower_asset_docs_approved_count integer,
    lh_borrower_credit_docs_required_count integer,
    lh_borrower_credit_docs_fulfilled_count integer,
    lh_borrower_credit_docs_approved_count integer,
    lh_initial_uw_submit_date_time timestamp,
    lh_cd_clear_date date,
    lh_lender_concession_total_approved_amount numeric(15,2),
    lh_relock_fee_gross_amount numeric(15,2),
    lh_relock_fee_amount_less_concessions numeric(15,2),
    lh_relock_fee_amount_concessed numeric(15,2),
    lh_lock_extension_fee_gross_amount numeric(15,2),
    lh_lock_extension_fee_amount_less_concessions numeric(15,2),
    lh_lock_extension_fee_amount_concessed numeric(15,2),
    lh_general_lender_concessions_amount_non_itemized numeric(15,2),
    lh_day_one_concessions numeric(15,2),
    lh_investor_lock_commitment_type varchar(128),
    lh_signed_closing_doc_received_datetime timestamp,
    lh_geocoding_msa_code varchar(32),
    lh_geocoding_state_code varchar(32),
    lh_geocoding_county_code varchar(32),
    lh_geocoding_census_tract varchar(32),
    lh_tolerance_cure_amount numeric(15,2),
    lh_self_employed_flag boolean,
    lh_first_time_homebuyer boolean,
    lh_mortgage_insurance_lpmi_rate_adjustment numeric(11,9),
    lh_eligible_for_qm_status boolean,
    lh_safe_harbor_test_passed boolean,
    lh_hpml boolean,
    lh_hoepa varchar(128),
    lh_funding_status varchar(128),
    lh_early_funding varchar(128),
    lh_early_funding_date date,
    lh_lqa_purchase_eligibility_type varchar(128),
    lh_transferred_appraisal boolean,
    lh_appraisal_cu_risk_score varchar(32),
    lh_mi_upfront_rate numeric(11,9),
    lh_loan_funding_requested_date date,
    lh_student_loan_cash_out boolean,
    lh_octane_high_balance boolean,
    lh_borrower_final_price numeric(11,9),
    lh_charge_credit_for_interest_rate numeric(15,2),
    lh_contract_processing_fee numeric(15,2),
    lh_escrow_holdback boolean,
    lh_appraiser_license_number varchar(128),
    lh_mcc_present boolean,
    lh_grant_present boolean,
    lh_cema varchar(128),
    lh_supplemental_margin_company numeric(15,2),
    lh_supplemental_margin_branch numeric(15,2),
    lh_supplemental_margin_total numeric(15,2),
    lh_concessions_renegotiations_amount numeric(15,2),
    lh_fund_source_type varchar(128),
    lh_purchase_contract_funding_date date,
    lh_product_id varchar(32),
    lh_community_second boolean,
    lh_current_taxes_and_insurance numeric(15,2),
    lh_multiple_applicants boolean,
    lh_community_second_liability boolean,
    lh_property_rights_type varchar(128),
    lh_mbs_final_purchaser varchar(128),
    lh_hmda_universal_loan_id varchar(45),
    lh_lp_ace_eligible boolean,
    lh_family_advantage_product boolean,
    lh_effective_rate_sheet_datetime timestamp,
    lh_debt_to_income_excluding_mi numeric(11,9),
    lh_clear_to_commit boolean,
    lh_b2_first_name varchar(32),
    lh_b2_last_name varchar(32),
    lh_c2_first_name varchar(32),
    lh_c2_last_name varchar(32),
    lh_b3_first_name varchar(32),
    lh_b3_last_name varchar(32),
    lh_c3_first_name varchar(32),
    lh_c3_last_name varchar(32),
    lh_b4_first_name varchar(32),
    lh_b4_last_name varchar(32),
    lh_c4_first_name varchar(32),
    lh_c4_last_name varchar(32),
    lh_b5_first_name varchar(32),
    lh_b5_last_name varchar(32),
    lh_c5_first_name varchar(32),
    lh_c5_last_name varchar(32),
    lh_texas_home_equity_conversion boolean,
    lh_interest_only_heloc boolean,
    lh_interest_only_term_months integer,
    lh_investor_lock_product_name varchar(128),
    lh_investor_lock_product_id varchar(32),
    lh_rebuttable_presumption boolean,
    lh_non_conforming boolean,
    lh_num_deal_updates_since_update_pending integer,
    lh_borrower_engagement_percent numeric(11,9),
    lh_loan_create_date date,
    lh_high_balance_hit_percent numeric(11,9),
    lh_new_york_payup_percent numeric(11,9),
    lh_ship_date_to_custodian date,
    lh_lock_vintage date,
    lh_lock_series integer,
    lh_investor_total numeric(11,9),
    lh_qualified_mortgage_status_type varchar(128),
    lh_charges_enabled_date date,
    lh_application_date date,
    etl_batch_id text,
    lh_velocify_lead_id varchar(32),
    lh_collateral_tracking_number varchar(32)
);

alter table history_octane.loan_hedge owner to deployer;

create index idx_loan_hedge__data_source_deleted_flag
    on history_octane.loan_hedge (data_source_deleted_flag);

create index idx_loan_hedge__data_source_updated_datetime
    on history_octane.loan_hedge (data_source_updated_datetime);

create index idx_loan_hedge__pid
    on history_octane.loan_hedge (lh_pid);

create index idx_loan_hedge__pid_version
    on history_octane.loan_hedge (lh_pid, lh_version);

create index idx_loan_hedge__etl_batch_id
    on history_octane.loan_hedge (etl_batch_id);

grant select on history_octane.loan_hedge to readonly;

grant insert, select, update on history_octane.loan_hedge to etl_loan;

create table history_octane.loan_mi_rate_adjustment
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lmra_pid bigint not null,
    lmra_version integer,
    lmra_loan_pid bigint,
    lmra_case_name varchar(16000),
    lmra_rate_adjustment_percent numeric(11,9),
    etl_batch_id text
);

alter table history_octane.loan_mi_rate_adjustment owner to deployer;

create index idx_loan_mi_rate_adjustment__data_source_deleted_flag
    on history_octane.loan_mi_rate_adjustment (data_source_deleted_flag);

create index idx_loan_mi_rate_adjustment__data_source_updated_datetime
    on history_octane.loan_mi_rate_adjustment (data_source_updated_datetime);

create index idx_loan_mi_rate_adjustment__pid
    on history_octane.loan_mi_rate_adjustment (lmra_pid);

create index idx_loan_mi_rate_adjustment__pid_version
    on history_octane.loan_mi_rate_adjustment (lmra_pid, lmra_version);

create index idx_loan_mi_rate_adjustment__etl_batch_id
    on history_octane.loan_mi_rate_adjustment (etl_batch_id);

grant select on history_octane.loan_mi_rate_adjustment to readonly;

grant insert, select, update on history_octane.loan_mi_rate_adjustment to etl_loan;

create table history_octane.loan_mi_surcharge
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lms_pid bigint not null,
    lms_version integer,
    lms_loan_pid bigint,
    lms_criteria_html varchar(16000),
    lms_government_surcharge_percent numeric(11,9),
    lms_government_surcharge_minimum_amount numeric(15,2),
    etl_batch_id text
);

alter table history_octane.loan_mi_surcharge owner to deployer;

create index idx_loan_mi_surcharge__data_source_deleted_flag
    on history_octane.loan_mi_surcharge (data_source_deleted_flag);

create index idx_loan_mi_surcharge__data_source_updated_datetime
    on history_octane.loan_mi_surcharge (data_source_updated_datetime);

create index idx_loan_mi_surcharge__pid
    on history_octane.loan_mi_surcharge (lms_pid);

create index idx_loan_mi_surcharge__pid_version
    on history_octane.loan_mi_surcharge (lms_pid, lms_version);

create index idx_loan_mi_surcharge__etl_batch_id
    on history_octane.loan_mi_surcharge (etl_batch_id);

grant select on history_octane.loan_mi_surcharge to readonly;

grant insert, select, update on history_octane.loan_mi_surcharge to etl_loan;

create table history_octane.loan_price_add_on
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lpa_pid bigint not null,
    lpa_version integer,
    lpa_loan_pid bigint,
    lpa_create_datetime timestamp,
    lpa_summary varchar(16000),
    lpa_rate_adjustment_percent numeric(11,9),
    lpa_price_adjustment_percent numeric(11,9),
    lpa_arm_margin_adjustment_percent numeric(11,9),
    lpa_lock_add_on_type varchar(128),
    etl_batch_id text
);

alter table history_octane.loan_price_add_on owner to deployer;

create index idx_loan_price_add_on__data_source_deleted_flag
    on history_octane.loan_price_add_on (data_source_deleted_flag);

create index idx_loan_price_add_on__data_source_updated_datetime
    on history_octane.loan_price_add_on (data_source_updated_datetime);

create index idx_loan_price_add_on__pid
    on history_octane.loan_price_add_on (lpa_pid);

create index idx_loan_price_add_on__pid_version
    on history_octane.loan_price_add_on (lpa_pid, lpa_version);

create index idx_loan_price_add_on__etl_batch_id
    on history_octane.loan_price_add_on (etl_batch_id);

grant select on history_octane.loan_price_add_on to readonly;

grant insert, select, update on history_octane.loan_price_add_on to etl_loan;

create table history_octane.loan_recording
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lr_pid bigint not null,
    lr_version integer,
    lr_loan_pid bigint,
    lr_recording_date date,
    lr_recording_instrument_number varchar(16),
    lr_recording_book_number varchar(16),
    lr_recording_volume_number varchar(16),
    lr_recording_page_number varchar(16),
    lr_recording_jurisdiction_name varchar(16),
    lr_recording_witness_unparsed_name varchar(16),
    lr_re_recording boolean,
    lr_mers_registration_status_type varchar(128),
    lr_mers_registration_date date,
    lr_mers_registration_errors text,
    lr_mers_registration_warnings text,
    lr_mers_transfer_errors text,
    lr_mers_transfer_warnings text,
    etl_batch_id text
);

alter table history_octane.loan_recording owner to deployer;

create index idx_loan_recording__data_source_deleted_flag
    on history_octane.loan_recording (data_source_deleted_flag);

create index idx_loan_recording__data_source_updated_datetime
    on history_octane.loan_recording (data_source_updated_datetime);

create index idx_loan_recording__pid
    on history_octane.loan_recording (lr_pid);

create index idx_loan_recording__pid_version
    on history_octane.loan_recording (lr_pid, lr_version);

create index idx_loan_recording__etl_batch_id
    on history_octane.loan_recording (etl_batch_id);

grant select on history_octane.loan_recording to readonly;

grant insert, select, update on history_octane.loan_recording to etl_loan;

create table history_octane.loan_servicer
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lsv_pid bigint not null,
    lsv_version integer,
    lsv_loan_pid bigint,
    lsv_investor_pid bigint,
    lsv_investor_loan_id varchar(32),
    lsv_initial boolean,
    lsv_from_date date,
    lsv_servicing_data_sent_date date,
    lsv_retain_notification_date date,
    lsv_release_notification_date date,
    lsv_servicing_docs_sent_date date,
    lsv_mers_transfer_status_type varchar(128),
    lsv_mers_transfer_creation_date date,
    lsv_mers_transfer_override boolean,
    lsv_mers_transfer_batch_pid bigint,
    lsv_loan_acquisition_scheduled_upb_amount numeric(15,2),
    lsv_last_paid_installment_due_date date,
    lsv_upb_amount numeric(15,2),
    lsv_delinquent_payments_over_past_twelve_months_count integer,
    etl_batch_id text
);

alter table history_octane.loan_servicer owner to deployer;

create index idx_loan_servicer__data_source_deleted_flag
    on history_octane.loan_servicer (data_source_deleted_flag);

create index idx_loan_servicer__data_source_updated_datetime
    on history_octane.loan_servicer (data_source_updated_datetime);

create index idx_loan_servicer__pid
    on history_octane.loan_servicer (lsv_pid);

create index idx_loan_servicer__pid_version
    on history_octane.loan_servicer (lsv_pid, lsv_version);

create index idx_loan_servicer__etl_batch_id
    on history_octane.loan_servicer (etl_batch_id);

grant select on history_octane.loan_servicer to readonly;

grant insert, select, update on history_octane.loan_servicer to etl_loan;

create table history_octane.lock_series
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lsr_pid bigint not null,
    lsr_loan_pid bigint,
    lsr_version integer,
    lsr_vintage_date date,
    lsr_series_id integer,
    lsr_org_lineage_pid bigint,
    etl_batch_id text
);

alter table history_octane.lock_series owner to deployer;

create index idx_lock_series__data_source_deleted_flag
    on history_octane.lock_series (data_source_deleted_flag);

create index idx_lock_series__data_source_updated_datetime
    on history_octane.lock_series (data_source_updated_datetime);

create index idx_lock_series__pid
    on history_octane.lock_series (lsr_pid);

create index idx_lock_series__pid_version
    on history_octane.lock_series (lsr_pid, lsr_version);

create index fk_lock_series_2
    on history_octane.lock_series (lsr_org_lineage_pid);

create index idx_lock_series__etl_batch_id
    on history_octane.lock_series (etl_batch_id);

grant select on history_octane.lock_series to readonly;

grant insert, select, update on history_octane.lock_series to etl_loan;

create table history_octane.lender_lock_major
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    llmj_pid bigint not null,
    llmj_version integer,
    llmj_major_version integer,
    llmj_lender_lock_id varchar(11),
    llmj_loan_pid bigint,
    llmj_lien_priority_type varchar(128),
    llmj_account_pid bigint,
    llmj_lock_datetime timestamp,
    llmj_initial_duration_days integer,
    llmj_initial_lock_expiration_datetime timestamp,
    llmj_requester_agent_type varchar(128),
    llmj_requester_lender_user_pid bigint,
    llmj_requester_unparsed_name varchar(128),
    llmj_request_datetime timestamp,
    llmj_confirm_datetime timestamp,
    llmj_confirm_lender_user_pid bigint,
    llmj_confirm_unparsed_name varchar(128),
    llmj_void_request_datetime timestamp,
    llmj_void_request_lender_user_pid bigint,
    llmj_void_request_unparsed_name varchar(128),
    llmj_void_datetime timestamp,
    llmj_void_lender_user_pid bigint,
    llmj_void_unparsed_name varchar(128),
    llmj_cancel_datetime timestamp,
    llmj_cancel_lender_user_pid bigint,
    llmj_cancel_unparsed_name varchar(128),
    llmj_auto_confirmed boolean,
    llmj_active boolean,
    llmj_relock_fee_percent numeric(11,9),
    llmj_notes varchar(16000),
    llmj_lender_concession_approved_amount numeric(15,2),
    llmj_clear_extension_fees_relock boolean,
    llmj_pricing_duration_days integer,
    llmj_pricing_commitment_type varchar(128),
    llmj_expired_lock_successor boolean,
    llmj_lock_series_pid bigint,
    etl_batch_id text
);

alter table history_octane.lender_lock_major owner to deployer;

create index idx_lender_lock_major__data_source_deleted_flag
    on history_octane.lender_lock_major (data_source_deleted_flag);

create index idx_lender_lock_major__data_source_updated_datetime
    on history_octane.lender_lock_major (data_source_updated_datetime);

create index idx_lender_lock_major__pid
    on history_octane.lender_lock_major (llmj_pid);

create index idx_lender_lock_major__pid_version
    on history_octane.lender_lock_major (llmj_pid, llmj_version);

create index idx_lender_lock_major__etl_batch_id
    on history_octane.lender_lock_major (etl_batch_id);

grant select on history_octane.lender_lock_major to readonly;

grant insert, select, update on history_octane.lender_lock_major to etl_loan;

create table history_octane.bid_pool_lender_lock
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    bpll_pid bigint not null,
    bpll_version integer,
    bpll_bid_pool_pid bigint,
    bpll_lender_lock_major_pid bigint,
    etl_batch_id text
);

alter table history_octane.bid_pool_lender_lock owner to deployer;

create index idx_bid_pool_lender_lock__data_source_deleted_flag
    on history_octane.bid_pool_lender_lock (data_source_deleted_flag);

create index idx_bid_pool_lender_lock__data_source_updated_datetime
    on history_octane.bid_pool_lender_lock (data_source_updated_datetime);

create index idx_bid_pool_lender_lock__pid
    on history_octane.bid_pool_lender_lock (bpll_pid);

create index idx_bid_pool_lender_lock__pid_version
    on history_octane.bid_pool_lender_lock (bpll_pid, bpll_version);

create index idx_bid_pool_lender_lock__etl_batch_id
    on history_octane.bid_pool_lender_lock (etl_batch_id);

grant select on history_octane.bid_pool_lender_lock to readonly;

grant insert, select, update on history_octane.bid_pool_lender_lock to etl_loan;

create table history_octane.lender_concession_request
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lcr_pid bigint not null,
    lcr_version integer,
    lcr_loan_pid bigint,
    lcr_lender_lock_major_pid bigint,
    lcr_requested_amount numeric(15,2),
    lcr_approved_amount numeric(15,2),
    lcr_requested_reason varchar(128),
    lcr_approved_reason varchar(128),
    lcr_requested_datetime timestamp,
    lcr_decision_datetime timestamp,
    lcr_decision_notes varchar(1024),
    lcr_request_notes varchar(1024),
    lcr_requester_lender_user_pid bigint,
    lcr_requester_unparsed_name varchar(128),
    lcr_approver_lender_user_pid bigint,
    lcr_approver_unparsed_name varchar(128),
    lcr_lender_concession_request_status_type varchar(128),
    lcr_corporate_amount numeric(15,2),
    lcr_unallocated_amount numeric(15,2),
    lcr_lender_concession_request_number integer,
    etl_batch_id text
);

alter table history_octane.lender_concession_request owner to deployer;

create index idx_lender_concession_request__data_source_deleted_flag
    on history_octane.lender_concession_request (data_source_deleted_flag);

create index idx_lender_concession_request__data_source_updated_datetime
    on history_octane.lender_concession_request (data_source_updated_datetime);

create index idx_lender_concession_request__pid
    on history_octane.lender_concession_request (lcr_pid);

create index idx_lender_concession_request__pid_version
    on history_octane.lender_concession_request (lcr_pid, lcr_version);

create index idx_lender_concession_request__etl_batch_id
    on history_octane.lender_concession_request (etl_batch_id);

grant select on history_octane.lender_concession_request to readonly;

grant insert, select, update on history_octane.lender_concession_request to etl_loan;

create table history_octane.lender_lock_extension
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lle_pid bigint not null,
    lle_version integer,
    lle_lender_lock_major_pid bigint,
    lle_creator_lender_user_pid bigint,
    lle_creator_unparsed_name varchar(128),
    lle_requester_lender_user_pid bigint,
    lle_requester_unparsed_name varchar(128),
    lle_requested_datetime timestamp,
    lle_confirm_lender_user_pid bigint,
    lle_confirm_unparsed_name varchar(128),
    lle_confirm_datetime timestamp,
    lle_auto_confirmed boolean,
    lle_reject_lender_user_pid bigint,
    lle_reject_datetime timestamp,
    lle_reject_explanation varchar(1024),
    lle_lock_extension_status_type varchar(128),
    lle_extension_days integer,
    lle_price_adjustment_percent numeric(11,9),
    lle_fee_applicable boolean,
    etl_batch_id text
);

alter table history_octane.lender_lock_extension owner to deployer;

create index idx_lender_lock_extension__data_source_deleted_flag
    on history_octane.lender_lock_extension (data_source_deleted_flag);

create index idx_lender_lock_extension__data_source_updated_datetime
    on history_octane.lender_lock_extension (data_source_updated_datetime);

create index idx_lender_lock_extension__pid
    on history_octane.lender_lock_extension (lle_pid);

create index idx_lender_lock_extension__pid_version
    on history_octane.lender_lock_extension (lle_pid, lle_version);

create index idx_lender_lock_extension__etl_batch_id
    on history_octane.lender_lock_extension (etl_batch_id);

grant select on history_octane.lender_lock_extension to readonly;

grant insert, select, update on history_octane.lender_lock_extension to etl_loan;

create table history_octane.lender_lock_minor
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    llmn_pid bigint not null,
    llmn_version integer,
    llmn_lender_lock_major_pid bigint,
    llmn_minor_version integer,
    llmn_latest_version boolean,
    llmn_lender_lock_status_type varchar(128),
    llmn_create_datetime timestamp,
    llmn_creator_agent_type varchar(128),
    llmn_creator_lender_user_pid bigint,
    llmn_creator_unparsed_name varchar(128),
    llmn_effective_lock_expiration_datetime timestamp,
    llmn_effective_duration_days integer,
    llmn_num_extensions integer,
    llmn_investor_base_note_rate_percent numeric(11,9),
    llmn_investor_base_arm_margin_percent numeric(11,9),
    llmn_investor_base_price_percent numeric(11,9),
    llmn_lock_note_rate_percent numeric(11,9),
    llmn_lock_initial_note_rate_percent numeric(11,9),
    llmn_lock_arm_margin_percent numeric(11,9),
    llmn_lock_price_percent numeric(11,9),
    llmn_lock_price_raw_percent numeric(11,9),
    llmn_maximum_rebate_percent numeric(11,9),
    llmn_maximum_investor_price_percent numeric(11,9),
    llmn_maximum_investor_price_includes_srp boolean,
    llmn_created_historic_price_delta numeric(11,9),
    llmn_profit_table_name varchar(128),
    llmn_total_profit_margin_percent numeric(11,9),
    llmn_base_note_rate_percent numeric(11,9),
    llmn_base_arm_margin_percent numeric(11,9),
    llmn_base_price_percent numeric(11,9),
    llmn_pricing_datetime timestamp,
    llmn_effective_rate_sheet_datetime timestamp,
    llmn_apor_date date,
    llmn_proposal_snapshot_pid bigint,
    llmn_loan_amount numeric(17,2),
    llmn_base_loan_amount numeric(17,2),
    llmn_lock_commitment_type varchar(128),
    llmn_offering_pid bigint,
    llmn_product_terms_pid bigint,
    llmn_mortgage_type varchar(128),
    llmn_interest_only_type varchar(128),
    llmn_buydown_schedule_type varchar(128),
    llmn_prepay_penalty_schedule_type varchar(128),
    llmn_aus_type varchar(128),
    llmn_high_balance_hit_percent numeric(11,9),
    llmn_new_york_payup_percent numeric(11,9),
    etl_batch_id text
);

alter table history_octane.lender_lock_minor owner to deployer;

create index idx_lender_lock_minor__data_source_deleted_flag
    on history_octane.lender_lock_minor (data_source_deleted_flag);

create index idx_lender_lock_minor__data_source_updated_datetime
    on history_octane.lender_lock_minor (data_source_updated_datetime);

create index idx_lender_lock_minor__pid
    on history_octane.lender_lock_minor (llmn_pid);

create index idx_lender_lock_minor__pid_version
    on history_octane.lender_lock_minor (llmn_pid, llmn_version);

create index idx_lender_lock_minor__etl_batch_id
    on history_octane.lender_lock_minor (etl_batch_id);

grant select on history_octane.lender_lock_minor to readonly;

grant insert, select, update on history_octane.lender_lock_minor to etl_loan;

create table history_octane.lender_lock_add_on
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lla_pid bigint not null,
    lla_version integer,
    lla_lender_lock_minor_pid bigint,
    lla_lock_add_on_type varchar(128),
    lla_investor_price_adjustment_percent numeric(11,9),
    lla_account_price_adjustment_percent numeric(11,9),
    lla_create_datetime timestamp,
    lla_creator_lender_user_pid bigint,
    lla_creator_unparsed_name varchar(128),
    lla_summary varchar(16000),
    lla_rate_adjustment_percent numeric(11,9),
    lla_price_adjustment_percent numeric(11,9),
    lla_arm_margin_adjustment_percent numeric(11,9),
    etl_batch_id text
);

alter table history_octane.lender_lock_add_on owner to deployer;

create index idx_lender_lock_add_on__data_source_deleted_flag
    on history_octane.lender_lock_add_on (data_source_deleted_flag);

create index idx_lender_lock_add_on__data_source_updated_datetime
    on history_octane.lender_lock_add_on (data_source_updated_datetime);

create index idx_lender_lock_add_on__pid
    on history_octane.lender_lock_add_on (lla_pid);

create index idx_lender_lock_add_on__pid_version
    on history_octane.lender_lock_add_on (lla_pid, lla_version);

create index idx_lender_lock_add_on__etl_batch_id
    on history_octane.lender_lock_add_on (etl_batch_id);

grant select on history_octane.lender_lock_add_on to readonly;

grant insert, select, update on history_octane.lender_lock_add_on to etl_loan;

create table history_octane.net_tangible_benefit
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ntb_pid bigint not null,
    ntb_version integer,
    ntb_net_tangible_benefit_type varchar(128),
    ntb_proposal_pid bigint,
    etl_batch_id text
);

alter table history_octane.net_tangible_benefit owner to deployer;

create index idx_net_tangible_benefit__data_source_deleted_flag
    on history_octane.net_tangible_benefit (data_source_deleted_flag);

create index idx_net_tangible_benefit__data_source_updated_datetime
    on history_octane.net_tangible_benefit (data_source_updated_datetime);

create index idx_net_tangible_benefit__pid
    on history_octane.net_tangible_benefit (ntb_pid);

create index idx_net_tangible_benefit__pid_version
    on history_octane.net_tangible_benefit (ntb_pid, ntb_version);

create index idx_net_tangible_benefit__etl_batch_id
    on history_octane.net_tangible_benefit (etl_batch_id);

grant select on history_octane.net_tangible_benefit to readonly;

grant insert, select, update on history_octane.net_tangible_benefit to etl_loan;

create table history_octane.obligation
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ob_pid bigint not null,
    ob_version integer,
    ob_proposal_pid bigint,
    ob_obligation_type varchar(128),
    ob_amount_input_type varchar(128),
    ob_factor_percent numeric(11,9),
    ob_factor_percent_base_amount numeric(15,2),
    ob_annual_payment_amount numeric(15,2),
    ob_monthly_payment_amount numeric(15,2),
    ob_pte_annual_tax_installment_amount numeric(15,2),
    ob_pte_annual_preferred_tax_amount numeric(15,2),
    ob_pte_annual_homeowner_occupied_estimated_tax_amount numeric(15,2),
    ob_pte_annual_exemption_free_estimated_tax_amount numeric(15,2),
    ob_payment_date_1 date,
    ob_payment_date_2 date,
    ob_payment_date_3 date,
    ob_payment_date_4 date,
    ob_payment_date_5 date,
    ob_payment_date_6 date,
    ob_payment_amount_1 numeric(15,2),
    ob_payment_amount_2 numeric(15,2),
    ob_payment_amount_3 numeric(15,2),
    ob_payment_amount_4 numeric(15,2),
    ob_payment_amount_5 numeric(15,2),
    ob_payment_amount_6 numeric(15,2),
    ob_total_dated_payment_amount numeric(15,2),
    ob_vendor_first_name varchar(32),
    ob_vendor_last_name varchar(32),
    ob_vendor_middle_name varchar(32),
    ob_vendor_name_suffix varchar(32),
    ob_vendor_company_name varchar(128),
    ob_vendor_title varchar(128),
    ob_vendor_office_phone varchar(32),
    ob_vendor_office_phone_extension varchar(16),
    ob_vendor_mobile_phone varchar(32),
    ob_vendor_email varchar(256),
    ob_vendor_fax varchar(32),
    ob_vendor_city varchar(128),
    ob_vendor_country varchar(128),
    ob_vendor_postal_code varchar(128),
    ob_vendor_state varchar(128),
    ob_vendor_street1 varchar(128),
    ob_vendor_street2 varchar(128),
    ob_vendor_reference_id varchar(128),
    ob_name varchar(128),
    ob_payment_amount_1_warning varchar(1024),
    ob_payment_amount_2_warning varchar(1024),
    ob_payment_amount_3_warning varchar(1024),
    ob_payment_amount_4_warning varchar(1024),
    ob_payment_amount_5_warning varchar(1024),
    ob_payment_amount_6_warning varchar(1024),
    ob_tax_auto_compute boolean,
    ob_policy_dwelling_coverage_amount numeric(15),
    ob_policy_extended_coverage_amount numeric(15),
    ob_policy_deductible_amount numeric(15),
    ob_policy_effective_date date,
    ob_policy_expiration_date date,
    ob_escrow_waiver varchar(128),
    ob_insurance_transferred boolean,
    etl_batch_id text
);

alter table history_octane.obligation owner to deployer;

create index idx_obligation__data_source_deleted_flag
    on history_octane.obligation (data_source_deleted_flag);

create index idx_obligation__data_source_updated_datetime
    on history_octane.obligation (data_source_updated_datetime);

create index idx_obligation__pid
    on history_octane.obligation (ob_pid);

create index idx_obligation__pid_version
    on history_octane.obligation (ob_pid, ob_version);

create index idx_obligation__etl_batch_id
    on history_octane.obligation (etl_batch_id);

grant select on history_octane.obligation to readonly;

grant insert, select, update on history_octane.obligation to etl_loan;

create table history_octane.loan_charge
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lc_pid bigint not null,
    lc_version integer,
    lc_proposal_pid bigint,
    lc_obligation_pid bigint,
    lc_account_charge_ordinal integer,
    lc_loan_position_type varchar(128),
    lc_charge_type varchar(128),
    lc_name varchar(128),
    lc_charge_payer_type varchar(128),
    lc_charge_payee_type varchar(128),
    lc_paid_by varchar(128),
    lc_paid_to varchar(128),
    lc_poc boolean,
    lc_poc_applicable boolean,
    lc_charge_wire_action_type varchar(128),
    lc_reduction_amount numeric(15),
    lc_apr boolean,
    lc_base_amount numeric(16,3),
    lc_configured_total_amount numeric(15,2),
    lc_total_amount numeric(15,2),
    lc_charge_input_type varchar(128),
    lc_charge_input_type_base_amount numeric(16,3),
    lc_charge_input_type_percent numeric(11,9),
    lc_charge_input_type_currency numeric(16,3),
    lc_hud_section_number varchar(16),
    lc_hud_line_number varchar(16),
    lc_user_defined boolean,
    lc_months_auto_compute boolean,
    lc_months integer,
    lc_per_diem_amount numeric(15,2),
    lc_per_diem_rate numeric(11,9),
    lc_days integer,
    lc_financed boolean,
    lc_financed_auto_compute boolean,
    lc_financed_amount numeric(15),
    lc_auto_compute boolean,
    lc_charge_source_type varchar(128),
    lc_obligation_charge_input_type varchar(128),
    lc_from_date date,
    lc_through_date date,
    lc_smart_charge_config_warning varchar(1024),
    lc_reduction_amount_warning varchar(1024),
    lc_advance_amount_warning varchar(1024),
    lc_fha_mip_refund_warning varchar(1024),
    lc_aggregate_adjustment_compute_warning varchar(1024),
    lc_advance_obligation_compute_warning varchar(1024),
    lc_escrow_obligation_compute_warning varchar(1024),
    lc_excess_financing_concession_warning varchar(1024),
    lc_amount_exceeds_cap_warning varchar(1024),
    lc_subtract_lenders_title_insurance_amount boolean,
    lc_lender_insurance_exceeds_owner_insurance_warning varchar(1024),
    lc_manual_circumstance_change_type_1 varchar(128),
    lc_manual_circumstance_change_type_2 varchar(128),
    lc_configured_charge_payer_type varchar(128),
    lc_configured_charge_payee_type varchar(128),
    lc_configured_paid_by varchar(128),
    lc_configured_paid_to varchar(128),
    lc_configured_poc boolean,
    lc_configured_financed boolean,
    lc_charge_wire_action_auto_compute boolean,
    etl_batch_id text
);

alter table history_octane.loan_charge owner to deployer;

create index idx_loan_charge__data_source_deleted_flag
    on history_octane.loan_charge (data_source_deleted_flag);

create index idx_loan_charge__data_source_updated_datetime
    on history_octane.loan_charge (data_source_updated_datetime);

create index idx_loan_charge__pid
    on history_octane.loan_charge (lc_pid);

create index idx_loan_charge__pid_version
    on history_octane.loan_charge (lc_pid, lc_version);

create index idx_loan_charge__etl_batch_id
    on history_octane.loan_charge (etl_batch_id);

grant select on history_octane.loan_charge to readonly;

grant insert, select, update on history_octane.loan_charge to etl_loan;

create table history_octane.place
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    pl_pid bigint not null,
    pl_version integer,
    pl_proposal_pid bigint,
    pl_subject_property boolean,
    pl_acquisition_date date,
    pl_construction_improvement_costs_amount numeric(15),
    pl_financed_units_count integer,
    pl_unit_count integer,
    pl_land_estimated_value_amount numeric(15),
    pl_land_original_cost_amount numeric(15),
    pl_leasehold_expiration_date date,
    pl_legal_description_type varchar(128),
    pl_legal_description varchar(32000),
    pl_property_tax_id varchar(64),
    pl_legal_lot varchar(64),
    pl_legal_block varchar(64),
    pl_legal_section varchar(64),
    pl_project_name varchar(128),
    pl_cpm_project_id varchar(128),
    pl_acquisition_cost_amount numeric(15),
    pl_county_pid bigint,
    pl_sub_jurisdiction_name varchar(128),
    pl_recording_district_name varchar(128),
    pl_project_classification_type varchar(128),
    pl_property_category_type varchar(128),
    pl_property_rights_type varchar(128),
    pl_refinance_total_improvement_costs_amount numeric(15),
    pl_refinance_improvements_type varchar(128),
    pl_refinance_proposed_improvements_description varchar(32),
    pl_structure_built_year integer,
    pl_structure_built_month integer,
    pl_title_manner_held_type varchar(128),
    pl_title_manner_held_description varchar(1024),
    pl_building_status_type varchar(128),
    pl_construction_conversion varchar(128),
    pl_native_american_lands_type varchar(128),
    pl_community_land_trust boolean,
    pl_inclusionary_zoning boolean,
    pl_unique_dwelling_type varchar(128),
    pl_living_unit_count integer,
    pl_project_design_type varchar(128),
    pl_city varchar(128),
    pl_country varchar(128),
    pl_postal_code varchar(128),
    pl_state varchar(128),
    pl_street1 varchar(128),
    pl_street2 varchar(128),
    pl_street_tbd boolean,
    pl_landlord_first_name varchar(32),
    pl_landlord_last_name varchar(32),
    pl_landlord_middle_name varchar(32),
    pl_landlord_name_suffix varchar(32),
    pl_landlord_company_name varchar(128),
    pl_landlord_title varchar(128),
    pl_landlord_office_phone varchar(32),
    pl_landlord_office_phone_extension varchar(16),
    pl_landlord_mobile_phone varchar(32),
    pl_landlord_email varchar(256),
    pl_landlord_fax varchar(32),
    pl_landlord_city varchar(128),
    pl_landlord_country varchar(128),
    pl_landlord_postal_code varchar(128),
    pl_landlord_state varchar(128),
    pl_landlord_street1 varchar(128),
    pl_landlord_street2 varchar(128),
    pl_management_first_name varchar(32),
    pl_management_last_name varchar(32),
    pl_management_middle_name varchar(32),
    pl_management_name_suffix varchar(32),
    pl_management_company_name varchar(128),
    pl_management_title varchar(128),
    pl_management_office_phone varchar(32),
    pl_management_office_phone_extension varchar(16),
    pl_management_mobile_phone varchar(32),
    pl_management_email varchar(256),
    pl_management_fax varchar(32),
    pl_management_city varchar(128),
    pl_management_country varchar(128),
    pl_management_postal_code varchar(128),
    pl_management_state varchar(128),
    pl_management_street1 varchar(128),
    pl_management_street2 varchar(128),
    pl_property_insurance_amount_input_type varchar(128),
    pl_property_tax_amount_input_type varchar(128),
    pl_annual_property_insurance_amount numeric(15,2),
    pl_annual_property_tax_amount numeric(15,2),
    pl_monthly_property_insurance_amount numeric(15,2),
    pl_monthly_hoa_amount numeric(15,2),
    pl_monthly_mi_amount numeric(15,2),
    pl_monthly_property_tax_amount numeric(15,2),
    pl_monthly_lease_ground_rent_amount numeric(15,2),
    pl_monthly_rent_amount numeric(15,2),
    pl_monthly_obligation_amount numeric(15,2),
    pl_use_proposed_property_usage boolean,
    pl_property_usage_type varchar(128),
    pl_property_value_amount numeric(15),
    pl_reo_disposition_status_type varchar(128),
    pl_auto_geocode boolean,
    pl_auto_geocode_exception varchar(1024),
    pl_msa_code varchar(32),
    pl_state_fips varchar(32),
    pl_county_fips varchar(32),
    pl_census_tract varchar(32),
    pl_mh_make varchar(32),
    pl_mh_model varchar(32),
    pl_mh_length integer,
    pl_mh_width integer,
    pl_mh_manufacturer varchar(32),
    pl_mh_serial_number varchar(128),
    pl_mh_hud_label_number varchar(128),
    pl_mh_certificate_of_title_issued varchar(128),
    pl_mh_certificate_of_title_number varchar(32),
    pl_mh_certificate_of_title_type varchar(128),
    pl_mh_loan_purpose_type varchar(128),
    pl_mh_anchored boolean,
    pl_coop_company_name varchar(128),
    pl_coop_building_name varchar(128),
    pl_coop_vacant_units integer,
    pl_coop_proprietary_lease_date date,
    pl_coop_assignment_lease_date date,
    pl_coop_existing_company_laws_state varchar(128),
    pl_coop_shares_being_purchased integer,
    pl_coop_attorney_in_fact varchar(128),
    pl_coop_stock_certificate_number varchar(32),
    pl_coop_apartment_unit varchar(32),
    pl_rental boolean,
    pl_underwriter_comments varchar(1024),
    pl_lava_zone_type varchar(128),
    pl_neighborhood_location_type varchar(128),
    pl_site_area numeric(15),
    pl_hud_reo varchar(128),
    pl_energy_improvement_replacement_major_system boolean,
    pl_energy_improvement_insulation_sealant boolean,
    pl_energy_improvement_installation_solar boolean,
    pl_energy_improvement_addition_new_feature boolean,
    pl_energy_improvement_other boolean,
    pl_energy_related_repairs_or_improvements_amount numeric(15,2),
    pl_refinance_general_improvements_amount numeric(15),
    pl_va_guaranteed_reo varchar(128),
    pl_va_loan_date date,
    pl_gross_building_area_square_feet integer,
    pl_project_dwelling_units_sold_count integer,
    pl_prior_owners_title boolean,
    pl_prior_owners_title_policy_amount numeric(15,2),
    pl_prior_owners_title_policy_effective_date date,
    pl_prior_lenders_title boolean,
    pl_prior_lenders_title_policy_amount numeric(15,2),
    pl_prior_lenders_title_policy_effective_date date,
    pl_bedroom_count_unit_1 integer,
    pl_bedroom_count_unit_2 integer,
    pl_bedroom_count_unit_3 integer,
    pl_bedroom_count_unit_4 integer,
    pl_rent_amount_unit_1 numeric(15,2),
    pl_rent_amount_unit_2 numeric(15,2),
    pl_rent_amount_unit_3 numeric(15,2),
    pl_rent_amount_unit_4 numeric(15,2),
    pl_listed_for_sale_in_last_6_months varchar(128),
    pl_property_in_borrower_trust varchar(128),
    pl_road_type varchar(128),
    pl_water_type varchar(128),
    pl_sanitation_type varchar(128),
    pl_survey_required varchar(128),
    pl_solar_panels_type varchar(128),
    pl_power_purchase_agreement varchar(128),
    pl_solar_panel_provider_name varchar(128),
    pl_seller_acquired_date date,
    pl_seller_original_cost_amount numeric(15),
    pl_remaining_economic_life_years integer,
    pl_bathroom_count_unit_1 integer,
    pl_bathroom_count_unit_2 integer,
    pl_bathroom_count_unit_3 integer,
    pl_bathroom_count_unit_4 integer,
    pl_total_room_count_unit_1 integer,
    pl_total_room_count_unit_2 integer,
    pl_total_room_count_unit_3 integer,
    pl_total_room_count_unit_4 integer,
    pl_gross_living_area_square_feet_unit_1 integer,
    pl_gross_living_area_square_feet_unit_2 integer,
    pl_gross_living_area_square_feet_unit_3 integer,
    pl_gross_living_area_square_feet_unit_4 integer,
    pl_mh_leasehold__property_interest_type varchar(128),
    pl_tribe_name varchar(128),
    pl_leasehold_begin_date date,
    pl_lease_number varchar(128),
    pl_property_inspection_required boolean,
    pl_hvac_inspection_required boolean,
    pl_pest_inspection_required boolean,
    pl_radon_inspection_required boolean,
    pl_septic_inspection_required boolean,
    pl_water_well_inspection_required boolean,
    pl_structural_inspection_required boolean,
    pl_pest_inspection_required_auto_compute boolean,
    pl_management_agent_federal_tax_id varchar(32),
    pl_mh_manufacturer_street_1 varchar(128),
    pl_mh_manufacturer_street_2 varchar(128),
    pl_mh_manufacturer_city varchar(128),
    pl_mh_manufacturer_state varchar(128),
    pl_mh_manufacturer_postal_code varchar(128),
    pl_mh_manufacturer_phone varchar(32),
    pl_mh_manufacturer_phone_extension varchar(16),
    pl_recording_city_name varchar(128),
    pl_abbreviated_legal_description varchar(1024),
    pl_geocode_service_disabled boolean,
    pl_vesting_confirmed boolean,
    pl_previous_title_manner_held_description varchar(1024),
    pl_legal_lot_na boolean,
    pl_legal_block_na boolean,
    pl_legal_section_na boolean,
    pl_legal_description_confirmed boolean,
    pl_lead_inspection_required varchar(128),
    pl_calculated_lead_inspection_required varchar(128),
    pl_geocode_system_error boolean,
    pl_mixed_use varchar(128),
    pl_mixed_use_verified boolean,
    pl_mixed_use_area_square_feet integer,
    pl_mixed_use_area_square_feet_verified boolean,
    pl_mixed_use_area_percent numeric(11,9),
    pl_trust_classification_type varchar(128),
    pl_additional_building_area_square_feet integer,
    pl_acquisition_date_verified boolean,
    pl_acquisition_cost_amount_verified boolean,
    pl_property_tax_id_verified boolean,
    pl_seller_acquired_date_verified boolean,
    pl_seller_original_cost_amount_verified boolean,
    etl_batch_id text,
    pl_snapshotted_pid bigint
);

alter table history_octane.place owner to deployer;

create index idx_place__data_source_deleted_flag
    on history_octane.place (data_source_deleted_flag);

create index idx_place__data_source_updated_datetime
    on history_octane.place (data_source_updated_datetime);

create index idx_place__pid
    on history_octane.place (pl_pid);

create index idx_place__pid_version
    on history_octane.place (pl_pid, pl_version);

create index idx_place__etl_batch_id
    on history_octane.place (etl_batch_id);

grant select on history_octane.place to readonly;

grant insert, select, update on history_octane.place to etl_loan;

create table history_octane.borrower_reo
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    breo_pid bigint not null,
    breo_version integer,
    breo_borrower_pid bigint,
    breo_place_pid bigint,
    breo_ownership_percent numeric(11,9),
    etl_batch_id text
);

alter table history_octane.borrower_reo owner to deployer;

create index idx_borrower_reo__data_source_deleted_flag
    on history_octane.borrower_reo (data_source_deleted_flag);

create index idx_borrower_reo__data_source_updated_datetime
    on history_octane.borrower_reo (data_source_updated_datetime);

create index idx_borrower_reo__pid
    on history_octane.borrower_reo (breo_pid);

create index idx_borrower_reo__pid_version
    on history_octane.borrower_reo (breo_pid, breo_version);

create index idx_borrower_reo__etl_batch_id
    on history_octane.borrower_reo (etl_batch_id);

grant select on history_octane.borrower_reo to readonly;

grant insert, select, update on history_octane.borrower_reo to etl_loan;

create table history_octane.borrower_residence
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    bres_pid bigint not null,
    bres_version integer,
    bres_borrower_pid bigint,
    bres_place_pid bigint,
    bres_current boolean,
    bres_borrower_residency_basis_type varchar(128),
    bres_from_date date,
    bres_through_date date,
    bres_verification_required boolean,
    etl_batch_id text
);

alter table history_octane.borrower_residence owner to deployer;

create index idx_borrower_residence__data_source_deleted_flag
    on history_octane.borrower_residence (data_source_deleted_flag);

create index idx_borrower_residence__data_source_updated_datetime
    on history_octane.borrower_residence (data_source_updated_datetime);

create index idx_borrower_residence__pid
    on history_octane.borrower_residence (bres_pid);

create index idx_borrower_residence__pid_version
    on history_octane.borrower_residence (bres_pid, bres_version);

create index idx_borrower_residence__etl_batch_id
    on history_octane.borrower_residence (etl_batch_id);

grant select on history_octane.borrower_residence to readonly;

grant insert, select, update on history_octane.borrower_residence to etl_loan;

create table history_octane.borrower_tax_filing
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    btf_pid bigint not null,
    btf_version integer,
    btf_borrower_pid bigint,
    btf_place_pid bigint,
    btf_tax_filing_status_type varchar(128),
    btf_year integer,
    btf_joint_is_coborrower boolean,
    btf_joint_filer_first_name varchar(32),
    btf_joint_filer_middle_name varchar(32),
    btf_joint_filer_last_name varchar(32),
    btf_joint_filer_suffix varchar(32),
    etl_batch_id text
);

alter table history_octane.borrower_tax_filing owner to deployer;

create index idx_borrower_tax_filing__data_source_deleted_flag
    on history_octane.borrower_tax_filing (data_source_deleted_flag);

create index idx_borrower_tax_filing__data_source_updated_datetime
    on history_octane.borrower_tax_filing (data_source_updated_datetime);

create index idx_borrower_tax_filing__pid
    on history_octane.borrower_tax_filing (btf_pid);

create index idx_borrower_tax_filing__pid_version
    on history_octane.borrower_tax_filing (btf_pid, btf_version);

create index idx_borrower_tax_filing__etl_batch_id
    on history_octane.borrower_tax_filing (etl_batch_id);

grant select on history_octane.borrower_tax_filing to readonly;

grant insert, select, update on history_octane.borrower_tax_filing to etl_loan;

create table history_octane.borrower_va
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    bva_pid bigint not null,
    bva_version integer,
    bva_borrower_pid bigint,
    bva_veteran_status_type varchar(128),
    bva_va_funding_fee_exempt boolean,
    bva_subsequent_use boolean,
    bva_claim_folder_number varchar(32),
    bva_benefit_related_indebtedness varchar(128),
    bva_available_entitlement_amount numeric(15,2),
    bva_va_entitlement_code_type varchar(128),
    bva_disability_benefits_prior_to_discharge varchar(128),
    bva_active_duty_following_separation varchar(128),
    bva_separated_from_service_due_to_disability varchar(128),
    bva_disability_payments varchar(128),
    bva_surviving_spouse_receiving_dic_payments varchar(128),
    bva_surviving_spouse_dic_claim_number varchar(128),
    bva_deceased_spouse_first_name varchar(32),
    bva_deceased_spouse_middle_name varchar(32),
    bva_deceased_spouse_last_name varchar(32),
    bva_deceased_spouse_name_suffix varchar(32),
    bva_deceased_spouse_claim_folder_number varchar(32),
    bva_deceased_spouse_claim_folder_location varchar(32),
    bva_deceased_spouse_service_number varchar(32),
    bva_deceased_spouse_military_branch_type varchar(128),
    bva_deceased_spouse_birth_date date,
    bva_deceased_spouse_death_date date,
    bva_deceased_spouse_service_from_date_1 date,
    bva_deceased_spouse_service_through_date_1 date,
    bva_deceased_spouse_service_from_date_2 date,
    bva_deceased_spouse_service_through_date_2 date,
    bva_deceased_spouse_service_from_date_3 date,
    bva_deceased_spouse_service_through_date_3 date,
    bva_previously_applied_for_eligibility varchar(128),
    bva_previously_secured_center_type varchar(128),
    bva_previously_applied_for_eligibility_center_type varchar(128),
    bva_previously_received_certificate_of_eligibility_center_type varchar(128),
    bva_previously_received_certificate_of_eligibility varchar(128),
    bva_previous_loan_address_street1 varchar(128),
    bva_previous_loan_address_street2 varchar(128),
    bva_previous_loan_address_city varchar(128),
    bva_previous_loan_address_state varchar(128),
    bva_previous_loan_address_postal_code varchar(128),
    bva_previous_loan_number varchar(128),
    bva_previous_loan_month integer,
    bva_previous_loan_year integer,
    bva_veteran_poa_verification_date date,
    bva_relative_first_name varchar(32),
    bva_relative_middle_name varchar(32),
    bva_relative_last_name varchar(32),
    bva_relative_name_suffix varchar(32),
    bva_relative_address_street1 varchar(128),
    bva_relative_address_street2 varchar(128),
    bva_relative_address_city varchar(128),
    bva_relative_address_state varchar(128),
    bva_relative_address_postal_code varchar(128),
    bva_relative_phone_number varchar(32),
    bva_va_relative_relationship_type varchar(128),
    bva_va_relative_relationship_other_description varchar(32),
    bva_service_related_disability boolean,
    bva_purple_heart_recipient boolean,
    bva_va_funding_fee_exemption_verified boolean,
    bva_entitlement_charged_amount numeric(15,2),
    bva_used_entitlement_amount numeric(15,2),
    bva_va_entitlement_restoration_type varchar(128),
    bva_previous_use_place_pid bigint,
    bva_entitled_to_military_based_facilities varchar(128),
    bva_one_hundred_percent_disabled_veteran varchar(128),
    bva_medal_of_honor_recipient boolean,
    etl_batch_id text
);

alter table history_octane.borrower_va owner to deployer;

create index idx_borrower_va__data_source_deleted_flag
    on history_octane.borrower_va (data_source_deleted_flag);

create index idx_borrower_va__data_source_updated_datetime
    on history_octane.borrower_va (data_source_updated_datetime);

create index idx_borrower_va__pid
    on history_octane.borrower_va (bva_pid);

create index idx_borrower_va__pid_version
    on history_octane.borrower_va (bva_pid, bva_version);

create index idx_borrower_va__etl_batch_id
    on history_octane.borrower_va (etl_batch_id);

grant select on history_octane.borrower_va to readonly;

grant insert, select, update on history_octane.borrower_va to etl_loan;

create table history_octane.profit_margin_detail
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    pmd_pid bigint not null,
    pmd_version integer,
    pmd_lender_lock_minor_pid bigint,
    pmd_profit_margin_type varchar(128),
    pmd_description varchar(128),
    pmd_percent numeric(11,9),
    pmd_dollars numeric(15,2),
    pmd_adjustment_description varchar(16000),
    etl_batch_id text
);

alter table history_octane.profit_margin_detail owner to deployer;

create index idx_profit_margin_detail__data_source_deleted_flag
    on history_octane.profit_margin_detail (data_source_deleted_flag);

create index idx_profit_margin_detail__data_source_updated_datetime
    on history_octane.profit_margin_detail (data_source_updated_datetime);

create index idx_profit_margin_detail__pid
    on history_octane.profit_margin_detail (pmd_pid);

create index idx_profit_margin_detail__pid_version
    on history_octane.profit_margin_detail (pmd_pid, pmd_version);

create index idx_profit_margin_detail__etl_batch_id
    on history_octane.profit_margin_detail (etl_batch_id);

grant select on history_octane.profit_margin_detail to readonly;

grant insert, select, update on history_octane.profit_margin_detail to etl_loan;

create table history_octane.proposal_contractor
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    pctr_pid bigint not null,
    pctr_version integer,
    pctr_proposal_pid bigint,
    pctr_contractor_pid bigint,
    etl_batch_id text
);

alter table history_octane.proposal_contractor owner to deployer;

create index idx_proposal_contractor__data_source_deleted_flag
    on history_octane.proposal_contractor (data_source_deleted_flag);

create index idx_proposal_contractor__data_source_updated_datetime
    on history_octane.proposal_contractor (data_source_updated_datetime);

create index idx_proposal_contractor__pid
    on history_octane.proposal_contractor (pctr_pid);

create index idx_proposal_contractor__pid_version
    on history_octane.proposal_contractor (pctr_pid, pctr_version);

create index idx_proposal_contractor__etl_batch_id
    on history_octane.proposal_contractor (etl_batch_id);

grant select on history_octane.proposal_contractor to readonly;

grant insert, select, update on history_octane.proposal_contractor to etl_loan;

create table history_octane.construction_cost
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    coc_pid bigint not null,
    coc_version integer,
    coc_proposal_pid bigint,
    coc_construction_cost_category_type varchar(128),
    coc_construction_cost_funding_type varchar(128),
    coc_construction_cost_status_type varchar(128),
    coc_construction_cost_payee_type varchar(128),
    coc_create_datetime timestamp,
    coc_construction_cost_amount numeric(15,2),
    coc_construction_cost_notes varchar(1024),
    coc_contractor_pid bigint,
    coc_proposal_contractor_pid bigint,
    coc_payee varchar(128),
    coc_effective_construction_cost_calculation_percent numeric(11,9),
    coc_construction_cost_calculation_type varchar(128),
    coc_permit_pid bigint,
    coc_category_type_label varchar(256),
    coc_charge_type varchar(128),
    coc_draw_discrepancy_text varchar(1024),
    coc_impeding_draw_discrepancy boolean,
    coc_calculated_construction_cost_percent numeric(11,9),
    coc_overridden_construction_cost_percent numeric(11,9),
    coc_construction_cost_calculation_percent_override_reason varchar(1024),
    coc_calculated_construction_cost_months integer,
    coc_overridden_construction_cost_months integer,
    coc_effective_construction_cost_months integer,
    coc_construction_cost_months_override_reason varchar(1024),
    coc_borrower_pid bigint,
    coc_proposal_hud_consultant_pid bigint,
    coc_title_company_pid bigint,
    coc_payee_other_selected boolean,
    coc_payee_other_description varchar(128),
    etl_batch_id text
);

alter table history_octane.construction_cost owner to deployer;

create index idx_construction_cost__data_source_deleted_flag
    on history_octane.construction_cost (data_source_deleted_flag);

create index idx_construction_cost__data_source_updated_datetime
    on history_octane.construction_cost (data_source_updated_datetime);

create index idx_construction_cost__pid
    on history_octane.construction_cost (coc_pid);

create index idx_construction_cost__pid_version
    on history_octane.construction_cost (coc_pid, coc_version);

create index fkt_coc_construction_cost_calculation_type
    on history_octane.construction_cost (coc_construction_cost_calculation_type);

create index fk_construction_cost_4
    on history_octane.construction_cost (coc_permit_pid);

create index fkt_coc_charge_type
    on history_octane.construction_cost (coc_charge_type);

create index fk_coc_borrower_pid
    on history_octane.construction_cost (coc_borrower_pid);

create index fk_coc_proposal_hud_consultant_pid
    on history_octane.construction_cost (coc_proposal_hud_consultant_pid);

create index fk_coc_title_company_pid
    on history_octane.construction_cost (coc_title_company_pid);

create index idx_construction_cost__etl_batch_id
    on history_octane.construction_cost (etl_batch_id);

grant select on history_octane.construction_cost to readonly;

grant insert, select, update on history_octane.construction_cost to etl_loan;

create table history_octane.construction_draw_item
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    cdi_pid bigint not null,
    cdi_version integer,
    cdi_proposal_pid bigint,
    cdi_construction_cost_pid bigint,
    cdi_construction_draw_pid bigint,
    cdi_construction_draw_item_amount numeric(15,2),
    cdi_construction_draw_item_borrower_contribution_amount numeric(15,2),
    cdi_construction_draw_item_lender_contribution_amount numeric(15,2),
    etl_batch_id text
);

alter table history_octane.construction_draw_item owner to deployer;

create index idx_construction_draw_item__data_source_deleted_flag
    on history_octane.construction_draw_item (data_source_deleted_flag);

create index idx_construction_draw_item__data_source_updated_datetime
    on history_octane.construction_draw_item (data_source_updated_datetime);

create index idx_construction_draw_item__pid
    on history_octane.construction_draw_item (cdi_pid);

create index idx_construction_draw_item__pid_version
    on history_octane.construction_draw_item (cdi_pid, cdi_version);

create index idx_construction_draw_item__etl_batch_id
    on history_octane.construction_draw_item (etl_batch_id);

grant select on history_octane.construction_draw_item to readonly;

grant insert, select, update on history_octane.construction_draw_item to etl_loan;

create table history_octane.proposal_doc_set
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    prpds_pid bigint not null,
    prpds_version integer,
    prpds_proposal_pid bigint,
    prpds_smart_doc_set_pid bigint,
    prpds_create_datetime timestamp,
    prpds_delivered_or_mailed_datetime timestamp,
    prpds_creator_agent_type varchar(128),
    prpds_creator_lender_user_pid bigint,
    prpds_creator_unparsed_name varchar(128),
    prpds_requested_datetime timestamp,
    prpds_requester_agent_type varchar(128),
    prpds_requester_lender_user_pid bigint,
    prpds_requester_unparsed_name varchar(128),
    prpds_signed_date date,
    prpds_delivery_method_type varchar(128),
    prpds_tracking_number varchar(32),
    prpds_affects_earliest_allowed_consummation_date boolean,
    prpds_name varchar(128),
    prpds_docusign_package_pid bigint,
    prpds_esign_vendor_type varchar(128),
    prpds_esign_evidence_deal_file_pid bigint,
    prpds_doc_package_status_type varchar(128),
    prpds_canceled_reason_type varchar(128),
    prpds_canceled_datetime timestamp,
    prpds_canceler_agent_type varchar(128),
    prpds_canceler_lender_user_pid bigint,
    prpds_canceler_unparsed_name varchar(128),
    prpds_canceled_reason varchar(16000),
    prpds_proposal_doc_set_id integer,
    prpds_docs_last_updated_datetime timestamp,
    etl_batch_id text
);

alter table history_octane.proposal_doc_set owner to deployer;

create index idx_proposal_doc_set__data_source_deleted_flag
    on history_octane.proposal_doc_set (data_source_deleted_flag);

create index idx_proposal_doc_set__data_source_updated_datetime
    on history_octane.proposal_doc_set (data_source_updated_datetime);

create index idx_proposal_doc_set__pid
    on history_octane.proposal_doc_set (prpds_pid);

create index idx_proposal_doc_set__pid_version
    on history_octane.proposal_doc_set (prpds_pid, prpds_version);

create index idx_proposal_doc_set__etl_batch_id
    on history_octane.proposal_doc_set (etl_batch_id);

grant select on history_octane.proposal_doc_set to readonly;

grant insert, select, update on history_octane.proposal_doc_set to etl_loan;

create table history_octane.proposal_doc_set_id_ticker
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    pdstk_pid bigint not null,
    pdstk_version integer,
    pdstk_proposal_pid bigint,
    pdstk_smart_doc_set_pid bigint,
    pdstk_next_proposal_doc_set_id integer,
    etl_batch_id text
);

alter table history_octane.proposal_doc_set_id_ticker owner to deployer;

create index idx_proposal_doc_set_id_ticker__data_source_deleted_flag
    on history_octane.proposal_doc_set_id_ticker (data_source_deleted_flag);

create index idx_proposal_doc_set_id_ticker__data_source_updated_datetime
    on history_octane.proposal_doc_set_id_ticker (data_source_updated_datetime);

create index idx_proposal_doc_set_id_ticker__pid
    on history_octane.proposal_doc_set_id_ticker (pdstk_pid);

create index idx_proposal_doc_set_id_ticker__pid_version
    on history_octane.proposal_doc_set_id_ticker (pdstk_pid, pdstk_version);

create index idx_proposal_doc_set_id_ticker__etl_batch_id
    on history_octane.proposal_doc_set_id_ticker (etl_batch_id);

grant select on history_octane.proposal_doc_set_id_ticker to readonly;

grant insert, select, update on history_octane.proposal_doc_set_id_ticker to etl_loan;

create table history_octane.proposal_doc_set_signer
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    prpdss_pid bigint not null,
    prpdss_version integer,
    prpdss_proposal_doc_set_pid bigint,
    prpdss_deal_signer_pid bigint,
    prpdss_esign_complete boolean,
    prpdss_received_datetime timestamp,
    prpdss_signed_datetime timestamp,
    etl_batch_id text
);

alter table history_octane.proposal_doc_set_signer owner to deployer;

create index idx_proposal_doc_set_signer__data_source_deleted_flag
    on history_octane.proposal_doc_set_signer (data_source_deleted_flag);

create index idx_proposal_doc_set_signer__data_source_updated_datetime
    on history_octane.proposal_doc_set_signer (data_source_updated_datetime);

create index idx_proposal_doc_set_signer__pid
    on history_octane.proposal_doc_set_signer (prpdss_pid);

create index idx_proposal_doc_set_signer__pid_version
    on history_octane.proposal_doc_set_signer (prpdss_pid, prpdss_version);

create index idx_proposal_doc_set_signer__etl_batch_id
    on history_octane.proposal_doc_set_signer (etl_batch_id);

grant select on history_octane.proposal_doc_set_signer to readonly;

grant insert, select, update on history_octane.proposal_doc_set_signer to etl_loan;

create table history_octane.proposal_doc_set_snapshot
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    prpdssn_pid bigint not null,
    prpdssn_version integer,
    prpdssn_proposal_doc_set_pid bigint,
    prpdssn_snapshot_proposal_pid bigint,
    etl_batch_id text
);

alter table history_octane.proposal_doc_set_snapshot owner to deployer;

create index idx_proposal_doc_set_snapshot__data_source_deleted_flag
    on history_octane.proposal_doc_set_snapshot (data_source_deleted_flag);

create index idx_proposal_doc_set_snapshot__data_source_updated_datetime
    on history_octane.proposal_doc_set_snapshot (data_source_updated_datetime);

create index idx_proposal_doc_set_snapshot__pid
    on history_octane.proposal_doc_set_snapshot (prpdssn_pid);

create index idx_proposal_doc_set_snapshot__pid_version
    on history_octane.proposal_doc_set_snapshot (prpdssn_pid, prpdssn_version);

create index idx_proposal_doc_set_snapshot__etl_batch_id
    on history_octane.proposal_doc_set_snapshot (etl_batch_id);

grant select on history_octane.proposal_doc_set_snapshot to readonly;

grant insert, select, update on history_octane.proposal_doc_set_snapshot to etl_loan;

create table history_octane.proposal_engagement
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    prpe_pid bigint not null,
    prpe_version integer,
    prpe_proposal_pid bigint,
    prpe_borrower_engagement_percent numeric(11,9),
    etl_batch_id text
);

alter table history_octane.proposal_engagement owner to deployer;

create index idx_proposal_engagement__data_source_deleted_flag
    on history_octane.proposal_engagement (data_source_deleted_flag);

create index idx_proposal_engagement__data_source_updated_datetime
    on history_octane.proposal_engagement (data_source_updated_datetime);

create index idx_proposal_engagement__pid
    on history_octane.proposal_engagement (prpe_pid);

create index idx_proposal_engagement__pid_version
    on history_octane.proposal_engagement (prpe_pid, prpe_version);

create index idx_proposal_engagement__etl_batch_id
    on history_octane.proposal_engagement (etl_batch_id);

grant select on history_octane.proposal_engagement to readonly;

grant insert, select, update on history_octane.proposal_engagement to etl_loan;

create table history_octane.proposal_grant_program
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    pgp_pid bigint not null,
    pgp_version integer,
    pgp_proposal_pid bigint,
    pgp_account_grant_program_pid bigint,
    pgp_grant_amount numeric(15,2),
    etl_batch_id text,
    pgp_snapshotted_pid bigint
);

alter table history_octane.proposal_grant_program owner to deployer;

create index idx_proposal_grant_program__data_source_deleted_flag
    on history_octane.proposal_grant_program (data_source_deleted_flag);

create index idx_proposal_grant_program__data_source_updated_datetime
    on history_octane.proposal_grant_program (data_source_updated_datetime);

create index idx_proposal_grant_program__pid
    on history_octane.proposal_grant_program (pgp_pid);

create index idx_proposal_grant_program__pid_version
    on history_octane.proposal_grant_program (pgp_pid, pgp_version);

create index idx_proposal_grant_program__etl_batch_id
    on history_octane.proposal_grant_program (etl_batch_id);

grant select on history_octane.proposal_grant_program to readonly;

grant insert, select, update on history_octane.proposal_grant_program to etl_loan;

create table history_octane.proposal_review
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    prpre_pid bigint not null,
    prpre_version integer,
    prpre_proposal_pid bigint,
    prpre_request_id integer,
    prpre_request_datetime timestamp,
    prpre_request_by_lender_user_pid bigint,
    prpre_request_summary text,
    prpre_proposal_review_status_type varchar(128),
    prpre_decision_datetime timestamp,
    prpre_decision_by_lender_user_pid bigint,
    prpre_decision_summary text,
    etl_batch_id text
);

alter table history_octane.proposal_review owner to deployer;

create index idx_proposal_review__data_source_deleted_flag
    on history_octane.proposal_review (data_source_deleted_flag);

create index idx_proposal_review__data_source_updated_datetime
    on history_octane.proposal_review (data_source_updated_datetime);

create index idx_proposal_review__pid
    on history_octane.proposal_review (prpre_pid);

create index idx_proposal_review__pid_version
    on history_octane.proposal_review (prpre_pid, prpre_version);

create index idx_proposal_review__etl_batch_id
    on history_octane.proposal_review (etl_batch_id);

grant select on history_octane.proposal_review to readonly;

grant insert, select, update on history_octane.proposal_review to etl_loan;

create table history_octane.proposal_review_ticker
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    prpret_pid bigint not null,
    prpret_version integer,
    prpret_proposal_pid bigint,
    prpret_next_id integer,
    etl_batch_id text
);

alter table history_octane.proposal_review_ticker owner to deployer;

create index idx_proposal_review_ticker__data_source_deleted_flag
    on history_octane.proposal_review_ticker (data_source_deleted_flag);

create index idx_proposal_review_ticker__data_source_updated_datetime
    on history_octane.proposal_review_ticker (data_source_updated_datetime);

create index idx_proposal_review_ticker__pid
    on history_octane.proposal_review_ticker (prpret_pid);

create index idx_proposal_review_ticker__pid_version
    on history_octane.proposal_review_ticker (prpret_pid, prpret_version);

create index idx_proposal_review_ticker__etl_batch_id
    on history_octane.proposal_review_ticker (etl_batch_id);

grant select on history_octane.proposal_review_ticker to readonly;

grant insert, select, update on history_octane.proposal_review_ticker to etl_loan;

create table history_octane.proposal_summary
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ps_pid bigint not null,
    ps_version integer,
    ps_proposal_pid bigint,
    ps_subject_property_city varchar(128),
    ps_subject_property_country varchar(128),
    ps_subject_property_postal_code varchar(128),
    ps_subject_property_state varchar(128),
    ps_subject_property_street1 varchar(128),
    ps_subject_property_street2 varchar(128),
    ps_note_rate_percent_main numeric(11,9),
    ps_note_rate_percent_piggyback numeric(11,9),
    ps_initial_note_rate_percent_main numeric(11,9),
    ps_initial_note_rate_percent_piggyback numeric(11,9),
    ps_base_loan_amount_main numeric(17,2),
    ps_base_loan_amount_piggyback numeric(17,2),
    ps_loan_amount_main numeric(17,2),
    ps_loan_amount_piggyback numeric(17,2),
    ps_product_special_program_type_main varchar(128),
    ps_product_special_program_type_piggyback varchar(128),
    ps_investor_pid_main bigint,
    ps_investor_pid_piggyback bigint,
    ps_product_fnm_community_lending_product_type_main varchar(128),
    ps_product_fnm_community_lending_product_type_piggyback varchar(128),
    ps_product_fre_community_program_type_main varchar(128),
    ps_product_fre_community_program_type_piggyback varchar(128),
    ps_mortgage_type_main varchar(128),
    ps_mortgage_type_piggyback varchar(128),
    ps_b1_first_name varchar(32),
    ps_c1_first_name varchar(32),
    ps_b2_first_name varchar(32),
    ps_b1_last_name varchar(32),
    ps_c1_last_name varchar(32),
    ps_b2_last_name varchar(32),
    ps_b1_middle_name varchar(32),
    ps_c1_middle_name varchar(32),
    ps_b2_middle_name varchar(32),
    ps_b1_preferred_first_name varchar(32),
    ps_b2_preferred_first_name varchar(32),
    ps_c1_preferred_first_name varchar(32),
    ps_b1_birth_date date,
    ps_c1_birth_date date,
    ps_b1_monthly_income numeric(15,2),
    ps_c1_monthly_income numeric(15,2),
    ps_b2_monthly_income numeric(15,2),
    ps_b1_has_business_income boolean,
    ps_c1_has_business_income boolean,
    ps_b2_has_business_income boolean,
    ps_b1_citizenship_residency_type varchar(128),
    ps_c1_citizenship_residency_type varchar(128),
    ps_b2_citizenship_residency_type varchar(128),
    ps_b1_hmda_ethnicity_2017_type varchar(128),
    ps_c1_hmda_ethnicity_2017_type varchar(128),
    ps_b2_hmda_ethnicity_2017_type varchar(128),
    ps_b1_decision_credit_score integer,
    ps_c1_decision_credit_score integer,
    ps_b2_decision_credit_score integer,
    ps_b1_gender_type varchar(128),
    ps_c1_gender_type varchar(128),
    ps_b2_gender_type varchar(128),
    ps_b1_hmda_race_2017_type varchar(128),
    ps_c1_hmda_race_2017_type varchar(128),
    ps_b2_hmda_race_2017_type varchar(128),
    ps_any_lender_employee_borrower boolean,
    ps_upfront_mi_percent_main numeric(11,9),
    ps_upfront_mi_percent_piggyback numeric(11,9),
    ps_primary_application_name varchar(128),
    ps_investor_loan_id_main varchar(32),
    ps_investor_loan_id_piggyback varchar(32),
    ps_initial_servicer_investor_loan_id_main varchar(32),
    ps_initial_servicer_investor_loan_id_piggyback varchar(32),
    ps_current_servicer_investor_loan_id_main varchar(32),
    ps_current_servicer_investor_loan_id_piggyback varchar(32),
    ps_offering_id_main varchar(32),
    ps_offering_id_piggyback varchar(32),
    ps_proposal_structure_type varchar(128),
    ps_loan_maturity_date_main date,
    ps_loan_maturity_date_piggyback date,
    ps_ltv_ratio_percent_main numeric(11,9),
    ps_ltv_ratio_percent_piggyback numeric(11,9),
    ps_cltv_ratio_percent numeric(11,9),
    ps_hcltv_ratio_percent numeric(11,9),
    ps_hcltv_applicable boolean,
    ps_debt_ratio_percent numeric(11,9),
    ps_housing_ratio_percent numeric(11,9),
    ps_property_category_type varchar(128),
    ps_any_first_time_home_buyer boolean,
    ps_primary_housing_expense_amount numeric(15,2),
    ps_non_primary_housing_expense_amount numeric(15,2),
    ps_income_monthly_total_amount numeric(15,2),
    ps_asset_total_amount numeric(15,2),
    ps_liquid_asset_total_amount numeric(15,2),
    ps_liability_unpaid_balance_total_amount numeric(15,2),
    ps_liability_monthly_payment_total_amount numeric(15,2),
    ps_monthly_pitia_amount numeric(15,2),
    ps_cash_from_borrower_amount_signed numeric(15,2),
    ps_proposed_monthly_housing_and_debt_amount numeric(15,2),
    ps_funding_date_main date,
    ps_funding_date_piggyback date,
    ps_interim_funder_company_name varchar(128),
    ps_interim_funder_mers_org_id varchar(7),
    ps_funding_scheduled_release_date_main date,
    ps_funding_scheduled_release_date_piggyback date,
    ps_uuts_aus_recommendation_description varchar(32),
    ps_interest_rate_fee_amount_signed numeric(15,2),
    ps_interest_rate_fee_amount_signed_main numeric(15,2),
    ps_interest_rate_fee_amount_signed_piggyback numeric(15,2),
    ps_origination_fees_amount_signed numeric(15,2),
    ps_origination_fees_amount_signed_main numeric(15,2),
    ps_origination_fees_amount_signed_piggyback numeric(15,2),
    ps_any_escrow_waived boolean,
    ps_initial_rate_adjustment_date_main date,
    ps_initial_rate_adjustment_date_piggyback date,
    ps_tolerance_cure_amount_signed numeric(15,2),
    ps_tolerance_cure_amount_signed_main numeric(15,2),
    ps_tolerance_cure_amount_signed_piggyback numeric(15,2),
    ps_subject_property_existing_subordinate_2nd boolean,
    ps_subject_property_subordinate_2nd_creditor_pid bigint,
    ps_subject_property_existing_subordinate_3rd boolean,
    ps_subject_property_subordinate_3rd_creditor_pid bigint,
    ps_total_monthly_solar_lease_payments_amount numeric(15,2),
    ps_total_debt_payoff_amount numeric(15,2),
    ps_total_new_subordinate_financing_amount numeric(15,2),
    ps_total_grant_amount numeric(15,2),
    ps_any_third_party_community_second boolean,
    ps_any_grant_program boolean,
    ps_initial_loan_estimate_loan_amount_main numeric(17,2),
    ps_initial_loan_estimate_loan_amount_piggyback numeric(17,2),
    ps_any_mortgage_credit_certificate boolean,
    ps_debt_ratio_excluding_mi_percent numeric(11,9),
    ps_fund_source_type_main varchar(128),
    ps_fund_source_type_piggyback varchar(128),
    ps_mortgage_credit_certificate_issuer_pid bigint,
    ps_subject_property_new_subordinate_2nd boolean,
    ps_subject_property_new_subordinate_3rd boolean,
    ps_any_borrower_self_employed boolean,
    ps_fha_section_of_act_coarse_type_main varchar(128),
    ps_fha_section_of_act_coarse_type_piggyback varchar(128),
    ps_fha_special_program_type_main varchar(128),
    ps_fha_special_program_type_piggyback varchar(128),
    ps_product_pid_main bigint,
    ps_product_pid_piggyback bigint,
    ps_net_origination_charge_main numeric(15,2),
    ps_net_origination_charge_piggyback numeric(15,2),
    ps_household_income_guideline_percent numeric(22,9),
    ps_applicant_count smallint,
    ps_early_wire_total_charge_amount_main numeric(15,2),
    ps_early_wire_total_charge_amount_piggyback numeric(15,2),
    ps_funding_scheduled_release_date_auto_compute_main boolean,
    ps_funding_scheduled_release_date_auto_compute_piggyback boolean,
    ps_any_hoa_certification_fee boolean,
    ps_effective_agency_case_id_main varchar(64),
    ps_effective_agency_case_id_piggyback varchar(64),
    ps_effective_agency_case_id_assigned_date_main date,
    ps_effective_agency_case_id_assigned_date_piggyback date,
    etl_batch_id text
);

alter table history_octane.proposal_summary owner to deployer;

create index idx_proposal_summary__data_source_deleted_flag
    on history_octane.proposal_summary (data_source_deleted_flag);

create index idx_proposal_summary__data_source_updated_datetime
    on history_octane.proposal_summary (data_source_updated_datetime);

create index idx_proposal_summary__pid
    on history_octane.proposal_summary (ps_pid);

create index idx_proposal_summary__pid_version
    on history_octane.proposal_summary (ps_pid, ps_version);

create index idx_proposal_summary__etl_batch_id
    on history_octane.proposal_summary (etl_batch_id);

grant select on history_octane.proposal_summary to readonly;

grant insert, select, update on history_octane.proposal_summary to etl_loan;

create table history_octane.pte_request
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    pter_pid bigint not null,
    pter_version integer,
    pter_proposal_pid bigint,
    pter_create_datetime timestamp,
    pter_pte_request_status_type varchar(128),
    pter_pte_response_status_type varchar(128),
    pter_pte_error_messages text,
    pter_address_street1 varchar(128),
    pter_address_street2 varchar(128),
    pter_address_city varchar(128),
    pter_address_state varchar(128),
    pter_address_postal_code varchar(128),
    pter_response_xml_pid bigint,
    pter_response_pdf_file_pid bigint,
    pter_submitting_party_order_id varchar(128),
    pter_responding_party_order_id varchar(32),
    pter_fulfillment_party_order_id varchar(32),
    pter_building_status_type varchar(128),
    pter_loan_purpose_type varchar(128),
    pter_effective_property_value_amount numeric(15),
    pter_property_usage_type varchar(128),
    etl_batch_id text
);

alter table history_octane.pte_request owner to deployer;

create index idx_pte_request__data_source_deleted_flag
    on history_octane.pte_request (data_source_deleted_flag);

create index idx_pte_request__data_source_updated_datetime
    on history_octane.pte_request (data_source_updated_datetime);

create index idx_pte_request__pid
    on history_octane.pte_request (pter_pid);

create index idx_pte_request__pid_version
    on history_octane.pte_request (pter_pid, pter_version);

create index idx_pte_request__etl_batch_id
    on history_octane.pte_request (etl_batch_id);

grant select on history_octane.pte_request to readonly;

grant insert, select, update on history_octane.pte_request to etl_loan;

create table history_octane.public_record
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    pr_pid bigint not null,
    pr_version integer,
    pr_proposal_pid bigint,
    pr_credit_request_pid bigint,
    pr_public_record_type varchar(128),
    pr_public_record_type_other_description varchar(32),
    pr_public_record_disposition_type varchar(128),
    pr_report_public_record_disposition_type varchar(128),
    pr_disposition_date date,
    pr_filed_date date,
    pr_reported_date date,
    pr_settled_date date,
    pr_paid_date date,
    pr_docket_id varchar(32),
    pr_bankruptcy_exception_type varchar(128),
    pr_bankruptcy_assets_amount numeric(15,2),
    pr_bankruptcy_exempt_amount numeric(15,2),
    pr_bankruptcy_liabilities_amount numeric(15,2),
    pr_legal_obligation_amount numeric(15,2),
    pr_court_name varchar(128),
    pr_plaintiff_name varchar(128),
    pr_defendant_name varchar(128),
    pr_attorney_name varchar(128),
    pr_comment varchar(16000),
    pr_note varchar(1024),
    pr_equifax_included boolean,
    pr_experian_included boolean,
    pr_trans_union_included boolean,
    pr_credit_report_identifier varchar(32),
    etl_batch_id text
);

alter table history_octane.public_record owner to deployer;

create index idx_public_record__data_source_deleted_flag
    on history_octane.public_record (data_source_deleted_flag);

create index idx_public_record__data_source_updated_datetime
    on history_octane.public_record (data_source_updated_datetime);

create index idx_public_record__pid
    on history_octane.public_record (pr_pid);

create index idx_public_record__pid_version
    on history_octane.public_record (pr_pid, pr_version);

create index idx_public_record__etl_batch_id
    on history_octane.public_record (etl_batch_id);

grant select on history_octane.public_record to readonly;

grant insert, select, update on history_octane.public_record to etl_loan;

create table history_octane.borrower_public_record
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    bpr_pid bigint not null,
    bpr_version integer,
    bpr_borrower_pid bigint,
    bpr_public_record_pid bigint,
    etl_batch_id text
);

alter table history_octane.borrower_public_record owner to deployer;

create index idx_borrower_public_record__data_source_deleted_flag
    on history_octane.borrower_public_record (data_source_deleted_flag);

create index idx_borrower_public_record__data_source_updated_datetime
    on history_octane.borrower_public_record (data_source_updated_datetime);

create index idx_borrower_public_record__pid
    on history_octane.borrower_public_record (bpr_pid);

create index idx_borrower_public_record__pid_version
    on history_octane.borrower_public_record (bpr_pid, bpr_version);

create index idx_borrower_public_record__etl_batch_id
    on history_octane.borrower_public_record (etl_batch_id);

grant select on history_octane.borrower_public_record to readonly;

grant insert, select, update on history_octane.borrower_public_record to etl_loan;

create table history_octane.rental_income
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ri_pid bigint not null,
    ri_version integer,
    ri_borrower_income_pid bigint,
    ri_place_pid bigint,
    ri_schedule_e_input boolean,
    ri_rental_income_estimated_mode boolean,
    ri_rental_income_estimated_gross_monthly_amount numeric(15,2),
    ri_simple_monthly_total_amount numeric(15,2),
    ri_schedule_e_calculated_gross_monthly_amount numeric(15,2),
    ri_schedule_e_proposed_monthly_expense_amount numeric(15,2),
    ri_schedule_e_net_monthly_amount numeric(15,2),
    ri_rental_income_monthly_total_amount numeric(15,2),
    ri_schedule_e_non_recurring_expense_1 varchar(128),
    ri_schedule_e_non_recurring_expense_2 varchar(128),
    ri_schedule_e_non_recurring_expense_3 varchar(128),
    ri_rental_income_calc_method varchar(128),
    ri_common_year1_year integer,
    ri_common_year1_year_include boolean,
    ri_common_year1_from_date date,
    ri_common_year1_through_date date,
    ri_common_year1_months numeric(4,2),
    ri_common_year1_annual_total_amount numeric(15,2),
    ri_common_year1_monthly_total_amount numeric(15,2),
    ri_common_year2_year integer,
    ri_common_year2_year_include boolean,
    ri_common_year2_from_date date,
    ri_common_year2_through_date date,
    ri_common_year2_months numeric(4,2),
    ri_common_year2_annual_total_amount numeric(15,2),
    ri_common_year2_monthly_total_amount numeric(15,2),
    ri_common_year3_year integer,
    ri_common_year3_year_include boolean,
    ri_common_year3_from_date date,
    ri_common_year3_through_date date,
    ri_common_year3_months numeric(4,2),
    ri_common_year3_annual_total_amount numeric(15,2),
    ri_common_year3_monthly_total_amount numeric(15,2),
    ri_schedule_e_year1_rent_received_amount numeric(15,2),
    ri_schedule_e_year1_advertising_expense_amount numeric(15,2),
    ri_schedule_e_year1_auto_travel_expense_amount numeric(15,2),
    ri_schedule_e_year1_cleaning_maintenance_expense_amount numeric(15,2),
    ri_schedule_e_year1_commissions_expense_amount numeric(15,2),
    ri_schedule_e_year1_insurance_expense_amount numeric(15,2),
    ri_schedule_e_year1_legal_professional_expense_amount numeric(15,2),
    ri_schedule_e_year1_management_expense_amount numeric(15,2),
    ri_schedule_e_year1_mortgage_interest_expense_amount numeric(15,2),
    ri_schedule_e_year1_other_interest_expense_amount numeric(15,2),
    ri_schedule_e_year1_repairs_expense_amount numeric(15,2),
    ri_schedule_e_year1_supplies_expense_amount numeric(15,2),
    ri_schedule_e_year1_taxes_expense_amount numeric(15,2),
    ri_schedule_e_year1_utilities_expense_amount numeric(15,2),
    ri_schedule_e_year1_depreciation_expense_amount numeric(15,2),
    ri_schedule_e_year1_other_expense_amount numeric(15,2),
    ri_schedule_e_year1_total_expense_amount numeric(15,2),
    ri_schedule_e_year1_non_recurring_expense_amount_1 numeric(15,2),
    ri_schedule_e_year1_non_recurring_expense_amount_2 numeric(15,2),
    ri_schedule_e_year1_non_recurring_expense_amount_3 numeric(15,2),
    ri_schedule_e_year1_insurance_credit_amount numeric(15,2),
    ri_schedule_e_year1_taxes_credit_amount numeric(15,2),
    ri_schedule_e_year1_annual_subtotal numeric(15,2),
    ri_schedule_e_year1_ownership_percent numeric(11,9),
    ri_schedule_e_year2_rent_received_amount numeric(15,2),
    ri_schedule_e_year2_advertising_expense_amount numeric(15,2),
    ri_schedule_e_year2_auto_travel_expense_amount numeric(15,2),
    ri_schedule_e_year2_cleaning_maintenance_expense_amount numeric(15,2),
    ri_schedule_e_year2_commissions_expense_amount numeric(15,2),
    ri_schedule_e_year2_insurance_expense_amount numeric(15,2),
    ri_schedule_e_year2_legal_professional_expense_amount numeric(15,2),
    ri_schedule_e_year2_management_expense_amount numeric(15,2),
    ri_schedule_e_year2_mortgage_interest_expense_amount numeric(15,2),
    ri_schedule_e_year2_other_interest_expense_amount numeric(15,2),
    ri_schedule_e_year2_repairs_expense_amount numeric(15,2),
    ri_schedule_e_year2_supplies_expense_amount numeric(15,2),
    ri_schedule_e_year2_taxes_expense_amount numeric(15,2),
    ri_schedule_e_year2_utilities_expense_amount numeric(15,2),
    ri_schedule_e_year2_depreciation_expense_amount numeric(15,2),
    ri_schedule_e_year2_other_expense_amount numeric(15,2),
    ri_schedule_e_year2_total_expense_amount numeric(15,2),
    ri_schedule_e_year2_non_recurring_expense_amount_1 numeric(15,2),
    ri_schedule_e_year2_non_recurring_expense_amount_2 numeric(15,2),
    ri_schedule_e_year2_non_recurring_expense_amount_3 numeric(15,2),
    ri_schedule_e_year2_insurance_credit_amount numeric(15,2),
    ri_schedule_e_year2_taxes_credit_amount numeric(15,2),
    ri_schedule_e_year2_annual_subtotal numeric(15,2),
    ri_schedule_e_year2_ownership_percent numeric(11,9),
    ri_schedule_e_year3_rent_received_amount numeric(15,2),
    ri_schedule_e_year3_advertising_expense_amount numeric(15,2),
    ri_schedule_e_year3_auto_travel_expense_amount numeric(15,2),
    ri_schedule_e_year3_cleaning_maintenance_expense_amount numeric(15,2),
    ri_schedule_e_year3_commissions_expense_amount numeric(15,2),
    ri_schedule_e_year3_insurance_expense_amount numeric(15,2),
    ri_schedule_e_year3_legal_professional_expense_amount numeric(15,2),
    ri_schedule_e_year3_management_expense_amount numeric(15,2),
    ri_schedule_e_year3_mortgage_interest_expense_amount numeric(15,2),
    ri_schedule_e_year3_other_interest_expense_amount numeric(15,2),
    ri_schedule_e_year3_repairs_expense_amount numeric(15,2),
    ri_schedule_e_year3_supplies_expense_amount numeric(15,2),
    ri_schedule_e_year3_taxes_expense_amount numeric(15,2),
    ri_schedule_e_year3_utilities_expense_amount numeric(15,2),
    ri_schedule_e_year3_depreciation_expense_amount numeric(15,2),
    ri_schedule_e_year3_other_expense_amount numeric(15,2),
    ri_schedule_e_year3_total_expense_amount numeric(15,2),
    ri_schedule_e_year3_non_recurring_expense_amount_1 numeric(15,2),
    ri_schedule_e_year3_non_recurring_expense_amount_2 numeric(15,2),
    ri_schedule_e_year3_non_recurring_expense_amount_3 numeric(15,2),
    ri_schedule_e_year3_insurance_credit_amount numeric(15,2),
    ri_schedule_e_year3_taxes_credit_amount numeric(15,2),
    ri_schedule_e_year3_annual_subtotal numeric(15,2),
    ri_schedule_e_year3_ownership_percent numeric(11,9),
    ri_simple_monthly_rent_amount numeric(15,2),
    ri_simple_vacancy_maintenance_adjustment_percent numeric(11,9),
    ri_simple_monthly_net_rent_amount numeric(15,2),
    ri_simple_monthly_expense_amount numeric(15,2),
    ri_simple_monthly_pre_ownership_income_amount numeric(15,2),
    ri_simple_ownership_percent numeric(11,9),
    ri_simple_calculated_monthly_amount numeric(15,2),
    etl_batch_id text
);

alter table history_octane.rental_income owner to deployer;

create index idx_rental_income__data_source_deleted_flag
    on history_octane.rental_income (data_source_deleted_flag);

create index idx_rental_income__data_source_updated_datetime
    on history_octane.rental_income (data_source_updated_datetime);

create index idx_rental_income__pid
    on history_octane.rental_income (ri_pid);

create index idx_rental_income__pid_version
    on history_octane.rental_income (ri_pid, ri_version);

create index idx_rental_income__etl_batch_id
    on history_octane.rental_income (etl_batch_id);

grant select on history_octane.rental_income to readonly;

grant insert, select, update on history_octane.rental_income to etl_loan;

create table history_octane.sap_quote_request
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    sqr_pid bigint not null,
    sqr_version integer,
    sqr_deal_pid bigint,
    sqr_include_conventional boolean,
    sqr_include_fha boolean,
    sqr_include_va boolean,
    sqr_include_fixed_rate boolean,
    sqr_include_arm boolean,
    sqr_due_in_term_months_string_list text,
    etl_batch_id text
);

alter table history_octane.sap_quote_request owner to deployer;

create index idx_sap_quote_request__data_source_deleted_flag
    on history_octane.sap_quote_request (data_source_deleted_flag);

create index idx_sap_quote_request__data_source_updated_datetime
    on history_octane.sap_quote_request (data_source_updated_datetime);

create index idx_sap_quote_request__pid
    on history_octane.sap_quote_request (sqr_pid);

create index idx_sap_quote_request__pid_version
    on history_octane.sap_quote_request (sqr_pid, sqr_version);

create index idx_sap_quote_request__etl_batch_id
    on history_octane.sap_quote_request (etl_batch_id);

grant select on history_octane.sap_quote_request to readonly;

grant insert, select, update on history_octane.sap_quote_request to etl_loan;

create table history_octane.secondary_settings
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    sset_pid bigint not null,
    sset_version integer,
    sset_account_pid bigint,
    sset_default_lead_source_pid bigint,
    sset_default_mortech_account_pid bigint,
    sset_default_beneficiary_investor_pid bigint,
    sset_default_servicer_investor_pid bigint,
    sset_initial_lender_lock_id bigint,
    sset_initial_lender_trade_id bigint,
    sset_lock_expiration_warning_days integer,
    sset_expired_lock_update_allowed_days integer,
    sset_disable_all_locking boolean,
    sset_pricing_engine_type varchar(128),
    sset_price_match_check_suspend_through_date date,
    sset_mortech_disable_eligibility boolean,
    sset_mortech_strict_eligibility boolean,
    sset_zillow_appraisal_fee numeric(15,2),
    sset_zillow_title_fee numeric(15,2),
    sset_zillow_recording_fee numeric(15,2),
    sset_mortech_floating_adjuster_prefixes varchar(16000),
    sset_rate_lock_acknowledgement_due_days integer,
    sset_rate_lock_supporting_documentation_due_days integer,
    sset_rate_lock_appraisal_inspection_due_days integer,
    sset_min_subordinate_financing_lock_term_days integer,
    sset_servicer_loan_id_minimum_available_threshold integer,
    sset_servicer_loan_id_minimum_available_warning_email varchar(256),
    sset_third_party_base_margin_prefixes varchar(16000),
    sset_third_party_floating_margin_prefixes varchar(16000),
    sset_month_ami_uses_subsequent_year integer,
    sset_day_ami_uses_subsequent_year integer,
    etl_batch_id text
);

alter table history_octane.secondary_settings owner to deployer;

create index idx_secondary_settings__data_source_deleted_flag
    on history_octane.secondary_settings (data_source_deleted_flag);

create index idx_secondary_settings__data_source_updated_datetime
    on history_octane.secondary_settings (data_source_updated_datetime);

create index idx_secondary_settings__pid
    on history_octane.secondary_settings (sset_pid);

create index idx_secondary_settings__pid_version
    on history_octane.secondary_settings (sset_pid, sset_version);

create index idx_secondary_settings__etl_batch_id
    on history_octane.secondary_settings (etl_batch_id);

grant select on history_octane.secondary_settings to readonly;

grant insert, select, update on history_octane.secondary_settings to etl_loan;

create table history_octane.servicer_loan_id_import_request
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    slir_pid bigint not null,
    slir_version integer,
    slir_account_pid bigint,
    slir_create_datetime timestamp,
    slir_import_lender_user_pid bigint,
    slir_imported_loan_id_count integer,
    slir_error_loan_id_count integer,
    slir_servicer_loan_id_import_request_status_type varchar(128),
    etl_batch_id text
);

alter table history_octane.servicer_loan_id_import_request owner to deployer;

create index idx_servicer_loan_id_import_request__data_source_deleted_flag
    on history_octane.servicer_loan_id_import_request (data_source_deleted_flag);

create index idx_93d741378c54dc9df712d3466a82e6f6
    on history_octane.servicer_loan_id_import_request (data_source_updated_datetime);

create index idx_servicer_loan_id_import_request__pid
    on history_octane.servicer_loan_id_import_request (slir_pid);

create index idx_servicer_loan_id_import_request__pid_version
    on history_octane.servicer_loan_id_import_request (slir_pid, slir_version);

create index idx_servicer_loan_id_import_request__etl_batch_id
    on history_octane.servicer_loan_id_import_request (etl_batch_id);

grant select on history_octane.servicer_loan_id_import_request to readonly;

grant insert, select, update on history_octane.servicer_loan_id_import_request to etl_loan;

create table history_octane.servicer_loan_id_assignment
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    slia_pid bigint not null,
    slia_version integer,
    slia_account_pid bigint,
    slia_servicer_loan_id_import_request_pid bigint,
    slia_loan_servicer_pid bigint,
    slia_servicer_loan_id varchar(32),
    slia_servicer_loan_id_assign_type varchar(128),
    slia_assigned_datetime timestamp,
    etl_batch_id text
);

alter table history_octane.servicer_loan_id_assignment owner to deployer;

create index idx_servicer_loan_id_assignment__data_source_deleted_flag
    on history_octane.servicer_loan_id_assignment (data_source_deleted_flag);

create index idx_servicer_loan_id_assignment__data_source_updated_datetime
    on history_octane.servicer_loan_id_assignment (data_source_updated_datetime);

create index idx_servicer_loan_id_assignment__pid
    on history_octane.servicer_loan_id_assignment (slia_pid);

create index idx_servicer_loan_id_assignment__pid_version
    on history_octane.servicer_loan_id_assignment (slia_pid, slia_version);

create index idx_servicer_loan_id_assignment__etl_batch_id
    on history_octane.servicer_loan_id_assignment (etl_batch_id);

grant select on history_octane.servicer_loan_id_assignment to readonly;

grant insert, select, update on history_octane.servicer_loan_id_assignment to etl_loan;

create table history_octane.smart_doc
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    sd_pid bigint not null,
    sd_version integer,
    sd_account_pid bigint,
    sd_doc_set_type varchar(128),
    sd_custom_form_pid bigint,
    sd_doc_name varchar(767),
    sd_doc_number numeric(15,3),
    sd_doc_category_type varchar(128),
    sd_doc_file_source_type varchar(128),
    sd_doc_external_provider_type varchar(128),
    sd_broker_applicable_provider boolean,
    sd_action_entities_from_merge_field boolean,
    sd_action_entity_applicant boolean,
    sd_action_entity_non_applicant boolean,
    sd_action_entity_underwriter boolean,
    sd_action_entity_originator boolean,
    sd_doc_borrower_access_mode_type varchar(128),
    sd_borrower_explanation varchar(1024),
    sd_deal_child_type varchar(128),
    sd_doc_fulfill_status_type_default varchar(128),
    sd_prior_to_type varchar(128),
    sd_doc_action_type varchar(128),
    sd_e_delivery boolean,
    sd_active boolean,
    sd_doc_validity_type varchar(128),
    sd_doc_key_date_type varchar(128),
    sd_expiration_rule_type varchar(128),
    sd_days_before_key_date integer,
    sd_warning_days integer,
    sd_key_doc_type varchar(128),
    sd_key_doc_include_file varchar(128),
    sd_doc_approval_type varchar(128),
    sd_auto_approve boolean,
    sd_auto_include_on_request boolean,
    sd_poa_applicable boolean,
    sd_action_entity_hud_va_lender_officer boolean,
    sd_action_entity_collateral_underwriter boolean,
    sd_action_entity_wholesale_client_advocate boolean,
    sd_action_entity_correspondent_client_advocate boolean,
    sd_action_entity_government_insurance boolean,
    sd_action_entity_underwriting_manager boolean,
    sd_action_entity_effective_collateral_underwriter boolean,
    etl_batch_id text
);

alter table history_octane.smart_doc owner to deployer;

create index idx_smart_doc__data_source_deleted_flag
    on history_octane.smart_doc (data_source_deleted_flag);

create index idx_smart_doc__data_source_updated_datetime
    on history_octane.smart_doc (data_source_updated_datetime);

create index idx_smart_doc__pid
    on history_octane.smart_doc (sd_pid);

create index idx_smart_doc__pid_version
    on history_octane.smart_doc (sd_pid, sd_version);

create index idx_smart_doc__etl_batch_id
    on history_octane.smart_doc (etl_batch_id);

grant select on history_octane.smart_doc to readonly;

grant insert, select, update on history_octane.smart_doc to etl_loan;

create table history_octane.smart_doc_criteria
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    sdc_pid bigint not null,
    sdc_version integer,
    sdc_smart_doc_pid bigint,
    sdc_criteria_pid bigint,
    sdc_deal_child_type varchar(128),
    etl_batch_id text
);

alter table history_octane.smart_doc_criteria owner to deployer;

create index idx_smart_doc_criteria__data_source_deleted_flag
    on history_octane.smart_doc_criteria (data_source_deleted_flag);

create index idx_smart_doc_criteria__data_source_updated_datetime
    on history_octane.smart_doc_criteria (data_source_updated_datetime);

create index idx_smart_doc_criteria__pid
    on history_octane.smart_doc_criteria (sdc_pid);

create index idx_smart_doc_criteria__pid_version
    on history_octane.smart_doc_criteria (sdc_pid, sdc_version);

create index idx_smart_doc_criteria__etl_batch_id
    on history_octane.smart_doc_criteria (etl_batch_id);

grant select on history_octane.smart_doc_criteria to readonly;

grant insert, select, update on history_octane.smart_doc_criteria to etl_loan;

create table history_octane.smart_doc_note
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    sdn_pid bigint not null,
    sdn_version integer,
    sdn_smart_doc_pid bigint,
    sdn_create_datetime timestamp,
    sdn_content varchar(16000),
    sdn_author_lender_user_pid bigint,
    sdn_author_unparsed_name varchar(128),
    etl_batch_id text
);

alter table history_octane.smart_doc_note owner to deployer;

create index idx_smart_doc_note__data_source_deleted_flag
    on history_octane.smart_doc_note (data_source_deleted_flag);

create index idx_smart_doc_note__data_source_updated_datetime
    on history_octane.smart_doc_note (data_source_updated_datetime);

create index idx_smart_doc_note__pid
    on history_octane.smart_doc_note (sdn_pid);

create index idx_smart_doc_note__pid_version
    on history_octane.smart_doc_note (sdn_pid, sdn_version);

create index idx_smart_doc_note__etl_batch_id
    on history_octane.smart_doc_note (etl_batch_id);

grant select on history_octane.smart_doc_note to readonly;

grant insert, select, update on history_octane.smart_doc_note to etl_loan;

create table history_octane.smart_doc_note_comment
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    sdnc_pid bigint not null,
    sdnc_version integer,
    sdnc_smart_doc_note_pid bigint,
    sdnc_create_datetime timestamp,
    sdnc_content varchar(16000),
    sdnc_author_lender_user_pid bigint,
    sdnc_author_unparsed_name varchar(128),
    etl_batch_id text
);

alter table history_octane.smart_doc_note_comment owner to deployer;

create index idx_smart_doc_note_comment__data_source_deleted_flag
    on history_octane.smart_doc_note_comment (data_source_deleted_flag);

create index idx_smart_doc_note_comment__data_source_updated_datetime
    on history_octane.smart_doc_note_comment (data_source_updated_datetime);

create index idx_smart_doc_note_comment__pid
    on history_octane.smart_doc_note_comment (sdnc_pid);

create index idx_smart_doc_note_comment__pid_version
    on history_octane.smart_doc_note_comment (sdnc_pid, sdnc_version);

create index idx_smart_doc_note_comment__etl_batch_id
    on history_octane.smart_doc_note_comment (etl_batch_id);

grant select on history_octane.smart_doc_note_comment to readonly;

grant insert, select, update on history_octane.smart_doc_note_comment to etl_loan;

create table history_octane.smart_doc_note_monitor
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    sdnm_pid bigint not null,
    sdnm_version integer,
    sdnm_smart_doc_note_pid bigint,
    sdnm_lender_user_pid bigint,
    etl_batch_id text
);

alter table history_octane.smart_doc_note_monitor owner to deployer;

create index idx_smart_doc_note_monitor__data_source_deleted_flag
    on history_octane.smart_doc_note_monitor (data_source_deleted_flag);

create index idx_smart_doc_note_monitor__data_source_updated_datetime
    on history_octane.smart_doc_note_monitor (data_source_updated_datetime);

create index idx_smart_doc_note_monitor__pid
    on history_octane.smart_doc_note_monitor (sdnm_pid);

create index idx_smart_doc_note_monitor__pid_version
    on history_octane.smart_doc_note_monitor (sdnm_pid, sdnm_version);

create index idx_smart_doc_note_monitor__etl_batch_id
    on history_octane.smart_doc_note_monitor (etl_batch_id);

grant select on history_octane.smart_doc_note_monitor to readonly;

grant insert, select, update on history_octane.smart_doc_note_monitor to etl_loan;

create table history_octane.smart_doc_role
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    sdr_pid bigint not null,
    sdr_version integer,
    sdr_smart_doc_pid bigint,
    sdr_role_pid bigint,
    sdr_doc_permission_type varchar(128),
    etl_batch_id text
);

alter table history_octane.smart_doc_role owner to deployer;

create index idx_smart_doc_role__data_source_deleted_flag
    on history_octane.smart_doc_role (data_source_deleted_flag);

create index idx_smart_doc_role__data_source_updated_datetime
    on history_octane.smart_doc_role (data_source_updated_datetime);

create index idx_smart_doc_role__pid
    on history_octane.smart_doc_role (sdr_pid);

create index idx_smart_doc_role__pid_version
    on history_octane.smart_doc_role (sdr_pid, sdr_version);

create index idx_smart_doc_role__etl_batch_id
    on history_octane.smart_doc_role (etl_batch_id);

grant select on history_octane.smart_doc_role to readonly;

grant insert, select, update on history_octane.smart_doc_role to etl_loan;

create table history_octane.smart_message
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    smsg_pid bigint not null,
    smsg_version integer,
    smsg_account_pid bigint,
    smsg_name varchar(256),
    smsg_delivery_type varchar(128),
    smsg_reply_to_role_pid bigint,
    smsg_email_subject varchar(1024),
    smsg_message_source_type varchar(128),
    smsg_smart_doc_pid bigint,
    smsg_smart_stack_pid bigint,
    smsg_allow_ad_hoc boolean,
    smsg_send_securely boolean,
    smsg_id_num integer,
    smsg_message_body varchar(16000),
    smsg_email_closing_type varchar(128),
    smsg_allow_custom_text boolean,
    etl_batch_id text
);

alter table history_octane.smart_message owner to deployer;

create index idx_smart_message__data_source_deleted_flag
    on history_octane.smart_message (data_source_deleted_flag);

create index idx_smart_message__data_source_updated_datetime
    on history_octane.smart_message (data_source_updated_datetime);

create index idx_smart_message__pid
    on history_octane.smart_message (smsg_pid);

create index idx_smart_message__pid_version
    on history_octane.smart_message (smsg_pid, smsg_version);

create index idx_smart_message__etl_batch_id
    on history_octane.smart_message (etl_batch_id);

grant select on history_octane.smart_message to readonly;

grant insert, select, update on history_octane.smart_message to etl_loan;

create table history_octane.smart_message_recipient
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    smr_pid bigint not null,
    smr_version integer,
    smr_smart_message_pid bigint,
    smr_recipient_type varchar(128),
    smr_role_pid bigint,
    smr_email_recipient_type varchar(128),
    etl_batch_id text
);

alter table history_octane.smart_message_recipient owner to deployer;

create index idx_smart_message_recipient__data_source_deleted_flag
    on history_octane.smart_message_recipient (data_source_deleted_flag);

create index idx_smart_message_recipient__data_source_updated_datetime
    on history_octane.smart_message_recipient (data_source_updated_datetime);

create index idx_smart_message_recipient__pid
    on history_octane.smart_message_recipient (smr_pid);

create index idx_smart_message_recipient__pid_version
    on history_octane.smart_message_recipient (smr_pid, smr_version);

create index idx_smart_message_recipient__etl_batch_id
    on history_octane.smart_message_recipient (etl_batch_id);

grant select on history_octane.smart_message_recipient to readonly;

grant insert, select, update on history_octane.smart_message_recipient to etl_loan;

create table history_octane.smart_req
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    sr_pid bigint not null,
    sr_version integer,
    sr_smart_doc_pid bigint,
    sr_criteria_pid bigint,
    sr_deal_child_type varchar(128),
    sr_deal_child_relationship_type varchar(128),
    sr_req_name varchar(767),
    sr_borrower_access boolean,
    sr_active boolean,
    etl_batch_id text
);

alter table history_octane.smart_req owner to deployer;

create index idx_smart_req__data_source_deleted_flag
    on history_octane.smart_req (data_source_deleted_flag);

create index idx_smart_req__data_source_updated_datetime
    on history_octane.smart_req (data_source_updated_datetime);

create index idx_smart_req__pid
    on history_octane.smart_req (sr_pid);

create index idx_smart_req__pid_version
    on history_octane.smart_req (sr_pid, sr_version);

create index idx_smart_req__etl_batch_id
    on history_octane.smart_req (etl_batch_id);

grant select on history_octane.smart_req to readonly;

grant insert, select, update on history_octane.smart_req to etl_loan;

create table history_octane.smart_separator
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ssp_pid bigint not null,
    ssp_version integer,
    ssp_account_pid bigint,
    ssp_custom_form_pid bigint,
    ssp_criteria_pid bigint,
    ssp_separator_name varchar(767),
    etl_batch_id text
);

alter table history_octane.smart_separator owner to deployer;

create index idx_smart_separator__data_source_deleted_flag
    on history_octane.smart_separator (data_source_deleted_flag);

create index idx_smart_separator__data_source_updated_datetime
    on history_octane.smart_separator (data_source_updated_datetime);

create index idx_smart_separator__pid
    on history_octane.smart_separator (ssp_pid);

create index idx_smart_separator__pid_version
    on history_octane.smart_separator (ssp_pid, ssp_version);

create index idx_smart_separator__etl_batch_id
    on history_octane.smart_separator (etl_batch_id);

grant select on history_octane.smart_separator to readonly;

grant insert, select, update on history_octane.smart_separator to etl_loan;

create table history_octane.smart_set_doc
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    sstd_pid bigint not null,
    sstd_version integer,
    sstd_smart_doc_set_pid bigint,
    sstd_smart_doc_pid bigint,
    sstd_sequence integer,
    etl_batch_id text
);

alter table history_octane.smart_set_doc owner to deployer;

create index idx_smart_set_doc__data_source_deleted_flag
    on history_octane.smart_set_doc (data_source_deleted_flag);

create index idx_smart_set_doc__data_source_updated_datetime
    on history_octane.smart_set_doc (data_source_updated_datetime);

create index idx_smart_set_doc__pid
    on history_octane.smart_set_doc (sstd_pid);

create index idx_smart_set_doc__pid_version
    on history_octane.smart_set_doc (sstd_pid, sstd_version);

create index idx_smart_set_doc__etl_batch_id
    on history_octane.smart_set_doc (etl_batch_id);

grant select on history_octane.smart_set_doc to readonly;

grant insert, select, update on history_octane.smart_set_doc to etl_loan;

create table history_octane.smart_stack_doc
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ssd_pid bigint not null,
    ssd_version integer,
    ssd_smart_stack_pid bigint,
    ssd_stack_doc_type varchar(128),
    ssd_smart_doc_set_pid bigint,
    ssd_smart_separator_pid bigint,
    ssd_smart_doc_pid bigint,
    ssd_sequence bigint,
    ssd_smart_stack_doc_set_include_type varchar(128),
    etl_batch_id text
);

alter table history_octane.smart_stack_doc owner to deployer;

create index idx_smart_stack_doc__data_source_deleted_flag
    on history_octane.smart_stack_doc (data_source_deleted_flag);

create index idx_smart_stack_doc__data_source_updated_datetime
    on history_octane.smart_stack_doc (data_source_updated_datetime);

create index idx_smart_stack_doc__pid
    on history_octane.smart_stack_doc (ssd_pid);

create index idx_smart_stack_doc__pid_version
    on history_octane.smart_stack_doc (ssd_pid, ssd_version);

create index idx_smart_stack_doc__etl_batch_id
    on history_octane.smart_stack_doc (etl_batch_id);

grant select on history_octane.smart_stack_doc to readonly;

grant insert, select, update on history_octane.smart_stack_doc to etl_loan;

create table history_octane.stack_export_request
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ser_pid bigint not null,
    ser_version integer,
    ser_account_pid bigint,
    ser_create_datetime timestamp,
    ser_start_datetime timestamp,
    ser_end_datetime timestamp,
    ser_request_status_type varchar(128),
    ser_loan_export_type varchar(128),
    ser_loan_name_format_type varchar(128),
    ser_file_name_format_type varchar(128),
    ser_requester_lender_user_pid bigint,
    ser_requester_unparsed_name varchar(128),
    ser_smart_stack_pid bigint,
    ser_total_deal_count integer,
    ser_exported_deal_count integer,
    ser_description varchar(32),
    etl_batch_id text
);

alter table history_octane.stack_export_request owner to deployer;

create index idx_stack_export_request__data_source_deleted_flag
    on history_octane.stack_export_request (data_source_deleted_flag);

create index idx_stack_export_request__data_source_updated_datetime
    on history_octane.stack_export_request (data_source_updated_datetime);

create index idx_stack_export_request__pid
    on history_octane.stack_export_request (ser_pid);

create index idx_stack_export_request__pid_version
    on history_octane.stack_export_request (ser_pid, ser_version);

create index idx_stack_export_request__etl_batch_id
    on history_octane.stack_export_request (etl_batch_id);

grant select on history_octane.stack_export_request to readonly;

grant insert, select, update on history_octane.stack_export_request to etl_loan;

create table history_octane.stack_export_file
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    sef_pid bigint not null,
    sef_version integer,
    sef_stack_export_request_pid bigint,
    sef_repository_file_pid bigint,
    sef_stack_export_file_type varchar(128),
    etl_batch_id text
);

alter table history_octane.stack_export_file owner to deployer;

create index idx_stack_export_file__data_source_deleted_flag
    on history_octane.stack_export_file (data_source_deleted_flag);

create index idx_stack_export_file__data_source_updated_datetime
    on history_octane.stack_export_file (data_source_updated_datetime);

create index idx_stack_export_file__pid
    on history_octane.stack_export_file (sef_pid);

create index idx_stack_export_file__pid_version
    on history_octane.stack_export_file (sef_pid, sef_version);

create index idx_stack_export_file__etl_batch_id
    on history_octane.stack_export_file (etl_batch_id);

grant select on history_octane.stack_export_file to readonly;

grant insert, select, update on history_octane.stack_export_file to etl_loan;

create table history_octane.tax_transcript_request
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ttr_pid bigint not null,
    ttr_version integer,
    ttr_deal_pid bigint,
    ttr_create_datetime timestamp,
    ttr_requester_agent_type varchar(128),
    ttr_requester_lender_user_pid bigint,
    ttr_requester_unparsed_name varchar(128),
    ttr_mismo_version_type varchar(128),
    ttr_credit_request_type varchar(128),
    ttr_request_error_messages text,
    ttr_request_success_messages text,
    ttr_tracking_number varchar(16),
    ttr_tax_transcript_request_status_type varchar(128),
    ttr_update_reason varchar(1024),
    ttr_last_status_query_datetime timestamp,
    ttr_signed_4506t_deal_file_pid bigint,
    ttr_company boolean,
    ttr_company_name varchar(128),
    ttr_company_city varchar(128),
    ttr_company_country varchar(128),
    ttr_company_postal_code varchar(128),
    ttr_company_state varchar(128),
    ttr_company_street1 varchar(128),
    ttr_company_street2 varchar(128),
    ttr_company_ein varchar(16),
    ttr_borrower1_pid bigint,
    ttr_borrower1_first_name varchar(32),
    ttr_borrower1_middle_name varchar(32),
    ttr_borrower1_last_name varchar(32),
    ttr_borrower1_name_suffix varchar(32),
    ttr_borrower1_birth_date date,
    ttr_borrower1_current_city varchar(128),
    ttr_borrower1_current_country varchar(128),
    ttr_borrower1_current_postal_code varchar(128),
    ttr_borrower1_current_state varchar(128),
    ttr_borrower1_current_street1 varchar(128),
    ttr_borrower1_current_street2 varchar(128),
    ttr_borrower1_prior_city varchar(128),
    ttr_borrower1_prior_country varchar(128),
    ttr_borrower1_prior_postal_code varchar(128),
    ttr_borrower1_prior_state varchar(128),
    ttr_borrower1_prior_street1 varchar(128),
    ttr_borrower1_prior_street2 varchar(128),
    ttr_borrower1_monthly_income_amount numeric(15,2),
    ttr_borrower2_pid bigint,
    ttr_borrower2_first_name varchar(32),
    ttr_borrower2_middle_name varchar(32),
    ttr_borrower2_last_name varchar(32),
    ttr_borrower2_name_suffix varchar(32),
    ttr_borrower2_birth_date date,
    ttr_borrower2_current_city varchar(128),
    ttr_borrower2_current_country varchar(128),
    ttr_borrower2_current_postal_code varchar(128),
    ttr_borrower2_current_state varchar(128),
    ttr_borrower2_current_street1 varchar(128),
    ttr_borrower2_current_street2 varchar(128),
    ttr_borrower2_prior_city varchar(128),
    ttr_borrower2_prior_country varchar(128),
    ttr_borrower2_prior_postal_code varchar(128),
    ttr_borrower2_prior_state varchar(128),
    ttr_borrower2_prior_street1 varchar(128),
    ttr_borrower2_prior_street2 varchar(128),
    ttr_borrower2_monthly_income_amount numeric(15,2),
    ttr_year1 integer,
    ttr_year2 integer,
    ttr_year3 integer,
    ttr_year4 integer,
    ttr_include_w_2 boolean,
    ttr_include_1099 boolean,
    ttr_include_1040 boolean,
    ttr_include_1040_return_transcript boolean,
    ttr_include_1040_account_transcript boolean,
    ttr_include_1040_record_of_account boolean,
    ttr_include_1065 boolean,
    ttr_include_1065_return_transcript boolean,
    ttr_include_1065_account_transcript boolean,
    ttr_include_1065_record_of_account boolean,
    ttr_include_1120 boolean,
    ttr_include_1120_return_transcript boolean,
    ttr_include_1120_account_transcript boolean,
    ttr_include_1120_record_of_account boolean,
    ttr_archived boolean,
    ttr_company_phone varchar(32),
    ttr_company_phone_extension varchar(16),
    ttr_business_ownership_type varchar(128),
    etl_batch_id text
);

alter table history_octane.tax_transcript_request owner to deployer;

create index idx_tax_transcript_request__data_source_deleted_flag
    on history_octane.tax_transcript_request (data_source_deleted_flag);

create index idx_tax_transcript_request__data_source_updated_datetime
    on history_octane.tax_transcript_request (data_source_updated_datetime);

create index idx_tax_transcript_request__pid
    on history_octane.tax_transcript_request (ttr_pid);

create index idx_tax_transcript_request__pid_version
    on history_octane.tax_transcript_request (ttr_pid, ttr_version);

create index idx_tax_transcript_request__etl_batch_id
    on history_octane.tax_transcript_request (etl_batch_id);

grant select on history_octane.tax_transcript_request to readonly;

grant insert, select, update on history_octane.tax_transcript_request to etl_loan;

create table history_octane.third_party_community_second_program
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    tpcsp_pid bigint not null,
    tpcsp_version integer,
    tpcsp_account_pid bigint,
    tpcsp_program_id varchar(32),
    tpcsp_program_name varchar(128),
    tpcsp_fre_community_program_type varchar(128),
    tpcsp_fnm_community_lending_product_type varchar(128),
    tpcsp_fnm_community_seconds_repayment_structure_type varchar(128),
    tpcsp_wire_action_type varchar(128),
    tpcsp_security_instrument_page_count integer,
    tpcsp_deed_page_count integer,
    tpcsp_notes varchar(1024),
    tpcsp_from_date date,
    tpcsp_through_date date,
    tpcsp_investor_pid bigint,
    etl_batch_id text
);

alter table history_octane.third_party_community_second_program owner to deployer;

create index idx_021716ca351bc3ab86bc96d84ed3e27a
    on history_octane.third_party_community_second_program (data_source_deleted_flag);

create index idx_64fd1e22b10f2b27ea515fa7d721821e
    on history_octane.third_party_community_second_program (data_source_updated_datetime);

create index idx_third_party_community_second_program__pid
    on history_octane.third_party_community_second_program (tpcsp_pid);

create index idx_third_party_community_second_program__pid_version
    on history_octane.third_party_community_second_program (tpcsp_pid, tpcsp_version);

create index idx_third_party_community_second_program__etl_batch_id
    on history_octane.third_party_community_second_program (etl_batch_id);

grant select on history_octane.third_party_community_second_program to readonly;

grant insert, select, update on history_octane.third_party_community_second_program to etl_loan;

create table history_octane.liability
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lia_pid bigint not null,
    lia_version integer,
    lia_proposal_pid bigint,
    lia_aggregate_description varchar(128),
    lia_description varchar(128),
    lia_city varchar(128),
    lia_country varchar(128),
    lia_postal_code varchar(128),
    lia_state varchar(128),
    lia_street1 varchar(128),
    lia_street2 varchar(128),
    lia_holder_name varchar(128),
    lia_holder_phone varchar(32),
    lia_holder_phone_extension varchar(16),
    lia_holder_fax varchar(32),
    lia_holder_email varchar(256),
    lia_account_opened_date date,
    lia_liability_disposition_type varchar(128),
    lia_liability_type varchar(128),
    lia_monthly_payment_amount numeric(15,2),
    lia_remaining_term_months integer,
    lia_high_balance_amount numeric(15,2),
    lia_credit_limit_amount numeric(15),
    lia_past_due_amount numeric(15,2),
    lia_unpaid_balance_amount numeric(15,2),
    lia_report_value_overridden boolean,
    lia_bankruptcy_exception_type varchar(128),
    lia_note varchar(1024),
    lia_terms_months_count integer,
    lia_payoff_amount numeric(15,2),
    lia_energy_related_type varchar(128),
    etl_batch_id text,
    lia_credit_request_liability_pid bigint,
    lia_snapshotted_pid bigint
);

alter table history_octane.liability owner to deployer;

create index idx_liability__data_source_deleted_flag
    on history_octane.liability (data_source_deleted_flag);

create index idx_liability__data_source_updated_datetime
    on history_octane.liability (data_source_updated_datetime);

create index idx_liability__pid
    on history_octane.liability (lia_pid);

create index idx_liability__pid_version
    on history_octane.liability (lia_pid, lia_version);

create index idx_liability__etl_batch_id
    on history_octane.liability (etl_batch_id);

grant select on history_octane.liability to readonly;

grant insert, select, update on history_octane.liability to etl_loan;

create table history_octane.borrower_liability
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    bl_pid bigint not null,
    bl_version integer,
    bl_borrower_pid bigint,
    bl_liability_pid bigint,
    etl_batch_id text
);

alter table history_octane.borrower_liability owner to deployer;

create index idx_borrower_liability__data_source_deleted_flag
    on history_octane.borrower_liability (data_source_deleted_flag);

create index idx_borrower_liability__data_source_updated_datetime
    on history_octane.borrower_liability (data_source_updated_datetime);

create index idx_borrower_liability__pid
    on history_octane.borrower_liability (bl_pid);

create index idx_borrower_liability__pid_version
    on history_octane.borrower_liability (bl_pid, bl_version);

create index fk_borrower_liability_2
    on history_octane.borrower_liability (bl_liability_pid);

create index idx_borrower_liability__etl_batch_id
    on history_octane.borrower_liability (etl_batch_id);

grant select on history_octane.borrower_liability to readonly;

grant insert, select, update on history_octane.borrower_liability to etl_loan;

create table history_octane.deal_tag
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dtg_pid bigint not null,
    dtg_version integer,
    dtg_deal_tag_definition_pid bigint,
    dtg_deal_pid bigint,
    dtg_asset_pid bigint,
    dtg_liability_pid bigint,
    dtg_application_pid bigint,
    dtg_borrower_pid bigint,
    dtg_borrower_income_pid bigint,
    dtg_job_income_pid bigint,
    dtg_other_income_pid bigint,
    dtg_business_income_pid bigint,
    dtg_rental_income_pid bigint,
    dtg_place_pid bigint,
    dtg_borrower_residence_pid bigint,
    dtg_credit_inquiry_pid bigint,
    dtg_appraisal_pid bigint,
    etl_batch_id text
);

alter table history_octane.deal_tag owner to deployer;

create index idx_deal_tag__data_source_deleted_flag
    on history_octane.deal_tag (data_source_deleted_flag);

create index idx_deal_tag__data_source_updated_datetime
    on history_octane.deal_tag (data_source_updated_datetime);

create index idx_deal_tag__pid
    on history_octane.deal_tag (dtg_pid);

create index idx_deal_tag__pid_version
    on history_octane.deal_tag (dtg_pid, dtg_version);

create index fk_deal_tag_4
    on history_octane.deal_tag (dtg_liability_pid);

create index idx_deal_tag__etl_batch_id
    on history_octane.deal_tag (etl_batch_id);

grant select on history_octane.deal_tag to readonly;

grant insert, select, update on history_octane.deal_tag to etl_loan;

create table history_octane.product_third_party_community_second_program
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ptpp_pid bigint not null,
    ptpp_version integer,
    ptpp_product_terms_pid bigint,
    ptpp_third_party_community_second_program_pid bigint,
    etl_batch_id text
);

alter table history_octane.product_third_party_community_second_program owner to deployer;

create index idx_c0659fbef135030f82273be29d193361
    on history_octane.product_third_party_community_second_program (data_source_deleted_flag);

create index idx_6b63fe02a74ba120fe394d32e48fb632
    on history_octane.product_third_party_community_second_program (data_source_updated_datetime);

create index idx_product_third_party_community_second_program__pid
    on history_octane.product_third_party_community_second_program (ptpp_pid);

create index idx_product_third_party_community_second_program__pid_version
    on history_octane.product_third_party_community_second_program (ptpp_pid, ptpp_version);

create index idx_product_third_party_community_second_program__etl_batch_id
    on history_octane.product_third_party_community_second_program (etl_batch_id);

grant select on history_octane.product_third_party_community_second_program to readonly;

grant insert, select, update on history_octane.product_third_party_community_second_program to etl_loan;

create table history_octane.proposal_doc
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    prpd_pid bigint not null,
    prpd_version integer,
    prpd_doc_name varchar(767),
    prpd_doc_number numeric(15,3),
    prpd_borrower_access boolean,
    prpd_deal_child_type varchar(128),
    prpd_deal_child_name varchar(767),
    prpd_deal_pid bigint,
    prpd_proposal_pid bigint,
    prpd_loan_pid bigint,
    prpd_borrower_pid bigint,
    prpd_borrower_income_pid bigint,
    prpd_job_income_pid bigint,
    prpd_borrower_job_gap_pid bigint,
    prpd_other_income_pid bigint,
    prpd_business_income_pid bigint,
    prpd_rental_income_pid bigint,
    prpd_asset_pid bigint,
    prpd_asset_large_deposit_pid bigint,
    prpd_liability_pid bigint,
    prpd_reo_place_pid bigint,
    prpd_property_place_pid bigint,
    prpd_residence_place_pid bigint,
    prpd_borrower_residence_pid bigint,
    prpd_application_pid bigint,
    prpd_credit_inquiry_pid bigint,
    prpd_appraisal_pid bigint,
    prpd_appraisal_form_pid bigint,
    prpd_tax_transcript_request_pid bigint,
    prpd_valid_from_date date,
    prpd_valid_through_date date,
    prpd_key_date date,
    prpd_trash boolean,
    prpd_smart_doc_pid bigint,
    prpd_proposal_doc_set_pid bigint,
    prpd_doc_fulfill_status_type varchar(128),
    prpd_status_unparsed_name varchar(128),
    prpd_status_datetime timestamp,
    prpd_status_reason varchar(1024),
    prpd_doc_excluded boolean,
    prpd_doc_excluded_reason varchar(1024),
    prpd_doc_excluded_unparsed_name varchar(128),
    prpd_doc_excluded_datetime timestamp,
    prpd_doc_approval_type varchar(128),
    prpd_borrower_edit boolean,
    prpd_last_status_reason text,
    prpd_borrower_associated_address_pid bigint,
    prpd_construction_cost_pid bigint,
    prpd_construction_draw_pid bigint,
    prpd_proposal_contractor_pid bigint,
    prpd_doc_provider_group_type varchar(128),
    prpd_doc_req_fulfill_status_type varchar(128),
    prpd_doc_req_decision_status_type varchar(128),
    prpd_doc_status_type varchar(128),
    prpd_proposal_review_pid bigint,
    etl_batch_id text
);

alter table history_octane.proposal_doc owner to deployer;

create index idx_proposal_doc__data_source_deleted_flag
    on history_octane.proposal_doc (data_source_deleted_flag);

create index idx_proposal_doc__data_source_updated_datetime
    on history_octane.proposal_doc (data_source_updated_datetime);

create index idx_proposal_doc__pid
    on history_octane.proposal_doc (prpd_pid);

create index idx_proposal_doc__pid_version
    on history_octane.proposal_doc (prpd_pid, prpd_version);

create index fk_proposal_doc_13
    on history_octane.proposal_doc (prpd_liability_pid);

create index fkt_prpd_doc_status_type
    on history_octane.proposal_doc (prpd_doc_status_type);

create index fk_proposal_doc_29
    on history_octane.proposal_doc (prpd_proposal_review_pid);

create index idx_proposal_doc__etl_batch_id
    on history_octane.proposal_doc (etl_batch_id);

grant select on history_octane.proposal_doc to readonly;

grant insert, select, update on history_octane.proposal_doc to etl_loan;

create table history_octane.proposal_doc_borrower_access
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    pdba_pid bigint not null,
    pdba_version integer,
    pdba_borrower_pid bigint,
    pdba_proposal_doc_pid bigint,
    etl_batch_id text
);

alter table history_octane.proposal_doc_borrower_access owner to deployer;

create index idx_proposal_doc_borrower_access__data_source_deleted_flag
    on history_octane.proposal_doc_borrower_access (data_source_deleted_flag);

create index idx_proposal_doc_borrower_access__data_source_updated_datetime
    on history_octane.proposal_doc_borrower_access (data_source_updated_datetime);

create index idx_proposal_doc_borrower_access__pid
    on history_octane.proposal_doc_borrower_access (pdba_pid);

create index idx_proposal_doc_borrower_access__pid_version
    on history_octane.proposal_doc_borrower_access (pdba_pid, pdba_version);

create index fk_proposal_doc_borrower_access_2
    on history_octane.proposal_doc_borrower_access (pdba_proposal_doc_pid);

create index idx_proposal_doc_borrower_access__etl_batch_id
    on history_octane.proposal_doc_borrower_access (etl_batch_id);

grant select on history_octane.proposal_doc_borrower_access to readonly;

grant insert, select, update on history_octane.proposal_doc_borrower_access to etl_loan;

create table history_octane.proposal_doc_file
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    prpdf_pid bigint not null,
    prpdf_version integer,
    prpdf_proposal_doc_pid bigint,
    prpdf_deal_file_pid bigint,
    prpdf_proposal_doc_file_type varchar(128),
    prpdf_included_file varchar(128),
    prpdf_key_doc boolean,
    etl_batch_id text
);

alter table history_octane.proposal_doc_file owner to deployer;

create index idx_proposal_doc_file__data_source_deleted_flag
    on history_octane.proposal_doc_file (data_source_deleted_flag);

create index idx_proposal_doc_file__data_source_updated_datetime
    on history_octane.proposal_doc_file (data_source_updated_datetime);

create index idx_proposal_doc_file__pid
    on history_octane.proposal_doc_file (prpdf_pid);

create index idx_proposal_doc_file__pid_version
    on history_octane.proposal_doc_file (prpdf_pid, prpdf_version);

create index fk_proposal_doc_file_1
    on history_octane.proposal_doc_file (prpdf_proposal_doc_pid);

create index idx_proposal_doc_file__etl_batch_id
    on history_octane.proposal_doc_file (etl_batch_id);

grant select on history_octane.proposal_doc_file to readonly;

grant insert, select, update on history_octane.proposal_doc_file to etl_loan;

create table history_octane.proposal_req
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    prpr_pid bigint not null,
    prpr_version integer,
    prpr_proposal_doc_pid bigint,
    prpr_req_name varchar(767),
    prpr_borrower_access boolean,
    prpr_req_id integer,
    prpr_req_fulfill_status_type varchar(128),
    prpr_fulfill_status_unparsed_name varchar(128),
    prpr_fulfill_status_reason varchar(1024),
    prpr_fulfill_status_datetime timestamp,
    prpr_req_decision_status_type varchar(128),
    prpr_decision_status_unparsed_name varchar(128),
    prpr_decision_status_reason varchar(1024),
    prpr_decision_status_datetime timestamp,
    prpr_deal_pid bigint,
    prpr_proposal_pid bigint,
    prpr_loan_pid bigint,
    prpr_borrower_pid bigint,
    prpr_borrower_income_pid bigint,
    prpr_job_income_pid bigint,
    prpr_borrower_job_gap_pid bigint,
    prpr_other_income_pid bigint,
    prpr_business_income_pid bigint,
    prpr_rental_income_pid bigint,
    prpr_asset_pid bigint,
    prpr_asset_large_deposit_pid bigint,
    prpr_liability_pid bigint,
    prpr_reo_place_pid bigint,
    prpr_property_place_pid bigint,
    prpr_residence_place_pid bigint,
    prpr_borrower_residence_pid bigint,
    prpr_application_pid bigint,
    prpr_credit_inquiry_pid bigint,
    prpr_appraisal_pid bigint,
    prpr_appraisal_form_pid bigint,
    prpr_tax_transcript_request_pid bigint,
    prpr_deal_child_type varchar(128),
    prpr_deal_child_name varchar(767),
    prpr_smart_req boolean,
    prpr_smart_req_criteria_html text,
    prpr_trash boolean,
    prpr_borrower_associated_address_pid bigint,
    prpr_construction_cost_pid bigint,
    prpr_construction_draw_pid bigint,
    prpr_proposal_contractor_pid bigint,
    prpr_proposal_review_pid bigint,
    etl_batch_id text
);

alter table history_octane.proposal_req owner to deployer;

create index idx_proposal_req__data_source_deleted_flag
    on history_octane.proposal_req (data_source_deleted_flag);

create index idx_proposal_req__data_source_updated_datetime
    on history_octane.proposal_req (data_source_updated_datetime);

create index idx_proposal_req__pid
    on history_octane.proposal_req (prpr_pid);

create index idx_proposal_req__pid_version
    on history_octane.proposal_req (prpr_pid, prpr_version);

create index fk_proposal_req_14
    on history_octane.proposal_req (prpr_liability_pid);

create index fk_proposal_req_1
    on history_octane.proposal_req (prpr_proposal_doc_pid);

create index fk_proposal_req_29
    on history_octane.proposal_req (prpr_proposal_review_pid);

create index idx_proposal_req__etl_batch_id
    on history_octane.proposal_req (etl_batch_id);

grant select on history_octane.proposal_req to readonly;

grant insert, select, update on history_octane.proposal_req to etl_loan;

create table history_octane.sap_deal_step
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    sds_pid bigint not null,
    sds_version integer,
    sds_borrower_user_pid bigint,
    sds_previous_pid bigint,
    sds_sap_step_type varchar(128),
    sds_complete_datetime timestamp,
    sds_yes_no_answer varchar(128),
    sds_deal_pid bigint,
    sds_borrower_pid bigint,
    sds_reo_pid bigint,
    sds_application_pid bigint,
    sds_job_income_pid bigint,
    sds_other_income_pid bigint,
    sds_borrower_residence_pid bigint,
    sds_asset_pid bigint,
    sds_liability_pid bigint,
    sds_deal_contact_pid bigint,
    sds_deal_real_estate_agent_pid bigint,
    sds_radio_choice_answer varchar(32),
    sds_initial_values boolean,
    sds_business_income_pid bigint,
    etl_batch_id text
);

alter table history_octane.sap_deal_step owner to deployer;

create index idx_sap_deal_step__data_source_deleted_flag
    on history_octane.sap_deal_step (data_source_deleted_flag);

create index idx_sap_deal_step__data_source_updated_datetime
    on history_octane.sap_deal_step (data_source_updated_datetime);

create index idx_sap_deal_step__pid
    on history_octane.sap_deal_step (sds_pid);

create index idx_sap_deal_step__pid_version
    on history_octane.sap_deal_step (sds_pid, sds_version);

create index fk_sap_deal_step_11
    on history_octane.sap_deal_step (sds_liability_pid);

create index idx_sap_deal_step__etl_batch_id
    on history_octane.sap_deal_step (etl_batch_id);

grant select on history_octane.sap_deal_step to readonly;

grant insert, select, update on history_octane.sap_deal_step to etl_loan;

create table history_octane.deal_sap
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dsap_pid bigint not null,
    dsap_version integer,
    dsap_deal_pid bigint,
    dsap_last_sap_deal_step_pid bigint,
    dsap_last_sap_step_type varchar(128),
    dsap_credit_pull_attempts integer,
    dsap_retry_credit_pull boolean,
    dsap_borrower_step_type integer,
    dsap_sap_status_type varchar(128),
    etl_batch_id text
);

alter table history_octane.deal_sap owner to deployer;

create index idx_deal_sap__data_source_deleted_flag
    on history_octane.deal_sap (data_source_deleted_flag);

create index idx_deal_sap__data_source_updated_datetime
    on history_octane.deal_sap (data_source_updated_datetime);

create index idx_deal_sap__pid
    on history_octane.deal_sap (dsap_pid);

create index idx_deal_sap__pid_version
    on history_octane.deal_sap (dsap_pid, dsap_version);

create index fkt_dsap_sap_status_type
    on history_octane.deal_sap (dsap_sap_status_type);

create index idx_deal_sap__etl_batch_id
    on history_octane.deal_sap (etl_batch_id);

grant select on history_octane.deal_sap to readonly;

grant insert, select, update on history_octane.deal_sap to etl_loan;

create table history_octane.trade
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    t_pid bigint not null,
    t_version integer,
    t_account_pid bigint,
    t_investor_pid bigint,
    t_create_lender_user_pid bigint,
    t_create_datetime timestamp,
    t_lender_trade_id varchar(11),
    t_investor_trade_id varchar(32),
    t_investor_commitment_id varchar(32),
    t_trade_name varchar(128),
    t_trade_status_type varchar(128),
    t_commitment_amount_tolerance_percent numeric(11,9),
    t_commitment_amount numeric(15,2),
    t_minimum_note_rate_percent numeric(11,9),
    t_maximum_note_rate_percent numeric(11,9),
    t_actual_delivery_datetime timestamp,
    t_early_delivery_datetime timestamp,
    t_required_delivery_datetime timestamp,
    t_commitment_expiration_datetime timestamp,
    t_commitment_datetime timestamp,
    t_purchase_datetime timestamp,
    t_weighted_average_note_rate_percent numeric(11,9),
    t_weighted_average_lender_price_percent numeric(11,9),
    t_weighted_average_investor_price_percent numeric(11,9),
    t_weighted_average_net_price_percent numeric(11,9),
    t_weighted_average_decision_credit_score integer,
    t_average_loan_amount numeric(15,2),
    t_total_loan_amount numeric(17,2),
    t_loans_delivered_percent numeric(11,9),
    t_trade_pricing_type varchar(128),
    t_trade_same_price_percent numeric(11,9),
    t_buy_up_multiple integer,
    t_buy_down_multiple integer,
    etl_batch_id text
);

alter table history_octane.trade owner to deployer;

create index idx_trade__data_source_deleted_flag
    on history_octane.trade (data_source_deleted_flag);

create index idx_trade__data_source_updated_datetime
    on history_octane.trade (data_source_updated_datetime);

create index idx_trade__pid
    on history_octane.trade (t_pid);

create index idx_trade__pid_version
    on history_octane.trade (t_pid, t_version);

create index idx_trade__etl_batch_id
    on history_octane.trade (etl_batch_id);

grant select on history_octane.trade to readonly;

grant insert, select, update on history_octane.trade to etl_loan;

create table history_octane.investor_lock
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    il_pid bigint not null,
    il_version integer,
    il_lender_lock_major_pid bigint,
    il_product_terms_pid bigint,
    il_mortgage_type varchar(128),
    il_interest_only_type varchar(128),
    il_buydown_schedule_type varchar(128),
    il_prepay_penalty_schedule_type varchar(128),
    il_lock_commitment_type varchar(128),
    il_initial_duration_days integer,
    il_commitment_datetime timestamp,
    il_initial_commitment_expiration_datetime timestamp,
    il_effective_commitment_expiration_datetime timestamp,
    il_effective_duration_days integer,
    il_cancel_datetime timestamp,
    il_cancel_lender_user_pid bigint,
    il_cancel_unparsed_name varchar(128),
    il_confirm_datetime timestamp,
    il_confirm_lender_user_pid bigint,
    il_confirm_unparsed_name varchar(128),
    il_requester_lender_user_pid bigint,
    il_requester_unparsed_name varchar(128),
    il_request_datetime timestamp,
    il_notes varchar(16000),
    il_investor_base_note_rate_percent numeric(11,9),
    il_investor_base_arm_margin_percent numeric(11,9),
    il_investor_base_price_percent numeric(11,9),
    il_lock_note_rate_percent numeric(11,9),
    il_lock_initial_note_rate_percent numeric(11,9),
    il_lock_arm_margin_percent numeric(11,9),
    il_lock_price_percent numeric(11,9),
    il_lock_price_raw_percent numeric(11,9),
    il_maximum_rebate_percent numeric(11,9),
    il_trade_pid bigint,
    il_hedging boolean,
    il_investor_lock_status_type varchar(128),
    il_investor_loan_id varchar(32),
    il_required_delivery_datetime timestamp,
    il_investor_commitment_id varchar(32),
    etl_batch_id text
);

alter table history_octane.investor_lock owner to deployer;

create index idx_investor_lock__data_source_deleted_flag
    on history_octane.investor_lock (data_source_deleted_flag);

create index idx_investor_lock__data_source_updated_datetime
    on history_octane.investor_lock (data_source_updated_datetime);

create index idx_investor_lock__pid
    on history_octane.investor_lock (il_pid);

create index idx_investor_lock__pid_version
    on history_octane.investor_lock (il_pid, il_version);

create index idx_investor_lock__etl_batch_id
    on history_octane.investor_lock (etl_batch_id);

grant select on history_octane.investor_lock to readonly;

grant insert, select, update on history_octane.investor_lock to etl_loan;

create table history_octane.investor_lock_add_on
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ila_pid bigint not null,
    ila_version integer,
    ila_investor_lock_pid bigint,
    ila_create_datetime timestamp,
    ila_creator_lender_user_pid bigint,
    ila_creator_unparsed_name varchar(128),
    ila_summary varchar(16000),
    ila_rate_adjustment_percent numeric(11,9),
    ila_price_adjustment_percent numeric(11,9),
    ila_arm_margin_adjustment_percent numeric(11,9),
    etl_batch_id text
);

alter table history_octane.investor_lock_add_on owner to deployer;

create index idx_investor_lock_add_on__data_source_deleted_flag
    on history_octane.investor_lock_add_on (data_source_deleted_flag);

create index idx_investor_lock_add_on__data_source_updated_datetime
    on history_octane.investor_lock_add_on (data_source_updated_datetime);

create index idx_investor_lock_add_on__pid
    on history_octane.investor_lock_add_on (ila_pid);

create index idx_investor_lock_add_on__pid_version
    on history_octane.investor_lock_add_on (ila_pid, ila_version);

create index idx_investor_lock_add_on__etl_batch_id
    on history_octane.investor_lock_add_on (etl_batch_id);

grant select on history_octane.investor_lock_add_on to readonly;

grant insert, select, update on history_octane.investor_lock_add_on to etl_loan;

create table history_octane.investor_lock_extension
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ile_pid bigint not null,
    ile_version integer,
    ile_investor_lock_pid bigint,
    ile_creator_lender_user_pid bigint,
    ile_creator_unparsed_name varchar(128),
    ile_requester_lender_user_pid bigint,
    ile_requester_unparsed_name varchar(128),
    ile_requested_datetime timestamp,
    ile_confirm_lender_user_pid bigint,
    ile_confirm_unparsed_name varchar(128),
    ile_confirm_datetime timestamp,
    ile_reject_lender_user_pid bigint,
    ile_reject_datetime timestamp,
    ile_reject_explanation varchar(1024),
    ile_lock_extension_status_type varchar(128),
    ile_extension_days integer,
    ile_price_adjustment_percent numeric(11,9),
    etl_batch_id text
);

alter table history_octane.investor_lock_extension owner to deployer;

create index idx_investor_lock_extension__data_source_deleted_flag
    on history_octane.investor_lock_extension (data_source_deleted_flag);

create index idx_investor_lock_extension__data_source_updated_datetime
    on history_octane.investor_lock_extension (data_source_updated_datetime);

create index idx_investor_lock_extension__pid
    on history_octane.investor_lock_extension (ile_pid);

create index idx_investor_lock_extension__pid_version
    on history_octane.investor_lock_extension (ile_pid, ile_version);

create index idx_investor_lock_extension__etl_batch_id
    on history_octane.investor_lock_extension (etl_batch_id);

grant select on history_octane.investor_lock_extension to readonly;

grant insert, select, update on history_octane.investor_lock_extension to etl_loan;

create table history_octane.trade_audit
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ta_pid bigint not null,
    ta_version integer,
    ta_trade_pid bigint,
    ta_lender_lock_major_pid bigint,
    ta_trade_audit_type varchar(128),
    ta_message varchar(256),
    etl_batch_id text
);

alter table history_octane.trade_audit owner to deployer;

create index idx_trade_audit__data_source_deleted_flag
    on history_octane.trade_audit (data_source_deleted_flag);

create index idx_trade_audit__data_source_updated_datetime
    on history_octane.trade_audit (data_source_updated_datetime);

create index idx_trade_audit__pid
    on history_octane.trade_audit (ta_pid);

create index idx_trade_audit__pid_version
    on history_octane.trade_audit (ta_pid, ta_version);

create index idx_trade_audit__etl_batch_id
    on history_octane.trade_audit (etl_batch_id);

grant select on history_octane.trade_audit to readonly;

grant insert, select, update on history_octane.trade_audit to etl_loan;

create table history_octane.trade_fee
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    tfe_pid bigint not null,
    tfe_version integer,
    tfe_trade_pid bigint,
    tfe_trade_fee_type_pid bigint,
    tfe_amount numeric(15,2),
    tfe_description varchar(256),
    etl_batch_id text
);

alter table history_octane.trade_fee owner to deployer;

create index idx_trade_fee__data_source_deleted_flag
    on history_octane.trade_fee (data_source_deleted_flag);

create index idx_trade_fee__data_source_updated_datetime
    on history_octane.trade_fee (data_source_updated_datetime);

create index idx_trade_fee__pid
    on history_octane.trade_fee (tfe_pid);

create index idx_trade_fee__pid_version
    on history_octane.trade_fee (tfe_pid, tfe_version);

create index idx_trade_fee__etl_batch_id
    on history_octane.trade_fee (etl_batch_id);

grant select on history_octane.trade_fee to readonly;

grant insert, select, update on history_octane.trade_fee to etl_loan;

create table history_octane.trade_file
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    tf_pid bigint not null,
    tf_version integer,
    tf_trade_pid bigint,
    tf_repository_file_pid bigint,
    etl_batch_id text
);

alter table history_octane.trade_file owner to deployer;

create index idx_trade_file__data_source_deleted_flag
    on history_octane.trade_file (data_source_deleted_flag);

create index idx_trade_file__data_source_updated_datetime
    on history_octane.trade_file (data_source_updated_datetime);

create index idx_trade_file__pid
    on history_octane.trade_file (tf_pid);

create index idx_trade_file__pid_version
    on history_octane.trade_file (tf_pid, tf_version);

create index idx_trade_file__etl_batch_id
    on history_octane.trade_file (etl_batch_id);

grant select on history_octane.trade_file to readonly;

grant insert, select, update on history_octane.trade_file to etl_loan;

create table history_octane.trade_lock_filter
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    tlf_pid bigint not null,
    tlf_version integer,
    tlf_lender_user_pid bigint,
    tlf_name varchar(128),
    tlf_criteria_pid bigint,
    etl_batch_id text
);

alter table history_octane.trade_lock_filter owner to deployer;

create index idx_trade_lock_filter__data_source_deleted_flag
    on history_octane.trade_lock_filter (data_source_deleted_flag);

create index idx_trade_lock_filter__data_source_updated_datetime
    on history_octane.trade_lock_filter (data_source_updated_datetime);

create index idx_trade_lock_filter__pid
    on history_octane.trade_lock_filter (tlf_pid);

create index idx_trade_lock_filter__pid_version
    on history_octane.trade_lock_filter (tlf_pid, tlf_version);

create index idx_trade_lock_filter__etl_batch_id
    on history_octane.trade_lock_filter (etl_batch_id);

grant select on history_octane.trade_lock_filter to readonly;

grant insert, select, update on history_octane.trade_lock_filter to etl_loan;

create table history_octane.trade_note
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    tn_pid bigint not null,
    tn_version integer,
    tn_trade_pid bigint,
    tn_create_datetime timestamp,
    tn_content varchar(16000),
    tn_author_lender_user_pid bigint,
    tn_author_unparsed_name varchar(128),
    etl_batch_id text
);

alter table history_octane.trade_note owner to deployer;

create index idx_trade_note__data_source_deleted_flag
    on history_octane.trade_note (data_source_deleted_flag);

create index idx_trade_note__data_source_updated_datetime
    on history_octane.trade_note (data_source_updated_datetime);

create index idx_trade_note__pid
    on history_octane.trade_note (tn_pid);

create index idx_trade_note__pid_version
    on history_octane.trade_note (tn_pid, tn_version);

create index idx_trade_note__etl_batch_id
    on history_octane.trade_note (etl_batch_id);

grant select on history_octane.trade_note to readonly;

grant insert, select, update on history_octane.trade_note to etl_loan;

create table history_octane.trade_note_comment
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    tnc_pid bigint not null,
    tnc_version integer,
    tnc_trade_note_pid bigint,
    tnc_create_datetime timestamp,
    tnc_content varchar(16000),
    tnc_author_lender_user_pid bigint,
    tnc_author_unparsed_name varchar(128),
    etl_batch_id text
);

alter table history_octane.trade_note_comment owner to deployer;

create index idx_trade_note_comment__data_source_deleted_flag
    on history_octane.trade_note_comment (data_source_deleted_flag);

create index idx_trade_note_comment__data_source_updated_datetime
    on history_octane.trade_note_comment (data_source_updated_datetime);

create index idx_trade_note_comment__pid
    on history_octane.trade_note_comment (tnc_pid);

create index idx_trade_note_comment__pid_version
    on history_octane.trade_note_comment (tnc_pid, tnc_version);

create index idx_trade_note_comment__etl_batch_id
    on history_octane.trade_note_comment (etl_batch_id);

grant select on history_octane.trade_note_comment to readonly;

grant insert, select, update on history_octane.trade_note_comment to etl_loan;

create table history_octane.trade_note_monitor
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    tnm_pid bigint not null,
    tnm_version integer,
    tnm_trade_note_pid bigint,
    tnm_lender_user_pid bigint,
    etl_batch_id text
);

alter table history_octane.trade_note_monitor owner to deployer;

create index idx_trade_note_monitor__data_source_deleted_flag
    on history_octane.trade_note_monitor (data_source_deleted_flag);

create index idx_trade_note_monitor__data_source_updated_datetime
    on history_octane.trade_note_monitor (data_source_updated_datetime);

create index idx_trade_note_monitor__pid
    on history_octane.trade_note_monitor (tnm_pid);

create index idx_trade_note_monitor__pid_version
    on history_octane.trade_note_monitor (tnm_pid, tnm_version);

create index idx_trade_note_monitor__etl_batch_id
    on history_octane.trade_note_monitor (etl_batch_id);

grant select on history_octane.trade_note_monitor to readonly;

grant insert, select, update on history_octane.trade_note_monitor to etl_loan;

create table history_octane.trade_product
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    tp_pid bigint not null,
    tp_version integer,
    tp_product_pid bigint,
    tp_trade_pid bigint,
    etl_batch_id text
);

alter table history_octane.trade_product owner to deployer;

create index idx_trade_product__data_source_deleted_flag
    on history_octane.trade_product (data_source_deleted_flag);

create index idx_trade_product__data_source_updated_datetime
    on history_octane.trade_product (data_source_updated_datetime);

create index idx_trade_product__pid
    on history_octane.trade_product (tp_pid);

create index idx_trade_product__pid_version
    on history_octane.trade_product (tp_pid, tp_version);

create index idx_trade_product__etl_batch_id
    on history_octane.trade_product (etl_batch_id);

grant select on history_octane.trade_product to readonly;

grant insert, select, update on history_octane.trade_product to etl_loan;

create table history_octane.unpaid_balance_adjustment
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    upba_pid bigint not null,
    upba_version integer,
    upba_investor_pid bigint,
    upba_adjustment_percent numeric(11,9),
    upba_from_date date,
    upba_mortgage_type varchar(128),
    etl_batch_id text
);

alter table history_octane.unpaid_balance_adjustment owner to deployer;

create index idx_unpaid_balance_adjustment__data_source_deleted_flag
    on history_octane.unpaid_balance_adjustment (data_source_deleted_flag);

create index idx_unpaid_balance_adjustment__data_source_updated_datetime
    on history_octane.unpaid_balance_adjustment (data_source_updated_datetime);

create index idx_unpaid_balance_adjustment__pid
    on history_octane.unpaid_balance_adjustment (upba_pid);

create index idx_unpaid_balance_adjustment__pid_version
    on history_octane.unpaid_balance_adjustment (upba_pid, upba_version);

create index idx_unpaid_balance_adjustment__etl_batch_id
    on history_octane.unpaid_balance_adjustment (etl_batch_id);

grant select on history_octane.unpaid_balance_adjustment to readonly;

grant insert, select, update on history_octane.unpaid_balance_adjustment to etl_loan;

create table history_octane.vendor_document_repository_file
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    vdrf_pid bigint not null,
    vdrf_version integer,
    vdrf_account_pid bigint,
    vdrf_deal_pid bigint,
    vdrf_document_import_vendor_type varchar(128),
    vdrf_client_filename varchar(128),
    vdrf_client_filepath varchar(256),
    vdrf_file_checksum varchar(128),
    vdrf_vendor_import_document_type varchar(128),
    vdrf_document_import_status_type varchar(128),
    vdrf_processed_datetime timestamp,
    etl_batch_id text
);

alter table history_octane.vendor_document_repository_file owner to deployer;

create index idx_vendor_document_repository_file__data_source_deleted_flag
    on history_octane.vendor_document_repository_file (data_source_deleted_flag);

create index idx_4ff779b058702e61f4af0985919e414a
    on history_octane.vendor_document_repository_file (data_source_updated_datetime);

create index idx_vendor_document_repository_file__pid
    on history_octane.vendor_document_repository_file (vdrf_pid);

create index idx_vendor_document_repository_file__pid_version
    on history_octane.vendor_document_repository_file (vdrf_pid, vdrf_version);

create index idx_vendor_document_repository_file__etl_batch_id
    on history_octane.vendor_document_repository_file (etl_batch_id);

grant select on history_octane.vendor_document_repository_file to readonly;

grant insert, select, update on history_octane.vendor_document_repository_file to etl_loan;

create table history_octane.deal_data_vendor_document_import
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ddvdi_pid bigint not null,
    ddvdi_version integer,
    ddvdi_deal_pid bigint,
    ddvdi_vendor_document_repository_file_pid bigint,
    ddvdi_deal_system_file_pid bigint,
    ddvdi_vendor_import_document_type varchar(128),
    ddvdi_create_datetime timestamp,
    ddvdi_document_import_status_type varchar(128),
    ddvdi_failure_info varchar(16000),
    ddvdi_warning_info varchar(16000),
    etl_batch_id text
);

alter table history_octane.deal_data_vendor_document_import owner to deployer;

create index idx_deal_data_vendor_document_import__data_source_deleted_flag
    on history_octane.deal_data_vendor_document_import (data_source_deleted_flag);

create index idx_b835c06dc8c12296c156c272b50d55d5
    on history_octane.deal_data_vendor_document_import (data_source_updated_datetime);

create index idx_deal_data_vendor_document_import__pid
    on history_octane.deal_data_vendor_document_import (ddvdi_pid);

create index idx_deal_data_vendor_document_import__pid_version
    on history_octane.deal_data_vendor_document_import (ddvdi_pid, ddvdi_version);

create index idx_deal_data_vendor_document_import__etl_batch_id
    on history_octane.deal_data_vendor_document_import (etl_batch_id);

grant select on history_octane.deal_data_vendor_document_import to readonly;

grant insert, select, update on history_octane.deal_data_vendor_document_import to etl_loan;

create table history_octane.vendor_document_event
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    vde_pid bigint not null,
    vde_version integer,
    vde_account_pid bigint,
    vde_vendor_document_repository_file_pid bigint,
    vde_vendor_document_event_type varchar(128),
    vde_source_unparsed_name varchar(128),
    vde_messages text,
    vde_create_datetime timestamp,
    vde_create_date date,
    etl_batch_id text
);

alter table history_octane.vendor_document_event owner to deployer;

create index idx_vendor_document_event__data_source_deleted_flag
    on history_octane.vendor_document_event (data_source_deleted_flag);

create index idx_vendor_document_event__data_source_updated_datetime
    on history_octane.vendor_document_event (data_source_updated_datetime);

create index idx_vendor_document_event__pid
    on history_octane.vendor_document_event (vde_pid);

create index idx_vendor_document_event__pid_version
    on history_octane.vendor_document_event (vde_pid, vde_version);

create index idx_vendor_document_event__etl_batch_id
    on history_octane.vendor_document_event (etl_batch_id);

grant select on history_octane.vendor_document_event to readonly;

grant insert, select, update on history_octane.vendor_document_event to etl_loan;

create table history_octane.wf_deal_process
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    wdpr_pid bigint not null,
    wdpr_version integer,
    wdpr_deal_pid bigint,
    wdpr_wf_process_pid bigint,
    wdpr_wf_deal_process_status_type varchar(128),
    wdpr_process_start_datetime timestamp,
    wdpr_process_complete_datetime timestamp,
    wdpr_name varchar(128),
    etl_batch_id text
);

alter table history_octane.wf_deal_process owner to deployer;

create index idx_wf_deal_process__data_source_deleted_flag
    on history_octane.wf_deal_process (data_source_deleted_flag);

create index idx_wf_deal_process__data_source_updated_datetime
    on history_octane.wf_deal_process (data_source_updated_datetime);

create index idx_wf_deal_process__pid
    on history_octane.wf_deal_process (wdpr_pid);

create index idx_wf_deal_process__pid_version
    on history_octane.wf_deal_process (wdpr_pid, wdpr_version);

create index idx_wf_deal_process__etl_batch_id
    on history_octane.wf_deal_process (etl_batch_id);

grant select on history_octane.wf_deal_process to readonly;

grant insert, select, update on history_octane.wf_deal_process to etl_loan;

create table history_octane.wf_step
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    ws_pid bigint not null,
    ws_version integer,
    ws_wf_process_pid bigint,
    ws_step_name varchar(128),
    ws_step_number numeric(17,5),
    ws_step_number_formatted varchar(16),
    ws_step_number_name_formatted varchar(145),
    ws_step_start_borrower_text varchar(1024),
    ws_expected_complete_minutes integer,
    ws_wf_step_timeout_type varchar(128),
    ws_second_of_day_timeout integer,
    ws_timeout_time_zone_type varchar(128),
    ws_description varchar(1024),
    ws_wf_step_type varchar(128),
    ws_wf_phase_pid bigint,
    ws_wf_step_performer_assign_type varchar(128),
    ws_role_pid bigint,
    ws_from_role_pid bigint,
    ws_wf_step_reassign_type varchar(128),
    ws_wf_step_function_type varchar(128),
    ws_sap_expire_minutes integer,
    ws_sap_expire_warning_minutes integer,
    ws_prompt_user_defined_time boolean,
    ws_smart_message_pid bigint,
    ws_smart_doc_set_pid bigint,
    ws_lien_priority_type varchar(128),
    ws_active_only boolean,
    ws_internal boolean,
    ws_deal_stage_type varchar(128),
    ws_polling_interval_type varchar(128),
    ws_swappable boolean,
    ws_wf_prereq_set_pid bigint,
    etl_batch_id text,
    ws_user_step_name varchar(128)
);

alter table history_octane.wf_step owner to deployer;

create index idx_wf_step__data_source_deleted_flag
    on history_octane.wf_step (data_source_deleted_flag);

create index idx_wf_step__data_source_updated_datetime
    on history_octane.wf_step (data_source_updated_datetime);

create index idx_wf_step__pid
    on history_octane.wf_step (ws_pid);

create index idx_wf_step__pid_version
    on history_octane.wf_step (ws_pid, ws_version);

create index fk_wf_step_7
    on history_octane.wf_step (ws_wf_prereq_set_pid);

create index idx_wf_step__etl_batch_id
    on history_octane.wf_step (etl_batch_id);

grant select on history_octane.wf_step to readonly;

grant insert, select, update on history_octane.wf_step to etl_loan;

create table history_octane.criteria_pid_operand
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    crpo_pid bigint not null,
    crpo_version integer,
    crpo_criteria_pid bigint,
    crpo_criteria_pid_operand_type varchar(128),
    crpo_lender_user_pid bigint,
    crpo_role_pid bigint,
    crpo_branch_pid bigint,
    crpo_wf_step_pid bigint,
    crpo_wf_phase_pid bigint,
    crpo_county_pid bigint,
    crpo_investor_pid bigint,
    crpo_product_pid bigint,
    crpo_lead_source_pid bigint,
    crpo_company_pid bigint,
    crpo_deal_tag_definition_pid bigint,
    crpo_creditor_pid bigint,
    crpo_interim_funder_pid bigint,
    crpo_settlement_agent_pid bigint,
    crpo_performer_team_pid bigint,
    crpo_third_party_community_second_program_pid bigint,
    crpo_offering_pid bigint,
    crpo_channel_pid bigint,
    crpo_account_grant_program_pid bigint,
    crpo_mortgage_credit_certificate_issuer_pid bigint,
    crpo_criteria_snippet_pid bigint,
    crpo_smart_doc_pid bigint,
    crpo_org_node_pid bigint,
    crpo_trustee_pid bigint,
    etl_batch_id text
);

alter table history_octane.criteria_pid_operand owner to deployer;

create index idx_criteria_pid_operand__data_source_deleted_flag
    on history_octane.criteria_pid_operand (data_source_deleted_flag);

create index idx_criteria_pid_operand__data_source_updated_datetime
    on history_octane.criteria_pid_operand (data_source_updated_datetime);

create index idx_criteria_pid_operand__pid
    on history_octane.criteria_pid_operand (crpo_pid);

create index idx_criteria_pid_operand__pid_version
    on history_octane.criteria_pid_operand (crpo_pid, crpo_version);

create index fk_criteria_pid_operand_24
    on history_octane.criteria_pid_operand (crpo_org_node_pid);

create index fk_criteria_pid_operand_25
    on history_octane.criteria_pid_operand (crpo_trustee_pid);

create index idx_criteria_pid_operand__etl_batch_id
    on history_octane.criteria_pid_operand (etl_batch_id);

grant select on history_octane.criteria_pid_operand to readonly;

grant insert, select, update on history_octane.criteria_pid_operand to etl_loan;

create table history_octane.smart_task
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    st_pid bigint not null,
    st_version integer,
    st_wf_step_pid bigint,
    st_description varchar(1024),
    st_from_date date,
    st_through_date date,
    st_wf_step_order integer,
    st_criteria_pid bigint,
    etl_batch_id text
);

alter table history_octane.smart_task owner to deployer;

create index idx_smart_task__data_source_deleted_flag
    on history_octane.smart_task (data_source_deleted_flag);

create index idx_smart_task__data_source_updated_datetime
    on history_octane.smart_task (data_source_updated_datetime);

create index idx_smart_task__pid
    on history_octane.smart_task (st_pid);

create index idx_smart_task__pid_version
    on history_octane.smart_task (st_pid, st_version);

create index idx_smart_task__etl_batch_id
    on history_octane.smart_task (etl_batch_id);

grant select on history_octane.smart_task to readonly;

grant insert, select, update on history_octane.smart_task to etl_loan;

create table history_octane.smart_task_tag_modifier
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    sttm_pid bigint not null,
    sttm_version integer,
    sttm_deal_tag_definition_pid bigint,
    sttm_smart_task_pid bigint,
    sttm_add_tag boolean,
    etl_batch_id text
);

alter table history_octane.smart_task_tag_modifier owner to deployer;

create index idx_smart_task_tag_modifier__data_source_deleted_flag
    on history_octane.smart_task_tag_modifier (data_source_deleted_flag);

create index idx_smart_task_tag_modifier__data_source_updated_datetime
    on history_octane.smart_task_tag_modifier (data_source_updated_datetime);

create index idx_smart_task_tag_modifier__pid
    on history_octane.smart_task_tag_modifier (sttm_pid);

create index idx_smart_task_tag_modifier__pid_version
    on history_octane.smart_task_tag_modifier (sttm_pid, sttm_version);

create index idx_smart_task_tag_modifier__etl_batch_id
    on history_octane.smart_task_tag_modifier (etl_batch_id);

grant select on history_octane.smart_task_tag_modifier to readonly;

grant insert, select, update on history_octane.smart_task_tag_modifier to etl_loan;

create table history_octane.view_wf_deal_step_started
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    wds_pid bigint not null,
    wds_version integer,
    wds_wf_step_pid bigint,
    wds_wf_deal_process_pid bigint,
    wds_performer_user_pid bigint,
    wds_visit_number integer,
    wds_start_datetime timestamp,
    wds_complete_datetime timestamp,
    wds_timeout_datetime timestamp,
    wds_wf_deal_step_status_type varchar(128),
    wds_wf_step_type varchar(128),
    wds_function_error_list text,
    wds_step_name varchar(128),
    wds_step_number numeric(17,5),
    wds_step_number_formatted varchar(16),
    wds_step_number_name_formatted varchar(145),
    wds_expected_complete_minutes integer,
    wds_description varchar(1024),
    wds_wf_step_function_type varchar(128),
    wds_phase_name varchar(128),
    wds_phase_number integer,
    wds_allow_check_override boolean,
    wds_deal_stage_pid bigint,
    wds_completing_user_pid bigint,
    wds_polling_interval_offset integer,
    wds_materialized_view_trash boolean,
    etl_batch_id text
);

alter table history_octane.view_wf_deal_step_started owner to deployer;

create index idx_view_wf_deal_step_started__data_source_deleted_flag
    on history_octane.view_wf_deal_step_started (data_source_deleted_flag);

create index idx_view_wf_deal_step_started__data_source_updated_datetime
    on history_octane.view_wf_deal_step_started (data_source_updated_datetime);

create index idx_view_wf_deal_step_started__pid
    on history_octane.view_wf_deal_step_started (wds_pid);

create index idx_view_wf_deal_step_started__pid_version
    on history_octane.view_wf_deal_step_started (wds_pid, wds_version);

create index idx_view_wf_deal_step_started__etl_batch_id
    on history_octane.view_wf_deal_step_started (etl_batch_id);

grant select on history_octane.view_wf_deal_step_started to readonly;

grant insert, select, update on history_octane.view_wf_deal_step_started to etl_loan;

create table history_octane.wf_deal_step
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    wds_pid bigint not null,
    wds_version integer,
    wds_wf_step_pid bigint,
    wds_wf_deal_process_pid bigint,
    wds_performer_user_pid bigint,
    wds_visit_number integer,
    wds_start_datetime timestamp,
    wds_complete_datetime timestamp,
    wds_timeout_datetime timestamp,
    wds_wf_deal_step_status_type varchar(128),
    wds_wf_step_type varchar(128),
    wds_function_error_list text,
    wds_step_name varchar(128),
    wds_step_number numeric(17,5),
    wds_step_number_formatted varchar(16),
    wds_step_number_name_formatted varchar(145),
    wds_expected_complete_minutes integer,
    wds_description varchar(1024),
    wds_wf_step_function_type varchar(128),
    wds_phase_name varchar(128),
    wds_phase_number integer,
    wds_allow_check_override boolean,
    wds_deal_stage_pid bigint,
    wds_completing_user_pid bigint,
    wds_polling_interval_offset integer,
    etl_batch_id text
);

alter table history_octane.wf_deal_step owner to deployer;

create index idx_wf_deal_step__data_source_deleted_flag
    on history_octane.wf_deal_step (data_source_deleted_flag);

create index idx_wf_deal_step__data_source_updated_datetime
    on history_octane.wf_deal_step (data_source_updated_datetime);

create index idx_wf_deal_step__pid
    on history_octane.wf_deal_step (wds_pid);

create index idx_wf_deal_step__pid_version
    on history_octane.wf_deal_step (wds_pid, wds_version);

create index idx_wf_deal_step__etl_batch_id
    on history_octane.wf_deal_step (etl_batch_id);

grant select on history_octane.wf_deal_step to readonly;

grant insert, select, update on history_octane.wf_deal_step to etl_loan;

create table history_octane.deal_note
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dn_pid bigint not null,
    dn_version integer,
    dn_deal_pid bigint,
    dn_create_datetime timestamp,
    dn_content varchar(16000),
    dn_author_unparsed_name varchar(128),
    dn_author_lender_user_pid bigint,
    dn_scope_type varchar(128),
    dn_scope_name varchar(1024),
    dn_wf_deal_step_pid bigint,
    dn_proposal_doc_pid bigint,
    dn_proposal_review_pid bigint,
    dn_category_type varchar(128),
    etl_batch_id text
);

alter table history_octane.deal_note owner to deployer;

create index idx_deal_note__data_source_deleted_flag
    on history_octane.deal_note (data_source_deleted_flag);

create index idx_deal_note__data_source_updated_datetime
    on history_octane.deal_note (data_source_updated_datetime);

create index idx_deal_note__pid
    on history_octane.deal_note (dn_pid);

create index idx_deal_note__pid_version
    on history_octane.deal_note (dn_pid, dn_version);

create index fkt_dn_category_type
    on history_octane.deal_note (dn_category_type);

create index fk_deal_note_4
    on history_octane.deal_note (dn_proposal_doc_pid);

create index idx_deal_note__etl_batch_id
    on history_octane.deal_note (etl_batch_id);

grant select on history_octane.deal_note to readonly;

grant insert, select, update on history_octane.deal_note to etl_loan;

create table history_octane.deal_note_comment
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dnc_pid bigint not null,
    dnc_version integer,
    dnc_deal_note_pid bigint,
    dnc_create_datetime timestamp,
    dnc_content varchar(16000),
    dnc_author_unparsed_name varchar(128),
    dnc_author_lender_user_pid bigint,
    etl_batch_id text
);

alter table history_octane.deal_note_comment owner to deployer;

create index idx_deal_note_comment__data_source_deleted_flag
    on history_octane.deal_note_comment (data_source_deleted_flag);

create index idx_deal_note_comment__data_source_updated_datetime
    on history_octane.deal_note_comment (data_source_updated_datetime);

create index idx_deal_note_comment__pid
    on history_octane.deal_note_comment (dnc_pid);

create index idx_deal_note_comment__pid_version
    on history_octane.deal_note_comment (dnc_pid, dnc_version);

create index idx_deal_note_comment__etl_batch_id
    on history_octane.deal_note_comment (etl_batch_id);

grant select on history_octane.deal_note_comment to readonly;

grant insert, select, update on history_octane.deal_note_comment to etl_loan;

create table history_octane.deal_note_monitor
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dnm_pid bigint not null,
    dnm_version integer,
    dnm_deal_note_pid bigint,
    dnm_lender_user_pid bigint,
    etl_batch_id text
);

alter table history_octane.deal_note_monitor owner to deployer;

create index idx_deal_note_monitor__data_source_deleted_flag
    on history_octane.deal_note_monitor (data_source_deleted_flag);

create index idx_deal_note_monitor__data_source_updated_datetime
    on history_octane.deal_note_monitor (data_source_updated_datetime);

create index idx_deal_note_monitor__pid
    on history_octane.deal_note_monitor (dnm_pid);

create index idx_deal_note_monitor__pid_version
    on history_octane.deal_note_monitor (dnm_pid, dnm_version);

create index idx_deal_note_monitor__etl_batch_id
    on history_octane.deal_note_monitor (etl_batch_id);

grant select on history_octane.deal_note_monitor to readonly;

grant insert, select, update on history_octane.deal_note_monitor to etl_loan;

create table history_octane.deal_note_role_tag
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dnrt_pid bigint not null,
    dnrt_version integer,
    dnrt_deal_note_pid bigint,
    dnrt_role_pid bigint,
    etl_batch_id text
);

alter table history_octane.deal_note_role_tag owner to deployer;

create index idx_deal_note_role_tag__data_source_deleted_flag
    on history_octane.deal_note_role_tag (data_source_deleted_flag);

create index idx_deal_note_role_tag__data_source_updated_datetime
    on history_octane.deal_note_role_tag (data_source_updated_datetime);

create index idx_deal_note_role_tag__pid
    on history_octane.deal_note_role_tag (dnrt_pid);

create index idx_deal_note_role_tag__pid_version
    on history_octane.deal_note_role_tag (dnrt_pid, dnrt_version);

create index idx_deal_note_role_tag__etl_batch_id
    on history_octane.deal_note_role_tag (etl_batch_id);

grant select on history_octane.deal_note_role_tag to readonly;

grant insert, select, update on history_octane.deal_note_role_tag to etl_loan;

create table history_octane.deal_task
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    dt_pid bigint not null,
    dt_version integer,
    dt_wf_deal_step_pid bigint,
    dt_create_lender_user_name varchar(128),
    dt_create_datetime timestamp,
    dt_description varchar(1024),
    dt_complete_datetime timestamp,
    dt_deal_task_status_type varchar(128),
    dt_smart_task boolean,
    etl_batch_id text
);

alter table history_octane.deal_task owner to deployer;

create index idx_deal_task__data_source_deleted_flag
    on history_octane.deal_task (data_source_deleted_flag);

create index idx_deal_task__data_source_updated_datetime
    on history_octane.deal_task (data_source_updated_datetime);

create index idx_deal_task__pid
    on history_octane.deal_task (dt_pid);

create index idx_deal_task__pid_version
    on history_octane.deal_task (dt_pid, dt_version);

create index idx_deal_task__etl_batch_id
    on history_octane.deal_task (etl_batch_id);

grant select on history_octane.deal_task to readonly;

grant insert, select, update on history_octane.deal_task to etl_loan;

create table history_octane.wf_deal_fork_process
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    wdfp_pid bigint not null,
    wdfp_version integer,
    wdfp_wf_deal_step_pid bigint,
    wdfp_wf_deal_process_pid bigint,
    etl_batch_id text
);

alter table history_octane.wf_deal_fork_process owner to deployer;

create index idx_wf_deal_fork_process__data_source_deleted_flag
    on history_octane.wf_deal_fork_process (data_source_deleted_flag);

create index idx_wf_deal_fork_process__data_source_updated_datetime
    on history_octane.wf_deal_fork_process (data_source_updated_datetime);

create index idx_wf_deal_fork_process__pid
    on history_octane.wf_deal_fork_process (wdfp_pid);

create index idx_wf_deal_fork_process__pid_version
    on history_octane.wf_deal_fork_process (wdfp_pid, wdfp_version);

create index idx_wf_deal_fork_process__etl_batch_id
    on history_octane.wf_deal_fork_process (etl_batch_id);

grant select on history_octane.wf_deal_fork_process to readonly;

grant insert, select, update on history_octane.wf_deal_fork_process to etl_loan;

create table history_octane.wf_deal_function_queue
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    wdfq_pid bigint not null,
    wdfq_version integer,
    wdfq_wf_deal_step_pid bigint,
    wdfq_worker_start_datetime timestamp,
    wdfq_halted boolean,
    wdfq_retry_count integer,
    etl_batch_id text
);

alter table history_octane.wf_deal_function_queue owner to deployer;

create index idx_wf_deal_function_queue__data_source_deleted_flag
    on history_octane.wf_deal_function_queue (data_source_deleted_flag);

create index idx_wf_deal_function_queue__data_source_updated_datetime
    on history_octane.wf_deal_function_queue (data_source_updated_datetime);

create index idx_wf_deal_function_queue__pid
    on history_octane.wf_deal_function_queue (wdfq_pid);

create index idx_wf_deal_function_queue__pid_version
    on history_octane.wf_deal_function_queue (wdfq_pid, wdfq_version);

create index idx_wf_deal_function_queue__etl_batch_id
    on history_octane.wf_deal_function_queue (etl_batch_id);

grant select on history_octane.wf_deal_function_queue to readonly;

grant insert, select, update on history_octane.wf_deal_function_queue to etl_loan;

create table history_octane.wf_deal_outcome
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    wdo_pid bigint not null,
    wdo_version integer,
    wdo_wf_deal_step_pid bigint,
    wdo_wf_outcome_type varchar(128),
    wdo_outcome_name varchar(128),
    wdo_borrower_message varchar(1024),
    wdo_lender_description varchar(256),
    wdo_incomplete_outcome boolean,
    wdo_transition_wf_deal_step_pid bigint,
    etl_batch_id text
);

alter table history_octane.wf_deal_outcome owner to deployer;

create index idx_wf_deal_outcome__data_source_deleted_flag
    on history_octane.wf_deal_outcome (data_source_deleted_flag);

create index idx_wf_deal_outcome__data_source_updated_datetime
    on history_octane.wf_deal_outcome (data_source_updated_datetime);

create index idx_wf_deal_outcome__pid
    on history_octane.wf_deal_outcome (wdo_pid);

create index idx_wf_deal_outcome__pid_version
    on history_octane.wf_deal_outcome (wdo_pid, wdo_version);

create index idx_wf_deal_outcome__etl_batch_id
    on history_octane.wf_deal_outcome (etl_batch_id);

grant select on history_octane.wf_deal_outcome to readonly;

grant insert, select, update on history_octane.wf_deal_outcome to etl_loan;

create table history_octane.wf_deal_step_timeout
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    wdst_pid bigint not null,
    wdst_version integer,
    wdst_wf_deal_step_pid bigint,
    wdst_timeout_datetime timestamp,
    etl_batch_id text
);

alter table history_octane.wf_deal_step_timeout owner to deployer;

create index idx_wf_deal_step_timeout__data_source_deleted_flag
    on history_octane.wf_deal_step_timeout (data_source_deleted_flag);

create index idx_wf_deal_step_timeout__data_source_updated_datetime
    on history_octane.wf_deal_step_timeout (data_source_updated_datetime);

create index idx_wf_deal_step_timeout__pid
    on history_octane.wf_deal_step_timeout (wdst_pid);

create index idx_wf_deal_step_timeout__pid_version
    on history_octane.wf_deal_step_timeout (wdst_pid, wdst_version);

create index idx_wf_deal_step_timeout__etl_batch_id
    on history_octane.wf_deal_step_timeout (etl_batch_id);

grant select on history_octane.wf_deal_step_timeout to readonly;

grant insert, select, update on history_octane.wf_deal_step_timeout to etl_loan;

create table history_octane.wf_fork_process
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    wfp_pid bigint not null,
    wfp_version integer,
    wfp_wf_step_pid bigint,
    wfp_wf_process_pid bigint,
    etl_batch_id text
);

alter table history_octane.wf_fork_process owner to deployer;

create index idx_wf_fork_process__data_source_deleted_flag
    on history_octane.wf_fork_process (data_source_deleted_flag);

create index idx_wf_fork_process__data_source_updated_datetime
    on history_octane.wf_fork_process (data_source_updated_datetime);

create index idx_wf_fork_process__pid
    on history_octane.wf_fork_process (wfp_pid);

create index idx_wf_fork_process__pid_version
    on history_octane.wf_fork_process (wfp_pid, wfp_version);

create index idx_wf_fork_process__etl_batch_id
    on history_octane.wf_fork_process (etl_batch_id);

grant select on history_octane.wf_fork_process to readonly;

grant insert, select, update on history_octane.wf_fork_process to etl_loan;

create table history_octane.wf_outcome
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    wo_pid bigint not null,
    wo_version integer,
    wo_wf_step_pid bigint,
    wo_wf_outcome_type varchar(128),
    wo_outcome_name varchar(128),
    wo_ordinal integer,
    wo_criteria_pid bigint,
    wo_borrower_message varchar(1024),
    wo_lender_description varchar(256),
    wo_incomplete_outcome boolean,
    wo_transition_wf_step_pid bigint,
    etl_batch_id text
);

alter table history_octane.wf_outcome owner to deployer;

create index idx_wf_outcome__data_source_deleted_flag
    on history_octane.wf_outcome (data_source_deleted_flag);

create index idx_wf_outcome__data_source_updated_datetime
    on history_octane.wf_outcome (data_source_updated_datetime);

create index idx_wf_outcome__pid
    on history_octane.wf_outcome (wo_pid);

create index idx_wf_outcome__pid_version
    on history_octane.wf_outcome (wo_pid, wo_version);

create index idx_wf_outcome__etl_batch_id
    on history_octane.wf_outcome (etl_batch_id);

grant select on history_octane.wf_outcome to readonly;

grant insert, select, update on history_octane.wf_outcome to etl_loan;

create table history_octane.wf_step_deal_check
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    wsdc_pid bigint not null,
    wsdc_version integer,
    wsdc_wf_step_pid bigint,
    wsdc_deal_check_type varchar(128),
    wsdc_deal_check_severity_type varchar(128),
    etl_batch_id text
);

alter table history_octane.wf_step_deal_check owner to deployer;

create index idx_wf_step_deal_check__data_source_deleted_flag
    on history_octane.wf_step_deal_check (data_source_deleted_flag);

create index idx_wf_step_deal_check__data_source_updated_datetime
    on history_octane.wf_step_deal_check (data_source_updated_datetime);

create index idx_wf_step_deal_check__pid
    on history_octane.wf_step_deal_check (wsdc_pid);

create index idx_wf_step_deal_check__pid_version
    on history_octane.wf_step_deal_check (wsdc_pid, wsdc_version);

create index idx_wf_step_deal_check__etl_batch_id
    on history_octane.wf_step_deal_check (etl_batch_id);

grant select on history_octane.wf_step_deal_check to readonly;

grant insert, select, update on history_octane.wf_step_deal_check to etl_loan;

create table history_octane.wf_step_deal_check_definition
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    wsdd_pid bigint not null,
    wsdd_version integer,
    wsdd_wf_step_pid bigint,
    wsdd_deal_check_type varchar(128),
    wsdd_deal_check_severity_type varchar(128),
    etl_batch_id text
);

alter table history_octane.wf_step_deal_check_definition owner to deployer;

create index idx_wf_step_deal_check_definition__data_source_deleted_flag
    on history_octane.wf_step_deal_check_definition (data_source_deleted_flag);

create index idx_wf_step_deal_check_definition__data_source_updated_datetime
    on history_octane.wf_step_deal_check_definition (data_source_updated_datetime);

create index idx_wf_step_deal_check_definition__pid
    on history_octane.wf_step_deal_check_definition (wsdd_pid);

create index idx_wf_step_deal_check_definition__pid_version
    on history_octane.wf_step_deal_check_definition (wsdd_pid, wsdd_version);

create index idx_wf_step_deal_check_definition__etl_batch_id
    on history_octane.wf_step_deal_check_definition (etl_batch_id);

grant select on history_octane.wf_step_deal_check_definition to readonly;

grant insert, select, update on history_octane.wf_step_deal_check_definition to etl_loan;

create table history_octane.wf_step_deal_check_dependency
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    wsdp_pid bigint not null,
    wsdp_version integer,
    wsdp_wf_step_pid bigint,
    wsdp_dependency_wf_step_pid bigint,
    etl_batch_id text
);

alter table history_octane.wf_step_deal_check_dependency owner to deployer;

create index idx_wf_step_deal_check_dependency__data_source_deleted_flag
    on history_octane.wf_step_deal_check_dependency (data_source_deleted_flag);

create index idx_wf_step_deal_check_dependency__data_source_updated_datetime
    on history_octane.wf_step_deal_check_dependency (data_source_updated_datetime);

create index idx_wf_step_deal_check_dependency__pid
    on history_octane.wf_step_deal_check_dependency (wsdp_pid);

create index idx_wf_step_deal_check_dependency__pid_version
    on history_octane.wf_step_deal_check_dependency (wsdp_pid, wsdp_version);

create index idx_wf_step_deal_check_dependency__etl_batch_id
    on history_octane.wf_step_deal_check_dependency (etl_batch_id);

grant select on history_octane.wf_step_deal_check_dependency to readonly;

grant insert, select, update on history_octane.wf_step_deal_check_dependency to etl_loan;

create table history_octane.wf_step_deal_tag_modifier
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    wsdt_pid bigint not null,
    wsdt_version integer,
    wsdt_deal_tag_definition_pid bigint,
    wsdt_wf_step_pid bigint,
    wsdt_add_tag boolean,
    etl_batch_id text
);

alter table history_octane.wf_step_deal_tag_modifier owner to deployer;

create index idx_wf_step_deal_tag_modifier__data_source_deleted_flag
    on history_octane.wf_step_deal_tag_modifier (data_source_deleted_flag);

create index idx_wf_step_deal_tag_modifier__data_source_updated_datetime
    on history_octane.wf_step_deal_tag_modifier (data_source_updated_datetime);

create index idx_wf_step_deal_tag_modifier__pid
    on history_octane.wf_step_deal_tag_modifier (wsdt_pid);

create index idx_wf_step_deal_tag_modifier__pid_version
    on history_octane.wf_step_deal_tag_modifier (wsdt_pid, wsdt_version);

create index idx_wf_step_deal_tag_modifier__etl_batch_id
    on history_octane.wf_step_deal_tag_modifier (etl_batch_id);

grant select on history_octane.wf_step_deal_tag_modifier to readonly;

grant insert, select, update on history_octane.wf_step_deal_tag_modifier to etl_loan;

create table history_octane.zip_code_info
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    zci_pid bigint not null,
    zci_version integer,
    zci_zip_code varchar(5),
    zci_latitude numeric(9,6),
    zci_longitude numeric(9,6),
    etl_batch_id text
);

alter table history_octane.zip_code_info owner to deployer;

create index idx_zip_code_info__data_source_deleted_flag
    on history_octane.zip_code_info (data_source_deleted_flag);

create index idx_zip_code_info__data_source_updated_datetime
    on history_octane.zip_code_info (data_source_updated_datetime);

create index idx_zip_code_info__pid
    on history_octane.zip_code_info (zci_pid);

create index idx_zip_code_info__etl_batch_id
    on history_octane.zip_code_info (etl_batch_id);

grant select on history_octane.zip_code_info to readonly;

grant insert, select, update on history_octane.zip_code_info to etl_loan;

create table history_octane.county_zip_code
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    czc_pid bigint not null,
    czc_version integer,
    czc_county_pid bigint,
    czc_zip_code_info_pid bigint,
    etl_batch_id text
);

alter table history_octane.county_zip_code owner to deployer;

create index idx_county_zip_code__data_source_deleted_flag
    on history_octane.county_zip_code (data_source_deleted_flag);

create index idx_county_zip_code__data_source_updated_datetime
    on history_octane.county_zip_code (data_source_updated_datetime);

create index idx_county_zip_code__pid
    on history_octane.county_zip_code (czc_pid);

create index idx_county_zip_code__pid_version
    on history_octane.county_zip_code (czc_pid, czc_version);

create index idx_county_zip_code__etl_batch_id
    on history_octane.county_zip_code (etl_batch_id);

grant select on history_octane.county_zip_code to readonly;

grant insert, select, update on history_octane.county_zip_code to etl_loan;

create table history_octane.borrower_declarations
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    bdec_pid bigint not null,
    bdec_version integer,
    bdec_borrower_pid bigint,
    bdec_fha_secondary_residence varchar(128),
    bdec_relationship_with_seller varchar(128),
    bdec_borrowed_funds_undisclosed varchar(128),
    bdec_borrowed_funds_undisclosed_amount numeric(15,2),
    bdec_other_mortgage_in_progress_before_closing varchar(128),
    bdec_applying_for_credit_before_closing varchar(128),
    bdec_priority_given_to_another_lien varchar(128),
    bdec_cosigner_undisclosed varchar(128),
    bdec_currently_delinquent_federal_debt varchar(128),
    bdec_party_to_lawsuit varchar(128),
    bdec_conveyed_title_in_lieu_of_foreclosure varchar(128),
    bdec_completed_pre_foreclosure_short_sale varchar(128),
    bdec_property_foreclosure varchar(128),
    bdec_bankruptcy_chapter_7 varchar(128),
    bdec_bankruptcy_chapter_11 varchar(128),
    bdec_bankruptcy_chapter_12 varchar(128),
    bdec_bankruptcy_chapter_13 varchar(128),
    bdec_intend_to_occupy_more_than_14_days varchar(128),
    etl_batch_id text
);

alter table history_octane.borrower_declarations owner to deployer;

create index idx_borrower_declarations__data_source_deleted_flag
    on history_octane.borrower_declarations (data_source_deleted_flag);

create index idx_borrower_declarations__data_source_updated_datetime
    on history_octane.borrower_declarations (data_source_updated_datetime);

create index idx_borrower_declarations__pid
    on history_octane.borrower_declarations (bdec_pid);

create index idx_borrower_declarations__pid_version
    on history_octane.borrower_declarations (bdec_pid, bdec_version);

create index fkt_bdec_intend_to_occupy_more_than_14_days
    on history_octane.borrower_declarations (bdec_intend_to_occupy_more_than_14_days);

create index idx_borrower_declarations__etl_batch_id
    on history_octane.borrower_declarations (etl_batch_id);

grant select on history_octane.borrower_declarations to readonly;

grant insert, select, update on history_octane.borrower_declarations to etl_loan;

create table history_octane.minimum_required_residual_income_table
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    mrit_pid bigint not null,
    mrit_version integer,
    mrit_effective_date date,
    etl_batch_id text
);

alter table history_octane.minimum_required_residual_income_table owner to deployer;

create index idx_804a010cf3cb7fe3a62a6743ece39f1a
    on history_octane.minimum_required_residual_income_table (data_source_deleted_flag);

create index idx_9c5782e605d456d7c2b66e9df931b015
    on history_octane.minimum_required_residual_income_table (data_source_updated_datetime);

create index idx_minimum_required_residual_income_table__pid
    on history_octane.minimum_required_residual_income_table (mrit_pid);

create index idx_minimum_required_residual_income_table__pid_version
    on history_octane.minimum_required_residual_income_table (mrit_pid, mrit_version);

create index idx_minimum_required_residual_income_table__etl_batch_id
    on history_octane.minimum_required_residual_income_table (etl_batch_id);

grant select on history_octane.minimum_required_residual_income_table to readonly;

grant insert, select, update on history_octane.minimum_required_residual_income_table to etl_loan;

create table history_octane.minimum_required_residual_income_row
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    mrir_pid bigint not null,
    mrir_version integer,
    mrir_minimum_required_residual_income_table_pid bigint,
    mrir_state_type varchar(16),
    mrir_household_size integer,
    mrir_loan_amount_min numeric(15,2),
    mrir_loan_amount_max numeric(15,2),
    mrir_minimum_required_residual_income_amount numeric(15,2),
    etl_batch_id text
);

alter table history_octane.minimum_required_residual_income_row owner to deployer;

create index idx_ffa7c99e520050f1ad3792f4c6a2985d
    on history_octane.minimum_required_residual_income_row (data_source_deleted_flag);

create index idx_379d69a01809b5bcd8a7827da23f1ad6
    on history_octane.minimum_required_residual_income_row (data_source_updated_datetime);

create index idx_minimum_required_residual_income_row__pid
    on history_octane.minimum_required_residual_income_row (mrir_pid);

create index idx_minimum_required_residual_income_row__pid_version
    on history_octane.minimum_required_residual_income_row (mrir_pid, mrir_version);

create index idx_minimum_required_residual_income_row__etl_batch_id
    on history_octane.minimum_required_residual_income_row (etl_batch_id);

grant select on history_octane.minimum_required_residual_income_row to readonly;

grant insert, select, update on history_octane.minimum_required_residual_income_row to etl_loan;

create table history_octane.new_lock_only_add_on
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    nlo_pid bigint not null,
    nlo_version integer,
    nlo_account_pid bigint,
    nlo_add_on_prefix varchar(32),
    nlo_add_on_description varchar(256),
    etl_batch_id text
);

alter table history_octane.new_lock_only_add_on owner to deployer;

create index idx_new_lock_only_add_on__data_source_deleted_flag
    on history_octane.new_lock_only_add_on (data_source_deleted_flag);

create index idx_new_lock_only_add_on__data_source_updated_datetime
    on history_octane.new_lock_only_add_on (data_source_updated_datetime);

create index idx_new_lock_only_add_on__pid
    on history_octane.new_lock_only_add_on (nlo_pid);

create index idx_new_lock_only_add_on__pid_version
    on history_octane.new_lock_only_add_on (nlo_pid, nlo_version);

create index idx_new_lock_only_add_on__etl_batch_id
    on history_octane.new_lock_only_add_on (etl_batch_id);

grant select on history_octane.new_lock_only_add_on to readonly;

grant insert, select, update on history_octane.new_lock_only_add_on to etl_loan;

create table history_octane.doc_provider_group_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.doc_provider_group_type owner to deployer;

create index idx_doc_provider_group_type__data_source_deleted_flag
    on history_octane.doc_provider_group_type (data_source_deleted_flag);

create index idx_doc_provider_group_type__data_source_updated_datetime
    on history_octane.doc_provider_group_type (data_source_updated_datetime);

create index idx_doc_provider_group_type__etl_batch_id
    on history_octane.doc_provider_group_type (etl_batch_id);

grant select on history_octane.doc_provider_group_type to readonly;

grant insert, select, update on history_octane.doc_provider_group_type to etl_loan;

create table history_octane.doc_req_fulfill_status_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.doc_req_fulfill_status_type owner to deployer;

create index idx_doc_req_fulfill_status_type__data_source_deleted_flag
    on history_octane.doc_req_fulfill_status_type (data_source_deleted_flag);

create index idx_doc_req_fulfill_status_type__data_source_updated_datetime
    on history_octane.doc_req_fulfill_status_type (data_source_updated_datetime);

create index idx_doc_req_fulfill_status_type__etl_batch_id
    on history_octane.doc_req_fulfill_status_type (etl_batch_id);

grant select on history_octane.doc_req_fulfill_status_type to readonly;

grant insert, select, update on history_octane.doc_req_fulfill_status_type to etl_loan;

create table history_octane.trust_classification_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.trust_classification_type owner to deployer;

create index idx_trust_classification_type__data_source_deleted_flag
    on history_octane.trust_classification_type (data_source_deleted_flag);

create index idx_trust_classification_type__data_source_updated_datetime
    on history_octane.trust_classification_type (data_source_updated_datetime);

create index idx_trust_classification_type__etl_batch_id
    on history_octane.trust_classification_type (etl_batch_id);

grant select on history_octane.trust_classification_type to readonly;

grant insert, select, update on history_octane.trust_classification_type to etl_loan;

create table history_octane.financed_property_improvements_category_type
(
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    code varchar(128) not null,
    value varchar(1024),
    etl_batch_id text
);

alter table history_octane.financed_property_improvements_category_type owner to deployer;

create index idx_c150104d6f81d83b669943c5bc340aec
    on history_octane.financed_property_improvements_category_type (data_source_deleted_flag);

create index idx_e57ebd9d165435f5c478708b3f1d41d4
    on history_octane.financed_property_improvements_category_type (data_source_updated_datetime);

create index idx_financed_property_improvements_category_type__etl_batch_id
    on history_octane.financed_property_improvements_category_type (etl_batch_id);

grant select on history_octane.financed_property_improvements_category_type to readonly;

grant insert, select, update on history_octane.financed_property_improvements_category_type to etl_loan;

create table staging_octane.construction_permit_type
(
    code varchar(128) not null
        constraint pk_construction_permit_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.construction_permit_type owner to deployer;

grant select on staging_octane.construction_permit_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.construction_permit_type to dms_octane_writer;

grant select on staging_octane.construction_permit_type to etl_loan;

create table staging_octane.construction_permit_requested_by_type
(
    code varchar(128) not null
        constraint pk_construction_permit_requested_by_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.construction_permit_requested_by_type owner to deployer;

grant select on staging_octane.construction_permit_requested_by_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.construction_permit_requested_by_type to dms_octane_writer;

grant select on staging_octane.construction_permit_requested_by_type to etl_loan;

create table staging_octane.construction_permit
(
    cop_pid bigint not null
        constraint pk_construction_permit
            primary key,
    cop_version integer,
    cop_proposal_pid bigint,
    cop_construction_permit_type varchar(128),
    cop_construction_permit_type_other_description varchar(64),
    cop_permit_number varchar(32),
    cop_construction_permit_requested_by_type varchar(128),
    cop_issued_by varchar(128),
    cop_application_date date,
    cop_issued_date date,
    cop_expiration_date date,
    cop_closed_out_date date,
    cop_amount numeric(17,2),
    cop_building_department_name varchar(64),
    cop_building_department_contact_url varchar(256),
    cop_first_name varchar(32),
    cop_last_name varchar(32),
    cop_email varchar(256),
    cop_mobile_phone varchar(32),
    cop_office_phone varchar(32),
    cop_office_phone_extension varchar(16),
    cop_fax varchar(32),
    cop_address_street1 varchar(128),
    cop_address_street2 varchar(128),
    cop_address_city varchar(128),
    cop_address_state varchar(128),
    cop_address_postal_code varchar(128)
);

alter table staging_octane.construction_permit owner to deployer;

create index idx_construction_permit__pid_version
    on staging_octane.construction_permit (cop_pid, cop_version);

grant select on staging_octane.construction_permit to readonly;

grant delete, insert, select, truncate, update on staging_octane.construction_permit to dms_octane_writer;

grant select on staging_octane.construction_permit to etl_loan;

create table history_octane.construction_permit_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.construction_permit_type owner to deployer;

create index idx_construction_permit_type__data_source_updated_datetime
    on history_octane.construction_permit_type (data_source_updated_datetime);

create index idx_construction_permit_type__data_source_deleted_flag
    on history_octane.construction_permit_type (data_source_deleted_flag);

create index idx_construction_permit_type__etl_batch_id
    on history_octane.construction_permit_type (etl_batch_id);

grant select on history_octane.construction_permit_type to readonly;

grant insert, select, update on history_octane.construction_permit_type to etl_loan;

create table history_octane.construction_permit_requested_by_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.construction_permit_requested_by_type owner to deployer;

create index idx_195162628b2979ff2c4f20ee9ca2d6a6
    on history_octane.construction_permit_requested_by_type (data_source_updated_datetime);

create index idx_f4ef876f53d12c1c1b11a232de67c93f
    on history_octane.construction_permit_requested_by_type (data_source_deleted_flag);

create index idx_construction_permit_requested_by_type__etl_batch_id
    on history_octane.construction_permit_requested_by_type (etl_batch_id);

grant select on history_octane.construction_permit_requested_by_type to readonly;

grant insert, select, update on history_octane.construction_permit_requested_by_type to etl_loan;

create table history_octane.construction_permit
(
    cop_pid bigint,
    cop_version integer,
    cop_proposal_pid bigint,
    cop_construction_permit_type varchar(128),
    cop_construction_permit_type_other_description varchar(64),
    cop_permit_number varchar(32),
    cop_construction_permit_requested_by_type varchar(128),
    cop_issued_by varchar(128),
    cop_application_date date,
    cop_issued_date date,
    cop_expiration_date date,
    cop_closed_out_date date,
    cop_amount numeric(17,2),
    cop_building_department_name varchar(64),
    cop_building_department_contact_url varchar(256),
    cop_first_name varchar(32),
    cop_last_name varchar(32),
    cop_email varchar(256),
    cop_mobile_phone varchar(32),
    cop_office_phone varchar(32),
    cop_office_phone_extension varchar(16),
    cop_fax varchar(32),
    cop_address_street1 varchar(128),
    cop_address_street2 varchar(128),
    cop_address_city varchar(128),
    cop_address_state varchar(128),
    cop_address_postal_code varchar(128),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.construction_permit owner to deployer;

create index idx_construction_permit__pid
    on history_octane.construction_permit (cop_pid);

create index idx_construction_permit__data_source_updated_datetime
    on history_octane.construction_permit (data_source_updated_datetime);

create index idx_construction_permit__data_source_deleted_flag
    on history_octane.construction_permit (data_source_deleted_flag);

create index idx_construction_permit__pid_version
    on history_octane.construction_permit (cop_pid, cop_version);

create index fk_construction_permit_1
    on history_octane.construction_permit (cop_proposal_pid);

create index fkt_cop_construction_permit_type
    on history_octane.construction_permit (cop_construction_permit_type);

create index fkt_cop_construction_permit_requested_by_type
    on history_octane.construction_permit (cop_construction_permit_requested_by_type);

create index idx_construction_permit__etl_batch_id
    on history_octane.construction_permit (etl_batch_id);

grant select on history_octane.construction_permit to readonly;

grant insert, select, update on history_octane.construction_permit to etl_loan;

create table staging_octane.org_node_type
(
    code varchar(128) not null
        constraint pk_org_node_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.org_node_type owner to deployer;

grant select on staging_octane.org_node_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.org_node_type to dms_octane_writer;

grant select on staging_octane.org_node_type to etl_loan;

create table staging_octane.org_node_lender_user_type
(
    code varchar(128) not null
        constraint pk_org_node_lender_user_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.org_node_lender_user_type owner to deployer;

grant select on staging_octane.org_node_lender_user_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.org_node_lender_user_type to dms_octane_writer;

grant select on staging_octane.org_node_lender_user_type to etl_loan;

create table staging_octane.org_node_tree
(
    ont_pid bigint not null
        constraint pk_org_node_tree
            primary key,
    ont_version integer,
    ont_account_pid bigint
);

alter table staging_octane.org_node_tree owner to deployer;

create index idx_org_node_tree__pid_version
    on staging_octane.org_node_tree (ont_pid, ont_version);

grant select on staging_octane.org_node_tree to readonly;

grant delete, insert, select, truncate, update on staging_octane.org_node_tree to dms_octane_writer;

grant select on staging_octane.org_node_tree to etl_loan;

create table staging_octane.org_node
(
    on_pid bigint not null
        constraint pk_org_node
            primary key,
    on_version integer,
    on_account_pid bigint,
    on_org_node_tree_pid bigint,
    on_lender_user_pid bigint,
    on_org_node_id bigint,
    on_org_node_short_id varchar(8),
    on_org_node_name_latest varchar(256),
    on_org_node_type varchar(128),
    on_description varchar(16000),
    on_org_node_active boolean,
    on_amb_codes varchar(256)
);

alter table staging_octane.org_node owner to deployer;

create index idx_org_node__pid_version
    on staging_octane.org_node (on_pid, on_version);

grant select on staging_octane.org_node to readonly;

grant delete, insert, select, truncate, update on staging_octane.org_node to dms_octane_writer;

grant select on staging_octane.org_node to etl_loan;

create table staging_octane.org_node_lender_user
(
    onlu_pid bigint not null
        constraint pk_org_node_lender_user
            primary key,
    onlu_version integer,
    onlu_org_node_pid bigint,
    onlu_lender_user_pid bigint,
    onlu_from_date date,
    onlu_through_date date,
    onlu_org_node_lender_user_type varchar(128)
);

alter table staging_octane.org_node_lender_user owner to deployer;

create index idx_org_node_lender_user__pid_version
    on staging_octane.org_node_lender_user (onlu_pid, onlu_version);

grant select on staging_octane.org_node_lender_user to readonly;

grant delete, insert, select, truncate, update on staging_octane.org_node_lender_user to dms_octane_writer;

grant select on staging_octane.org_node_lender_user to etl_loan;

create table staging_octane.org_node_version
(
    onv_pid bigint not null
        constraint pk_org_node_version
            primary key,
    onv_version integer,
    onv_org_node_pid bigint,
    onv_parent_org_node_pid bigint,
    onv_from_date date,
    onv_through_date date,
    onv_org_node_name varchar(256)
);

alter table staging_octane.org_node_version owner to deployer;

create index idx_org_node_version__pid_version
    on staging_octane.org_node_version (onv_pid, onv_version);

grant select on staging_octane.org_node_version to readonly;

grant delete, insert, select, truncate, update on staging_octane.org_node_version to dms_octane_writer;

grant select on staging_octane.org_node_version to etl_loan;

create table staging_octane.ledger_book_type
(
    code varchar(128) not null
        constraint pk_ledger_book_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.ledger_book_type owner to deployer;

grant select on staging_octane.ledger_book_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.ledger_book_type to dms_octane_writer;

grant select on staging_octane.ledger_book_type to etl_loan;

create table staging_octane.ledger_book_status_type
(
    code varchar(128) not null
        constraint pk_ledger_book_status_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.ledger_book_status_type owner to deployer;

grant select on staging_octane.ledger_book_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.ledger_book_status_type to dms_octane_writer;

grant select on staging_octane.ledger_book_status_type to etl_loan;

create table staging_octane.ledger_book
(
    lbk_pid bigint not null
        constraint pk_ledger_book
            primary key,
    lbk_version integer,
    lbk_ledger_book_id varchar(16),
    lbk_account_pid bigint,
    lbk_ledger_book_type varchar(128),
    lbk_period_from_date date,
    lbk_period_through_date date,
    lbk_payroll_pay_date date,
    lbk_ledger_book_status_type varchar(128),
    lbk_closed_by_lender_user_pid bigint,
    lbk_closed_by_unparsed_name varchar(128),
    lbk_processed_by_lender_user_pid bigint,
    lbk_processed_by_unparsed_name varchar(128)
);

alter table staging_octane.ledger_book owner to deployer;

create index idx_ledger_book__pid_version
    on staging_octane.ledger_book (lbk_pid, lbk_version);

grant select on staging_octane.ledger_book to readonly;

grant delete, insert, select, truncate, update on staging_octane.ledger_book to dms_octane_writer;

grant select on staging_octane.ledger_book to etl_loan;

create table staging_octane.org_lineage
(
    ol_pid bigint not null
        constraint pk_org_lineage
            primary key,
    ol_version integer,
    ol_lender_user_pid bigint,
    ol_org_lineage_pretty_text varchar(16000),
    ol_org_node_pid bigint
);

alter table staging_octane.org_lineage owner to deployer;

create index idx_org_lineage__pid_version
    on staging_octane.org_lineage (ol_pid, ol_version);

grant select on staging_octane.org_lineage to readonly;

grant delete, insert, select, truncate, update on staging_octane.org_lineage to dms_octane_writer;

grant select on staging_octane.org_lineage to etl_loan;

create table staging_octane.org_lineage_node
(
    oln_pid bigint not null
        constraint pk_org_lineage_node
            primary key,
    oln_version integer,
    oln_org_lineage_pid bigint,
    oln_org_node_pid bigint,
    oln_org_node_ordinal integer
);

alter table staging_octane.org_lineage_node owner to deployer;

create index idx_org_lineage_node__pid_version
    on staging_octane.org_lineage_node (oln_pid, oln_version);

grant select on staging_octane.org_lineage_node to readonly;

grant delete, insert, select, truncate, update on staging_octane.org_lineage_node to dms_octane_writer;

grant select on staging_octane.org_lineage_node to etl_loan;

create table staging_octane.loan_org_lineage_source_type
(
    code varchar(128) not null
        constraint pk_loan_org_lineage_source_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.loan_org_lineage_source_type owner to deployer;

grant select on staging_octane.loan_org_lineage_source_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_org_lineage_source_type to dms_octane_writer;

grant select on staging_octane.loan_org_lineage_source_type to etl_loan;

create table staging_octane.loan_org_lineage
(
    lol_pid bigint not null
        constraint pk_loan_org_lineage
            primary key,
    lol_version integer,
    lol_loan_pid bigint,
    lol_org_lineage_pid bigint,
    lol_loan_org_lineage_source_type varchar(128),
    lol_source_date date
);

alter table staging_octane.loan_org_lineage owner to deployer;

create index idx_loan_org_lineage__pid_version
    on staging_octane.loan_org_lineage (lol_pid, lol_version);

grant select on staging_octane.loan_org_lineage to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_org_lineage to dms_octane_writer;

grant select on staging_octane.loan_org_lineage to etl_loan;

create table staging_octane.loan_org_lineage_update
(
    lolu_pid bigint not null
        constraint pk_loan_org_lineage_update
            primary key,
    lolu_version integer,
    lolu_loan_pid bigint,
    lolu_scheduled_date date,
    lolu_try_count integer,
    lolu_latest_exception_message varchar(16000)
);

alter table staging_octane.loan_org_lineage_update owner to deployer;

create index idx_loan_org_lineage_update__pid_version
    on staging_octane.loan_org_lineage_update (lolu_pid, lolu_version);

grant select on staging_octane.loan_org_lineage_update to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_org_lineage_update to dms_octane_writer;

grant select on staging_octane.loan_org_lineage_update to etl_loan;

create table staging_octane.org_lineage_tracker
(
    olt_pid bigint not null
        constraint pk_org_lineage_tracker
            primary key,
    olt_version integer,
    olt_org_node_pid bigint,
    olt_org_lineage_pid bigint,
    olt_from_date date,
    olt_through_date date
);

alter table staging_octane.org_lineage_tracker owner to deployer;

create index idx_org_lineage_tracker__pid_version
    on staging_octane.org_lineage_tracker (olt_pid, olt_version);

grant select on staging_octane.org_lineage_tracker to readonly;

grant delete, insert, select, truncate, update on staging_octane.org_lineage_tracker to dms_octane_writer;

grant select on staging_octane.org_lineage_tracker to etl_loan;

create table staging_octane.ledger_entry_type
(
    code varchar(128) not null
        constraint pk_ledger_entry_type
            primary key,
    value varchar(1024),
    general_ledger_code varchar(8)
);

alter table staging_octane.ledger_entry_type owner to deployer;

grant select on staging_octane.ledger_entry_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.ledger_entry_type to dms_octane_writer;

grant select on staging_octane.ledger_entry_type to etl_loan;

create table staging_octane.ledger_entry_source_type
(
    code varchar(128) not null
        constraint pk_ledger_entry_source_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.ledger_entry_source_type owner to deployer;

grant select on staging_octane.ledger_entry_source_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.ledger_entry_source_type to dms_octane_writer;

grant select on staging_octane.ledger_entry_source_type to etl_loan;

create table staging_octane.ledger_entry_decision_status_type
(
    code varchar(128) not null
        constraint pk_ledger_entry_decision_status_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.ledger_entry_decision_status_type owner to deployer;

grant select on staging_octane.ledger_entry_decision_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.ledger_entry_decision_status_type to dms_octane_writer;

grant select on staging_octane.ledger_entry_decision_status_type to etl_loan;

create table staging_octane.ledger_entry
(
    le_pid bigint not null
        constraint pk_ledger_entry
            primary key,
    le_version integer,
    le_account_pid bigint,
    le_ledger_entry_type varchar(128),
    le_ledger_entry_source_type varchar(128),
    le_estimate boolean,
    le_ledger_entry_decision_status_type varchar(128),
    le_create_datetime timestamp,
    le_entry_amount numeric(15,2),
    le_source_org_node_pid bigint,
    le_payee_org_node_pid bigint,
    le_payee_org_lineage_pid bigint,
    le_source_org_lineage_pid bigint,
    le_org_lineage_source_date date,
    le_deal_pid bigint,
    le_loan_position_type varchar(128),
    le_los_loan_id bigint,
    le_notes text,
    le_monthly_ledger_book_pid bigint,
    le_payroll_ledger_book_pid bigint,
    le_ledger_book_datetime timestamp,
    le_expense_date date,
    le_reversal boolean,
    le_passthrough boolean,
    le_smart_ledger_plan_case_version_pid bigint,
    le_synthetic_unique varchar(32)
);

alter table staging_octane.ledger_entry owner to deployer;

create index idx_ledger_entry__pid_version
    on staging_octane.ledger_entry (le_pid, le_version);

grant select on staging_octane.ledger_entry to readonly;

grant delete, insert, select, truncate, update on staging_octane.ledger_entry to dms_octane_writer;

grant select on staging_octane.ledger_entry to etl_loan;

create table staging_octane.smart_ledger_plan_case_type
(
    code varchar(128) not null
        constraint pk_smart_ledger_plan_case_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.smart_ledger_plan_case_type owner to deployer;

grant select on staging_octane.smart_ledger_plan_case_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_ledger_plan_case_type to dms_octane_writer;

grant select on staging_octane.smart_ledger_plan_case_type to etl_loan;

create table staging_octane.smart_ledger_plan_case_level_type
(
    code varchar(128) not null
        constraint pk_smart_ledger_plan_case_level_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.smart_ledger_plan_case_level_type owner to deployer;

grant select on staging_octane.smart_ledger_plan_case_level_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_ledger_plan_case_level_type to dms_octane_writer;

grant select on staging_octane.smart_ledger_plan_case_level_type to etl_loan;

create table staging_octane.smart_ledger_pay_frequency_type
(
    code varchar(128) not null
        constraint pk_smart_ledger_pay_frequency_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.smart_ledger_pay_frequency_type owner to deployer;

grant select on staging_octane.smart_ledger_pay_frequency_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_ledger_pay_frequency_type to dms_octane_writer;

grant select on staging_octane.smart_ledger_pay_frequency_type to etl_loan;

create table staging_octane.ledger_basis_points_input_type
(
    code varchar(128) not null
        constraint pk_ledger_basis_points_input_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.ledger_basis_points_input_type owner to deployer;

grant select on staging_octane.ledger_basis_points_input_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.ledger_basis_points_input_type to dms_octane_writer;

grant select on staging_octane.ledger_basis_points_input_type to etl_loan;

create table staging_octane.smart_ledger_plan_case_group_calculation_type
(
    code varchar(128) not null
        constraint pk_smart_ledger_plan_case_group_calculation_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.smart_ledger_plan_case_group_calculation_type owner to deployer;

grant select on staging_octane.smart_ledger_plan_case_group_calculation_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_ledger_plan_case_group_calculation_type to dms_octane_writer;

grant select on staging_octane.smart_ledger_plan_case_group_calculation_type to etl_loan;

create table staging_octane.smart_ledger_plan
(
    slp_pid bigint not null
        constraint pk_smart_ledger_plan
            primary key,
    slp_version integer,
    slp_account_pid bigint,
    slp_org_node_pid bigint,
    slp_plan_name varchar(128),
    slp_plan_id bigint
);

alter table staging_octane.smart_ledger_plan owner to deployer;

create index idx_smart_ledger_plan__pid_version
    on staging_octane.smart_ledger_plan (slp_pid, slp_version);

grant select on staging_octane.smart_ledger_plan to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_ledger_plan to dms_octane_writer;

grant select on staging_octane.smart_ledger_plan to etl_loan;

create table staging_octane.smart_ledger_plan_case_group
(
    slpcg_pid bigint not null
        constraint pk_smart_ledger_plan_case_group
            primary key,
    slpcg_version integer,
    slpcg_account_pid bigint,
    slpcg_smart_ledger_plan_pid bigint,
    slpcg_group_name varchar(128),
    slpcg_group_id bigint,
    slpcg_payer_org_node_pid bigint,
    slpcg_smart_ledger_plan_case_group_calculation_type varchar(128)
);

alter table staging_octane.smart_ledger_plan_case_group owner to deployer;

create index idx_smart_ledger_plan_case_group__pid_version
    on staging_octane.smart_ledger_plan_case_group (slpcg_pid, slpcg_version);

grant select on staging_octane.smart_ledger_plan_case_group to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_ledger_plan_case_group to dms_octane_writer;

grant select on staging_octane.smart_ledger_plan_case_group to etl_loan;

create table staging_octane.smart_ledger_plan_case
(
    slpc_pid bigint not null
        constraint pk_smart_ledger_plan_case
            primary key,
    slpc_version integer,
    slpc_account_pid bigint,
    slpc_smart_ledger_plan_case_group_pid bigint,
    slpc_case_id bigint,
    slpc_ordinal integer
);

alter table staging_octane.smart_ledger_plan_case owner to deployer;

create index idx_smart_ledger_plan_case__pid_version
    on staging_octane.smart_ledger_plan_case (slpc_pid, slpc_version);

grant select on staging_octane.smart_ledger_plan_case to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_ledger_plan_case to dms_octane_writer;

grant select on staging_octane.smart_ledger_plan_case to etl_loan;

create table staging_octane.smart_ledger_plan_case_version
(
    slpcv_pid bigint not null
        constraint pk_smart_ledger_plan_case_version
            primary key,
    slpcv_version integer,
    slpcv_account_pid bigint,
    slpcv_smart_ledger_plan_case_pid bigint,
    slpcv_payer_org_node_pid bigint,
    slpcv_active boolean,
    slpcv_synthetic_unique bigint,
    slpcv_case_name varchar(128),
    slpcv_smart_ledger_plan_case_type varchar(128),
    slpcv_smart_ledger_plan_case_level_type varchar(128),
    slpcv_smart_ledger_pay_frequency_type varchar(128),
    slpcv_from_date date,
    slpcv_through_date date,
    slpcv_base_amount numeric(15,2),
    slpcv_basis_points integer,
    slpcv_min_amount numeric(15,2),
    slpcv_max_amount numeric(15,2),
    slpcv_ledger_basis_points_input_type varchar(128),
    slpcv_criteria_pid bigint,
    slpcv_last_modified_by varchar(128),
    slpcv_last_modified_datetime timestamp
);

alter table staging_octane.smart_ledger_plan_case_version owner to deployer;

create index idx_smart_ledger_plan_case_version__pid_version
    on staging_octane.smart_ledger_plan_case_version (slpcv_pid, slpcv_version);

grant select on staging_octane.smart_ledger_plan_case_version to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_ledger_plan_case_version to dms_octane_writer;

grant select on staging_octane.smart_ledger_plan_case_version to etl_loan;

create table staging_octane.ledger_entry_review_status_type
(
    code varchar(128) not null
        constraint pk_ledger_entry_review_status_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.ledger_entry_review_status_type owner to deployer;

grant select on staging_octane.ledger_entry_review_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.ledger_entry_review_status_type to dms_octane_writer;

grant select on staging_octane.ledger_entry_review_status_type to etl_loan;

create table staging_octane.ledger_entry_review_reason_type
(
    code varchar(128) not null
        constraint pk_ledger_entry_review_reason_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.ledger_entry_review_reason_type owner to deployer;

grant select on staging_octane.ledger_entry_review_reason_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.ledger_entry_review_reason_type to dms_octane_writer;

grant select on staging_octane.ledger_entry_review_reason_type to etl_loan;

create table staging_octane.ledger_entry_review
(
    ler_pid bigint not null
        constraint pk_ledger_entry_review
            primary key,
    ler_version integer,
    ler_account_pid bigint,
    ler_deal_pid bigint,
    ler_org_node_pid bigint,
    ler_ledger_entry_pid bigint,
    ler_ledger_entry_review_reason_type varchar(128),
    ler_ledger_entry_review_status_type varchar(128),
    ler_request_by_lender_user_pid bigint,
    ler_request_datetime timestamp,
    ler_review_by_lender_user_pid bigint,
    ler_review_datetime timestamp,
    ler_ledger_entry_type varchar(128),
    ler_entry_amount numeric(15,2),
    ler_loan_position_type varchar(128)
);

alter table staging_octane.ledger_entry_review owner to deployer;

create index idx_ledger_entry_review__pid_version
    on staging_octane.ledger_entry_review (ler_pid, ler_version);

grant select on staging_octane.ledger_entry_review to readonly;

grant delete, insert, select, truncate, update on staging_octane.ledger_entry_review to dms_octane_writer;

grant select on staging_octane.ledger_entry_review to etl_loan;

create table staging_octane.ledger_entry_review_note
(
    lern_pid bigint not null
        constraint pk_ledger_entry_review_note
            primary key,
    lern_version integer,
    lern_ledger_entry_review_pid bigint,
    lern_create_datetime timestamp,
    lern_content varchar(16000),
    lern_author_lender_user_pid bigint,
    lern_author_unparsed_name varchar(128)
);

alter table staging_octane.ledger_entry_review_note owner to deployer;

create index idx_ledger_entry_review_note__pid_version
    on staging_octane.ledger_entry_review_note (lern_pid, lern_version);

grant select on staging_octane.ledger_entry_review_note to readonly;

grant delete, insert, select, truncate, update on staging_octane.ledger_entry_review_note to dms_octane_writer;

grant select on staging_octane.ledger_entry_review_note to etl_loan;

create table staging_octane.ledger_entry_review_note_comment
(
    lerc_pid bigint not null
        constraint pk_ledger_entry_review_note_comment
            primary key,
    lerc_version integer,
    lerc_ledger_entry_review_note_pid bigint,
    lerc_create_datetime timestamp,
    lerc_content varchar(16000),
    lerc_author_lender_user_pid bigint,
    lerc_author_unparsed_name varchar(128)
);

alter table staging_octane.ledger_entry_review_note_comment owner to deployer;

create index idx_ledger_entry_review_note_comment__pid_version
    on staging_octane.ledger_entry_review_note_comment (lerc_pid, lerc_version);

grant select on staging_octane.ledger_entry_review_note_comment to readonly;

grant delete, insert, select, truncate, update on staging_octane.ledger_entry_review_note_comment to dms_octane_writer;

grant select on staging_octane.ledger_entry_review_note_comment to etl_loan;

create table staging_octane.ledger_entry_review_note_monitor
(
    lerm_pid bigint not null
        constraint pk_ledger_entry_review_note_monitor
            primary key,
    lerm_version integer,
    lerm_ledger_entry_review_note_pid bigint,
    lerm_lender_user_pid bigint
);

alter table staging_octane.ledger_entry_review_note_monitor owner to deployer;

create index idx_ledger_entry_review_note_monitor__pid_version
    on staging_octane.ledger_entry_review_note_monitor (lerm_pid, lerm_version);

grant select on staging_octane.ledger_entry_review_note_monitor to readonly;

grant delete, insert, select, truncate, update on staging_octane.ledger_entry_review_note_monitor to dms_octane_writer;

grant select on staging_octane.ledger_entry_review_note_monitor to etl_loan;

create table staging_octane.ledger_entry_import_status_type
(
    code varchar(128) not null
        constraint pk_ledger_entry_import_status_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.ledger_entry_import_status_type owner to deployer;

grant select on staging_octane.ledger_entry_import_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.ledger_entry_import_status_type to dms_octane_writer;

grant select on staging_octane.ledger_entry_import_status_type to etl_loan;

create table staging_octane.ledger_entry_import_status
(
    leis_pid bigint not null
        constraint pk_ledger_entry_import_status
            primary key,
    leis_version integer,
    leis_account_pid bigint,
    leis_batch_id varchar(128),
    leis_batch_name varchar(128),
    leis_requester_lender_user_pid bigint,
    leis_submit_datetime timestamp,
    leis_complete_datetime timestamp,
    leis_entry_count integer,
    leis_ledger_entry_import_status_type varchar(128),
    leis_failure_info varchar(16000),
    leis_raw_header_row varchar(16000)
);

alter table staging_octane.ledger_entry_import_status owner to deployer;

create index idx_ledger_entry_import_status__pid_version
    on staging_octane.ledger_entry_import_status (leis_pid, leis_version);

grant select on staging_octane.ledger_entry_import_status to readonly;

grant delete, insert, select, truncate, update on staging_octane.ledger_entry_import_status to dms_octane_writer;

grant select on staging_octane.ledger_entry_import_status to etl_loan;

create table staging_octane.ledger_entry_import_loan_status
(
    leils_pid bigint not null
        constraint pk_ledger_entry_import_loan_status
            primary key,
    leils_version integer,
    leils_ledger_entry_import_status_pid bigint,
    leils_ledger_entry_pid bigint,
    leils_los_loan_id varchar(32),
    leils_payee_unparsed_name varchar(128),
    leils_entry_amount numeric(15,2),
    leils_entry_description varchar(1024),
    leils_start_datetime timestamp,
    leils_complete_datetime timestamp,
    leils_ledger_entry_import_status_type varchar(128),
    leils_failure_info varchar(16000),
    leils_raw_row varchar(16000),
    leils_row_number integer
);

alter table staging_octane.ledger_entry_import_loan_status owner to deployer;

create index idx_ledger_entry_import_loan_status__pid_version
    on staging_octane.ledger_entry_import_loan_status (leils_pid, leils_version);

grant select on staging_octane.ledger_entry_import_loan_status to readonly;

grant delete, insert, select, truncate, update on staging_octane.ledger_entry_import_loan_status to dms_octane_writer;

grant select on staging_octane.ledger_entry_import_loan_status to etl_loan;

create table staging_octane.payroll_ledger_book_id_ticker
(
    plbit_pid bigint not null
        constraint pk_payroll_ledger_book_id_ticker
            primary key,
    plbit_version integer,
    plbit_account_pid bigint,
    plbit_year integer,
    plbit_month integer,
    plbit_period_id integer,
    plbit_revision_id integer,
    plbit_user_friendly_value varchar(16)
);

alter table staging_octane.payroll_ledger_book_id_ticker owner to deployer;

create index idx_payroll_ledger_book_id_ticker__pid_version
    on staging_octane.payroll_ledger_book_id_ticker (plbit_pid, plbit_version);

grant select on staging_octane.payroll_ledger_book_id_ticker to readonly;

grant delete, insert, select, truncate, update on staging_octane.payroll_ledger_book_id_ticker to dms_octane_writer;

grant select on staging_octane.payroll_ledger_book_id_ticker to etl_loan;

create table staging_octane.mcr_error_status_type
(
    code varchar(128) not null
        constraint pk_mcr_error_status_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.mcr_error_status_type owner to deployer;

grant select on staging_octane.mcr_error_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.mcr_error_status_type to dms_octane_writer;

grant select on staging_octane.mcr_error_status_type to etl_loan;

create table staging_octane.mcr_status_type
(
    code varchar(128) not null
        constraint pk_mcr_status_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.mcr_status_type owner to deployer;

grant select on staging_octane.mcr_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.mcr_status_type to dms_octane_writer;

grant select on staging_octane.mcr_status_type to etl_loan;

create table staging_octane.mcr_request
(
    mcrr_pid bigint not null
        constraint pk_mcr_request
            primary key,
    mcrr_version integer,
    mcrr_account_pid bigint,
    mcrr_create_datetime timestamp,
    mcrr_start_datetime timestamp,
    mcrr_end_datetime timestamp,
    mcrr_request_status_type varchar(128),
    mcrr_request_status_messages text,
    mcrr_mcr_error_status_type varchar(128),
    mcrr_mcr_status_type varchar(128),
    mcrr_requester_unparsed_name varchar(128),
    mcrr_year integer,
    mcrr_quarter_type varchar(128),
    mcrr_mcr_xml_file_pid bigint,
    mcrr_error_csv_file_pid bigint,
    mcrr_mcr_loan_data_csv_file_pid bigint,
    mcrr_csv_input_files_zip_pid bigint
);

alter table staging_octane.mcr_request owner to deployer;

create index idx_mcr_request__pid_version
    on staging_octane.mcr_request (mcrr_pid, mcrr_version);

grant select on staging_octane.mcr_request to readonly;

grant delete, insert, select, truncate, update on staging_octane.mcr_request to dms_octane_writer;

grant select on staging_octane.mcr_request to etl_loan;

create table history_octane.org_node_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.org_node_type owner to deployer;

create index idx_org_node_type__data_source_updated_datetime
    on history_octane.org_node_type (data_source_updated_datetime);

create index idx_org_node_type__data_source_deleted_flag
    on history_octane.org_node_type (data_source_deleted_flag);

create index idx_org_node_type__etl_batch_id
    on history_octane.org_node_type (etl_batch_id);

grant select on history_octane.org_node_type to readonly;

grant insert, select, update on history_octane.org_node_type to etl_loan;

create table history_octane.org_node_lender_user_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.org_node_lender_user_type owner to deployer;

create index idx_org_node_lender_user_type__data_source_updated_datetime
    on history_octane.org_node_lender_user_type (data_source_updated_datetime);

create index idx_org_node_lender_user_type__data_source_deleted_flag
    on history_octane.org_node_lender_user_type (data_source_deleted_flag);

create index idx_org_node_lender_user_type__etl_batch_id
    on history_octane.org_node_lender_user_type (etl_batch_id);

grant select on history_octane.org_node_lender_user_type to readonly;

grant insert, select, update on history_octane.org_node_lender_user_type to etl_loan;

create table history_octane.org_node_tree
(
    ont_pid bigint,
    ont_version integer,
    ont_account_pid bigint,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.org_node_tree owner to deployer;

create index idx_org_node_tree__pid
    on history_octane.org_node_tree (ont_pid);

create index idx_org_node_tree__data_source_updated_datetime
    on history_octane.org_node_tree (data_source_updated_datetime);

create index idx_org_node_tree__data_source_deleted_flag
    on history_octane.org_node_tree (data_source_deleted_flag);

create index idx_org_node_tree__pid_version
    on history_octane.org_node_tree (ont_pid, ont_version);

create index fk_org_node_tree_1
    on history_octane.org_node_tree (ont_account_pid);

create index idx_org_node_tree__etl_batch_id
    on history_octane.org_node_tree (etl_batch_id);

grant select on history_octane.org_node_tree to readonly;

grant insert, select, update on history_octane.org_node_tree to etl_loan;

create table history_octane.org_node
(
    on_pid bigint,
    on_version integer,
    on_account_pid bigint,
    on_org_node_tree_pid bigint,
    on_lender_user_pid bigint,
    on_org_node_id bigint,
    on_org_node_short_id varchar(8),
    on_org_node_name_latest varchar(256),
    on_org_node_type varchar(128),
    on_description varchar(16000),
    on_org_node_active boolean,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    on_amb_codes varchar(256),
    etl_batch_id text
);

alter table history_octane.org_node owner to deployer;

create index idx_org_node__pid
    on history_octane.org_node (on_pid);

create index idx_org_node__data_source_updated_datetime
    on history_octane.org_node (data_source_updated_datetime);

create index idx_org_node__data_source_deleted_flag
    on history_octane.org_node (data_source_deleted_flag);

create index idx_org_node__pid_version
    on history_octane.org_node (on_pid, on_version);

create index fk_org_node_1
    on history_octane.org_node (on_account_pid);

create index fk_org_node_2
    on history_octane.org_node (on_org_node_tree_pid);

create index fk_org_node_3
    on history_octane.org_node (on_lender_user_pid);

create index fkt_on_org_node_type
    on history_octane.org_node (on_org_node_type);

create index idx_org_node__etl_batch_id
    on history_octane.org_node (etl_batch_id);

grant select on history_octane.org_node to readonly;

grant insert, select, update on history_octane.org_node to etl_loan;

create table history_octane.org_node_lender_user
(
    onlu_pid bigint,
    onlu_version integer,
    onlu_org_node_pid bigint,
    onlu_lender_user_pid bigint,
    onlu_from_date date,
    onlu_through_date date,
    onlu_org_node_lender_user_type varchar(128),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.org_node_lender_user owner to deployer;

create index idx_org_node_lender_user__pid
    on history_octane.org_node_lender_user (onlu_pid);

create index idx_org_node_lender_user__data_source_updated_datetime
    on history_octane.org_node_lender_user (data_source_updated_datetime);

create index idx_org_node_lender_user__data_source_deleted_flag
    on history_octane.org_node_lender_user (data_source_deleted_flag);

create index idx_org_node_lender_user__pid_version
    on history_octane.org_node_lender_user (onlu_pid, onlu_version);

create index fk_org_node_lender_user_1
    on history_octane.org_node_lender_user (onlu_org_node_pid);

create index fk_org_node_lender_user_2
    on history_octane.org_node_lender_user (onlu_lender_user_pid);

create index fkt_onlu_org_node_lender_user_type
    on history_octane.org_node_lender_user (onlu_org_node_lender_user_type);

create index idx_org_node_lender_user__etl_batch_id
    on history_octane.org_node_lender_user (etl_batch_id);

grant select on history_octane.org_node_lender_user to readonly;

grant insert, select, update on history_octane.org_node_lender_user to etl_loan;

create table history_octane.org_node_version
(
    onv_pid bigint,
    onv_version integer,
    onv_org_node_pid bigint,
    onv_parent_org_node_pid bigint,
    onv_from_date date,
    onv_through_date date,
    onv_org_node_name varchar(256),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.org_node_version owner to deployer;

create index idx_org_node_version__pid
    on history_octane.org_node_version (onv_pid);

create index idx_org_node_version__data_source_updated_datetime
    on history_octane.org_node_version (data_source_updated_datetime);

create index idx_org_node_version__data_source_deleted_flag
    on history_octane.org_node_version (data_source_deleted_flag);

create index idx_org_node_version__pid_version
    on history_octane.org_node_version (onv_pid, onv_version);

create index fk_org_node_version_1
    on history_octane.org_node_version (onv_org_node_pid);

create index fk_org_node_version_2
    on history_octane.org_node_version (onv_parent_org_node_pid);

create index idx_org_node_version__etl_batch_id
    on history_octane.org_node_version (etl_batch_id);

grant select on history_octane.org_node_version to readonly;

grant insert, select, update on history_octane.org_node_version to etl_loan;

create table history_octane.ledger_book_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.ledger_book_type owner to deployer;

create index idx_ledger_book_type__data_source_updated_datetime
    on history_octane.ledger_book_type (data_source_updated_datetime);

create index idx_ledger_book_type__data_source_deleted_flag
    on history_octane.ledger_book_type (data_source_deleted_flag);

create index idx_ledger_book_type__etl_batch_id
    on history_octane.ledger_book_type (etl_batch_id);

grant select on history_octane.ledger_book_type to readonly;

grant insert, select, update on history_octane.ledger_book_type to etl_loan;

create table history_octane.ledger_book_status_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.ledger_book_status_type owner to deployer;

create index idx_ledger_book_status_type__data_source_updated_datetime
    on history_octane.ledger_book_status_type (data_source_updated_datetime);

create index idx_ledger_book_status_type__data_source_deleted_flag
    on history_octane.ledger_book_status_type (data_source_deleted_flag);

create index idx_ledger_book_status_type__etl_batch_id
    on history_octane.ledger_book_status_type (etl_batch_id);

grant select on history_octane.ledger_book_status_type to readonly;

grant insert, select, update on history_octane.ledger_book_status_type to etl_loan;

create table history_octane.ledger_book
(
    lbk_pid bigint,
    lbk_version integer,
    lbk_ledger_book_id varchar(16),
    lbk_account_pid bigint,
    lbk_ledger_book_type varchar(128),
    lbk_period_from_date date,
    lbk_period_through_date date,
    lbk_payroll_pay_date date,
    lbk_ledger_book_status_type varchar(128),
    lbk_closed_by_lender_user_pid bigint,
    lbk_closed_by_unparsed_name varchar(128),
    lbk_processed_by_lender_user_pid bigint,
    lbk_processed_by_unparsed_name varchar(128),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.ledger_book owner to deployer;

create index idx_ledger_book__pid
    on history_octane.ledger_book (lbk_pid);

create index idx_ledger_book__data_source_updated_datetime
    on history_octane.ledger_book (data_source_updated_datetime);

create index idx_ledger_book__data_source_deleted_flag
    on history_octane.ledger_book (data_source_deleted_flag);

create index idx_ledger_book__pid_version
    on history_octane.ledger_book (lbk_pid, lbk_version);

create index fk_ledger_book_1
    on history_octane.ledger_book (lbk_account_pid);

create index fkt_lbk_ledger_book_type
    on history_octane.ledger_book (lbk_ledger_book_type);

create index fkt_lbk_ledger_book_status_type
    on history_octane.ledger_book (lbk_ledger_book_status_type);

create index fk_ledger_book_2
    on history_octane.ledger_book (lbk_closed_by_lender_user_pid);

create index fk_ledger_book_3
    on history_octane.ledger_book (lbk_processed_by_lender_user_pid);

create index idx_ledger_book_1
    on history_octane.ledger_book (lbk_period_from_date);

create index idx_ledger_book_2
    on history_octane.ledger_book (lbk_period_through_date);

create index idx_ledger_book__etl_batch_id
    on history_octane.ledger_book (etl_batch_id);

grant select on history_octane.ledger_book to readonly;

grant insert, select, update on history_octane.ledger_book to etl_loan;

create table history_octane.org_lineage
(
    ol_pid bigint,
    ol_version integer,
    ol_lender_user_pid bigint,
    ol_org_lineage_pretty_text varchar(16000),
    ol_org_node_pid bigint,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.org_lineage owner to deployer;

create index idx_org_lineage__pid
    on history_octane.org_lineage (ol_pid);

create index idx_org_lineage__data_source_updated_datetime
    on history_octane.org_lineage (data_source_updated_datetime);

create index idx_org_lineage__data_source_deleted_flag
    on history_octane.org_lineage (data_source_deleted_flag);

create index idx_org_lineage__pid_version
    on history_octane.org_lineage (ol_pid, ol_version);

create index fk_org_lineage_1
    on history_octane.org_lineage (ol_lender_user_pid);

create index fk_org_lineage_2
    on history_octane.org_lineage (ol_org_node_pid);

create index idx_org_lineage__etl_batch_id
    on history_octane.org_lineage (etl_batch_id);

grant select on history_octane.org_lineage to readonly;

grant insert, select, update on history_octane.org_lineage to etl_loan;

create table history_octane.org_lineage_node
(
    oln_pid bigint,
    oln_version integer,
    oln_org_lineage_pid bigint,
    oln_org_node_pid bigint,
    oln_org_node_ordinal integer,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.org_lineage_node owner to deployer;

create index idx_org_lineage_node__pid
    on history_octane.org_lineage_node (oln_pid);

create index idx_org_lineage_node__data_source_updated_datetime
    on history_octane.org_lineage_node (data_source_updated_datetime);

create index idx_org_lineage_node__data_source_deleted_flag
    on history_octane.org_lineage_node (data_source_deleted_flag);

create index idx_org_lineage_node__pid_version
    on history_octane.org_lineage_node (oln_pid, oln_version);

create index fk_org_lineage_node_1
    on history_octane.org_lineage_node (oln_org_lineage_pid);

create index fk_org_lineage_node_2
    on history_octane.org_lineage_node (oln_org_node_pid);

create index idx_org_lineage_node__etl_batch_id
    on history_octane.org_lineage_node (etl_batch_id);

grant select on history_octane.org_lineage_node to readonly;

grant insert, select, update on history_octane.org_lineage_node to etl_loan;

create table history_octane.loan_org_lineage_source_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.loan_org_lineage_source_type owner to deployer;

create index idx_loan_org_lineage_source_type__data_source_updated_datetime
    on history_octane.loan_org_lineage_source_type (data_source_updated_datetime);

create index idx_loan_org_lineage_source_type__data_source_deleted_flag
    on history_octane.loan_org_lineage_source_type (data_source_deleted_flag);

create index idx_loan_org_lineage_source_type__etl_batch_id
    on history_octane.loan_org_lineage_source_type (etl_batch_id);

grant select on history_octane.loan_org_lineage_source_type to readonly;

grant insert, select, update on history_octane.loan_org_lineage_source_type to etl_loan;

create table history_octane.loan_org_lineage
(
    lol_pid bigint,
    lol_version integer,
    lol_loan_pid bigint,
    lol_org_lineage_pid bigint,
    lol_loan_org_lineage_source_type varchar(128),
    lol_source_date date,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.loan_org_lineage owner to deployer;

create index idx_loan_org_lineage__pid
    on history_octane.loan_org_lineage (lol_pid);

create index idx_loan_org_lineage__data_source_updated_datetime
    on history_octane.loan_org_lineage (data_source_updated_datetime);

create index idx_loan_org_lineage__data_source_deleted_flag
    on history_octane.loan_org_lineage (data_source_deleted_flag);

create index idx_loan_org_lineage__pid_version
    on history_octane.loan_org_lineage (lol_pid, lol_version);

create index fk_loan_org_lineage_1
    on history_octane.loan_org_lineage (lol_loan_pid);

create index fk_loan_org_lineage_2
    on history_octane.loan_org_lineage (lol_org_lineage_pid);

create index fkt_lol_loan_org_lineage_source_type
    on history_octane.loan_org_lineage (lol_loan_org_lineage_source_type);

create index idx_loan_org_lineage__etl_batch_id
    on history_octane.loan_org_lineage (etl_batch_id);

grant select on history_octane.loan_org_lineage to readonly;

grant insert, select, update on history_octane.loan_org_lineage to etl_loan;

create table history_octane.loan_org_lineage_update
(
    lolu_pid bigint,
    lolu_version integer,
    lolu_loan_pid bigint,
    lolu_scheduled_date date,
    lolu_try_count integer,
    lolu_latest_exception_message varchar(16000),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.loan_org_lineage_update owner to deployer;

create index idx_loan_org_lineage_update__pid
    on history_octane.loan_org_lineage_update (lolu_pid);

create index idx_loan_org_lineage_update__data_source_updated_datetime
    on history_octane.loan_org_lineage_update (data_source_updated_datetime);

create index idx_loan_org_lineage_update__data_source_deleted_flag
    on history_octane.loan_org_lineage_update (data_source_deleted_flag);

create index idx_loan_org_lineage_update__pid_version
    on history_octane.loan_org_lineage_update (lolu_pid, lolu_version);

create index fk_loan_org_lineage_update_1
    on history_octane.loan_org_lineage_update (lolu_loan_pid);

create index idx_loan_org_lineage_update__etl_batch_id
    on history_octane.loan_org_lineage_update (etl_batch_id);

grant select on history_octane.loan_org_lineage_update to readonly;

grant insert, select, update on history_octane.loan_org_lineage_update to etl_loan;

create table history_octane.org_lineage_tracker
(
    olt_pid bigint,
    olt_version integer,
    olt_org_node_pid bigint,
    olt_org_lineage_pid bigint,
    olt_from_date date,
    olt_through_date date,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.org_lineage_tracker owner to deployer;

create index idx_org_lineage_tracker__pid
    on history_octane.org_lineage_tracker (olt_pid);

create index idx_org_lineage_tracker__data_source_updated_datetime
    on history_octane.org_lineage_tracker (data_source_updated_datetime);

create index idx_org_lineage_tracker__data_source_deleted_flag
    on history_octane.org_lineage_tracker (data_source_deleted_flag);

create index idx_org_lineage_tracker__pid_version
    on history_octane.org_lineage_tracker (olt_pid, olt_version);

create index fk_org_lineage_tracker_1
    on history_octane.org_lineage_tracker (olt_org_node_pid);

create index fk_org_lineage_tracker_2
    on history_octane.org_lineage_tracker (olt_org_lineage_pid);

create index idx_org_lineage_tracker_1
    on history_octane.org_lineage_tracker (olt_through_date);

create index idx_org_lineage_tracker__etl_batch_id
    on history_octane.org_lineage_tracker (etl_batch_id);

grant select on history_octane.org_lineage_tracker to readonly;

grant insert, select, update on history_octane.org_lineage_tracker to etl_loan;

create table history_octane.ledger_entry_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    general_ledger_code varchar(8),
    etl_batch_id text
);

alter table history_octane.ledger_entry_type owner to deployer;

create index idx_ledger_entry_type__data_source_updated_datetime
    on history_octane.ledger_entry_type (data_source_updated_datetime);

create index idx_ledger_entry_type__data_source_deleted_flag
    on history_octane.ledger_entry_type (data_source_deleted_flag);

create index idx_ledger_entry_type__etl_batch_id
    on history_octane.ledger_entry_type (etl_batch_id);

grant select on history_octane.ledger_entry_type to readonly;

grant insert, select, update on history_octane.ledger_entry_type to etl_loan;

create table history_octane.ledger_entry_source_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.ledger_entry_source_type owner to deployer;

create index idx_ledger_entry_source_type__data_source_updated_datetime
    on history_octane.ledger_entry_source_type (data_source_updated_datetime);

create index idx_ledger_entry_source_type__data_source_deleted_flag
    on history_octane.ledger_entry_source_type (data_source_deleted_flag);

create index idx_ledger_entry_source_type__etl_batch_id
    on history_octane.ledger_entry_source_type (etl_batch_id);

grant select on history_octane.ledger_entry_source_type to readonly;

grant insert, select, update on history_octane.ledger_entry_source_type to etl_loan;

create table history_octane.ledger_entry_decision_status_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.ledger_entry_decision_status_type owner to deployer;

create index idx_3d9e96ccd54e9093244f074bdd4a13ca
    on history_octane.ledger_entry_decision_status_type (data_source_updated_datetime);

create index idx_ledger_entry_decision_status_type__data_source_deleted_flag
    on history_octane.ledger_entry_decision_status_type (data_source_deleted_flag);

create index idx_ledger_entry_decision_status_type__etl_batch_id
    on history_octane.ledger_entry_decision_status_type (etl_batch_id);

grant select on history_octane.ledger_entry_decision_status_type to readonly;

grant insert, select, update on history_octane.ledger_entry_decision_status_type to etl_loan;

create table history_octane.ledger_entry
(
    le_pid bigint,
    le_version integer,
    le_account_pid bigint,
    le_ledger_entry_type varchar(128),
    le_ledger_entry_source_type varchar(128),
    le_estimate boolean,
    le_ledger_entry_decision_status_type varchar(128),
    le_create_datetime timestamp,
    le_entry_amount numeric(15,2),
    le_source_org_node_pid bigint,
    le_payee_org_node_pid bigint,
    le_payee_org_lineage_pid bigint,
    le_source_org_lineage_pid bigint,
    le_org_lineage_source_date date,
    le_deal_pid bigint,
    le_loan_position_type varchar(128),
    le_los_loan_id bigint,
    le_notes text,
    le_monthly_ledger_book_pid bigint,
    le_payroll_ledger_book_pid bigint,
    le_ledger_book_datetime timestamp,
    le_expense_date date,
    le_reversal boolean,
    le_passthrough boolean,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    le_smart_ledger_plan_case_version_pid bigint,
    le_synthetic_unique varchar(32),
    etl_batch_id text
);

alter table history_octane.ledger_entry owner to deployer;

create index idx_ledger_entry__pid
    on history_octane.ledger_entry (le_pid);

create index idx_ledger_entry__data_source_updated_datetime
    on history_octane.ledger_entry (data_source_updated_datetime);

create index idx_ledger_entry__data_source_deleted_flag
    on history_octane.ledger_entry (data_source_deleted_flag);

create index idx_ledger_entry__pid_version
    on history_octane.ledger_entry (le_pid, le_version);

create index fk_ledger_entry_1
    on history_octane.ledger_entry (le_account_pid);

create index fk_ledger_entry_2
    on history_octane.ledger_entry (le_source_org_node_pid);

create index fk_ledger_entry_3
    on history_octane.ledger_entry (le_payee_org_node_pid);

create index fk_ledger_entry_4
    on history_octane.ledger_entry (le_deal_pid);

create index fk_ledger_entry_5
    on history_octane.ledger_entry (le_monthly_ledger_book_pid);

create index fk_ledger_entry_6
    on history_octane.ledger_entry (le_payroll_ledger_book_pid);

create index fk_ledger_entry_7
    on history_octane.ledger_entry (le_payee_org_lineage_pid);

create index fk_ledger_entry_8
    on history_octane.ledger_entry (le_source_org_lineage_pid);

create index fkt_le_ledger_entry_type
    on history_octane.ledger_entry (le_ledger_entry_type);

create index fkt_le_ledger_entry_source_type
    on history_octane.ledger_entry (le_ledger_entry_source_type);

create index fkt_le_ledger_entry_decision_status_type
    on history_octane.ledger_entry (le_ledger_entry_decision_status_type);

create index fkt_le_loan_position_type
    on history_octane.ledger_entry (le_loan_position_type);

create index idx_ledger_entry_1
    on history_octane.ledger_entry (le_los_loan_id);

create index idx_ledger_entry_2
    on history_octane.ledger_entry (le_expense_date);

create index fk_ledger_entry_9
    on history_octane.ledger_entry (le_smart_ledger_plan_case_version_pid);

create index idx_ledger_entry__etl_batch_id
    on history_octane.ledger_entry (etl_batch_id);

grant select on history_octane.ledger_entry to readonly;

grant insert, select, update on history_octane.ledger_entry to etl_loan;

create table history_octane.smart_ledger_plan_case_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.smart_ledger_plan_case_type owner to deployer;

create index idx_smart_ledger_plan_case_type__data_source_updated_datetime
    on history_octane.smart_ledger_plan_case_type (data_source_updated_datetime);

create index idx_smart_ledger_plan_case_type__data_source_deleted_flag
    on history_octane.smart_ledger_plan_case_type (data_source_deleted_flag);

create index idx_smart_ledger_plan_case_type__etl_batch_id
    on history_octane.smart_ledger_plan_case_type (etl_batch_id);

grant select on history_octane.smart_ledger_plan_case_type to readonly;

grant insert, select, update on history_octane.smart_ledger_plan_case_type to etl_loan;

create table history_octane.smart_ledger_plan_case_level_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.smart_ledger_plan_case_level_type owner to deployer;

create index idx_a34c005547324f8b20c957db1ad3c470
    on history_octane.smart_ledger_plan_case_level_type (data_source_updated_datetime);

create index idx_smart_ledger_plan_case_level_type__data_source_deleted_flag
    on history_octane.smart_ledger_plan_case_level_type (data_source_deleted_flag);

create index idx_smart_ledger_plan_case_level_type__etl_batch_id
    on history_octane.smart_ledger_plan_case_level_type (etl_batch_id);

grant select on history_octane.smart_ledger_plan_case_level_type to readonly;

grant insert, select, update on history_octane.smart_ledger_plan_case_level_type to etl_loan;

create table history_octane.smart_ledger_pay_frequency_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.smart_ledger_pay_frequency_type owner to deployer;

create index idx_9a46752fc13b75a1353a74c27c86c0d2
    on history_octane.smart_ledger_pay_frequency_type (data_source_updated_datetime);

create index idx_smart_ledger_pay_frequency_type__data_source_deleted_flag
    on history_octane.smart_ledger_pay_frequency_type (data_source_deleted_flag);

create index idx_smart_ledger_pay_frequency_type__etl_batch_id
    on history_octane.smart_ledger_pay_frequency_type (etl_batch_id);

grant select on history_octane.smart_ledger_pay_frequency_type to readonly;

grant insert, select, update on history_octane.smart_ledger_pay_frequency_type to etl_loan;

create table history_octane.ledger_basis_points_input_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.ledger_basis_points_input_type owner to deployer;

create index idx_71d0f333b990d74f533d8c4b6d9892a3
    on history_octane.ledger_basis_points_input_type (data_source_updated_datetime);

create index idx_ledger_basis_points_input_type__data_source_deleted_flag
    on history_octane.ledger_basis_points_input_type (data_source_deleted_flag);

create index idx_ledger_basis_points_input_type__etl_batch_id
    on history_octane.ledger_basis_points_input_type (etl_batch_id);

grant select on history_octane.ledger_basis_points_input_type to readonly;

grant insert, select, update on history_octane.ledger_basis_points_input_type to etl_loan;

create table history_octane.smart_ledger_plan_case_group_calculation_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.smart_ledger_plan_case_group_calculation_type owner to deployer;

create index idx_02662e83c74fe22ebcf1ecc06082f958
    on history_octane.smart_ledger_plan_case_group_calculation_type (data_source_updated_datetime);

create index idx_8e4429a53cae2c3208b0f52d65355501
    on history_octane.smart_ledger_plan_case_group_calculation_type (data_source_deleted_flag);

create index idx_smart_ledger_plan_case_group_calculation_type__etl_batch_id
    on history_octane.smart_ledger_plan_case_group_calculation_type (etl_batch_id);

grant select on history_octane.smart_ledger_plan_case_group_calculation_type to readonly;

grant insert, select, update on history_octane.smart_ledger_plan_case_group_calculation_type to etl_loan;

create table history_octane.smart_ledger_plan
(
    slp_pid bigint,
    slp_version integer,
    slp_account_pid bigint,
    slp_org_node_pid bigint,
    slp_plan_name varchar(128),
    slp_plan_id bigint,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.smart_ledger_plan owner to deployer;

create index idx_smart_ledger_plan__pid
    on history_octane.smart_ledger_plan (slp_pid);

create index idx_smart_ledger_plan__data_source_updated_datetime
    on history_octane.smart_ledger_plan (data_source_updated_datetime);

create index idx_smart_ledger_plan__data_source_deleted_flag
    on history_octane.smart_ledger_plan (data_source_deleted_flag);

create index idx_smart_ledger_plan__pid_version
    on history_octane.smart_ledger_plan (slp_pid, slp_version);

create index fk_smart_ledger_plan_1
    on history_octane.smart_ledger_plan (slp_account_pid);

create index fk_smart_ledger_plan_2
    on history_octane.smart_ledger_plan (slp_org_node_pid);

create index idx_smart_ledger_plan__etl_batch_id
    on history_octane.smart_ledger_plan (etl_batch_id);

grant select on history_octane.smart_ledger_plan to readonly;

grant insert, select, update on history_octane.smart_ledger_plan to etl_loan;

create table history_octane.smart_ledger_plan_case_group
(
    slpcg_pid bigint,
    slpcg_version integer,
    slpcg_account_pid bigint,
    slpcg_smart_ledger_plan_pid bigint,
    slpcg_group_name varchar(128),
    slpcg_group_id bigint,
    slpcg_payer_org_node_pid bigint,
    slpcg_smart_ledger_plan_case_group_calculation_type varchar(128),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.smart_ledger_plan_case_group owner to deployer;

create index idx_smart_ledger_plan_case_group__pid
    on history_octane.smart_ledger_plan_case_group (slpcg_pid);

create index idx_smart_ledger_plan_case_group__data_source_updated_datetime
    on history_octane.smart_ledger_plan_case_group (data_source_updated_datetime);

create index idx_smart_ledger_plan_case_group__data_source_deleted_flag
    on history_octane.smart_ledger_plan_case_group (data_source_deleted_flag);

create index idx_smart_ledger_plan_case_group__pid_version
    on history_octane.smart_ledger_plan_case_group (slpcg_pid, slpcg_version);

create index fk_smart_ledger_plan_case_group_1
    on history_octane.smart_ledger_plan_case_group (slpcg_account_pid);

create index fk_smart_ledger_plan_case_group_2
    on history_octane.smart_ledger_plan_case_group (slpcg_smart_ledger_plan_pid);

create index fk_smart_ledger_plan_case_group_3
    on history_octane.smart_ledger_plan_case_group (slpcg_payer_org_node_pid);

create index fkt_slpcg_smart_ledger_plan_case_group_calculation_type
    on history_octane.smart_ledger_plan_case_group (slpcg_smart_ledger_plan_case_group_calculation_type);

create index idx_smart_ledger_plan_case_group__etl_batch_id
    on history_octane.smart_ledger_plan_case_group (etl_batch_id);

grant select on history_octane.smart_ledger_plan_case_group to readonly;

grant insert, select, update on history_octane.smart_ledger_plan_case_group to etl_loan;

create table history_octane.smart_ledger_plan_case
(
    slpc_pid bigint,
    slpc_version integer,
    slpc_account_pid bigint,
    slpc_smart_ledger_plan_case_group_pid bigint,
    slpc_case_id bigint,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    slpc_ordinal integer,
    etl_batch_id text
);

alter table history_octane.smart_ledger_plan_case owner to deployer;

create index idx_smart_ledger_plan_case__pid
    on history_octane.smart_ledger_plan_case (slpc_pid);

create index idx_smart_ledger_plan_case__data_source_updated_datetime
    on history_octane.smart_ledger_plan_case (data_source_updated_datetime);

create index idx_smart_ledger_plan_case__data_source_deleted_flag
    on history_octane.smart_ledger_plan_case (data_source_deleted_flag);

create index idx_smart_ledger_plan_case__pid_version
    on history_octane.smart_ledger_plan_case (slpc_pid, slpc_version);

create index fk_smart_ledger_plan_case_1
    on history_octane.smart_ledger_plan_case (slpc_account_pid);

create index fk_smart_ledger_plan_case_2
    on history_octane.smart_ledger_plan_case (slpc_smart_ledger_plan_case_group_pid);

create index idx_smart_ledger_plan_case__etl_batch_id
    on history_octane.smart_ledger_plan_case (etl_batch_id);

grant select on history_octane.smart_ledger_plan_case to readonly;

grant insert, select, update on history_octane.smart_ledger_plan_case to etl_loan;

create table history_octane.smart_ledger_plan_case_version
(
    slpcv_pid bigint,
    slpcv_version integer,
    slpcv_account_pid bigint,
    slpcv_smart_ledger_plan_case_pid bigint,
    slpcv_payer_org_node_pid bigint,
    slpcv_active boolean,
    slpcv_synthetic_unique bigint,
    slpcv_case_name varchar(128),
    slpcv_smart_ledger_plan_case_type varchar(128),
    slpcv_smart_ledger_plan_case_level_type varchar(128),
    slpcv_smart_ledger_pay_frequency_type varchar(128),
    slpcv_from_date date,
    slpcv_through_date date,
    slpcv_base_amount numeric(15,2),
    slpcv_basis_points integer,
    slpcv_min_amount numeric(15,2),
    slpcv_max_amount numeric(15,2),
    slpcv_ledger_basis_points_input_type varchar(128),
    slpcv_criteria_pid bigint,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text,
    slpcv_last_modified_by varchar(128),
    slpcv_last_modified_datetime timestamp
);

alter table history_octane.smart_ledger_plan_case_version owner to deployer;

create index idx_smart_ledger_plan_case_version__pid
    on history_octane.smart_ledger_plan_case_version (slpcv_pid);

create index idx_951450892b51c83b1f0c3254d5593a50
    on history_octane.smart_ledger_plan_case_version (data_source_updated_datetime);

create index idx_smart_ledger_plan_case_version__data_source_deleted_flag
    on history_octane.smart_ledger_plan_case_version (data_source_deleted_flag);

create index idx_smart_ledger_plan_case_version__pid_version
    on history_octane.smart_ledger_plan_case_version (slpcv_pid, slpcv_version);

create index fk_smart_ledger_plan_case_version_1
    on history_octane.smart_ledger_plan_case_version (slpcv_account_pid);

create index fk_smart_ledger_plan_case_version_2
    on history_octane.smart_ledger_plan_case_version (slpcv_smart_ledger_plan_case_pid);

create index fk_smart_ledger_plan_case_version_3
    on history_octane.smart_ledger_plan_case_version (slpcv_payer_org_node_pid);

create index fk_smart_ledger_plan_case_version_4
    on history_octane.smart_ledger_plan_case_version (slpcv_criteria_pid);

create index fkt_slpcv_smart_ledger_plan_case_type
    on history_octane.smart_ledger_plan_case_version (slpcv_smart_ledger_plan_case_type);

create index fkt_slpcv_smart_ledger_plan_case_level_type
    on history_octane.smart_ledger_plan_case_version (slpcv_smart_ledger_plan_case_level_type);

create index fkt_slpcv_smart_ledger_pay_frequency_type
    on history_octane.smart_ledger_plan_case_version (slpcv_smart_ledger_pay_frequency_type);

create index fkt_slpcv_ledger_basis_points_input_type
    on history_octane.smart_ledger_plan_case_version (slpcv_ledger_basis_points_input_type);

create index idx_smart_ledger_plan_case_version_1
    on history_octane.smart_ledger_plan_case_version (slpcv_from_date);

create index idx_smart_ledger_plan_case_version_2
    on history_octane.smart_ledger_plan_case_version (slpcv_through_date);

create index idx_smart_ledger_plan_case_version__etl_batch_id
    on history_octane.smart_ledger_plan_case_version (etl_batch_id);

grant select on history_octane.smart_ledger_plan_case_version to readonly;

grant insert, select, update on history_octane.smart_ledger_plan_case_version to etl_loan;

create table history_octane.ledger_entry_review_status_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.ledger_entry_review_status_type owner to deployer;

create index idx_27d9b17a99a0c2403ff9452b2d69d606
    on history_octane.ledger_entry_review_status_type (data_source_updated_datetime);

create index idx_ledger_entry_review_status_type__data_source_deleted_flag
    on history_octane.ledger_entry_review_status_type (data_source_deleted_flag);

create index idx_ledger_entry_review_status_type__etl_batch_id
    on history_octane.ledger_entry_review_status_type (etl_batch_id);

grant select on history_octane.ledger_entry_review_status_type to readonly;

grant insert, select, update on history_octane.ledger_entry_review_status_type to etl_loan;

create table history_octane.ledger_entry_review_reason_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.ledger_entry_review_reason_type owner to deployer;

create index idx_6d61308402d86b4d633d7973c1efe648
    on history_octane.ledger_entry_review_reason_type (data_source_updated_datetime);

create index idx_ledger_entry_review_reason_type__data_source_deleted_flag
    on history_octane.ledger_entry_review_reason_type (data_source_deleted_flag);

create index idx_ledger_entry_review_reason_type__etl_batch_id
    on history_octane.ledger_entry_review_reason_type (etl_batch_id);

grant select on history_octane.ledger_entry_review_reason_type to readonly;

grant insert, select, update on history_octane.ledger_entry_review_reason_type to etl_loan;

create table history_octane.ledger_entry_review
(
    ler_pid bigint,
    ler_version integer,
    ler_account_pid bigint,
    ler_deal_pid bigint,
    ler_org_node_pid bigint,
    ler_ledger_entry_pid bigint,
    ler_ledger_entry_review_reason_type varchar(128),
    ler_ledger_entry_review_status_type varchar(128),
    ler_request_by_lender_user_pid bigint,
    ler_request_datetime timestamp,
    ler_review_by_lender_user_pid bigint,
    ler_review_datetime timestamp,
    ler_ledger_entry_type varchar(128),
    ler_entry_amount numeric(15,2),
    ler_loan_position_type varchar(128),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.ledger_entry_review owner to deployer;

create index idx_ledger_entry_review__pid
    on history_octane.ledger_entry_review (ler_pid);

create index idx_ledger_entry_review__data_source_updated_datetime
    on history_octane.ledger_entry_review (data_source_updated_datetime);

create index idx_ledger_entry_review__data_source_deleted_flag
    on history_octane.ledger_entry_review (data_source_deleted_flag);

create index idx_ledger_entry_review__pid_version
    on history_octane.ledger_entry_review (ler_pid, ler_version);

create index fk_ledger_entry_review_1
    on history_octane.ledger_entry_review (ler_account_pid);

create index fk_ledger_entry_review_2
    on history_octane.ledger_entry_review (ler_deal_pid);

create index fk_ledger_entry_review_3
    on history_octane.ledger_entry_review (ler_org_node_pid);

create index fk_ledger_entry_review_4
    on history_octane.ledger_entry_review (ler_ledger_entry_pid);

create index fk_ledger_entry_review_5
    on history_octane.ledger_entry_review (ler_request_by_lender_user_pid);

create index fk_ledger_entry_review_6
    on history_octane.ledger_entry_review (ler_review_by_lender_user_pid);

create index fkt_ler_ledger_entry_review_reason_type
    on history_octane.ledger_entry_review (ler_ledger_entry_review_reason_type);

create index fkt_ler_ledger_entry_review_status_type
    on history_octane.ledger_entry_review (ler_ledger_entry_review_status_type);

create index fkt_ler_ledger_entry_type
    on history_octane.ledger_entry_review (ler_ledger_entry_type);

create index fkt_ler_loan_position_type
    on history_octane.ledger_entry_review (ler_loan_position_type);

create index idx_ledger_entry_review__etl_batch_id
    on history_octane.ledger_entry_review (etl_batch_id);

grant select on history_octane.ledger_entry_review to readonly;

grant insert, select, update on history_octane.ledger_entry_review to etl_loan;

create table history_octane.ledger_entry_review_note
(
    lern_pid bigint,
    lern_version integer,
    lern_ledger_entry_review_pid bigint,
    lern_create_datetime timestamp,
    lern_content varchar(16000),
    lern_author_lender_user_pid bigint,
    lern_author_unparsed_name varchar(128),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.ledger_entry_review_note owner to deployer;

create index idx_ledger_entry_review_note__pid
    on history_octane.ledger_entry_review_note (lern_pid);

create index idx_ledger_entry_review_note__data_source_updated_datetime
    on history_octane.ledger_entry_review_note (data_source_updated_datetime);

create index idx_ledger_entry_review_note__data_source_deleted_flag
    on history_octane.ledger_entry_review_note (data_source_deleted_flag);

create index idx_ledger_entry_review_note__pid_version
    on history_octane.ledger_entry_review_note (lern_pid, lern_version);

create index fk_ledger_entry_review_note_1
    on history_octane.ledger_entry_review_note (lern_ledger_entry_review_pid);

create index fk_ledger_entry_review_note_2
    on history_octane.ledger_entry_review_note (lern_author_lender_user_pid);

create index idx_ledger_entry_review_note__etl_batch_id
    on history_octane.ledger_entry_review_note (etl_batch_id);

grant select on history_octane.ledger_entry_review_note to readonly;

grant insert, select, update on history_octane.ledger_entry_review_note to etl_loan;

create table history_octane.ledger_entry_review_note_comment
(
    lerc_pid bigint,
    lerc_version integer,
    lerc_ledger_entry_review_note_pid bigint,
    lerc_create_datetime timestamp,
    lerc_content varchar(16000),
    lerc_author_lender_user_pid bigint,
    lerc_author_unparsed_name varchar(128),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.ledger_entry_review_note_comment owner to deployer;

create index idx_ledger_entry_review_note_comment__pid
    on history_octane.ledger_entry_review_note_comment (lerc_pid);

create index idx_f0c9d2f5b59733b0123d31f9dcdf36e7
    on history_octane.ledger_entry_review_note_comment (data_source_updated_datetime);

create index idx_ledger_entry_review_note_comment__data_source_deleted_flag
    on history_octane.ledger_entry_review_note_comment (data_source_deleted_flag);

create index idx_ledger_entry_review_note_comment__pid_version
    on history_octane.ledger_entry_review_note_comment (lerc_pid, lerc_version);

create index fk_ledger_entry_review_note_comment_1
    on history_octane.ledger_entry_review_note_comment (lerc_ledger_entry_review_note_pid);

create index fk_ledger_entry_review_note_comment_2
    on history_octane.ledger_entry_review_note_comment (lerc_author_lender_user_pid);

create index idx_ledger_entry_review_note_comment__etl_batch_id
    on history_octane.ledger_entry_review_note_comment (etl_batch_id);

grant select on history_octane.ledger_entry_review_note_comment to readonly;

grant insert, select, update on history_octane.ledger_entry_review_note_comment to etl_loan;

create table history_octane.ledger_entry_review_note_monitor
(
    lerm_pid bigint,
    lerm_version integer,
    lerm_ledger_entry_review_note_pid bigint,
    lerm_lender_user_pid bigint,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.ledger_entry_review_note_monitor owner to deployer;

create index idx_ledger_entry_review_note_monitor__pid
    on history_octane.ledger_entry_review_note_monitor (lerm_pid);

create index idx_be5ae612199a1a8f8d08138db0066475
    on history_octane.ledger_entry_review_note_monitor (data_source_updated_datetime);

create index idx_ledger_entry_review_note_monitor__data_source_deleted_flag
    on history_octane.ledger_entry_review_note_monitor (data_source_deleted_flag);

create index idx_ledger_entry_review_note_monitor__pid_version
    on history_octane.ledger_entry_review_note_monitor (lerm_pid, lerm_version);

create index fk_ledger_entry_review_note_monitor_1
    on history_octane.ledger_entry_review_note_monitor (lerm_ledger_entry_review_note_pid);

create index fk_ledger_entry_review_note_monitor_2
    on history_octane.ledger_entry_review_note_monitor (lerm_lender_user_pid);

create index idx_ledger_entry_review_note_monitor__etl_batch_id
    on history_octane.ledger_entry_review_note_monitor (etl_batch_id);

grant select on history_octane.ledger_entry_review_note_monitor to readonly;

grant insert, select, update on history_octane.ledger_entry_review_note_monitor to etl_loan;

create table history_octane.ledger_entry_import_status_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.ledger_entry_import_status_type owner to deployer;

create index idx_ecfc4e98ffd28a6326417fdef1c09fe1
    on history_octane.ledger_entry_import_status_type (data_source_updated_datetime);

create index idx_ledger_entry_import_status_type__data_source_deleted_flag
    on history_octane.ledger_entry_import_status_type (data_source_deleted_flag);

create index idx_ledger_entry_import_status_type__etl_batch_id
    on history_octane.ledger_entry_import_status_type (etl_batch_id);

grant select on history_octane.ledger_entry_import_status_type to readonly;

grant insert, select, update on history_octane.ledger_entry_import_status_type to etl_loan;

create table history_octane.ledger_entry_import_status
(
    leis_pid bigint,
    leis_version integer,
    leis_account_pid bigint,
    leis_batch_id varchar(128),
    leis_batch_name varchar(128),
    leis_requester_lender_user_pid bigint,
    leis_submit_datetime timestamp,
    leis_complete_datetime timestamp,
    leis_entry_count integer,
    leis_ledger_entry_import_status_type varchar(128),
    leis_failure_info varchar(16000),
    leis_raw_header_row varchar(16000),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.ledger_entry_import_status owner to deployer;

create index idx_ledger_entry_import_status__pid
    on history_octane.ledger_entry_import_status (leis_pid);

create index idx_ledger_entry_import_status__data_source_updated_datetime
    on history_octane.ledger_entry_import_status (data_source_updated_datetime);

create index idx_ledger_entry_import_status__data_source_deleted_flag
    on history_octane.ledger_entry_import_status (data_source_deleted_flag);

create index idx_ledger_entry_import_status__pid_version
    on history_octane.ledger_entry_import_status (leis_pid, leis_version);

create index fk_ledger_entry_import_status_1
    on history_octane.ledger_entry_import_status (leis_account_pid);

create index fk_ledger_entry_import_status_2
    on history_octane.ledger_entry_import_status (leis_requester_lender_user_pid);

create index fkt_leis_ledger_entry_import_status_type
    on history_octane.ledger_entry_import_status (leis_ledger_entry_import_status_type);

create index idx_ledger_entry_import_status__etl_batch_id
    on history_octane.ledger_entry_import_status (etl_batch_id);

grant select on history_octane.ledger_entry_import_status to readonly;

grant insert, select, update on history_octane.ledger_entry_import_status to etl_loan;

create table history_octane.ledger_entry_import_loan_status
(
    leils_pid bigint,
    leils_version integer,
    leils_ledger_entry_import_status_pid bigint,
    leils_ledger_entry_pid bigint,
    leils_los_loan_id varchar(32),
    leils_payee_unparsed_name varchar(128),
    leils_entry_amount numeric(15,2),
    leils_entry_description varchar(1024),
    leils_start_datetime timestamp,
    leils_complete_datetime timestamp,
    leils_ledger_entry_import_status_type varchar(128),
    leils_failure_info varchar(16000),
    leils_raw_row varchar(16000),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text,
    leils_row_number integer
);

alter table history_octane.ledger_entry_import_loan_status owner to deployer;

create index idx_ledger_entry_import_loan_status__pid
    on history_octane.ledger_entry_import_loan_status (leils_pid);

create index idx_e1c9b9f41c9f76cb0e26d8138c1d6a71
    on history_octane.ledger_entry_import_loan_status (data_source_updated_datetime);

create index idx_ledger_entry_import_loan_status__data_source_deleted_flag
    on history_octane.ledger_entry_import_loan_status (data_source_deleted_flag);

create index idx_ledger_entry_import_loan_status__pid_version
    on history_octane.ledger_entry_import_loan_status (leils_pid, leils_version);

create index fk_ledger_entry_import_loan_status_1
    on history_octane.ledger_entry_import_loan_status (leils_ledger_entry_import_status_pid);

create index fk_ledger_entry_import_loan_status_2
    on history_octane.ledger_entry_import_loan_status (leils_ledger_entry_pid);

create index fkt_leils_ledger_entry_import_status_type
    on history_octane.ledger_entry_import_loan_status (leils_ledger_entry_import_status_type);

create index idx_ledger_entry_import_loan_status__etl_batch_id
    on history_octane.ledger_entry_import_loan_status (etl_batch_id);

grant select on history_octane.ledger_entry_import_loan_status to readonly;

grant insert, select, update on history_octane.ledger_entry_import_loan_status to etl_loan;

create table history_octane.payroll_ledger_book_id_ticker
(
    plbit_pid bigint,
    plbit_version integer,
    plbit_account_pid bigint,
    plbit_year integer,
    plbit_month integer,
    plbit_period_id integer,
    plbit_revision_id integer,
    plbit_user_friendly_value varchar(16),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.payroll_ledger_book_id_ticker owner to deployer;

create index idx_payroll_ledger_book_id_ticker__pid
    on history_octane.payroll_ledger_book_id_ticker (plbit_pid);

create index idx_payroll_ledger_book_id_ticker__data_source_updated_datetime
    on history_octane.payroll_ledger_book_id_ticker (data_source_updated_datetime);

create index idx_payroll_ledger_book_id_ticker__data_source_deleted_flag
    on history_octane.payroll_ledger_book_id_ticker (data_source_deleted_flag);

create index idx_payroll_ledger_book_id_ticker__pid_version
    on history_octane.payroll_ledger_book_id_ticker (plbit_pid, plbit_version);

create index fk_payroll_ledger_book_id_ticker_1
    on history_octane.payroll_ledger_book_id_ticker (plbit_account_pid);

create index idx_payroll_ledger_book_id_ticker__etl_batch_id
    on history_octane.payroll_ledger_book_id_ticker (etl_batch_id);

grant select on history_octane.payroll_ledger_book_id_ticker to readonly;

grant insert, select, update on history_octane.payroll_ledger_book_id_ticker to etl_loan;

create table history_octane.mcr_error_status_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.mcr_error_status_type owner to deployer;

create index idx_mcr_error_status_type__data_source_updated_datetime
    on history_octane.mcr_error_status_type (data_source_updated_datetime);

create index idx_mcr_error_status_type__data_source_deleted_flag
    on history_octane.mcr_error_status_type (data_source_deleted_flag);

create index idx_mcr_error_status_type__etl_batch_id
    on history_octane.mcr_error_status_type (etl_batch_id);

grant select on history_octane.mcr_error_status_type to readonly;

grant insert, select, update on history_octane.mcr_error_status_type to etl_loan;

create table history_octane.mcr_status_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.mcr_status_type owner to deployer;

create index idx_mcr_status_type__data_source_updated_datetime
    on history_octane.mcr_status_type (data_source_updated_datetime);

create index idx_mcr_status_type__data_source_deleted_flag
    on history_octane.mcr_status_type (data_source_deleted_flag);

create index idx_mcr_status_type__etl_batch_id
    on history_octane.mcr_status_type (etl_batch_id);

grant select on history_octane.mcr_status_type to readonly;

grant insert, select, update on history_octane.mcr_status_type to etl_loan;

create table history_octane.mcr_request
(
    mcrr_pid bigint,
    mcrr_version integer,
    mcrr_account_pid bigint,
    mcrr_create_datetime timestamp,
    mcrr_start_datetime timestamp,
    mcrr_end_datetime timestamp,
    mcrr_request_status_type varchar(128),
    mcrr_request_status_messages text,
    mcrr_mcr_error_status_type varchar(128),
    mcrr_mcr_status_type varchar(128),
    mcrr_requester_unparsed_name varchar(128),
    mcrr_year integer,
    mcrr_quarter_type varchar(128),
    mcrr_mcr_xml_file_pid bigint,
    mcrr_error_csv_file_pid bigint,
    mcrr_mcr_loan_data_csv_file_pid bigint,
    mcrr_csv_input_files_zip_pid bigint,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.mcr_request owner to deployer;

create index idx_mcr_request__pid
    on history_octane.mcr_request (mcrr_pid);

create index idx_mcr_request__data_source_updated_datetime
    on history_octane.mcr_request (data_source_updated_datetime);

create index idx_mcr_request__data_source_deleted_flag
    on history_octane.mcr_request (data_source_deleted_flag);

create index idx_mcr_request__pid_version
    on history_octane.mcr_request (mcrr_pid, mcrr_version);

create index fk_mcr_request_1
    on history_octane.mcr_request (mcrr_account_pid);

create index fkt_mcrr_request_status_type
    on history_octane.mcr_request (mcrr_request_status_type);

create index fkt_mcrr_mcr_error_status_type
    on history_octane.mcr_request (mcrr_mcr_error_status_type);

create index fkt_mcrr_mcr_status_type
    on history_octane.mcr_request (mcrr_mcr_status_type);

create index fkt_mcrr_quarter_type
    on history_octane.mcr_request (mcrr_quarter_type);

create index idx_mcr_request__etl_batch_id
    on history_octane.mcr_request (etl_batch_id);

grant select on history_octane.mcr_request to readonly;

grant insert, select, update on history_octane.mcr_request to etl_loan;

create table staging_octane.construction_cost_calculation_type
(
    code varchar(128) not null
        constraint pk_construction_cost_calculation_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.construction_cost_calculation_type owner to deployer;

grant select on staging_octane.construction_cost_calculation_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.construction_cost_calculation_type to dms_octane_writer;

grant select on staging_octane.construction_cost_calculation_type to etl_loan;

create table staging_octane.proposal_hud_consultant
(
    phc_pid bigint not null
        constraint pk_proposal_hud_consultant
            primary key,
    phc_version integer,
    phc_proposal_pid bigint,
    phc_consultant_id varchar(8),
    phc_company_name varchar(128),
    phc_first_name varchar(32),
    phc_last_name varchar(32),
    phc_email varchar(256),
    phc_mobile_phone varchar(32),
    phc_office_phone varchar(32),
    phc_office_phone_extension varchar(16),
    phc_fax varchar(32),
    phc_address_street1 varchar(128),
    phc_address_street2 varchar(128),
    phc_address_city varchar(128),
    phc_address_state varchar(128),
    phc_address_postal_code varchar(128)
);

alter table staging_octane.proposal_hud_consultant owner to deployer;

create index idx_proposal_hud_consultant__pid_version
    on staging_octane.proposal_hud_consultant (phc_pid, phc_version);

grant select on staging_octane.proposal_hud_consultant to readonly;

grant delete, insert, select, truncate, update on staging_octane.proposal_hud_consultant to dms_octane_writer;

grant select on staging_octane.proposal_hud_consultant to etl_loan;

create table history_octane.construction_cost_calculation_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.construction_cost_calculation_type owner to deployer;

create index idx_7656eaa42cb0143a669e7cac89195b0b
    on history_octane.construction_cost_calculation_type (data_source_updated_datetime);

create index idx_71558683987989f155c1b9c281adf219
    on history_octane.construction_cost_calculation_type (data_source_deleted_flag);

create index idx_construction_cost_calculation_type__etl_batch_id
    on history_octane.construction_cost_calculation_type (etl_batch_id);

grant select on history_octane.construction_cost_calculation_type to readonly;

grant insert, select, update on history_octane.construction_cost_calculation_type to etl_loan;

create table history_octane.proposal_hud_consultant
(
    phc_pid bigint,
    phc_version integer,
    phc_proposal_pid bigint,
    phc_consultant_id varchar(8),
    phc_company_name varchar(128),
    phc_first_name varchar(32),
    phc_last_name varchar(32),
    phc_email varchar(256),
    phc_mobile_phone varchar(32),
    phc_office_phone varchar(32),
    phc_office_phone_extension varchar(16),
    phc_fax varchar(32),
    phc_address_street1 varchar(128),
    phc_address_street2 varchar(128),
    phc_address_city varchar(128),
    phc_address_state varchar(128),
    phc_address_postal_code varchar(128),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.proposal_hud_consultant owner to deployer;

create index idx_proposal_hud_consultant__pid
    on history_octane.proposal_hud_consultant (phc_pid);

create index idx_proposal_hud_consultant__data_source_updated_datetime
    on history_octane.proposal_hud_consultant (data_source_updated_datetime);

create index idx_proposal_hud_consultant__data_source_deleted_flag
    on history_octane.proposal_hud_consultant (data_source_deleted_flag);

create index idx_proposal_hud_consultant__pid_version
    on history_octane.proposal_hud_consultant (phc_pid, phc_version);

create index fk_proposal_hud_consultant_1
    on history_octane.proposal_hud_consultant (phc_proposal_pid);

create index idx_proposal_hud_consultant__etl_batch_id
    on history_octane.proposal_hud_consultant (etl_batch_id);

grant select on history_octane.proposal_hud_consultant to readonly;

grant insert, select, update on history_octane.proposal_hud_consultant to etl_loan;

create table staging_octane.credit_request_liability
(
    crl_pid bigint not null
        constraint pk_credit_request_liability
            primary key,
    crl_version integer,
    crl_deal_pid bigint,
    crl_credit_request_pid bigint,
    crl_credit_report_identifier varchar(32),
    crl_report_liability_type varchar(128),
    crl_report_holder_name varchar(128),
    crl_report_account_opened_date date,
    crl_account_reported_date date,
    crl_last_activity_date date,
    crl_most_recent_adverse_rating_date date,
    crl_report_monthly_payment_amount numeric(17,2),
    crl_report_remaining_term_months integer,
    crl_months_reviewed_count integer,
    crl_report_unpaid_balance_amount numeric(17,2),
    crl_report_credit_limit_amount numeric(15),
    crl_report_past_due_amount numeric(17,2),
    crl_report_terms_months_count integer,
    crl_report_liability_current_rating_type varchar(128),
    crl_report_liability_account_status_type varchar(128),
    crl_report_liability_account_ownership_type varchar(128),
    crl_consumer_dispute varchar(128),
    crl_derogatory_data varchar(128),
    crl_late_30_days_count varchar(16),
    crl_late_60_days_count varchar(16),
    crl_late_90_days_count varchar(16),
    crl_equifax_included boolean,
    crl_experian_included boolean,
    crl_trans_union_included boolean
);

alter table staging_octane.credit_request_liability owner to deployer;

create index idx_credit_request_liability__pid_version
    on staging_octane.credit_request_liability (crl_pid, crl_version);

grant select on staging_octane.credit_request_liability to readonly;

grant delete, insert, select, truncate, update on staging_octane.credit_request_liability to dms_octane_writer;

grant select on staging_octane.credit_request_liability to etl_loan;

create table staging_octane.liability_place
(
    lip_pid bigint not null
        constraint pk_liability_place
            primary key,
    lip_version integer,
    lip_liability_pid bigint,
    lip_creditor_pid bigint,
    lip_place_pid bigint,
    lip_lien_priority_type varchar(128),
    lip_liability_financing_type varchar(128),
    lip_liability_foreclosure_exception_type varchar(128),
    lip_liability_mi_type varchar(128),
    lip_original_loan_amount numeric(15),
    lip_property_taxes_escrowed boolean,
    lip_property_insurance_escrowed boolean,
    lip_senior_lien_restriction_type varchar(128),
    lip_senior_lien_restriction_amount numeric(15),
    lip_texas_equity varchar(128),
    lip_texas_equity_conversion varchar(128),
    lip_texas_equity_locked boolean,
    lip_third_party_community_second_program_pid bigint,
    lip_mortgage_delinquency_exception_type varchar(128)
);

alter table staging_octane.liability_place owner to deployer;

create index idx_liability_place__pid_version
    on staging_octane.liability_place (lip_pid, lip_version);

grant select on staging_octane.liability_place to readonly;

grant delete, insert, select, truncate, update on staging_octane.liability_place to dms_octane_writer;

grant select on staging_octane.liability_place to etl_loan;

create table staging_octane.liability_mortgage_payoff
(
    lmp_pid bigint not null
        constraint pk_liability_mortgage_payoff
            primary key,
    lmp_version integer,
    lmp_liability_pid bigint,
    lmp_interest_rate_on_statement boolean,
    lmp_interest_rate_percent numeric(11,9),
    lmp_loan_amortization_type varchar(128),
    lmp_interest_only varchar(128),
    lmp_agency_case_id varchar(32),
    lmp_payoff_statement_date date,
    lmp_payoff_statement_good_through_date date,
    lmp_next_payment_due_date date,
    lmp_payoff_statement_interest numeric(17,2),
    lmp_daily_interest_amount numeric(17,2),
    lmp_monthly_interest_amount numeric(17,2),
    lmp_payoff_interest_pad_days integer,
    lmp_effective_payoff_date date,
    lmp_effective_payoff_date_adjustment_amount numeric(17,2),
    lmp_effective_payoff_date_adjustment_days integer,
    lmp_other_payoff_related_charges_amount numeric(17,2),
    lmp_unpaid_late_charges_amount numeric(15,2),
    lmp_mortgage_payoff_amount_estimated boolean,
    lmp_mip_due_amount numeric(17,2),
    lmp_used_to_acquire_property varchar(128),
    lmp_heloc_advance_last_12_months_over_thousand varchar(128),
    lmp_net_escrow varchar(128),
    lmp_current_escrow_balance_amount numeric(17,2),
    lmp_first_payment_date date,
    lmp_closing_date date,
    lmp_include_within_cema varchar(128)
);

alter table staging_octane.liability_mortgage_payoff owner to deployer;

create index idx_liability_mortgage_payoff__pid_version
    on staging_octane.liability_mortgage_payoff (lmp_pid, lmp_version);

grant select on staging_octane.liability_mortgage_payoff to readonly;

grant delete, insert, select, truncate, update on staging_octane.liability_mortgage_payoff to dms_octane_writer;

grant select on staging_octane.liability_mortgage_payoff to etl_loan;

create table history_octane.credit_request_liability
(
    crl_pid bigint,
    crl_version integer,
    crl_deal_pid bigint,
    crl_credit_request_pid bigint,
    crl_credit_report_identifier varchar(32),
    crl_report_liability_type varchar(128),
    crl_report_holder_name varchar(128),
    crl_report_account_opened_date date,
    crl_account_reported_date date,
    crl_last_activity_date date,
    crl_most_recent_adverse_rating_date date,
    crl_report_monthly_payment_amount numeric(17,2),
    crl_report_remaining_term_months integer,
    crl_months_reviewed_count integer,
    crl_report_unpaid_balance_amount numeric(17,2),
    crl_report_credit_limit_amount numeric(15),
    crl_report_past_due_amount numeric(17,2),
    crl_report_terms_months_count integer,
    crl_report_liability_current_rating_type varchar(128),
    crl_report_liability_account_status_type varchar(128),
    crl_report_liability_account_ownership_type varchar(128),
    crl_consumer_dispute varchar(128),
    crl_derogatory_data varchar(128),
    crl_late_30_days_count varchar(16),
    crl_late_60_days_count varchar(16),
    crl_late_90_days_count varchar(16),
    crl_equifax_included boolean,
    crl_experian_included boolean,
    crl_trans_union_included boolean,
    crl_temp_liability_pid bigint,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.credit_request_liability owner to deployer;

create index idx_credit_request_liability__pid
    on history_octane.credit_request_liability (crl_pid);

create index idx_credit_request_liability__data_source_updated_datetime
    on history_octane.credit_request_liability (data_source_updated_datetime);

create index idx_credit_request_liability__data_source_deleted_flag
    on history_octane.credit_request_liability (data_source_deleted_flag);

create index idx_credit_request_liability__pid_version
    on history_octane.credit_request_liability (crl_pid, crl_version);

create index fk_credit_request_liability_1
    on history_octane.credit_request_liability (crl_deal_pid);

create index fk_credit_request_liability_2
    on history_octane.credit_request_liability (crl_credit_request_pid);

create index fkt_crl_report_liability_type
    on history_octane.credit_request_liability (crl_report_liability_type);

create index fkt_crl_report_liability_current_rating_type
    on history_octane.credit_request_liability (crl_report_liability_current_rating_type);

create index fkt_crl_report_liability_account_status_type
    on history_octane.credit_request_liability (crl_report_liability_account_status_type);

create index fkt_crl_report_liability_account_ownership_type
    on history_octane.credit_request_liability (crl_report_liability_account_ownership_type);

create index fkt_crl_consumer_dispute
    on history_octane.credit_request_liability (crl_consumer_dispute);

create index fkt_crl_derogatory_data
    on history_octane.credit_request_liability (crl_derogatory_data);

create index fk_credit_request_liability_3
    on history_octane.credit_request_liability (crl_temp_liability_pid);

create index idx_credit_request_liability__etl_batch_id
    on history_octane.credit_request_liability (etl_batch_id);

grant select on history_octane.credit_request_liability to readonly;

grant insert, select, update on history_octane.credit_request_liability to etl_loan;

create table history_octane.liability_place
(
    lip_pid bigint,
    lip_version integer,
    lip_liability_pid bigint,
    lip_creditor_pid bigint,
    lip_place_pid bigint,
    lip_lien_priority_type varchar(128),
    lip_liability_financing_type varchar(128),
    lip_liability_foreclosure_exception_type varchar(128),
    lip_liability_mi_type varchar(128),
    lip_original_loan_amount numeric(15),
    lip_property_taxes_escrowed boolean,
    lip_property_insurance_escrowed boolean,
    lip_senior_lien_restriction_type varchar(128),
    lip_senior_lien_restriction_amount numeric(15),
    lip_texas_equity varchar(128),
    lip_texas_equity_conversion varchar(128),
    lip_texas_equity_locked boolean,
    lip_third_party_community_second_program_pid bigint,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    lip_mortgage_delinquency_exception_type varchar(128),
    etl_batch_id text
);

alter table history_octane.liability_place owner to deployer;

create index idx_liability_place__pid
    on history_octane.liability_place (lip_pid);

create index idx_liability_place__data_source_updated_datetime
    on history_octane.liability_place (data_source_updated_datetime);

create index idx_liability_place__data_source_deleted_flag
    on history_octane.liability_place (data_source_deleted_flag);

create index idx_liability_place__pid_version
    on history_octane.liability_place (lip_pid, lip_version);

create index fk_liability_place_1
    on history_octane.liability_place (lip_liability_pid);

create index fk_liability_place_2
    on history_octane.liability_place (lip_creditor_pid);

create index fk_liability_place_3
    on history_octane.liability_place (lip_place_pid);

create index fk_liability_place_4
    on history_octane.liability_place (lip_third_party_community_second_program_pid);

create index fkt_lip_lien_priority_type
    on history_octane.liability_place (lip_lien_priority_type);

create index fkt_lip_liability_financing_type
    on history_octane.liability_place (lip_liability_financing_type);

create index fkt_lip_liability_foreclosure_exception_type
    on history_octane.liability_place (lip_liability_foreclosure_exception_type);

create index fkt_lip_liability_mi_type
    on history_octane.liability_place (lip_liability_mi_type);

create index fkt_lip_senior_lien_restriction_type
    on history_octane.liability_place (lip_senior_lien_restriction_type);

create index fkt_lip_texas_equity
    on history_octane.liability_place (lip_texas_equity);

create index fkt_lip_texas_equity_conversion
    on history_octane.liability_place (lip_texas_equity_conversion);

create index fkt_lip_mortgage_delinquency_exception_type
    on history_octane.liability_place (lip_mortgage_delinquency_exception_type);

create index idx_liability_place__etl_batch_id
    on history_octane.liability_place (etl_batch_id);

grant select on history_octane.liability_place to readonly;

grant insert, select, update on history_octane.liability_place to etl_loan;

create table history_octane.liability_mortgage_payoff
(
    lmp_pid bigint,
    lmp_version integer,
    lmp_liability_pid bigint,
    lmp_interest_rate_on_statement boolean,
    lmp_interest_rate_percent numeric(11,9),
    lmp_loan_amortization_type varchar(128),
    lmp_interest_only varchar(128),
    lmp_agency_case_id varchar(32),
    lmp_payoff_statement_date date,
    lmp_payoff_statement_good_through_date date,
    lmp_next_payment_due_date date,
    lmp_payoff_statement_interest numeric(17,2),
    lmp_daily_interest_amount numeric(17,2),
    lmp_monthly_interest_amount numeric(17,2),
    lmp_payoff_interest_pad_days integer,
    lmp_effective_payoff_date date,
    lmp_effective_payoff_date_adjustment_amount numeric(17,2),
    lmp_effective_payoff_date_adjustment_days integer,
    lmp_other_payoff_related_charges_amount numeric(17,2),
    lmp_unpaid_late_charges_amount numeric(15,2),
    lmp_mortgage_payoff_amount_estimated boolean,
    lmp_mip_due_amount numeric(17,2),
    lmp_used_to_acquire_property varchar(128),
    lmp_heloc_advance_last_12_months_over_thousand varchar(128),
    lmp_net_escrow varchar(128),
    lmp_current_escrow_balance_amount numeric(17,2),
    lmp_first_payment_date date,
    lmp_closing_date date,
    lmp_include_within_cema varchar(128),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.liability_mortgage_payoff owner to deployer;

create index idx_liability_mortgage_payoff__pid
    on history_octane.liability_mortgage_payoff (lmp_pid);

create index idx_liability_mortgage_payoff__data_source_updated_datetime
    on history_octane.liability_mortgage_payoff (data_source_updated_datetime);

create index idx_liability_mortgage_payoff__data_source_deleted_flag
    on history_octane.liability_mortgage_payoff (data_source_deleted_flag);

create index idx_liability_mortgage_payoff__pid_version
    on history_octane.liability_mortgage_payoff (lmp_pid, lmp_version);

create index fk_liability_mortgage_payoff_1
    on history_octane.liability_mortgage_payoff (lmp_liability_pid);

create index fkt_lmp_loan_amortization_type
    on history_octane.liability_mortgage_payoff (lmp_loan_amortization_type);

create index fkt_lmp_interest_only
    on history_octane.liability_mortgage_payoff (lmp_interest_only);

create index fkt_lmp_used_to_acquire_property
    on history_octane.liability_mortgage_payoff (lmp_used_to_acquire_property);

create index fkt_lmp_heloc_advance_last_12_months_over_thousand
    on history_octane.liability_mortgage_payoff (lmp_heloc_advance_last_12_months_over_thousand);

create index fkt_lmp_net_escrow
    on history_octane.liability_mortgage_payoff (lmp_net_escrow);

create index fkt_lmp_include_within_cema
    on history_octane.liability_mortgage_payoff (lmp_include_within_cema);

create index idx_liability_mortgage_payoff__etl_batch_id
    on history_octane.liability_mortgage_payoff (etl_batch_id);

grant select on history_octane.liability_mortgage_payoff to readonly;

grant insert, select, update on history_octane.liability_mortgage_payoff to etl_loan;

create table staging_octane.disclosure_action_type
(
    code varchar(128) not null
        constraint pk_disclosure_action_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.disclosure_action_type owner to deployer;

grant select on staging_octane.disclosure_action_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.disclosure_action_type to dms_octane_writer;

grant select on staging_octane.disclosure_action_type to etl_loan;

create table staging_octane.proposal_construction
(
    prpc_pid bigint not null
        constraint pk_proposal_construction
            primary key,
    prpc_version integer,
    prpc_proposal_pid bigint,
    prpc_architectural_exhibits boolean,
    prpc_feasibility_study boolean,
    prpc_expected_months_to_complete integer,
    prpc_extension_needed boolean,
    prpc_extension_period_months integer,
    prpc_any_utilities_inoperable varchar(128),
    prpc_non_habitable_months integer,
    prpc_non_habitable_units integer,
    prpc_number_of_draws integer,
    prpc_construction_confirmed_start_date date,
    prpc_loan_in_process_account_closed_date date,
    prpc_mortgage_payment_reserves_required varchar(128),
    prpc_estimated_permit_amount_applicable boolean,
    prpc_contingency_reserve_required boolean,
    prpc_extension_period_days integer
);

alter table staging_octane.proposal_construction owner to deployer;

create index idx_proposal_construction__pid_version
    on staging_octane.proposal_construction (prpc_pid, prpc_version);

grant select on staging_octane.proposal_construction to readonly;

grant delete, insert, select, truncate, update on staging_octane.proposal_construction to dms_octane_writer;

grant select on staging_octane.proposal_construction to etl_loan;

create table history_octane.disclosure_action_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.disclosure_action_type owner to deployer;

create index idx_disclosure_action_type__data_source_updated_datetime
    on history_octane.disclosure_action_type (data_source_updated_datetime);

create index idx_disclosure_action_type__data_source_deleted_flag
    on history_octane.disclosure_action_type (data_source_deleted_flag);

create index idx_disclosure_action_type__etl_batch_id
    on history_octane.disclosure_action_type (etl_batch_id);

grant select on history_octane.disclosure_action_type to readonly;

grant insert, select, update on history_octane.disclosure_action_type to etl_loan;

create table history_octane.proposal_construction
(
    prpc_pid bigint,
    prpc_version integer,
    prpc_proposal_pid bigint,
    prpc_architectural_exhibits boolean,
    prpc_feasibility_study boolean,
    prpc_expected_months_to_complete integer,
    prpc_extension_needed boolean,
    prpc_extension_period_months integer,
    prpc_any_utilities_inoperable varchar(128),
    prpc_non_habitable_months integer,
    prpc_non_habitable_units integer,
    prpc_number_of_draws integer,
    prpc_construction_confirmed_start_date date,
    prpc_loan_in_process_account_closed_date date,
    prpc_mortgage_payment_reserves_required varchar(128),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    prpc_estimated_permit_amount_applicable boolean,
    prpc_contingency_reserve_required boolean,
    etl_batch_id text,
    prpc_extension_period_days integer
);

alter table history_octane.proposal_construction owner to deployer;

create index idx_proposal_construction__pid
    on history_octane.proposal_construction (prpc_pid);

create index idx_proposal_construction__data_source_updated_datetime
    on history_octane.proposal_construction (data_source_updated_datetime);

create index idx_proposal_construction__data_source_deleted_flag
    on history_octane.proposal_construction (data_source_deleted_flag);

create index idx_proposal_construction__pid_version
    on history_octane.proposal_construction (prpc_pid, prpc_version);

create index fk_proposal_construction_1
    on history_octane.proposal_construction (prpc_proposal_pid);

create index fkt_prpc_any_utilities_inoperable
    on history_octane.proposal_construction (prpc_any_utilities_inoperable);

create index fkt_prpc_mortgage_payment_reserves_required
    on history_octane.proposal_construction (prpc_mortgage_payment_reserves_required);

create index idx_proposal_construction__etl_batch_id
    on history_octane.proposal_construction (etl_batch_id);

grant select on history_octane.proposal_construction to readonly;

grant insert, select, update on history_octane.proposal_construction to etl_loan;

create table staging_octane.loan_charge_payer_item_source_type
(
    code varchar(128) not null
        constraint pk_loan_charge_payer_item_source_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.loan_charge_payer_item_source_type owner to deployer;

grant select on staging_octane.loan_charge_payer_item_source_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_charge_payer_item_source_type to dms_octane_writer;

grant select on staging_octane.loan_charge_payer_item_source_type to etl_loan;

create table staging_octane.loan_charge_payer_item
(
    lcpi_pid bigint not null
        constraint pk_loan_charge_payer_item
            primary key,
    lcpi_version integer,
    lcpi_item_amount numeric(15,2),
    lcpi_loan_charge_payer_item_source_type varchar(128),
    lcpi_loan_charge_pid bigint,
    lcpi_charge_payer_type varchar(128),
    lcpi_paid_by varchar(128),
    lcpi_poc boolean,
    lcpi_charge_wire_action_auto_compute boolean,
    lcpi_charge_wire_action_type varchar(128)
);

alter table staging_octane.loan_charge_payer_item owner to deployer;

create index idx_loan_charge_payer_item__pid_version
    on staging_octane.loan_charge_payer_item (lcpi_pid, lcpi_version);

grant select on staging_octane.loan_charge_payer_item to readonly;

grant delete, insert, select, truncate, update on staging_octane.loan_charge_payer_item to dms_octane_writer;

grant select on staging_octane.loan_charge_payer_item to etl_loan;

create table staging_octane.wf_prereq_set
(
    wps_pid bigint not null
        constraint pk_wf_prereq_set
            primary key,
    wps_version integer,
    wps_account_pid bigint,
    wps_wf_prereq_set_name varchar(256)
);

alter table staging_octane.wf_prereq_set owner to deployer;

create index idx_wf_prereq_set__pid_version
    on staging_octane.wf_prereq_set (wps_pid, wps_version);

grant select on staging_octane.wf_prereq_set to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_prereq_set to dms_octane_writer;

grant select on staging_octane.wf_prereq_set to etl_loan;

create table staging_octane.wf_prereq
(
    wp_pid bigint not null
        constraint pk_wf_prereq
            primary key,
    wp_version integer,
    wp_wf_prereq_set_pid bigint,
    wp_wf_step_pid bigint
);

alter table staging_octane.wf_prereq owner to deployer;

create index idx_wf_prereq__pid_version
    on staging_octane.wf_prereq (wp_pid, wp_version);

grant select on staging_octane.wf_prereq to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_prereq to dms_octane_writer;

grant select on staging_octane.wf_prereq to etl_loan;

create table history_octane.loan_charge_payer_item_source_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.loan_charge_payer_item_source_type owner to deployer;

create index idx_bc194054388b1c9625f6ecb10bca4534
    on history_octane.loan_charge_payer_item_source_type (data_source_updated_datetime);

create index idx_37051d2e2fb575e9017a57d045ff2e3f
    on history_octane.loan_charge_payer_item_source_type (data_source_deleted_flag);

create index idx_loan_charge_payer_item_source_type__etl_batch_id
    on history_octane.loan_charge_payer_item_source_type (etl_batch_id);

grant select on history_octane.loan_charge_payer_item_source_type to readonly;

grant insert, select, update on history_octane.loan_charge_payer_item_source_type to etl_loan;

create table history_octane.loan_charge_payer_item
(
    lcpi_pid bigint,
    lcpi_version integer,
    lcpi_item_amount numeric(15,2),
    lcpi_loan_charge_payer_item_source_type varchar(128),
    lcpi_loan_charge_pid bigint,
    lcpi_charge_payer_type varchar(128),
    lcpi_paid_by varchar(128),
    lcpi_poc boolean,
    lcpi_charge_wire_action_auto_compute boolean,
    lcpi_charge_wire_action_type varchar(128),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.loan_charge_payer_item owner to deployer;

create index idx_loan_charge_payer_item__pid
    on history_octane.loan_charge_payer_item (lcpi_pid);

create index idx_loan_charge_payer_item__data_source_updated_datetime
    on history_octane.loan_charge_payer_item (data_source_updated_datetime);

create index idx_loan_charge_payer_item__data_source_deleted_flag
    on history_octane.loan_charge_payer_item (data_source_deleted_flag);

create index idx_loan_charge_payer_item__pid_version
    on history_octane.loan_charge_payer_item (lcpi_pid, lcpi_version);

create index fk_loan_charge_payer_item_1
    on history_octane.loan_charge_payer_item (lcpi_loan_charge_pid);

create index fkt_lcpi_loan_charge_payer_item_source_type
    on history_octane.loan_charge_payer_item (lcpi_loan_charge_payer_item_source_type);

create index fkt_lcpi_charge_payer_type
    on history_octane.loan_charge_payer_item (lcpi_charge_payer_type);

create index fkt_lcpi_charge_wire_action_type
    on history_octane.loan_charge_payer_item (lcpi_charge_wire_action_type);

create index idx_loan_charge_payer_item__etl_batch_id
    on history_octane.loan_charge_payer_item (etl_batch_id);

grant select on history_octane.loan_charge_payer_item to readonly;

grant insert, select, update on history_octane.loan_charge_payer_item to etl_loan;

create table history_octane.wf_prereq_set
(
    wps_pid bigint,
    wps_version integer,
    wps_account_pid bigint,
    wps_wf_prereq_set_name varchar(256),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.wf_prereq_set owner to deployer;

create index idx_wf_prereq_set__pid
    on history_octane.wf_prereq_set (wps_pid);

create index idx_wf_prereq_set__data_source_updated_datetime
    on history_octane.wf_prereq_set (data_source_updated_datetime);

create index idx_wf_prereq_set__data_source_deleted_flag
    on history_octane.wf_prereq_set (data_source_deleted_flag);

create index idx_wf_prereq_set__pid_version
    on history_octane.wf_prereq_set (wps_pid, wps_version);

create index fk_wf_prereq_set_1
    on history_octane.wf_prereq_set (wps_account_pid);

create index idx_wf_prereq_set__etl_batch_id
    on history_octane.wf_prereq_set (etl_batch_id);

grant select on history_octane.wf_prereq_set to readonly;

grant insert, select, update on history_octane.wf_prereq_set to etl_loan;

create table history_octane.wf_prereq
(
    wp_pid bigint,
    wp_version integer,
    wp_wf_prereq_set_pid bigint,
    wp_wf_step_pid bigint,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.wf_prereq owner to deployer;

create index idx_wf_prereq__pid
    on history_octane.wf_prereq (wp_pid);

create index idx_wf_prereq__data_source_updated_datetime
    on history_octane.wf_prereq (data_source_updated_datetime);

create index idx_wf_prereq__data_source_deleted_flag
    on history_octane.wf_prereq (data_source_deleted_flag);

create index idx_wf_prereq__pid_version
    on history_octane.wf_prereq (wp_pid, wp_version);

create index fk_wf_prereq_1
    on history_octane.wf_prereq (wp_wf_prereq_set_pid);

create index fk_wf_prereq_2
    on history_octane.wf_prereq (wp_wf_step_pid);

create index idx_wf_prereq__etl_batch_id
    on history_octane.wf_prereq (etl_batch_id);

grant select on history_octane.wf_prereq to readonly;

grant insert, select, update on history_octane.wf_prereq to etl_loan;

create table staging_octane.mortgage_delinquency_exception_type
(
    code varchar(128) not null
        constraint pk_mortgage_delinquency_exception_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.mortgage_delinquency_exception_type owner to deployer;

grant select on staging_octane.mortgage_delinquency_exception_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.mortgage_delinquency_exception_type to dms_octane_writer;

grant select on staging_octane.mortgage_delinquency_exception_type to etl_loan;

create table history_octane.mortgage_delinquency_exception_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.mortgage_delinquency_exception_type owner to deployer;

create index idx_1c3c44b635f19d240fc3b257dd7e2f57
    on history_octane.mortgage_delinquency_exception_type (data_source_updated_datetime);

create index idx_2bb086413c4670caa97913f40af9fabc
    on history_octane.mortgage_delinquency_exception_type (data_source_deleted_flag);

create index idx_mortgage_delinquency_exception_type__etl_batch_id
    on history_octane.mortgage_delinquency_exception_type (etl_batch_id);

grant select on history_octane.mortgage_delinquency_exception_type to readonly;

grant insert, select, update on history_octane.mortgage_delinquency_exception_type to etl_loan;

create table staging_octane.contractor_validation_status_type
(
    code varchar(128) not null
        constraint pk_contractor_validation_status_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.contractor_validation_status_type owner to deployer;

grant select on staging_octane.contractor_validation_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.contractor_validation_status_type to dms_octane_writer;

grant select on staging_octane.contractor_validation_status_type to etl_loan;

create table history_octane.contractor_validation_status_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.contractor_validation_status_type owner to deployer;

create index idx_6be95126131f734ffcfd5460184b7498
    on history_octane.contractor_validation_status_type (data_source_updated_datetime);

create index idx_contractor_validation_status_type__data_source_deleted_flag
    on history_octane.contractor_validation_status_type (data_source_deleted_flag);

create index idx_contractor_validation_status_type__etl_batch_id
    on history_octane.contractor_validation_status_type (etl_batch_id);

grant select on history_octane.contractor_validation_status_type to readonly;

grant insert, select, update on history_octane.contractor_validation_status_type to etl_loan;

create table staging_octane.sap_status_type
(
    code varchar(128) not null
        constraint pk_sap_status_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.sap_status_type owner to deployer;

grant select on staging_octane.sap_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.sap_status_type to dms_octane_writer;

grant select on staging_octane.sap_status_type to etl_loan;

create table history_octane.sap_status_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.sap_status_type owner to deployer;

create index idx_sap_status_type__data_source_updated_datetime
    on history_octane.sap_status_type (data_source_updated_datetime);

create index idx_sap_status_type__data_source_deleted_flag
    on history_octane.sap_status_type (data_source_deleted_flag);

create index idx_sap_status_type__etl_batch_id
    on history_octane.sap_status_type (etl_batch_id);

grant select on history_octane.sap_status_type to readonly;

grant insert, select, update on history_octane.sap_status_type to etl_loan;

create table staging_octane.du_finding_message_type
(
    code varchar(128) not null
        constraint pk_du_finding_message_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.du_finding_message_type owner to deployer;

grant select on staging_octane.du_finding_message_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.du_finding_message_type to dms_octane_writer;

grant select on staging_octane.du_finding_message_type to etl_loan;

create table staging_octane.du_finding
(
    duf_pid bigint not null
        constraint pk_du_finding
            primary key,
    duf_version integer,
    duf_du_request_pid bigint,
    duf_du_finding_message_type varchar(128),
    duf_finding_result varchar(128),
    duf_finding_value varchar(128)
);

alter table staging_octane.du_finding owner to deployer;

create index idx_du_finding__pid_version
    on staging_octane.du_finding (duf_pid, duf_version);

grant select on staging_octane.du_finding to readonly;

grant delete, insert, select, truncate, update on staging_octane.du_finding to dms_octane_writer;

grant select on staging_octane.du_finding to etl_loan;

create table history_octane.du_finding_message_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.du_finding_message_type owner to deployer;

create index idx_du_finding_message_type__data_source_updated_datetime
    on history_octane.du_finding_message_type (data_source_updated_datetime);

create index idx_du_finding_message_type__data_source_deleted_flag
    on history_octane.du_finding_message_type (data_source_deleted_flag);

create index idx_du_finding_message_type__etl_batch_id
    on history_octane.du_finding_message_type (etl_batch_id);

grant select on history_octane.du_finding_message_type to readonly;

grant insert, select, update on history_octane.du_finding_message_type to etl_loan;

create table history_octane.du_finding
(
    duf_pid bigint,
    duf_version integer,
    duf_du_request_pid bigint,
    duf_du_finding_message_type varchar(128),
    duf_finding_result varchar(128),
    duf_finding_value varchar(128),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.du_finding owner to deployer;

create index idx_du_finding__pid
    on history_octane.du_finding (duf_pid);

create index idx_du_finding__data_source_updated_datetime
    on history_octane.du_finding (data_source_updated_datetime);

create index idx_du_finding__data_source_deleted_flag
    on history_octane.du_finding (data_source_deleted_flag);

create index idx_du_finding__pid_version
    on history_octane.du_finding (duf_pid, duf_version);

create index fk_du_finding_1
    on history_octane.du_finding (duf_du_request_pid);

create index fkt_duf_du_finding_message_type
    on history_octane.du_finding (duf_du_finding_message_type);

create index fkt_duf_finding_result
    on history_octane.du_finding (duf_finding_result);

create index idx_du_finding__etl_batch_id
    on history_octane.du_finding (etl_batch_id);

grant select on history_octane.du_finding to readonly;

grant insert, select, update on history_octane.du_finding to etl_loan;

create table staging_octane.qualified_mortgage_rule_version_type
(
    code varchar(128) not null
        constraint pk_qualified_mortgage_rule_version_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.qualified_mortgage_rule_version_type owner to deployer;

grant select on staging_octane.qualified_mortgage_rule_version_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.qualified_mortgage_rule_version_type to dms_octane_writer;

grant select on staging_octane.qualified_mortgage_rule_version_type to etl_loan;

create table history_octane.qualified_mortgage_rule_version_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.qualified_mortgage_rule_version_type owner to deployer;

create index idx_c19ea4872a807643d8f47700e006cd56
    on history_octane.qualified_mortgage_rule_version_type (data_source_updated_datetime);

create index idx_40cfdb8ddc5b71d4c9ab0f7b4545400b
    on history_octane.qualified_mortgage_rule_version_type (data_source_deleted_flag);

create index idx_qualified_mortgage_rule_version_type__etl_batch_id
    on history_octane.qualified_mortgage_rule_version_type (etl_batch_id);

grant select on history_octane.qualified_mortgage_rule_version_type to readonly;

grant insert, select, update on history_octane.qualified_mortgage_rule_version_type to etl_loan;

create table star_loan.loan_lender_user_access
(
    dwid bigint default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid bigint not null,
    edw_created_datetime timestamp with time zone,
    edw_modified_datetime timestamp with time zone,
    etl_batch_id text,
    data_source_integration_columns text,
    data_source_integration_id text not null,
    data_source_modified_datetime timestamp with time zone,
    octane_username text not null,
    loan_dwid bigint not null,
    account_pid bigint not null,
    constraint loan_lender_user_access_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
partition by HASH (octane_username, account_pid);

alter table star_loan.loan_lender_user_access owner to deployer;

grant select on star_loan.loan_lender_user_access to readonly;

grant select on star_loan.loan_lender_user_access to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access to etl_loan;

create table star_loan.loan_lender_user_access_0
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_0_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 0);

alter table star_loan.loan_lender_user_access_0 owner to deployer;

create index loan_lender_user_access_0_etl_batch_id_idx
    on star_loan.loan_lender_user_access_0 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_0 to readonly;

grant select on star_loan.loan_lender_user_access_0 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_0 to etl_loan;

create table star_loan.loan_lender_user_access_1
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_1_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 1);

alter table star_loan.loan_lender_user_access_1 owner to deployer;

create index loan_lender_user_access_1_etl_batch_id_idx
    on star_loan.loan_lender_user_access_1 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_1 to readonly;

grant select on star_loan.loan_lender_user_access_1 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_1 to etl_loan;

create table star_loan.loan_lender_user_access_2
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_2_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 2);

alter table star_loan.loan_lender_user_access_2 owner to deployer;

create index loan_lender_user_access_2_etl_batch_id_idx
    on star_loan.loan_lender_user_access_2 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_2 to readonly;

grant select on star_loan.loan_lender_user_access_2 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_2 to etl_loan;

create table star_loan.loan_lender_user_access_3
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_3_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 3);

alter table star_loan.loan_lender_user_access_3 owner to deployer;

create index loan_lender_user_access_3_etl_batch_id_idx
    on star_loan.loan_lender_user_access_3 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_3 to readonly;

grant select on star_loan.loan_lender_user_access_3 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_3 to etl_loan;

create table star_loan.loan_lender_user_access_4
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_4_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 4);

alter table star_loan.loan_lender_user_access_4 owner to deployer;

create index loan_lender_user_access_4_etl_batch_id_idx
    on star_loan.loan_lender_user_access_4 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_4 to readonly;

grant select on star_loan.loan_lender_user_access_4 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_4 to etl_loan;

create table star_loan.loan_lender_user_access_5
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_5_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 5);

alter table star_loan.loan_lender_user_access_5 owner to deployer;

create index loan_lender_user_access_5_etl_batch_id_idx
    on star_loan.loan_lender_user_access_5 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_5 to readonly;

grant select on star_loan.loan_lender_user_access_5 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_5 to etl_loan;

create table star_loan.loan_lender_user_access_6
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_6_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 6);

alter table star_loan.loan_lender_user_access_6 owner to deployer;

create index loan_lender_user_access_6_etl_batch_id_idx
    on star_loan.loan_lender_user_access_6 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_6 to readonly;

grant select on star_loan.loan_lender_user_access_6 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_6 to etl_loan;

create table star_loan.loan_lender_user_access_7
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_7_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 7);

alter table star_loan.loan_lender_user_access_7 owner to deployer;

create index loan_lender_user_access_7_etl_batch_id_idx
    on star_loan.loan_lender_user_access_7 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_7 to readonly;

grant select on star_loan.loan_lender_user_access_7 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_7 to etl_loan;

create table star_loan.loan_lender_user_access_8
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_8_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 8);

alter table star_loan.loan_lender_user_access_8 owner to deployer;

create index loan_lender_user_access_8_etl_batch_id_idx
    on star_loan.loan_lender_user_access_8 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_8 to readonly;

grant select on star_loan.loan_lender_user_access_8 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_8 to etl_loan;

create table star_loan.loan_lender_user_access_9
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_9_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 9);

alter table star_loan.loan_lender_user_access_9 owner to deployer;

create index loan_lender_user_access_9_etl_batch_id_idx
    on star_loan.loan_lender_user_access_9 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_9 to readonly;

grant select on star_loan.loan_lender_user_access_9 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_9 to etl_loan;

create table star_loan.loan_lender_user_access_10
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_10_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 10);

alter table star_loan.loan_lender_user_access_10 owner to deployer;

create index loan_lender_user_access_10_etl_batch_id_idx
    on star_loan.loan_lender_user_access_10 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_10 to readonly;

grant select on star_loan.loan_lender_user_access_10 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_10 to etl_loan;

create table star_loan.loan_lender_user_access_11
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_11_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 11);

alter table star_loan.loan_lender_user_access_11 owner to deployer;

create index loan_lender_user_access_11_etl_batch_id_idx
    on star_loan.loan_lender_user_access_11 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_11 to readonly;

grant select on star_loan.loan_lender_user_access_11 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_11 to etl_loan;

create table star_loan.loan_lender_user_access_12
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_12_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 12);

alter table star_loan.loan_lender_user_access_12 owner to deployer;

create index loan_lender_user_access_12_etl_batch_id_idx
    on star_loan.loan_lender_user_access_12 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_12 to readonly;

grant select on star_loan.loan_lender_user_access_12 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_12 to etl_loan;

create table star_loan.loan_lender_user_access_13
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_13_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 13);

alter table star_loan.loan_lender_user_access_13 owner to deployer;

create index loan_lender_user_access_13_etl_batch_id_idx
    on star_loan.loan_lender_user_access_13 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_13 to readonly;

grant select on star_loan.loan_lender_user_access_13 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_13 to etl_loan;

create table star_loan.loan_lender_user_access_14
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_14_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 14);

alter table star_loan.loan_lender_user_access_14 owner to deployer;

create index loan_lender_user_access_14_etl_batch_id_idx
    on star_loan.loan_lender_user_access_14 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_14 to readonly;

grant select on star_loan.loan_lender_user_access_14 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_14 to etl_loan;

create table star_loan.loan_lender_user_access_15
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_15_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 15);

alter table star_loan.loan_lender_user_access_15 owner to deployer;

create index loan_lender_user_access_15_etl_batch_id_idx
    on star_loan.loan_lender_user_access_15 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_15 to readonly;

grant select on star_loan.loan_lender_user_access_15 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_15 to etl_loan;

create table star_loan.loan_lender_user_access_16
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_16_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 16);

alter table star_loan.loan_lender_user_access_16 owner to deployer;

create index loan_lender_user_access_16_etl_batch_id_idx
    on star_loan.loan_lender_user_access_16 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_16 to readonly;

grant select on star_loan.loan_lender_user_access_16 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_16 to etl_loan;

create table star_loan.loan_lender_user_access_17
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_17_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 17);

alter table star_loan.loan_lender_user_access_17 owner to deployer;

create index loan_lender_user_access_17_etl_batch_id_idx
    on star_loan.loan_lender_user_access_17 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_17 to readonly;

grant select on star_loan.loan_lender_user_access_17 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_17 to etl_loan;

create table star_loan.loan_lender_user_access_18
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_18_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 18);

alter table star_loan.loan_lender_user_access_18 owner to deployer;

create index loan_lender_user_access_18_etl_batch_id_idx
    on star_loan.loan_lender_user_access_18 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_18 to readonly;

grant select on star_loan.loan_lender_user_access_18 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_18 to etl_loan;

create table star_loan.loan_lender_user_access_19
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_19_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 19);

alter table star_loan.loan_lender_user_access_19 owner to deployer;

create index loan_lender_user_access_19_etl_batch_id_idx
    on star_loan.loan_lender_user_access_19 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_19 to readonly;

grant select on star_loan.loan_lender_user_access_19 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_19 to etl_loan;

create table star_loan.loan_lender_user_access_20
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_20_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 20);

alter table star_loan.loan_lender_user_access_20 owner to deployer;

create index loan_lender_user_access_20_etl_batch_id_idx
    on star_loan.loan_lender_user_access_20 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_20 to readonly;

grant select on star_loan.loan_lender_user_access_20 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_20 to etl_loan;

create table star_loan.loan_lender_user_access_21
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_21_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 21);

alter table star_loan.loan_lender_user_access_21 owner to deployer;

create index loan_lender_user_access_21_etl_batch_id_idx
    on star_loan.loan_lender_user_access_21 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_21 to readonly;

grant select on star_loan.loan_lender_user_access_21 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_21 to etl_loan;

create table star_loan.loan_lender_user_access_22
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_22_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 22);

alter table star_loan.loan_lender_user_access_22 owner to deployer;

create index loan_lender_user_access_22_etl_batch_id_idx
    on star_loan.loan_lender_user_access_22 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_22 to readonly;

grant select on star_loan.loan_lender_user_access_22 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_22 to etl_loan;

create table star_loan.loan_lender_user_access_23
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_23_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 23);

alter table star_loan.loan_lender_user_access_23 owner to deployer;

create index loan_lender_user_access_23_etl_batch_id_idx
    on star_loan.loan_lender_user_access_23 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_23 to readonly;

grant select on star_loan.loan_lender_user_access_23 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_23 to etl_loan;

create table star_loan.loan_lender_user_access_24
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_24_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 24);

alter table star_loan.loan_lender_user_access_24 owner to deployer;

create index loan_lender_user_access_24_etl_batch_id_idx
    on star_loan.loan_lender_user_access_24 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_24 to readonly;

grant select on star_loan.loan_lender_user_access_24 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_24 to etl_loan;

create table star_loan.loan_lender_user_access_25
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_25_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 25);

alter table star_loan.loan_lender_user_access_25 owner to deployer;

create index loan_lender_user_access_25_etl_batch_id_idx
    on star_loan.loan_lender_user_access_25 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_25 to readonly;

grant select on star_loan.loan_lender_user_access_25 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_25 to etl_loan;

create table star_loan.loan_lender_user_access_26
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_26_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 26);

alter table star_loan.loan_lender_user_access_26 owner to deployer;

create index loan_lender_user_access_26_etl_batch_id_idx
    on star_loan.loan_lender_user_access_26 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_26 to readonly;

grant select on star_loan.loan_lender_user_access_26 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_26 to etl_loan;

create table star_loan.loan_lender_user_access_27
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_27_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 27);

alter table star_loan.loan_lender_user_access_27 owner to deployer;

create index loan_lender_user_access_27_etl_batch_id_idx
    on star_loan.loan_lender_user_access_27 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_27 to readonly;

grant select on star_loan.loan_lender_user_access_27 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_27 to etl_loan;

create table star_loan.loan_lender_user_access_28
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_28_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 28);

alter table star_loan.loan_lender_user_access_28 owner to deployer;

create index loan_lender_user_access_28_etl_batch_id_idx
    on star_loan.loan_lender_user_access_28 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_28 to readonly;

grant select on star_loan.loan_lender_user_access_28 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_28 to etl_loan;

create table star_loan.loan_lender_user_access_29
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_29_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 29);

alter table star_loan.loan_lender_user_access_29 owner to deployer;

create index loan_lender_user_access_29_etl_batch_id_idx
    on star_loan.loan_lender_user_access_29 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_29 to readonly;

grant select on star_loan.loan_lender_user_access_29 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_29 to etl_loan;

create table star_loan.loan_lender_user_access_30
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_30_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 30);

alter table star_loan.loan_lender_user_access_30 owner to deployer;

create index loan_lender_user_access_30_etl_batch_id_idx
    on star_loan.loan_lender_user_access_30 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_30 to readonly;

grant select on star_loan.loan_lender_user_access_30 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_30 to etl_loan;

create table star_loan.loan_lender_user_access_31
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_31_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 31);

alter table star_loan.loan_lender_user_access_31 owner to deployer;

create index loan_lender_user_access_31_etl_batch_id_idx
    on star_loan.loan_lender_user_access_31 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_31 to readonly;

grant select on star_loan.loan_lender_user_access_31 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_31 to etl_loan;

create table star_loan.loan_lender_user_access_32
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_32_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 32);

alter table star_loan.loan_lender_user_access_32 owner to deployer;

create index loan_lender_user_access_32_etl_batch_id_idx
    on star_loan.loan_lender_user_access_32 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_32 to readonly;

grant select on star_loan.loan_lender_user_access_32 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_32 to etl_loan;

create table star_loan.loan_lender_user_access_33
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_33_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 33);

alter table star_loan.loan_lender_user_access_33 owner to deployer;

create index loan_lender_user_access_33_etl_batch_id_idx
    on star_loan.loan_lender_user_access_33 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_33 to readonly;

grant select on star_loan.loan_lender_user_access_33 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_33 to etl_loan;

create table star_loan.loan_lender_user_access_34
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_34_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 34);

alter table star_loan.loan_lender_user_access_34 owner to deployer;

create index loan_lender_user_access_34_etl_batch_id_idx
    on star_loan.loan_lender_user_access_34 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_34 to readonly;

grant select on star_loan.loan_lender_user_access_34 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_34 to etl_loan;

create table star_loan.loan_lender_user_access_35
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_35_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 35);

alter table star_loan.loan_lender_user_access_35 owner to deployer;

create index loan_lender_user_access_35_etl_batch_id_idx
    on star_loan.loan_lender_user_access_35 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_35 to readonly;

grant select on star_loan.loan_lender_user_access_35 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_35 to etl_loan;

create table star_loan.loan_lender_user_access_36
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_36_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 36);

alter table star_loan.loan_lender_user_access_36 owner to deployer;

create index loan_lender_user_access_36_etl_batch_id_idx
    on star_loan.loan_lender_user_access_36 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_36 to readonly;

grant select on star_loan.loan_lender_user_access_36 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_36 to etl_loan;

create table star_loan.loan_lender_user_access_37
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_37_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 37);

alter table star_loan.loan_lender_user_access_37 owner to deployer;

create index loan_lender_user_access_37_etl_batch_id_idx
    on star_loan.loan_lender_user_access_37 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_37 to readonly;

grant select on star_loan.loan_lender_user_access_37 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_37 to etl_loan;

create table star_loan.loan_lender_user_access_38
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_38_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 38);

alter table star_loan.loan_lender_user_access_38 owner to deployer;

create index loan_lender_user_access_38_etl_batch_id_idx
    on star_loan.loan_lender_user_access_38 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_38 to readonly;

grant select on star_loan.loan_lender_user_access_38 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_38 to etl_loan;

create table star_loan.loan_lender_user_access_39
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_39_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 39);

alter table star_loan.loan_lender_user_access_39 owner to deployer;

create index loan_lender_user_access_39_etl_batch_id_idx
    on star_loan.loan_lender_user_access_39 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_39 to readonly;

grant select on star_loan.loan_lender_user_access_39 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_39 to etl_loan;

create table star_loan.loan_lender_user_access_40
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_40_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 40);

alter table star_loan.loan_lender_user_access_40 owner to deployer;

create index loan_lender_user_access_40_etl_batch_id_idx
    on star_loan.loan_lender_user_access_40 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_40 to readonly;

grant select on star_loan.loan_lender_user_access_40 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_40 to etl_loan;

create table star_loan.loan_lender_user_access_41
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_41_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 41);

alter table star_loan.loan_lender_user_access_41 owner to deployer;

create index loan_lender_user_access_41_etl_batch_id_idx
    on star_loan.loan_lender_user_access_41 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_41 to readonly;

grant select on star_loan.loan_lender_user_access_41 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_41 to etl_loan;

create table star_loan.loan_lender_user_access_42
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_42_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 42);

alter table star_loan.loan_lender_user_access_42 owner to deployer;

create index loan_lender_user_access_42_etl_batch_id_idx
    on star_loan.loan_lender_user_access_42 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_42 to readonly;

grant select on star_loan.loan_lender_user_access_42 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_42 to etl_loan;

create table star_loan.loan_lender_user_access_43
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_43_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 43);

alter table star_loan.loan_lender_user_access_43 owner to deployer;

create index loan_lender_user_access_43_etl_batch_id_idx
    on star_loan.loan_lender_user_access_43 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_43 to readonly;

grant select on star_loan.loan_lender_user_access_43 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_43 to etl_loan;

create table star_loan.loan_lender_user_access_44
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_44_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 44);

alter table star_loan.loan_lender_user_access_44 owner to deployer;

create index loan_lender_user_access_44_etl_batch_id_idx
    on star_loan.loan_lender_user_access_44 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_44 to readonly;

grant select on star_loan.loan_lender_user_access_44 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_44 to etl_loan;

create table star_loan.loan_lender_user_access_45
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_45_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 45);

alter table star_loan.loan_lender_user_access_45 owner to deployer;

create index loan_lender_user_access_45_etl_batch_id_idx
    on star_loan.loan_lender_user_access_45 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_45 to readonly;

grant select on star_loan.loan_lender_user_access_45 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_45 to etl_loan;

create table star_loan.loan_lender_user_access_46
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_46_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 46);

alter table star_loan.loan_lender_user_access_46 owner to deployer;

create index loan_lender_user_access_46_etl_batch_id_idx
    on star_loan.loan_lender_user_access_46 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_46 to readonly;

grant select on star_loan.loan_lender_user_access_46 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_46 to etl_loan;

create table star_loan.loan_lender_user_access_47
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_47_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 47);

alter table star_loan.loan_lender_user_access_47 owner to deployer;

create index loan_lender_user_access_47_etl_batch_id_idx
    on star_loan.loan_lender_user_access_47 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_47 to readonly;

grant select on star_loan.loan_lender_user_access_47 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_47 to etl_loan;

create table star_loan.loan_lender_user_access_48
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_48_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 48);

alter table star_loan.loan_lender_user_access_48 owner to deployer;

create index loan_lender_user_access_48_etl_batch_id_idx
    on star_loan.loan_lender_user_access_48 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_48 to readonly;

grant select on star_loan.loan_lender_user_access_48 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_48 to etl_loan;

create table star_loan.loan_lender_user_access_49
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_49_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 49);

alter table star_loan.loan_lender_user_access_49 owner to deployer;

create index loan_lender_user_access_49_etl_batch_id_idx
    on star_loan.loan_lender_user_access_49 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_49 to readonly;

grant select on star_loan.loan_lender_user_access_49 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_49 to etl_loan;

create table star_loan.loan_lender_user_access_50
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_50_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 50);

alter table star_loan.loan_lender_user_access_50 owner to deployer;

create index loan_lender_user_access_50_etl_batch_id_idx
    on star_loan.loan_lender_user_access_50 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_50 to readonly;

grant select on star_loan.loan_lender_user_access_50 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_50 to etl_loan;

create table star_loan.loan_lender_user_access_51
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_51_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 51);

alter table star_loan.loan_lender_user_access_51 owner to deployer;

create index loan_lender_user_access_51_etl_batch_id_idx
    on star_loan.loan_lender_user_access_51 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_51 to readonly;

grant select on star_loan.loan_lender_user_access_51 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_51 to etl_loan;

create table star_loan.loan_lender_user_access_52
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_52_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 52);

alter table star_loan.loan_lender_user_access_52 owner to deployer;

create index loan_lender_user_access_52_etl_batch_id_idx
    on star_loan.loan_lender_user_access_52 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_52 to readonly;

grant select on star_loan.loan_lender_user_access_52 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_52 to etl_loan;

create table star_loan.loan_lender_user_access_53
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_53_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 53);

alter table star_loan.loan_lender_user_access_53 owner to deployer;

create index loan_lender_user_access_53_etl_batch_id_idx
    on star_loan.loan_lender_user_access_53 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_53 to readonly;

grant select on star_loan.loan_lender_user_access_53 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_53 to etl_loan;

create table star_loan.loan_lender_user_access_54
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_54_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 54);

alter table star_loan.loan_lender_user_access_54 owner to deployer;

create index loan_lender_user_access_54_etl_batch_id_idx
    on star_loan.loan_lender_user_access_54 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_54 to readonly;

grant select on star_loan.loan_lender_user_access_54 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_54 to etl_loan;

create table star_loan.loan_lender_user_access_55
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_55_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 55);

alter table star_loan.loan_lender_user_access_55 owner to deployer;

create index loan_lender_user_access_55_etl_batch_id_idx
    on star_loan.loan_lender_user_access_55 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_55 to readonly;

grant select on star_loan.loan_lender_user_access_55 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_55 to etl_loan;

create table star_loan.loan_lender_user_access_56
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_56_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 56);

alter table star_loan.loan_lender_user_access_56 owner to deployer;

create index loan_lender_user_access_56_etl_batch_id_idx
    on star_loan.loan_lender_user_access_56 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_56 to readonly;

grant select on star_loan.loan_lender_user_access_56 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_56 to etl_loan;

create table star_loan.loan_lender_user_access_57
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_57_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 57);

alter table star_loan.loan_lender_user_access_57 owner to deployer;

create index loan_lender_user_access_57_etl_batch_id_idx
    on star_loan.loan_lender_user_access_57 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_57 to readonly;

grant select on star_loan.loan_lender_user_access_57 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_57 to etl_loan;

create table star_loan.loan_lender_user_access_58
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_58_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 58);

alter table star_loan.loan_lender_user_access_58 owner to deployer;

create index loan_lender_user_access_58_etl_batch_id_idx
    on star_loan.loan_lender_user_access_58 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_58 to readonly;

grant select on star_loan.loan_lender_user_access_58 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_58 to etl_loan;

create table star_loan.loan_lender_user_access_59
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_59_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 59);

alter table star_loan.loan_lender_user_access_59 owner to deployer;

create index loan_lender_user_access_59_etl_batch_id_idx
    on star_loan.loan_lender_user_access_59 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_59 to readonly;

grant select on star_loan.loan_lender_user_access_59 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_59 to etl_loan;

create table star_loan.loan_lender_user_access_60
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_60_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 60);

alter table star_loan.loan_lender_user_access_60 owner to deployer;

create index loan_lender_user_access_60_etl_batch_id_idx
    on star_loan.loan_lender_user_access_60 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_60 to readonly;

grant select on star_loan.loan_lender_user_access_60 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_60 to etl_loan;

create table star_loan.loan_lender_user_access_61
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_61_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 61);

alter table star_loan.loan_lender_user_access_61 owner to deployer;

create index loan_lender_user_access_61_etl_batch_id_idx
    on star_loan.loan_lender_user_access_61 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_61 to readonly;

grant select on star_loan.loan_lender_user_access_61 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_61 to etl_loan;

create table star_loan.loan_lender_user_access_62
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_62_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 62);

alter table star_loan.loan_lender_user_access_62 owner to deployer;

create index loan_lender_user_access_62_etl_batch_id_idx
    on star_loan.loan_lender_user_access_62 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_62 to readonly;

grant select on star_loan.loan_lender_user_access_62 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_62 to etl_loan;

create table star_loan.loan_lender_user_access_63
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_63_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 63);

alter table star_loan.loan_lender_user_access_63 owner to deployer;

create index loan_lender_user_access_63_etl_batch_id_idx
    on star_loan.loan_lender_user_access_63 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_63 to readonly;

grant select on star_loan.loan_lender_user_access_63 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_63 to etl_loan;

create table star_loan.loan_lender_user_access_64
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_64_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 64);

alter table star_loan.loan_lender_user_access_64 owner to deployer;

create index loan_lender_user_access_64_etl_batch_id_idx
    on star_loan.loan_lender_user_access_64 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_64 to readonly;

grant select on star_loan.loan_lender_user_access_64 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_64 to etl_loan;

create table star_loan.loan_lender_user_access_65
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_65_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 65);

alter table star_loan.loan_lender_user_access_65 owner to deployer;

create index loan_lender_user_access_65_etl_batch_id_idx
    on star_loan.loan_lender_user_access_65 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_65 to readonly;

grant select on star_loan.loan_lender_user_access_65 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_65 to etl_loan;

create table star_loan.loan_lender_user_access_66
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_66_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 66);

alter table star_loan.loan_lender_user_access_66 owner to deployer;

create index loan_lender_user_access_66_etl_batch_id_idx
    on star_loan.loan_lender_user_access_66 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_66 to readonly;

grant select on star_loan.loan_lender_user_access_66 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_66 to etl_loan;

create table star_loan.loan_lender_user_access_67
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_67_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 67);

alter table star_loan.loan_lender_user_access_67 owner to deployer;

create index loan_lender_user_access_67_etl_batch_id_idx
    on star_loan.loan_lender_user_access_67 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_67 to readonly;

grant select on star_loan.loan_lender_user_access_67 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_67 to etl_loan;

create table star_loan.loan_lender_user_access_68
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_68_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 68);

alter table star_loan.loan_lender_user_access_68 owner to deployer;

create index loan_lender_user_access_68_etl_batch_id_idx
    on star_loan.loan_lender_user_access_68 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_68 to readonly;

grant select on star_loan.loan_lender_user_access_68 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_68 to etl_loan;

create table star_loan.loan_lender_user_access_69
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_69_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 69);

alter table star_loan.loan_lender_user_access_69 owner to deployer;

create index loan_lender_user_access_69_etl_batch_id_idx
    on star_loan.loan_lender_user_access_69 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_69 to readonly;

grant select on star_loan.loan_lender_user_access_69 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_69 to etl_loan;

create table star_loan.loan_lender_user_access_70
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_70_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 70);

alter table star_loan.loan_lender_user_access_70 owner to deployer;

create index loan_lender_user_access_70_etl_batch_id_idx
    on star_loan.loan_lender_user_access_70 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_70 to readonly;

grant select on star_loan.loan_lender_user_access_70 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_70 to etl_loan;

create table star_loan.loan_lender_user_access_71
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_71_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 71);

alter table star_loan.loan_lender_user_access_71 owner to deployer;

create index loan_lender_user_access_71_etl_batch_id_idx
    on star_loan.loan_lender_user_access_71 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_71 to readonly;

grant select on star_loan.loan_lender_user_access_71 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_71 to etl_loan;

create table star_loan.loan_lender_user_access_72
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_72_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 72);

alter table star_loan.loan_lender_user_access_72 owner to deployer;

create index loan_lender_user_access_72_etl_batch_id_idx
    on star_loan.loan_lender_user_access_72 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_72 to readonly;

grant select on star_loan.loan_lender_user_access_72 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_72 to etl_loan;

create table star_loan.loan_lender_user_access_73
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_73_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 73);

alter table star_loan.loan_lender_user_access_73 owner to deployer;

create index loan_lender_user_access_73_etl_batch_id_idx
    on star_loan.loan_lender_user_access_73 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_73 to readonly;

grant select on star_loan.loan_lender_user_access_73 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_73 to etl_loan;

create table star_loan.loan_lender_user_access_74
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_74_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 74);

alter table star_loan.loan_lender_user_access_74 owner to deployer;

create index loan_lender_user_access_74_etl_batch_id_idx
    on star_loan.loan_lender_user_access_74 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_74 to readonly;

grant select on star_loan.loan_lender_user_access_74 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_74 to etl_loan;

create table star_loan.loan_lender_user_access_75
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_75_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 75);

alter table star_loan.loan_lender_user_access_75 owner to deployer;

create index loan_lender_user_access_75_etl_batch_id_idx
    on star_loan.loan_lender_user_access_75 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_75 to readonly;

grant select on star_loan.loan_lender_user_access_75 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_75 to etl_loan;

create table star_loan.loan_lender_user_access_76
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_76_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 76);

alter table star_loan.loan_lender_user_access_76 owner to deployer;

create index loan_lender_user_access_76_etl_batch_id_idx
    on star_loan.loan_lender_user_access_76 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_76 to readonly;

grant select on star_loan.loan_lender_user_access_76 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_76 to etl_loan;

create table star_loan.loan_lender_user_access_77
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_77_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 77);

alter table star_loan.loan_lender_user_access_77 owner to deployer;

create index loan_lender_user_access_77_etl_batch_id_idx
    on star_loan.loan_lender_user_access_77 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_77 to readonly;

grant select on star_loan.loan_lender_user_access_77 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_77 to etl_loan;

create table star_loan.loan_lender_user_access_78
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_78_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 78);

alter table star_loan.loan_lender_user_access_78 owner to deployer;

create index loan_lender_user_access_78_etl_batch_id_idx
    on star_loan.loan_lender_user_access_78 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_78 to readonly;

grant select on star_loan.loan_lender_user_access_78 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_78 to etl_loan;

create table star_loan.loan_lender_user_access_79
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_79_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 79);

alter table star_loan.loan_lender_user_access_79 owner to deployer;

create index loan_lender_user_access_79_etl_batch_id_idx
    on star_loan.loan_lender_user_access_79 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_79 to readonly;

grant select on star_loan.loan_lender_user_access_79 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_79 to etl_loan;

create table star_loan.loan_lender_user_access_80
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_80_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 80);

alter table star_loan.loan_lender_user_access_80 owner to deployer;

create index loan_lender_user_access_80_etl_batch_id_idx
    on star_loan.loan_lender_user_access_80 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_80 to readonly;

grant select on star_loan.loan_lender_user_access_80 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_80 to etl_loan;

create table star_loan.loan_lender_user_access_81
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_81_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 81);

alter table star_loan.loan_lender_user_access_81 owner to deployer;

create index loan_lender_user_access_81_etl_batch_id_idx
    on star_loan.loan_lender_user_access_81 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_81 to readonly;

grant select on star_loan.loan_lender_user_access_81 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_81 to etl_loan;

create table star_loan.loan_lender_user_access_82
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_82_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 82);

alter table star_loan.loan_lender_user_access_82 owner to deployer;

create index loan_lender_user_access_82_etl_batch_id_idx
    on star_loan.loan_lender_user_access_82 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_82 to readonly;

grant select on star_loan.loan_lender_user_access_82 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_82 to etl_loan;

create table star_loan.loan_lender_user_access_83
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_83_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 83);

alter table star_loan.loan_lender_user_access_83 owner to deployer;

create index loan_lender_user_access_83_etl_batch_id_idx
    on star_loan.loan_lender_user_access_83 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_83 to readonly;

grant select on star_loan.loan_lender_user_access_83 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_83 to etl_loan;

create table star_loan.loan_lender_user_access_84
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_84_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 84);

alter table star_loan.loan_lender_user_access_84 owner to deployer;

create index loan_lender_user_access_84_etl_batch_id_idx
    on star_loan.loan_lender_user_access_84 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_84 to readonly;

grant select on star_loan.loan_lender_user_access_84 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_84 to etl_loan;

create table star_loan.loan_lender_user_access_85
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_85_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 85);

alter table star_loan.loan_lender_user_access_85 owner to deployer;

create index loan_lender_user_access_85_etl_batch_id_idx
    on star_loan.loan_lender_user_access_85 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_85 to readonly;

grant select on star_loan.loan_lender_user_access_85 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_85 to etl_loan;

create table star_loan.loan_lender_user_access_86
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_86_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 86);

alter table star_loan.loan_lender_user_access_86 owner to deployer;

create index loan_lender_user_access_86_etl_batch_id_idx
    on star_loan.loan_lender_user_access_86 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_86 to readonly;

grant select on star_loan.loan_lender_user_access_86 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_86 to etl_loan;

create table star_loan.loan_lender_user_access_87
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_87_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 87);

alter table star_loan.loan_lender_user_access_87 owner to deployer;

create index loan_lender_user_access_87_etl_batch_id_idx
    on star_loan.loan_lender_user_access_87 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_87 to readonly;

grant select on star_loan.loan_lender_user_access_87 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_87 to etl_loan;

create table star_loan.loan_lender_user_access_88
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_88_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 88);

alter table star_loan.loan_lender_user_access_88 owner to deployer;

create index loan_lender_user_access_88_etl_batch_id_idx
    on star_loan.loan_lender_user_access_88 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_88 to readonly;

grant select on star_loan.loan_lender_user_access_88 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_88 to etl_loan;

create table star_loan.loan_lender_user_access_89
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_89_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 89);

alter table star_loan.loan_lender_user_access_89 owner to deployer;

create index loan_lender_user_access_89_etl_batch_id_idx
    on star_loan.loan_lender_user_access_89 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_89 to readonly;

grant select on star_loan.loan_lender_user_access_89 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_89 to etl_loan;

create table star_loan.loan_lender_user_access_90
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_90_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 90);

alter table star_loan.loan_lender_user_access_90 owner to deployer;

create index loan_lender_user_access_90_etl_batch_id_idx
    on star_loan.loan_lender_user_access_90 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_90 to readonly;

grant select on star_loan.loan_lender_user_access_90 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_90 to etl_loan;

create table star_loan.loan_lender_user_access_91
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_91_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 91);

alter table star_loan.loan_lender_user_access_91 owner to deployer;

create index loan_lender_user_access_91_etl_batch_id_idx
    on star_loan.loan_lender_user_access_91 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_91 to readonly;

grant select on star_loan.loan_lender_user_access_91 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_91 to etl_loan;

create table star_loan.loan_lender_user_access_92
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_92_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 92);

alter table star_loan.loan_lender_user_access_92 owner to deployer;

create index loan_lender_user_access_92_etl_batch_id_idx
    on star_loan.loan_lender_user_access_92 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_92 to readonly;

grant select on star_loan.loan_lender_user_access_92 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_92 to etl_loan;

create table star_loan.loan_lender_user_access_93
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_93_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 93);

alter table star_loan.loan_lender_user_access_93 owner to deployer;

create index loan_lender_user_access_93_etl_batch_id_idx
    on star_loan.loan_lender_user_access_93 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_93 to readonly;

grant select on star_loan.loan_lender_user_access_93 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_93 to etl_loan;

create table star_loan.loan_lender_user_access_94
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_94_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 94);

alter table star_loan.loan_lender_user_access_94 owner to deployer;

create index loan_lender_user_access_94_etl_batch_id_idx
    on star_loan.loan_lender_user_access_94 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_94 to readonly;

grant select on star_loan.loan_lender_user_access_94 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_94 to etl_loan;

create table star_loan.loan_lender_user_access_95
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_95_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 95);

alter table star_loan.loan_lender_user_access_95 owner to deployer;

create index loan_lender_user_access_95_etl_batch_id_idx
    on star_loan.loan_lender_user_access_95 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_95 to readonly;

grant select on star_loan.loan_lender_user_access_95 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_95 to etl_loan;

create table star_loan.loan_lender_user_access_96
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_96_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 96);

alter table star_loan.loan_lender_user_access_96 owner to deployer;

create index loan_lender_user_access_96_etl_batch_id_idx
    on star_loan.loan_lender_user_access_96 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_96 to readonly;

grant select on star_loan.loan_lender_user_access_96 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_96 to etl_loan;

create table star_loan.loan_lender_user_access_97
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_97_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 97);

alter table star_loan.loan_lender_user_access_97 owner to deployer;

create index loan_lender_user_access_97_etl_batch_id_idx
    on star_loan.loan_lender_user_access_97 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_97 to readonly;

grant select on star_loan.loan_lender_user_access_97 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_97 to etl_loan;

create table star_loan.loan_lender_user_access_98
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_98_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 98);

alter table star_loan.loan_lender_user_access_98 owner to deployer;

create index loan_lender_user_access_98_etl_batch_id_idx
    on star_loan.loan_lender_user_access_98 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_98 to readonly;

grant select on star_loan.loan_lender_user_access_98 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_98 to etl_loan;

create table star_loan.loan_lender_user_access_99
(
    dwid default nextval('star_loan.loan_lender_user_access_dwid_seq1'::regclass) not null,
    data_source_dwid not null,
    data_source_integration_id not null,
    octane_username not null,
    loan_dwid not null,
    account_pid not null,
    constraint loan_lender_user_access_99_pkey
        primary key (octane_username, loan_dwid, account_pid)
)
FOR VALUES WITH (modulus 100, remainder 99);

alter table star_loan.loan_lender_user_access_99 owner to deployer;

create index loan_lender_user_access_99_etl_batch_id_idx
    on star_loan.loan_lender_user_access_99 (etl_batch_id);

grant select on star_loan.loan_lender_user_access_99 to readonly;

grant select on star_loan.loan_lender_user_access_99 to svc_looker_operations;

grant delete, insert, select, update on star_loan.loan_lender_user_access_99 to etl_loan;

create table staging_octane.smart_doc_validity_date_case
(
    sdvdc_pid bigint not null
        constraint pk_smart_doc_validity_date_case
            primary key,
    sdvdc_version integer,
    sdvdc_smart_doc_pid bigint,
    sdvdc_criteria_pid bigint,
    sdvdc_deal_child_type varchar(128),
    sdvdc_deal_child_relationship_type varchar(128),
    sdvdc_doc_validity_type varchar(128),
    sdvdc_doc_key_date_type varchar(128),
    sdvdc_expiration_calendar_rule_type varchar(128),
    sdvdc_days_before_key_date integer,
    sdvdc_warning_days integer,
    sdvdc_ordinal integer,
    sdvdc_else_case boolean,
    sdvdc_active boolean
);

alter table staging_octane.smart_doc_validity_date_case owner to deployer;

create index idx_smart_doc_validity_date_case__pid_version
    on staging_octane.smart_doc_validity_date_case (sdvdc_pid, sdvdc_version);

grant select on staging_octane.smart_doc_validity_date_case to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_doc_validity_date_case to dms_octane_writer;

grant select on staging_octane.smart_doc_validity_date_case to etl_loan;

create table staging_octane.proposal_doc_validity
(
    prpdv_pid bigint not null
        constraint pk_proposal_doc_validity
            primary key,
    prpdv_version integer,
    prpdv_proposal_doc_pid bigint,
    prpdv_smart_doc_validity_date_case_pid bigint,
    prpdv_deal_pid bigint,
    prpdv_proposal_pid bigint,
    prpdv_valid_from_date date,
    prpdv_valid_through_date date,
    prpdv_key_date date,
    prpdv_doc_validity_type varchar(128),
    prpdv_doc_key_date_type varchar(128),
    prpdv_expiration_calendar_rule_type varchar(128),
    prpdv_days_before_key_date integer,
    prpdv_warning_days integer,
    prpdv_criteria_html varchar(16000)
);

alter table staging_octane.proposal_doc_validity owner to deployer;

create index idx_proposal_doc_validity__pid_version
    on staging_octane.proposal_doc_validity (prpdv_pid, prpdv_version);

grant select on staging_octane.proposal_doc_validity to readonly;

grant delete, insert, select, truncate, update on staging_octane.proposal_doc_validity to dms_octane_writer;

grant select on staging_octane.proposal_doc_validity to etl_loan;

create table history_octane.smart_doc_validity_date_case
(
    sdvdc_pid bigint,
    sdvdc_version integer,
    sdvdc_smart_doc_pid bigint,
    sdvdc_criteria_pid bigint,
    sdvdc_criteria_html varchar(16000),
    sdvdc_deal_child_type varchar(128),
    sdvdc_deal_child_relationship_type varchar(128),
    sdvdc_doc_validity_type varchar(128),
    sdvdc_doc_key_date_type varchar(128),
    sdvdc_expiration_calendar_rule_type varchar(128),
    sdvdc_days_before_key_date integer,
    sdvdc_warning_days integer,
    sdvdc_ordinal integer,
    sdvdc_else_case boolean,
    sdvdc_active boolean,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.smart_doc_validity_date_case owner to deployer;

create index idx_smart_doc_validity_date_case__pid
    on history_octane.smart_doc_validity_date_case (sdvdc_pid);

create index idx_smart_doc_validity_date_case__data_source_updated_datetime
    on history_octane.smart_doc_validity_date_case (data_source_updated_datetime);

create index idx_smart_doc_validity_date_case__data_source_deleted_flag
    on history_octane.smart_doc_validity_date_case (data_source_deleted_flag);

create index idx_smart_doc_validity_date_case__pid_version
    on history_octane.smart_doc_validity_date_case (sdvdc_pid, sdvdc_version);

create index fk_smart_doc_validity_date_case_1
    on history_octane.smart_doc_validity_date_case (sdvdc_smart_doc_pid);

create index fk_smart_doc_validity_date_case_2
    on history_octane.smart_doc_validity_date_case (sdvdc_criteria_pid);

create index fkt_sdvdc_deal_child_type
    on history_octane.smart_doc_validity_date_case (sdvdc_deal_child_type);

create index fkt_sdvdc_deal_child_relationship_type
    on history_octane.smart_doc_validity_date_case (sdvdc_deal_child_relationship_type);

create index fkt_sdvdc_doc_validity_type
    on history_octane.smart_doc_validity_date_case (sdvdc_doc_validity_type);

create index fkt_sdvdc_doc_key_date_type
    on history_octane.smart_doc_validity_date_case (sdvdc_doc_key_date_type);

create index fkt_sdvdc_expiration_calendar_rule_type
    on history_octane.smart_doc_validity_date_case (sdvdc_expiration_calendar_rule_type);

create index idx_smart_doc_validity_date_case__etl_batch_id
    on history_octane.smart_doc_validity_date_case (etl_batch_id);

grant select on history_octane.smart_doc_validity_date_case to readonly;

grant insert, select, update on history_octane.smart_doc_validity_date_case to etl_loan;

create table history_octane.proposal_doc_validity
(
    prpdv_pid bigint,
    prpdv_version integer,
    prpdv_proposal_doc_pid bigint,
    prpdv_smart_doc_validity_date_case_pid bigint,
    prpdv_deal_pid bigint,
    prpdv_proposal_pid bigint,
    prpdv_valid_from_date date,
    prpdv_valid_through_date date,
    prpdv_key_date date,
    prpdv_doc_validity_type varchar(128),
    prpdv_doc_key_date_type varchar(128),
    prpdv_expiration_calendar_rule_type varchar(128),
    prpdv_days_before_key_date integer,
    prpdv_warning_days integer,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    prpdv_criteria_html varchar(16000),
    etl_batch_id text
);

alter table history_octane.proposal_doc_validity owner to deployer;

create index idx_proposal_doc_validity__pid
    on history_octane.proposal_doc_validity (prpdv_pid);

create index idx_proposal_doc_validity__data_source_updated_datetime
    on history_octane.proposal_doc_validity (data_source_updated_datetime);

create index idx_proposal_doc_validity__data_source_deleted_flag
    on history_octane.proposal_doc_validity (data_source_deleted_flag);

create index idx_proposal_doc_validity__pid_version
    on history_octane.proposal_doc_validity (prpdv_pid, prpdv_version);

create index fk_proposal_doc_validity_1
    on history_octane.proposal_doc_validity (prpdv_proposal_doc_pid);

create index fk_proposal_doc_validity_2
    on history_octane.proposal_doc_validity (prpdv_smart_doc_validity_date_case_pid);

create index fk_proposal_doc_validity_3
    on history_octane.proposal_doc_validity (prpdv_deal_pid);

create index fk_proposal_doc_validity_4
    on history_octane.proposal_doc_validity (prpdv_proposal_pid);

create index fkt_prpdv_doc_validity_type
    on history_octane.proposal_doc_validity (prpdv_doc_validity_type);

create index fkt_prpdv_doc_key_date_type
    on history_octane.proposal_doc_validity (prpdv_doc_key_date_type);

create index fkt_prpdv_expiration_calendar_rule_type
    on history_octane.proposal_doc_validity (prpdv_expiration_calendar_rule_type);

create index idx_proposal_doc_validity__etl_batch_id
    on history_octane.proposal_doc_validity (etl_batch_id);

grant select on history_octane.proposal_doc_validity to readonly;

grant insert, select, update on history_octane.proposal_doc_validity to etl_loan;

create table staging_octane.lender_concession_item
(
    lci_pid bigint not null
        constraint pk_lender_concession_item
            primary key,
    lci_version integer,
    lci_lender_concession_request_pid bigint,
    lci_loan_charge_pid bigint,
    lci_allocation_amount numeric(15,2),
    lci_absorb_cost boolean
);

alter table staging_octane.lender_concession_item owner to deployer;

create index idx_lender_concession_item__pid_version
    on staging_octane.lender_concession_item (lci_pid, lci_version);

grant select on staging_octane.lender_concession_item to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_concession_item to dms_octane_writer;

grant select on staging_octane.lender_concession_item to etl_loan;

create table staging_octane.lender_concession_request_number_ticker
(
    lcrnt_pid bigint not null
        constraint pk_lender_concession_request_number_ticker
            primary key,
    lcrnt_version integer,
    lcrnt_proposal_pid bigint,
    lcrnt_next_lender_concession_request_number bigint
);

alter table staging_octane.lender_concession_request_number_ticker owner to deployer;

create index idx_lender_concession_request_number_ticker__pid_version
    on staging_octane.lender_concession_request_number_ticker (lcrnt_pid, lcrnt_version);

grant select on staging_octane.lender_concession_request_number_ticker to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_concession_request_number_ticker to dms_octane_writer;

grant select on staging_octane.lender_concession_request_number_ticker to etl_loan;

create table history_octane.lender_concession_item
(
    lci_pid bigint,
    lci_version integer,
    lci_lender_concession_request_pid bigint,
    lci_loan_charge_pid bigint,
    lci_allocation_amount numeric(15,2),
    lci_absorb_cost boolean,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.lender_concession_item owner to deployer;

create index idx_lender_concession_item__pid
    on history_octane.lender_concession_item (lci_pid);

create index idx_lender_concession_item__data_source_updated_datetime
    on history_octane.lender_concession_item (data_source_updated_datetime);

create index idx_lender_concession_item__data_source_deleted_flag
    on history_octane.lender_concession_item (data_source_deleted_flag);

create index idx_lender_concession_item__pid_version
    on history_octane.lender_concession_item (lci_pid, lci_version);

create index fk_lender_concession_item_1
    on history_octane.lender_concession_item (lci_lender_concession_request_pid);

create index fk_lender_concession_item_2
    on history_octane.lender_concession_item (lci_loan_charge_pid);

create index idx_lender_concession_item__etl_batch_id
    on history_octane.lender_concession_item (etl_batch_id);

grant select on history_octane.lender_concession_item to readonly;

grant insert, select, update on history_octane.lender_concession_item to etl_loan;

create table history_octane.lender_concession_request_number_ticker
(
    lcrnt_pid bigint,
    lcrnt_version integer,
    lcrnt_proposal_pid bigint,
    lcrnt_next_lender_concession_request_number bigint,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.lender_concession_request_number_ticker owner to deployer;

create index idx_lender_concession_request_number_ticker__pid
    on history_octane.lender_concession_request_number_ticker (lcrnt_pid);

create index idx_cfe9d2dd748f954c64b257eeaeca2383
    on history_octane.lender_concession_request_number_ticker (data_source_updated_datetime);

create index idx_2669e76ab84e8f7ff70b4cb684225037
    on history_octane.lender_concession_request_number_ticker (data_source_deleted_flag);

create index idx_lender_concession_request_number_ticker__pid_version
    on history_octane.lender_concession_request_number_ticker (lcrnt_pid, lcrnt_version);

create index fk_lender_concession_request_number_ticker_1
    on history_octane.lender_concession_request_number_ticker (lcrnt_proposal_pid);

create index idx_lender_concession_request_number_ticker__etl_batch_id
    on history_octane.lender_concession_request_number_ticker (etl_batch_id);

grant select on history_octane.lender_concession_request_number_ticker to readonly;

grant insert, select, update on history_octane.lender_concession_request_number_ticker to etl_loan;

create table staging_octane.deal_note_category_type
(
    code varchar(128) not null
        constraint pk_deal_note_category_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.deal_note_category_type owner to deployer;

grant select on staging_octane.deal_note_category_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_note_category_type to dms_octane_writer;

grant select on staging_octane.deal_note_category_type to etl_loan;

create table staging_octane.doc_status_type
(
    code varchar(128) not null
        constraint pk_doc_status_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.doc_status_type owner to deployer;

grant select on staging_octane.doc_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.doc_status_type to dms_octane_writer;

grant select on staging_octane.doc_status_type to etl_loan;

create table history_octane.deal_note_category_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.deal_note_category_type owner to deployer;

create index idx_deal_note_category_type__data_source_updated_datetime
    on history_octane.deal_note_category_type (data_source_updated_datetime);

create index idx_deal_note_category_type__data_source_deleted_flag
    on history_octane.deal_note_category_type (data_source_deleted_flag);

create index idx_deal_note_category_type__etl_batch_id
    on history_octane.deal_note_category_type (etl_batch_id);

grant select on history_octane.deal_note_category_type to readonly;

grant insert, select, update on history_octane.deal_note_category_type to etl_loan;

create table history_octane.doc_status_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.doc_status_type owner to deployer;

create index idx_doc_status_type__data_source_updated_datetime
    on history_octane.doc_status_type (data_source_updated_datetime);

create index idx_doc_status_type__data_source_deleted_flag
    on history_octane.doc_status_type (data_source_deleted_flag);

create index idx_doc_status_type__etl_batch_id
    on history_octane.doc_status_type (etl_batch_id);

grant select on history_octane.doc_status_type to readonly;

grant insert, select, update on history_octane.doc_status_type to etl_loan;

create table staging_octane.location_status_type
(
    code varchar(128) not null
        constraint pk_location_status_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.location_status_type owner to deployer;

grant select on staging_octane.location_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.location_status_type to dms_octane_writer;

grant select on staging_octane.location_status_type to etl_loan;

create table staging_octane.location
(
    loc_pid bigint not null
        constraint pk_location
            primary key,
    loc_version integer,
    loc_account_pid bigint,
    loc_address_street1 varchar(128),
    loc_address_street2 varchar(128),
    loc_address_city varchar(128),
    loc_address_state varchar(128),
    loc_address_postal_code varchar(128),
    loc_location_name varchar(256),
    loc_location_id integer,
    loc_location_remote boolean,
    loc_location_status_type varchar(128),
    loc_fha_field_office_code varchar(8),
    loc_documents_url varchar(256)
);

alter table staging_octane.location owner to deployer;

create index idx_location__pid_version
    on staging_octane.location (loc_pid, loc_version);

grant select on staging_octane.location to readonly;

grant delete, insert, select, truncate, update on staging_octane.location to dms_octane_writer;

grant select on staging_octane.location to etl_loan;

create table staging_octane.location_lease
(
    locl_pid bigint not null
        constraint pk_location_lease
            primary key,
    locl_version integer,
    locl_location_pid bigint,
    locl_from_date date,
    locl_through_date date,
    locl_monthly_lease_amount numeric(15,2),
    locl_cubicle_count integer,
    locl_office_count integer
);

alter table staging_octane.location_lease owner to deployer;

create index idx_location_lease__pid_version
    on staging_octane.location_lease (locl_pid, locl_version);

grant select on staging_octane.location_lease to readonly;

grant delete, insert, select, truncate, update on staging_octane.location_lease to dms_octane_writer;

grant select on staging_octane.location_lease to etl_loan;

create table staging_octane.company_location_type
(
    code varchar(128) not null
        constraint pk_company_location_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.company_location_type owner to deployer;

grant select on staging_octane.company_location_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.company_location_type to dms_octane_writer;

grant select on staging_octane.company_location_type to etl_loan;

create table staging_octane.company_location
(
    cmloc_pid bigint not null
        constraint pk_company_location
            primary key,
    cmloc_version integer,
    cmloc_company_pid bigint,
    cmloc_location_pid bigint,
    cmloc_from_date date,
    cmloc_through_date date,
    cmloc_company_location_type varchar(128),
    cmloc_nmls_id varchar(16),
    cmloc_fha_branch_id varchar(16),
    cmloc_fha_branch_id_qualified varchar(16),
    cmloc_office_phone varchar(32),
    cmloc_office_phone_extension varchar(16),
    cmloc_fax varchar(32)
);

alter table staging_octane.company_location owner to deployer;

create index idx_company_location__pid_version
    on staging_octane.company_location (cmloc_pid, cmloc_version);

grant select on staging_octane.company_location to readonly;

grant delete, insert, select, truncate, update on staging_octane.company_location to dms_octane_writer;

grant select on staging_octane.company_location to etl_loan;

create table staging_octane.lender_user_location_type
(
    code varchar(128) not null
        constraint pk_lender_user_location_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.lender_user_location_type owner to deployer;

grant select on staging_octane.lender_user_location_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_user_location_type to dms_octane_writer;

grant select on staging_octane.lender_user_location_type to etl_loan;

create table staging_octane.workspace_type
(
    code varchar(128) not null
        constraint pk_workspace_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.workspace_type owner to deployer;

grant select on staging_octane.workspace_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.workspace_type to dms_octane_writer;

grant select on staging_octane.workspace_type to etl_loan;

create table staging_octane.lender_user_location
(
    luloc_pid bigint not null
        constraint pk_lender_user_location
            primary key,
    luloc_version integer,
    luloc_company_pid bigint,
    luloc_lender_user_pid bigint,
    luloc_location_pid bigint,
    luloc_from_date date,
    luloc_lender_user_location_type varchar(128),
    luloc_workspace_type varchar(128),
    luloc_workspace_code varchar(16),
    luloc_current_physical_location boolean,
    luloc_current_license_location boolean,
    luloc_synthetic_unique_current_physical_location boolean,
    luloc_synthetic_unique_current_license_location boolean
);

alter table staging_octane.lender_user_location owner to deployer;

create index idx_lender_user_location__pid_version
    on staging_octane.lender_user_location (luloc_pid, luloc_version);

grant select on staging_octane.lender_user_location to readonly;

grant delete, insert, select, truncate, update on staging_octane.lender_user_location to dms_octane_writer;

grant select on staging_octane.lender_user_location to etl_loan;

create table staging_octane.location_id_ticker
(
    loctk_pid bigint not null
        constraint pk_location_id_ticker
            primary key,
    loctk_version integer,
    loctk_account_pid bigint,
    loctk_next_location_id integer
);

alter table staging_octane.location_id_ticker owner to deployer;

create index idx_location_id_ticker__pid_version
    on staging_octane.location_id_ticker (loctk_pid, loctk_version);

grant select on staging_octane.location_id_ticker to readonly;

grant delete, insert, select, truncate, update on staging_octane.location_id_ticker to dms_octane_writer;

grant select on staging_octane.location_id_ticker to etl_loan;

create table staging_octane.location_note
(
    locn_pid bigint not null
        constraint pk_location_note
            primary key,
    locn_version integer,
    locn_location_pid bigint,
    locn_create_datetime timestamp,
    locn_content varchar(16000),
    locn_author_lender_user_pid bigint,
    locn_author_unparsed_name varchar(128)
);

alter table staging_octane.location_note owner to deployer;

create index idx_location_note__pid_version
    on staging_octane.location_note (locn_pid, locn_version);

grant select on staging_octane.location_note to readonly;

grant delete, insert, select, truncate, update on staging_octane.location_note to dms_octane_writer;

grant select on staging_octane.location_note to etl_loan;

create table staging_octane.location_note_comment
(
    locnc_pid bigint not null
        constraint pk_location_note_comment
            primary key,
    locnc_version integer,
    locnc_location_note_pid bigint,
    locnc_create_datetime timestamp,
    locnc_content varchar(16000),
    locnc_author_lender_user_pid bigint,
    locnc_author_unparsed_name varchar(128)
);

alter table staging_octane.location_note_comment owner to deployer;

create index idx_location_note_comment__pid_version
    on staging_octane.location_note_comment (locnc_pid, locnc_version);

grant select on staging_octane.location_note_comment to readonly;

grant delete, insert, select, truncate, update on staging_octane.location_note_comment to dms_octane_writer;

grant select on staging_octane.location_note_comment to etl_loan;

create table staging_octane.location_note_monitor
(
    locnm_pid bigint not null
        constraint pk_location_note_monitor
            primary key,
    locnm_version integer,
    locnm_location_note_pid bigint,
    locnm_lender_user_pid bigint
);

alter table staging_octane.location_note_monitor owner to deployer;

create index idx_location_note_monitor__pid_version
    on staging_octane.location_note_monitor (locnm_pid, locnm_version);

grant select on staging_octane.location_note_monitor to readonly;

grant delete, insert, select, truncate, update on staging_octane.location_note_monitor to dms_octane_writer;

grant select on staging_octane.location_note_monitor to etl_loan;

create table history_octane.location_status_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.location_status_type owner to deployer;

create index idx_location_status_type__data_source_updated_datetime
    on history_octane.location_status_type (data_source_updated_datetime);

create index idx_location_status_type__data_source_deleted_flag
    on history_octane.location_status_type (data_source_deleted_flag);

create index idx_location_status_type__etl_batch_id
    on history_octane.location_status_type (etl_batch_id);

grant select on history_octane.location_status_type to readonly;

grant insert, select, update on history_octane.location_status_type to etl_loan;

create table history_octane.location
(
    loc_pid bigint,
    loc_version integer,
    loc_account_pid bigint,
    loc_address_street1 varchar(128),
    loc_address_street2 varchar(128),
    loc_address_city varchar(128),
    loc_address_state varchar(128),
    loc_address_postal_code varchar(128),
    loc_location_name varchar(256),
    loc_location_id integer,
    loc_location_remote boolean,
    loc_location_status_type varchar(128),
    loc_fha_field_office_code varchar(8),
    loc_documents_url varchar(256),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.location owner to deployer;

create index idx_location__pid
    on history_octane.location (loc_pid);

create index idx_location__data_source_updated_datetime
    on history_octane.location (data_source_updated_datetime);

create index idx_location__data_source_deleted_flag
    on history_octane.location (data_source_deleted_flag);

create index idx_location__pid_version
    on history_octane.location (loc_pid, loc_version);

create index fk_location_1
    on history_octane.location (loc_account_pid);

create index fkt_loc_location_status_type
    on history_octane.location (loc_location_status_type);

create index idx_location__etl_batch_id
    on history_octane.location (etl_batch_id);

grant select on history_octane.location to readonly;

grant insert, select, update on history_octane.location to etl_loan;

create table history_octane.location_lease
(
    locl_pid bigint,
    locl_version integer,
    locl_location_pid bigint,
    locl_from_date date,
    locl_through_date date,
    locl_monthly_lease_amount numeric(15,2),
    locl_cubicle_count integer,
    locl_office_count integer,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.location_lease owner to deployer;

create index idx_location_lease__pid
    on history_octane.location_lease (locl_pid);

create index idx_location_lease__data_source_updated_datetime
    on history_octane.location_lease (data_source_updated_datetime);

create index idx_location_lease__data_source_deleted_flag
    on history_octane.location_lease (data_source_deleted_flag);

create index idx_location_lease__pid_version
    on history_octane.location_lease (locl_pid, locl_version);

create index fk_location_lease_1
    on history_octane.location_lease (locl_location_pid);

create index idx_location_lease__etl_batch_id
    on history_octane.location_lease (etl_batch_id);

grant select on history_octane.location_lease to readonly;

grant insert, select, update on history_octane.location_lease to etl_loan;

create table history_octane.company_location_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.company_location_type owner to deployer;

create index idx_company_location_type__data_source_updated_datetime
    on history_octane.company_location_type (data_source_updated_datetime);

create index idx_company_location_type__data_source_deleted_flag
    on history_octane.company_location_type (data_source_deleted_flag);

create index idx_company_location_type__etl_batch_id
    on history_octane.company_location_type (etl_batch_id);

grant select on history_octane.company_location_type to readonly;

grant insert, select, update on history_octane.company_location_type to etl_loan;

create table history_octane.company_location
(
    cmloc_pid bigint,
    cmloc_version integer,
    cmloc_company_pid bigint,
    cmloc_location_pid bigint,
    cmloc_from_date date,
    cmloc_through_date date,
    cmloc_company_location_type varchar(128),
    cmloc_nmls_id varchar(16),
    cmloc_fha_branch_id varchar(16),
    cmloc_fha_branch_id_qualified varchar(16),
    cmloc_office_phone varchar(32),
    cmloc_office_phone_extension varchar(16),
    cmloc_fax varchar(32),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.company_location owner to deployer;

create index idx_company_location__pid
    on history_octane.company_location (cmloc_pid);

create index idx_company_location__data_source_updated_datetime
    on history_octane.company_location (data_source_updated_datetime);

create index idx_company_location__data_source_deleted_flag
    on history_octane.company_location (data_source_deleted_flag);

create index idx_company_location__pid_version
    on history_octane.company_location (cmloc_pid, cmloc_version);

create index fk_company_location_1
    on history_octane.company_location (cmloc_company_pid);

create index fk_company_location_2
    on history_octane.company_location (cmloc_location_pid);

create index fkt_cmloc_company_location_type
    on history_octane.company_location (cmloc_company_location_type);

create index idx_company_location__etl_batch_id
    on history_octane.company_location (etl_batch_id);

grant select on history_octane.company_location to readonly;

grant insert, select, update on history_octane.company_location to etl_loan;

create table history_octane.lender_user_location_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.lender_user_location_type owner to deployer;

create index idx_lender_user_location_type__data_source_updated_datetime
    on history_octane.lender_user_location_type (data_source_updated_datetime);

create index idx_lender_user_location_type__data_source_deleted_flag
    on history_octane.lender_user_location_type (data_source_deleted_flag);

create index idx_lender_user_location_type__etl_batch_id
    on history_octane.lender_user_location_type (etl_batch_id);

grant select on history_octane.lender_user_location_type to readonly;

grant insert, select, update on history_octane.lender_user_location_type to etl_loan;

create table history_octane.workspace_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.workspace_type owner to deployer;

create index idx_workspace_type__data_source_updated_datetime
    on history_octane.workspace_type (data_source_updated_datetime);

create index idx_workspace_type__data_source_deleted_flag
    on history_octane.workspace_type (data_source_deleted_flag);

create index idx_workspace_type__etl_batch_id
    on history_octane.workspace_type (etl_batch_id);

grant select on history_octane.workspace_type to readonly;

grant insert, select, update on history_octane.workspace_type to etl_loan;

create table history_octane.lender_user_location
(
    luloc_pid bigint,
    luloc_version integer,
    luloc_company_pid bigint,
    luloc_lender_user_pid bigint,
    luloc_location_pid bigint,
    luloc_from_date date,
    luloc_lender_user_location_type varchar(128),
    luloc_workspace_type varchar(128),
    luloc_workspace_code varchar(16),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    luloc_current_physical_location boolean,
    luloc_current_license_location boolean,
    luloc_synthetic_unique_current_physical_location boolean,
    luloc_synthetic_unique_current_license_location boolean,
    etl_batch_id text
);

alter table history_octane.lender_user_location owner to deployer;

create index idx_lender_user_location__pid
    on history_octane.lender_user_location (luloc_pid);

create index idx_lender_user_location__data_source_updated_datetime
    on history_octane.lender_user_location (data_source_updated_datetime);

create index idx_lender_user_location__data_source_deleted_flag
    on history_octane.lender_user_location (data_source_deleted_flag);

create index idx_lender_user_location__pid_version
    on history_octane.lender_user_location (luloc_pid, luloc_version);

create index fk_lender_user_location_1
    on history_octane.lender_user_location (luloc_company_pid);

create index fk_lender_user_location_2
    on history_octane.lender_user_location (luloc_lender_user_pid);

create index fk_lender_user_location_3
    on history_octane.lender_user_location (luloc_location_pid);

create index fkt_luloc_lender_user_location_type
    on history_octane.lender_user_location (luloc_lender_user_location_type);

create index fkt_luloc_workspace_type
    on history_octane.lender_user_location (luloc_workspace_type);

create index idx_lender_user_location__etl_batch_id
    on history_octane.lender_user_location (etl_batch_id);

grant select on history_octane.lender_user_location to readonly;

grant insert, select, update on history_octane.lender_user_location to etl_loan;

create table history_octane.location_id_ticker
(
    loctk_pid bigint,
    loctk_version integer,
    loctk_account_pid bigint,
    loctk_next_location_id integer,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.location_id_ticker owner to deployer;

create index idx_location_id_ticker__pid
    on history_octane.location_id_ticker (loctk_pid);

create index idx_location_id_ticker__data_source_updated_datetime
    on history_octane.location_id_ticker (data_source_updated_datetime);

create index idx_location_id_ticker__data_source_deleted_flag
    on history_octane.location_id_ticker (data_source_deleted_flag);

create index idx_location_id_ticker__pid_version
    on history_octane.location_id_ticker (loctk_pid, loctk_version);

create index fk_location_id_ticker_1
    on history_octane.location_id_ticker (loctk_account_pid);

create index idx_location_id_ticker__etl_batch_id
    on history_octane.location_id_ticker (etl_batch_id);

grant select on history_octane.location_id_ticker to readonly;

grant insert, select, update on history_octane.location_id_ticker to etl_loan;

create table history_octane.location_note
(
    locn_pid bigint,
    locn_version integer,
    locn_location_pid bigint,
    locn_create_datetime timestamp,
    locn_content varchar(16000),
    locn_author_lender_user_pid bigint,
    locn_author_unparsed_name varchar(128),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.location_note owner to deployer;

create index idx_location_note__pid
    on history_octane.location_note (locn_pid);

create index idx_location_note__data_source_updated_datetime
    on history_octane.location_note (data_source_updated_datetime);

create index idx_location_note__data_source_deleted_flag
    on history_octane.location_note (data_source_deleted_flag);

create index idx_location_note__pid_version
    on history_octane.location_note (locn_pid, locn_version);

create index fk_location_note_1
    on history_octane.location_note (locn_location_pid);

create index fk_location_note_2
    on history_octane.location_note (locn_author_lender_user_pid);

create index idx_location_note__etl_batch_id
    on history_octane.location_note (etl_batch_id);

grant select on history_octane.location_note to readonly;

grant insert, select, update on history_octane.location_note to etl_loan;

create table history_octane.location_note_comment
(
    locnc_pid bigint,
    locnc_version integer,
    locnc_location_note_pid bigint,
    locnc_create_datetime timestamp,
    locnc_content varchar(16000),
    locnc_author_lender_user_pid bigint,
    locnc_author_unparsed_name varchar(128),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.location_note_comment owner to deployer;

create index idx_location_note_comment__pid
    on history_octane.location_note_comment (locnc_pid);

create index idx_location_note_comment__data_source_updated_datetime
    on history_octane.location_note_comment (data_source_updated_datetime);

create index idx_location_note_comment__data_source_deleted_flag
    on history_octane.location_note_comment (data_source_deleted_flag);

create index idx_location_note_comment__pid_version
    on history_octane.location_note_comment (locnc_pid, locnc_version);

create index fk_location_note_comment_1
    on history_octane.location_note_comment (locnc_location_note_pid);

create index fk_location_note_comment_2
    on history_octane.location_note_comment (locnc_author_lender_user_pid);

create index idx_location_note_comment__etl_batch_id
    on history_octane.location_note_comment (etl_batch_id);

grant select on history_octane.location_note_comment to readonly;

grant insert, select, update on history_octane.location_note_comment to etl_loan;

create table history_octane.location_note_monitor
(
    locnm_pid bigint,
    locnm_version integer,
    locnm_location_note_pid bigint,
    locnm_lender_user_pid bigint,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.location_note_monitor owner to deployer;

create index idx_location_note_monitor__pid
    on history_octane.location_note_monitor (locnm_pid);

create index idx_location_note_monitor__data_source_updated_datetime
    on history_octane.location_note_monitor (data_source_updated_datetime);

create index idx_location_note_monitor__data_source_deleted_flag
    on history_octane.location_note_monitor (data_source_deleted_flag);

create index idx_location_note_monitor__pid_version
    on history_octane.location_note_monitor (locnm_pid, locnm_version);

create index fk_location_note_monitor_1
    on history_octane.location_note_monitor (locnm_location_note_pid);

create index fk_location_note_monitor_2
    on history_octane.location_note_monitor (locnm_lender_user_pid);

create index idx_location_note_monitor__etl_batch_id
    on history_octane.location_note_monitor (etl_batch_id);

grant select on history_octane.location_note_monitor to readonly;

grant insert, select, update on history_octane.location_note_monitor to etl_loan;

create table staging_octane.smart_message_permission_type
(
    code varchar(128) not null
        constraint pk_smart_message_permission_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.smart_message_permission_type owner to deployer;

grant select on staging_octane.smart_message_permission_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_message_permission_type to dms_octane_writer;

grant select on staging_octane.smart_message_permission_type to etl_loan;

create table staging_octane.smart_message_permission
(
    smp_pid bigint not null
        constraint pk_smart_message_permission
            primary key,
    smp_version integer,
    smp_smart_message_pid bigint,
    smp_role_pid bigint,
    smp_permission_type varchar(128)
);

alter table staging_octane.smart_message_permission owner to deployer;

create index idx_smart_message_permission__pid_version
    on staging_octane.smart_message_permission (smp_pid, smp_version);

grant select on staging_octane.smart_message_permission to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_message_permission to dms_octane_writer;

grant select on staging_octane.smart_message_permission to etl_loan;

create table staging_octane.wf_deal_step_performer_unavailable
(
    wdspu_pid bigint not null
        constraint pk_wf_deal_step_performer_unavailable
            primary key,
    wdspu_version integer,
    wdspu_lender_user_pid bigint,
    wdspu_wf_deal_step_pid bigint,
    wdspu_days_unavailable integer
);

alter table staging_octane.wf_deal_step_performer_unavailable owner to deployer;

create index idx_wf_deal_step_performer_unavailable__pid_version
    on staging_octane.wf_deal_step_performer_unavailable (wdspu_pid, wdspu_version);

grant select on staging_octane.wf_deal_step_performer_unavailable to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_deal_step_performer_unavailable to dms_octane_writer;

grant select on staging_octane.wf_deal_step_performer_unavailable to etl_loan;

create table history_octane.smart_message_permission_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.smart_message_permission_type owner to deployer;

create index idx_smart_message_permission_type__data_source_updated_datetime
    on history_octane.smart_message_permission_type (data_source_updated_datetime);

create index idx_smart_message_permission_type__data_source_deleted_flag
    on history_octane.smart_message_permission_type (data_source_deleted_flag);

create index idx_smart_message_permission_type__etl_batch_id
    on history_octane.smart_message_permission_type (etl_batch_id);

grant select on history_octane.smart_message_permission_type to readonly;

grant insert, select, update on history_octane.smart_message_permission_type to etl_loan;

create table history_octane.smart_message_permission
(
    smp_pid bigint,
    smp_version integer,
    smp_smart_message_pid bigint,
    smp_role_pid bigint,
    smp_permission_type varchar(128),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.smart_message_permission owner to deployer;

create index idx_smart_message_permission__pid
    on history_octane.smart_message_permission (smp_pid);

create index idx_smart_message_permission__data_source_updated_datetime
    on history_octane.smart_message_permission (data_source_updated_datetime);

create index idx_smart_message_permission__data_source_deleted_flag
    on history_octane.smart_message_permission (data_source_deleted_flag);

create index idx_smart_message_permission__pid_version
    on history_octane.smart_message_permission (smp_pid, smp_version);

create index fk_smart_message_permission_1
    on history_octane.smart_message_permission (smp_smart_message_pid);

create index fk_smart_message_permission_2
    on history_octane.smart_message_permission (smp_role_pid);

create index fkt_smp_permission_type
    on history_octane.smart_message_permission (smp_permission_type);

create index idx_smart_message_permission__etl_batch_id
    on history_octane.smart_message_permission (etl_batch_id);

grant select on history_octane.smart_message_permission to readonly;

grant insert, select, update on history_octane.smart_message_permission to etl_loan;

create table history_octane.wf_deal_step_performer_unavailable
(
    wdspu_pid bigint,
    wdspu_version integer,
    wdspu_lender_user_pid bigint,
    wdspu_wf_deal_step_pid bigint,
    wdspu_days_unavailable integer,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.wf_deal_step_performer_unavailable owner to deployer;

create index idx_wf_deal_step_performer_unavailable__pid
    on history_octane.wf_deal_step_performer_unavailable (wdspu_pid);

create index idx_fdd4070c409649d0345ecae4eaff1251
    on history_octane.wf_deal_step_performer_unavailable (data_source_updated_datetime);

create index idx_39af454fd32103c30c4ebcd7e649b094
    on history_octane.wf_deal_step_performer_unavailable (data_source_deleted_flag);

create index idx_wf_deal_step_performer_unavailable__pid_version
    on history_octane.wf_deal_step_performer_unavailable (wdspu_pid, wdspu_version);

create index fk_wf_deal_step_performer_unavailable_1
    on history_octane.wf_deal_step_performer_unavailable (wdspu_lender_user_pid);

create index fk_wf_deal_step_performer_unavailable_2
    on history_octane.wf_deal_step_performer_unavailable (wdspu_wf_deal_step_pid);

create index idx_wf_deal_step_performer_unavailable__etl_batch_id
    on history_octane.wf_deal_step_performer_unavailable (etl_batch_id);

grant select on history_octane.wf_deal_step_performer_unavailable to readonly;

grant insert, select, update on history_octane.wf_deal_step_performer_unavailable to etl_loan;

create table staging_octane.wf_step_note
(
    wfsn_pid bigint not null
        constraint pk_wf_step_note
            primary key,
    wfsn_version integer,
    wfsn_wf_step_pid bigint,
    wfsn_create_datetime timestamp,
    wfsn_content varchar(16000),
    wfsn_author_lender_user_pid bigint,
    wfsn_author_unparsed_name varchar(128)
);

alter table staging_octane.wf_step_note owner to deployer;

create index idx_wf_step_note__pid_version
    on staging_octane.wf_step_note (wfsn_pid, wfsn_version);

grant select on staging_octane.wf_step_note to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_step_note to dms_octane_writer;

grant select on staging_octane.wf_step_note to etl_loan;

create table staging_octane.wf_step_note_comment
(
    wfsnc_pid bigint not null
        constraint pk_wf_step_note_comment
            primary key,
    wfsnc_version integer,
    wfsnc_wf_step_note_pid bigint,
    wfsnc_create_datetime timestamp,
    wfsnc_content varchar(16000),
    wfsnc_author_lender_user_pid bigint,
    wfsnc_author_unparsed_name varchar(128)
);

alter table staging_octane.wf_step_note_comment owner to deployer;

create index idx_wf_step_note_comment__pid_version
    on staging_octane.wf_step_note_comment (wfsnc_pid, wfsnc_version);

grant select on staging_octane.wf_step_note_comment to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_step_note_comment to dms_octane_writer;

grant select on staging_octane.wf_step_note_comment to etl_loan;

create table staging_octane.wf_step_note_monitor
(
    wfsnm_pid bigint not null
        constraint pk_wf_step_note_monitor
            primary key,
    wfsnm_version integer,
    wfsnm_wf_step_note_pid bigint,
    wfsnm_lender_user_pid bigint
);

alter table staging_octane.wf_step_note_monitor owner to deployer;

create index idx_wf_step_note_monitor__pid_version
    on staging_octane.wf_step_note_monitor (wfsnm_pid, wfsnm_version);

grant select on staging_octane.wf_step_note_monitor to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_step_note_monitor to dms_octane_writer;

grant select on staging_octane.wf_step_note_monitor to etl_loan;

create table staging_octane.wf_process_note
(
    wfpn_pid bigint not null
        constraint pk_wf_process_note
            primary key,
    wfpn_version integer,
    wfpn_wf_process_pid bigint,
    wfpn_create_datetime timestamp,
    wfpn_content varchar(16000),
    wfpn_author_lender_user_pid bigint,
    wfpn_author_unparsed_name varchar(128)
);

alter table staging_octane.wf_process_note owner to deployer;

create index idx_wf_process_note__pid_version
    on staging_octane.wf_process_note (wfpn_pid, wfpn_version);

grant select on staging_octane.wf_process_note to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_process_note to dms_octane_writer;

grant select on staging_octane.wf_process_note to etl_loan;

create table staging_octane.wf_process_note_comment
(
    wfpnc_pid bigint not null
        constraint pk_wf_process_note_comment
            primary key,
    wfpnc_version integer,
    wfpnc_wf_process_note_pid bigint,
    wfpnc_create_datetime timestamp,
    wfpnc_content varchar(16000),
    wfpnc_author_lender_user_pid bigint,
    wfpnc_author_unparsed_name varchar(128)
);

alter table staging_octane.wf_process_note_comment owner to deployer;

create index idx_wf_process_note_comment__pid_version
    on staging_octane.wf_process_note_comment (wfpnc_pid, wfpnc_version);

grant select on staging_octane.wf_process_note_comment to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_process_note_comment to dms_octane_writer;

grant select on staging_octane.wf_process_note_comment to etl_loan;

create table staging_octane.wf_process_note_monitor
(
    wfpnm_pid bigint not null
        constraint pk_wf_process_note_monitor
            primary key,
    wfpnm_version integer,
    wfpnm_wf_process_note_pid bigint,
    wfpnm_lender_user_pid bigint
);

alter table staging_octane.wf_process_note_monitor owner to deployer;

create index idx_wf_process_note_monitor__pid_version
    on staging_octane.wf_process_note_monitor (wfpnm_pid, wfpnm_version);

grant select on staging_octane.wf_process_note_monitor to readonly;

grant delete, insert, select, truncate, update on staging_octane.wf_process_note_monitor to dms_octane_writer;

grant select on staging_octane.wf_process_note_monitor to etl_loan;

create table history_octane.wf_step_note
(
    wfsn_pid bigint,
    wfsn_version integer,
    wfsn_wf_step_pid bigint,
    wfsn_create_datetime timestamp,
    wfsn_content varchar(16000),
    wfsn_author_lender_user_pid bigint,
    wfsn_author_unparsed_name varchar(128),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.wf_step_note owner to deployer;

create index idx_wf_step_note__pid
    on history_octane.wf_step_note (wfsn_pid);

create index idx_wf_step_note__data_source_updated_datetime
    on history_octane.wf_step_note (data_source_updated_datetime);

create index idx_wf_step_note__data_source_deleted_flag
    on history_octane.wf_step_note (data_source_deleted_flag);

create index idx_wf_step_note__pid_version
    on history_octane.wf_step_note (wfsn_pid, wfsn_version);

create index fk_wf_step_note_1
    on history_octane.wf_step_note (wfsn_wf_step_pid);

create index fk_wf_step_note_2
    on history_octane.wf_step_note (wfsn_author_lender_user_pid);

create index idx_wf_step_note__etl_batch_id
    on history_octane.wf_step_note (etl_batch_id);

grant select on history_octane.wf_step_note to readonly;

grant insert, select, update on history_octane.wf_step_note to etl_loan;

create table history_octane.wf_step_note_comment
(
    wfsnc_pid bigint,
    wfsnc_version integer,
    wfsnc_wf_step_note_pid bigint,
    wfsnc_create_datetime timestamp,
    wfsnc_content varchar(16000),
    wfsnc_author_lender_user_pid bigint,
    wfsnc_author_unparsed_name varchar(128),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.wf_step_note_comment owner to deployer;

create index idx_wf_step_note_comment__pid
    on history_octane.wf_step_note_comment (wfsnc_pid);

create index idx_wf_step_note_comment__data_source_updated_datetime
    on history_octane.wf_step_note_comment (data_source_updated_datetime);

create index idx_wf_step_note_comment__data_source_deleted_flag
    on history_octane.wf_step_note_comment (data_source_deleted_flag);

create index idx_wf_step_note_comment__pid_version
    on history_octane.wf_step_note_comment (wfsnc_pid, wfsnc_version);

create index fk_wf_step_note_comment_1
    on history_octane.wf_step_note_comment (wfsnc_wf_step_note_pid);

create index fk_wf_step_note_comment_2
    on history_octane.wf_step_note_comment (wfsnc_author_lender_user_pid);

create index idx_wf_step_note_comment__etl_batch_id
    on history_octane.wf_step_note_comment (etl_batch_id);

grant select on history_octane.wf_step_note_comment to readonly;

grant insert, select, update on history_octane.wf_step_note_comment to etl_loan;

create table history_octane.wf_step_note_monitor
(
    wfsnm_pid bigint,
    wfsnm_version integer,
    wfsnm_wf_step_note_pid bigint,
    wfsnm_lender_user_pid bigint,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.wf_step_note_monitor owner to deployer;

create index idx_wf_step_note_monitor__pid
    on history_octane.wf_step_note_monitor (wfsnm_pid);

create index idx_wf_step_note_monitor__data_source_updated_datetime
    on history_octane.wf_step_note_monitor (data_source_updated_datetime);

create index idx_wf_step_note_monitor__data_source_deleted_flag
    on history_octane.wf_step_note_monitor (data_source_deleted_flag);

create index idx_wf_step_note_monitor__pid_version
    on history_octane.wf_step_note_monitor (wfsnm_pid, wfsnm_version);

create index fk_wf_step_note_monitor_1
    on history_octane.wf_step_note_monitor (wfsnm_wf_step_note_pid);

create index fk_wf_step_note_monitor_2
    on history_octane.wf_step_note_monitor (wfsnm_lender_user_pid);

create index idx_wf_step_note_monitor__etl_batch_id
    on history_octane.wf_step_note_monitor (etl_batch_id);

grant select on history_octane.wf_step_note_monitor to readonly;

grant insert, select, update on history_octane.wf_step_note_monitor to etl_loan;

create table history_octane.wf_process_note
(
    wfpn_pid bigint,
    wfpn_version integer,
    wfpn_wf_process_pid bigint,
    wfpn_create_datetime timestamp,
    wfpn_content varchar(16000),
    wfpn_author_lender_user_pid bigint,
    wfpn_author_unparsed_name varchar(128),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.wf_process_note owner to deployer;

create index idx_wf_process_note__pid
    on history_octane.wf_process_note (wfpn_pid);

create index idx_wf_process_note__data_source_updated_datetime
    on history_octane.wf_process_note (data_source_updated_datetime);

create index idx_wf_process_note__data_source_deleted_flag
    on history_octane.wf_process_note (data_source_deleted_flag);

create index idx_wf_process_note__pid_version
    on history_octane.wf_process_note (wfpn_pid, wfpn_version);

create index fk_wf_process_note_1
    on history_octane.wf_process_note (wfpn_wf_process_pid);

create index fk_wf_process_note_2
    on history_octane.wf_process_note (wfpn_author_lender_user_pid);

create index idx_wf_process_note__etl_batch_id
    on history_octane.wf_process_note (etl_batch_id);

grant select on history_octane.wf_process_note to readonly;

grant insert, select, update on history_octane.wf_process_note to etl_loan;

create table history_octane.wf_process_note_comment
(
    wfpnc_pid bigint,
    wfpnc_version integer,
    wfpnc_wf_process_note_pid bigint,
    wfpnc_create_datetime timestamp,
    wfpnc_content varchar(16000),
    wfpnc_author_lender_user_pid bigint,
    wfpnc_author_unparsed_name varchar(128),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.wf_process_note_comment owner to deployer;

create index idx_wf_process_note_comment__pid
    on history_octane.wf_process_note_comment (wfpnc_pid);

create index idx_wf_process_note_comment__data_source_updated_datetime
    on history_octane.wf_process_note_comment (data_source_updated_datetime);

create index idx_wf_process_note_comment__data_source_deleted_flag
    on history_octane.wf_process_note_comment (data_source_deleted_flag);

create index idx_wf_process_note_comment__pid_version
    on history_octane.wf_process_note_comment (wfpnc_pid, wfpnc_version);

create index fk_wf_process_note_comment_1
    on history_octane.wf_process_note_comment (wfpnc_wf_process_note_pid);

create index fk_wf_process_note_comment_2
    on history_octane.wf_process_note_comment (wfpnc_author_lender_user_pid);

create index idx_wf_process_note_comment__etl_batch_id
    on history_octane.wf_process_note_comment (etl_batch_id);

grant select on history_octane.wf_process_note_comment to readonly;

grant insert, select, update on history_octane.wf_process_note_comment to etl_loan;

create table history_octane.wf_process_note_monitor
(
    wfpnm_pid bigint,
    wfpnm_version integer,
    wfpnm_wf_process_note_pid bigint,
    wfpnm_lender_user_pid bigint,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.wf_process_note_monitor owner to deployer;

create index idx_wf_process_note_monitor__pid
    on history_octane.wf_process_note_monitor (wfpnm_pid);

create index idx_wf_process_note_monitor__data_source_updated_datetime
    on history_octane.wf_process_note_monitor (data_source_updated_datetime);

create index idx_wf_process_note_monitor__data_source_deleted_flag
    on history_octane.wf_process_note_monitor (data_source_deleted_flag);

create index idx_wf_process_note_monitor__pid_version
    on history_octane.wf_process_note_monitor (wfpnm_pid, wfpnm_version);

create index fk_wf_process_note_monitor_1
    on history_octane.wf_process_note_monitor (wfpnm_wf_process_note_pid);

create index fk_wf_process_note_monitor_2
    on history_octane.wf_process_note_monitor (wfpnm_lender_user_pid);

create index idx_wf_process_note_monitor__etl_batch_id
    on history_octane.wf_process_note_monitor (etl_batch_id);

grant select on history_octane.wf_process_note_monitor to readonly;

grant insert, select, update on history_octane.wf_process_note_monitor to etl_loan;

create table staging_octane.password_settings
(
    pws_pid bigint not null
        constraint pk_password_settings
            primary key,
    pws_version integer,
    pws_account_pid bigint,
    pws_lender_user_expire_days integer,
    pws_lender_user_minimum_change_days integer,
    pws_lender_user_previous_password_ban integer,
    pws_minimum_length integer,
    pws_require_special_character boolean,
    pws_require_uppercase_letter boolean,
    pws_require_lowercase_letter boolean,
    pws_require_digit boolean
);

alter table staging_octane.password_settings owner to deployer;

create index idx_password_settings__pid_version
    on staging_octane.password_settings (pws_pid, pws_version);

grant select on staging_octane.password_settings to readonly;

grant delete, insert, select, truncate, update on staging_octane.password_settings to dms_octane_writer;

grant select on staging_octane.password_settings to etl_loan;

create table history_octane.password_settings
(
    pws_pid bigint,
    pws_version integer,
    pws_account_pid bigint,
    pws_lender_user_expire_days integer,
    pws_lender_user_minimum_change_days integer,
    pws_lender_user_previous_password_ban integer,
    pws_minimum_length integer,
    pws_require_special_character boolean,
    pws_require_uppercase_letter boolean,
    pws_require_lowercase_letter boolean,
    pws_require_digit boolean,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.password_settings owner to deployer;

create index idx_password_settings__pid
    on history_octane.password_settings (pws_pid);

create index idx_password_settings__data_source_updated_datetime
    on history_octane.password_settings (data_source_updated_datetime);

create index idx_password_settings__data_source_deleted_flag
    on history_octane.password_settings (data_source_deleted_flag);

create index idx_password_settings__pid_version
    on history_octane.password_settings (pws_pid, pws_version);

create index fk_password_settings_1
    on history_octane.password_settings (pws_account_pid);

create index idx_password_settings__etl_batch_id
    on history_octane.password_settings (etl_batch_id);

grant select on history_octane.password_settings to readonly;

grant insert, select, update on history_octane.password_settings to etl_loan;

create table staging_octane.company_license_contact
(
    cmlc_pid bigint not null
        constraint pk_company_license_contact
            primary key,
    cmlc_version integer,
    cmlc_lender_user_pid bigint,
    cmlc_company_license_pid bigint,
    cmlc_from_date date,
    cmlc_through_date date
);

alter table staging_octane.company_license_contact owner to deployer;

create index idx_company_license_contact__pid_version
    on staging_octane.company_license_contact (cmlc_pid, cmlc_version);

grant select on staging_octane.company_license_contact to readonly;

grant delete, insert, select, truncate, update on staging_octane.company_license_contact to dms_octane_writer;

grant select on staging_octane.company_license_contact to etl_loan;

create table history_octane.company_license_contact
(
    cmlc_pid bigint,
    cmlc_version integer,
    cmlc_lender_user_pid bigint,
    cmlc_company_license_pid bigint,
    cmlc_from_date date,
    cmlc_through_date date,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.company_license_contact owner to deployer;

create index idx_company_license_contact__pid
    on history_octane.company_license_contact (cmlc_pid);

create index idx_company_license_contact__data_source_updated_datetime
    on history_octane.company_license_contact (data_source_updated_datetime);

create index idx_company_license_contact__data_source_deleted_flag
    on history_octane.company_license_contact (data_source_deleted_flag);

create index idx_company_license_contact__pid_version
    on history_octane.company_license_contact (cmlc_pid, cmlc_version);

create index fk_company_license_contact_1
    on history_octane.company_license_contact (cmlc_lender_user_pid);

create index fk_company_license_contact_2
    on history_octane.company_license_contact (cmlc_company_license_pid);

create index idx_company_license_contact__etl_batch_id
    on history_octane.company_license_contact (etl_batch_id);

grant select on history_octane.company_license_contact to readonly;

grant insert, select, update on history_octane.company_license_contact to etl_loan;

create table star_common.etl_log
(
    dwid bigserial not null
        constraint etl_log_pkey
            primary key,
    etl_batch_id text not null,
    etl_start_date_time timestamp with time zone not null,
    etl_end_date_time timestamp with time zone,
    etl_duration interval default (etl_end_date_time - etl_start_date_time),
    status text not null,
    process_name text not null,
    controller_job_batch_id integer,
    input_json text,
    output_json text,
    input_rows_read bigint,
    input_step_duration_ms bigint,
    input_step_duration interval default make_interval(secs => (((input_step_duration_ms)::numeric / 1000.0))::double precision),
    output_rows_inserted bigint,
    output_rows_updated bigint,
    output_rows_deleted bigint,
    output_rows_rejected bigint,
    output_total_rows bigint default (((output_rows_inserted + output_rows_updated) + output_rows_deleted) + output_rows_rejected),
    output_step_duration_ms bigint,
    output_step_duration interval default make_interval(secs => (((output_step_duration_ms)::numeric / 1000.0))::double precision)
);

alter table star_common.etl_log owner to deployer;

grant select, usage on sequence star_common.etl_log_dwid_seq to pentaho_logging;

create index idx_etl_log__etl_batch_id
    on star_common.etl_log (etl_batch_id);

create index idx_etl_log__etl_start_date_time
    on star_common.etl_log (etl_start_date_time);

create index idx_etl_log__etl_end_date_time
    on star_common.etl_log (etl_end_date_time);

grant select on star_common.etl_log to readonly;

grant insert, update on star_common.etl_log to pentaho_logging;

grant select on star_common.etl_log to svc_looker_operations;

grant select on star_common.etl_log to etl_loan;

create table staging_octane.smart_message_available_attachment
(
    smaa_pid bigint not null
        constraint pk_smart_message_available_attachment
            primary key,
    smaa_version integer,
    smaa_smart_message_pid bigint,
    smaa_smart_doc_pid bigint
);

alter table staging_octane.smart_message_available_attachment owner to deployer;

create index idx_smart_message_available_attachment__pid_version
    on staging_octane.smart_message_available_attachment (smaa_pid, smaa_version);

grant select on staging_octane.smart_message_available_attachment to readonly;

grant delete, insert, select, truncate, update on staging_octane.smart_message_available_attachment to dms_octane_writer;

grant select on staging_octane.smart_message_available_attachment to etl_loan;

create table staging_octane.deal_message_log_attachment
(
    dmloga_pid bigint not null
        constraint pk_deal_message_log_attachment
            primary key,
    dmloga_version integer,
    dmloga_deal_message_log_pid bigint,
    dmloga_deal_file_pid bigint
);

alter table staging_octane.deal_message_log_attachment owner to deployer;

create index idx_deal_message_log_attachment__pid_version
    on staging_octane.deal_message_log_attachment (dmloga_pid, dmloga_version);

grant select on staging_octane.deal_message_log_attachment to readonly;

grant delete, insert, select, truncate, update on staging_octane.deal_message_log_attachment to dms_octane_writer;

grant select on staging_octane.deal_message_log_attachment to etl_loan;

create table staging_octane.broker_compensation_type
(
    code varchar(128) not null
        constraint pk_broker_compensation_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.broker_compensation_type owner to deployer;

grant select on staging_octane.broker_compensation_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.broker_compensation_type to dms_octane_writer;

grant select on staging_octane.broker_compensation_type to etl_loan;

create table history_octane.smart_message_available_attachment
(
    smaa_pid bigint,
    smaa_version integer,
    smaa_smart_message_pid bigint,
    smaa_smart_doc_pid bigint,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.smart_message_available_attachment owner to deployer;

create index idx_smart_message_available_attachment__pid
    on history_octane.smart_message_available_attachment (smaa_pid);

create index idx_fb4b88abd8f35bc1cda1f9493404e8ca
    on history_octane.smart_message_available_attachment (data_source_updated_datetime);

create index idx_aeff4b7de9551bb966d2c0647d2077cf
    on history_octane.smart_message_available_attachment (data_source_deleted_flag);

create index idx_smart_message_available_attachment__pid_version
    on history_octane.smart_message_available_attachment (smaa_pid, smaa_version);

create index fk_smart_message_available_attachment_1
    on history_octane.smart_message_available_attachment (smaa_smart_message_pid);

create index fk_smart_message_available_attachment_2
    on history_octane.smart_message_available_attachment (smaa_smart_doc_pid);

create index idx_smart_message_available_attachment__etl_batch_id
    on history_octane.smart_message_available_attachment (etl_batch_id);

grant select on history_octane.smart_message_available_attachment to readonly;

grant insert, select, update on history_octane.smart_message_available_attachment to etl_loan;

create table history_octane.deal_message_log_attachment
(
    dmloga_pid bigint,
    dmloga_version integer,
    dmloga_deal_message_log_pid bigint,
    dmloga_deal_file_pid bigint,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.deal_message_log_attachment owner to deployer;

create index idx_deal_message_log_attachment__pid
    on history_octane.deal_message_log_attachment (dmloga_pid);

create index idx_deal_message_log_attachment__data_source_updated_datetime
    on history_octane.deal_message_log_attachment (data_source_updated_datetime);

create index idx_deal_message_log_attachment__data_source_deleted_flag
    on history_octane.deal_message_log_attachment (data_source_deleted_flag);

create index idx_deal_message_log_attachment__pid_version
    on history_octane.deal_message_log_attachment (dmloga_pid, dmloga_version);

create index fk_deal_message_log_attachment_1
    on history_octane.deal_message_log_attachment (dmloga_deal_message_log_pid);

create index fk_deal_message_log_attachment_2
    on history_octane.deal_message_log_attachment (dmloga_deal_file_pid);

create index idx_deal_message_log_attachment__etl_batch_id
    on history_octane.deal_message_log_attachment (etl_batch_id);

grant select on history_octane.deal_message_log_attachment to readonly;

grant insert, select, update on history_octane.deal_message_log_attachment to etl_loan;

create table history_octane.broker_compensation_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.broker_compensation_type owner to deployer;

create index idx_broker_compensation_type__data_source_updated_datetime
    on history_octane.broker_compensation_type (data_source_updated_datetime);

create index idx_broker_compensation_type__data_source_deleted_flag
    on history_octane.broker_compensation_type (data_source_deleted_flag);

create index idx_broker_compensation_type__etl_batch_id
    on history_octane.broker_compensation_type (etl_batch_id);

grant select on history_octane.broker_compensation_type to readonly;

grant insert, select, update on history_octane.broker_compensation_type to etl_loan;

create table staging_octane.custom_field_value_type
(
    code varchar(128) not null
        constraint pk_custom_field_value_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.custom_field_value_type owner to deployer;

grant select on staging_octane.custom_field_value_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.custom_field_value_type to dms_octane_writer;

grant select on staging_octane.custom_field_value_type to etl_loan;

create table staging_octane.custom_field_scope_type
(
    code varchar(128) not null
        constraint pk_custom_field_scope_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.custom_field_scope_type owner to deployer;

grant select on staging_octane.custom_field_scope_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.custom_field_scope_type to dms_octane_writer;

grant select on staging_octane.custom_field_scope_type to etl_loan;

create table staging_octane.org_lineage_tracker_custom_field_update_status_type
(
    code varchar(128) not null
        constraint pk_org_lineage_tracker_custom_field_update_status_type
            primary key,
    value varchar(1024)
);

alter table staging_octane.org_lineage_tracker_custom_field_update_status_type owner to deployer;

grant select on staging_octane.org_lineage_tracker_custom_field_update_status_type to readonly;

grant delete, insert, select, truncate, update on staging_octane.org_lineage_tracker_custom_field_update_status_type to dms_octane_writer;

grant select on staging_octane.org_lineage_tracker_custom_field_update_status_type to etl_loan;

create table staging_octane.custom_field_setting
(
    cfs_pid bigint not null
        constraint pk_custom_field_setting
            primary key,
    cfs_version integer,
    cfs_account_pid bigint,
    cfs_custom_field_scope_type varchar(128),
    cfs_custom_field_setting_name varchar(1024),
    cfs_custom_field_value_type varchar(128),
    cfs_custom_field_setting_description varchar(1024)
);

alter table staging_octane.custom_field_setting owner to deployer;

create index idx_custom_field_setting__pid_version
    on staging_octane.custom_field_setting (cfs_pid, cfs_version);

grant select on staging_octane.custom_field_setting to readonly;

grant delete, insert, select, truncate, update on staging_octane.custom_field_setting to dms_octane_writer;

grant select on staging_octane.custom_field_setting to etl_loan;

create table staging_octane.custom_field_choice
(
    cfc_pid bigint not null
        constraint pk_custom_field_choice
            primary key,
    cfc_version integer,
    cfc_custom_field_setting_pid bigint,
    cfc_choice_label varchar(1024),
    cfc_disabled boolean
);

alter table staging_octane.custom_field_choice owner to deployer;

create index idx_custom_field_choice__pid_version
    on staging_octane.custom_field_choice (cfc_pid, cfc_version);

grant select on staging_octane.custom_field_choice to readonly;

grant delete, insert, select, truncate, update on staging_octane.custom_field_choice to dms_octane_writer;

grant select on staging_octane.custom_field_choice to etl_loan;

create table staging_octane.org_node_custom_field
(
    oncf_pid bigint not null
        constraint pk_org_node_custom_field
            primary key,
    oncf_version integer,
    oncf_org_node_pid bigint,
    oncf_custom_field_setting_pid bigint,
    oncf_field_value varchar(1024),
    oncf_custom_field_choice_pid bigint,
    oncf_propagator boolean,
    oncf_propagated boolean,
    oncf_excluded boolean,
    oncf_propagator_org_node_custom_field_pid bigint,
    oncf_org_lineage_tracker_pid bigint
);

alter table staging_octane.org_node_custom_field owner to deployer;

create index idx_org_node_custom_field__pid_version
    on staging_octane.org_node_custom_field (oncf_pid, oncf_version);

grant select on staging_octane.org_node_custom_field to readonly;

grant delete, insert, select, truncate, update on staging_octane.org_node_custom_field to dms_octane_writer;

grant select on staging_octane.org_node_custom_field to etl_loan;

create table staging_octane.org_lineage_tracker_custom_field_update
(
    otcfu_pid bigint not null
        constraint pk_org_lineage_tracker_custom_field_update
            primary key,
    otcfu_version integer,
    otcfu_org_lineage_tracker_pid bigint,
    otcfu_org_lineage_tracker_custom_field_update_status_type varchar(128)
);

alter table staging_octane.org_lineage_tracker_custom_field_update owner to deployer;

create index idx_org_lineage_tracker_custom_field_update__pid_version
    on staging_octane.org_lineage_tracker_custom_field_update (otcfu_pid, otcfu_version);

grant select on staging_octane.org_lineage_tracker_custom_field_update to readonly;

grant delete, insert, select, truncate, update on staging_octane.org_lineage_tracker_custom_field_update to dms_octane_writer;

grant select on staging_octane.org_lineage_tracker_custom_field_update to etl_loan;

create table history_octane.custom_field_value_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.custom_field_value_type owner to deployer;

create index idx_custom_field_value_type__etl_batch_id
    on history_octane.custom_field_value_type (etl_batch_id);

create index idx_custom_field_value_type__data_source_updated_datetime
    on history_octane.custom_field_value_type (data_source_updated_datetime);

create index idx_custom_field_value_type__data_source_deleted_flag
    on history_octane.custom_field_value_type (data_source_deleted_flag);

grant select on history_octane.custom_field_value_type to readonly;

grant insert, select, update on history_octane.custom_field_value_type to etl_loan;

create table history_octane.custom_field_scope_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.custom_field_scope_type owner to deployer;

create index idx_custom_field_scope_type__etl_batch_id
    on history_octane.custom_field_scope_type (etl_batch_id);

create index idx_custom_field_scope_type__data_source_updated_datetime
    on history_octane.custom_field_scope_type (data_source_updated_datetime);

create index idx_custom_field_scope_type__data_source_deleted_flag
    on history_octane.custom_field_scope_type (data_source_deleted_flag);

grant select on history_octane.custom_field_scope_type to readonly;

grant insert, select, update on history_octane.custom_field_scope_type to etl_loan;

create table history_octane.org_lineage_tracker_custom_field_update_status_type
(
    code varchar(128),
    value varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.org_lineage_tracker_custom_field_update_status_type owner to deployer;

create index idx_6e616e66fc70e0b2d1555d13f9cd9af3
    on history_octane.org_lineage_tracker_custom_field_update_status_type (etl_batch_id);

create index idx_2133330e966e616e6fc70ec0fc21848c
    on history_octane.org_lineage_tracker_custom_field_update_status_type (data_source_updated_datetime);

create index idx_23700b2d1556ca5d13f9cd986b6cfec6
    on history_octane.org_lineage_tracker_custom_field_update_status_type (data_source_deleted_flag);

grant select on history_octane.org_lineage_tracker_custom_field_update_status_type to readonly;

grant insert, select, update on history_octane.org_lineage_tracker_custom_field_update_status_type to etl_loan;

create table history_octane.custom_field_setting
(
    cfs_pid bigint,
    cfs_version integer,
    cfs_account_pid bigint,
    cfs_custom_field_scope_type varchar(128),
    cfs_custom_field_setting_name varchar(1024),
    cfs_custom_field_value_type varchar(128),
    cfs_custom_field_setting_description varchar(1024),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.custom_field_setting owner to deployer;

create index idx_custom_field_setting__pid
    on history_octane.custom_field_setting (cfs_pid);

create index idx_custom_field_setting__etl_batch_id
    on history_octane.custom_field_setting (etl_batch_id);

create index idx_custom_field_setting__data_source_updated_datetime
    on history_octane.custom_field_setting (data_source_updated_datetime);

create index idx_custom_field_setting__data_source_deleted_flag
    on history_octane.custom_field_setting (data_source_deleted_flag);

create index idx_custom_field_setting__pid_version
    on history_octane.custom_field_setting (cfs_pid, cfs_version);

create index fk_custom_field_setting_1
    on history_octane.custom_field_setting (cfs_account_pid);

create index fkt_cfs_custom_field_scope_type
    on history_octane.custom_field_setting (cfs_custom_field_scope_type);

create index fkt_cfs_custom_field_value_type
    on history_octane.custom_field_setting (cfs_custom_field_value_type);

grant select on history_octane.custom_field_setting to readonly;

grant insert, select, update on history_octane.custom_field_setting to etl_loan;

create table history_octane.custom_field_choice
(
    cfc_pid bigint,
    cfc_version integer,
    cfc_custom_field_setting_pid bigint,
    cfc_choice_label varchar(1024),
    cfc_disabled boolean,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.custom_field_choice owner to deployer;

create index idx_custom_field_choice__etl_batch_id
    on history_octane.custom_field_choice (etl_batch_id);

create index idx_custom_field_choice__pid
    on history_octane.custom_field_choice (cfc_pid);

create index idx_custom_field_choice__data_source_updated_datetime
    on history_octane.custom_field_choice (data_source_updated_datetime);

create index idx_custom_field_choice__data_source_deleted_flag
    on history_octane.custom_field_choice (data_source_deleted_flag);

create index idx_custom_field_choice__pid_version
    on history_octane.custom_field_choice (cfc_pid, cfc_version);

create index fk_custom_field_choice_1
    on history_octane.custom_field_choice (cfc_custom_field_setting_pid);

grant select on history_octane.custom_field_choice to readonly;

grant insert, select, update on history_octane.custom_field_choice to etl_loan;

create table history_octane.org_node_custom_field
(
    oncf_pid bigint,
    oncf_version integer,
    oncf_org_node_pid bigint,
    oncf_custom_field_setting_pid bigint,
    oncf_field_value varchar(1024),
    oncf_custom_field_choice_pid bigint,
    oncf_propagator boolean,
    oncf_propagated boolean,
    oncf_excluded boolean,
    oncf_propagator_org_node_custom_field_pid bigint,
    oncf_org_lineage_tracker_pid bigint,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.org_node_custom_field owner to deployer;

create index idx_org_node_custom_field__etl_batch_id
    on history_octane.org_node_custom_field (etl_batch_id);

create index idx_org_node_custom_field__pid
    on history_octane.org_node_custom_field (oncf_pid);

create index idx_org_node_custom_field__data_source_updated_datetime
    on history_octane.org_node_custom_field (data_source_updated_datetime);

create index idx_org_node_custom_field__data_source_deleted_flag
    on history_octane.org_node_custom_field (data_source_deleted_flag);

create index idx_org_node_custom_field__pid_version
    on history_octane.org_node_custom_field (oncf_pid, oncf_version);

create index fk_org_node_custom_field_1
    on history_octane.org_node_custom_field (oncf_org_node_pid);

create index fk_org_node_custom_field_2
    on history_octane.org_node_custom_field (oncf_custom_field_setting_pid);

create index fk_org_node_custom_field_3
    on history_octane.org_node_custom_field (oncf_custom_field_choice_pid);

create index fk_org_node_custom_field_4
    on history_octane.org_node_custom_field (oncf_propagator_org_node_custom_field_pid);

create index fk_org_node_custom_field_5
    on history_octane.org_node_custom_field (oncf_org_lineage_tracker_pid);

grant select on history_octane.org_node_custom_field to readonly;

grant insert, select, update on history_octane.org_node_custom_field to etl_loan;

create table history_octane.org_lineage_tracker_custom_field_update
(
    otcfu_pid bigint,
    otcfu_version integer,
    otcfu_org_lineage_tracker_pid bigint,
    otcfu_org_lineage_tracker_custom_field_update_status_type varchar(128),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.org_lineage_tracker_custom_field_update owner to deployer;

create index idx_org_lineage_tracker_custom_field_update__etl_batch_id
    on history_octane.org_lineage_tracker_custom_field_update (etl_batch_id);

create index idx_org_lineage_tracker_custom_field_update__pid
    on history_octane.org_lineage_tracker_custom_field_update (otcfu_pid);

create index idx_9c4cc8a32a9732a9c86746f55a15a77d
    on history_octane.org_lineage_tracker_custom_field_update (data_source_updated_datetime);

create index idx_1c2b79d40dc6bf04f1e27a1ad80bc5f1
    on history_octane.org_lineage_tracker_custom_field_update (data_source_deleted_flag);

create index idx_org_lineage_tracker_custom_field_update__pid_version
    on history_octane.org_lineage_tracker_custom_field_update (otcfu_pid, otcfu_version);

create index fk_org_lineage_tracker_custom_field_update_1
    on history_octane.org_lineage_tracker_custom_field_update (otcfu_org_lineage_tracker_pid);

grant select on history_octane.org_lineage_tracker_custom_field_update to readonly;

grant insert, select, update on history_octane.org_lineage_tracker_custom_field_update to etl_loan;

create table staging_octane.rate_sheet_group
(
    rsg_pid bigint not null
        constraint pk_rate_sheet_group
            primary key,
    rsg_version integer,
    rsg_account_pid bigint,
    rsg_rate_sheet_group_id varchar(32),
    rsg_rate_sheet_group_name varchar(128),
    rsg_investor_pid bigint,
    rsg_loan_amortization_type varchar(128)
);

alter table staging_octane.rate_sheet_group owner to deployer;

create index idx_rate_sheet_group__pid_version
    on staging_octane.rate_sheet_group (rsg_pid, rsg_version);

grant select on staging_octane.rate_sheet_group to readonly;

grant delete, insert, select, truncate, update on staging_octane.rate_sheet_group to dms_octane_writer;

grant select on staging_octane.rate_sheet_group to etl_loan;

create table staging_octane.rate_sheet_group_member
(
    rsgm_pid bigint not null
        constraint pk_rate_sheet_group_member
            primary key,
    rsgm_version integer,
    rsgm_rate_sheet_group_pid bigint,
    rsgm_product_pid bigint,
    rsgm_from_date date,
    rsgm_through_date date
);

alter table staging_octane.rate_sheet_group_member owner to deployer;

create index idx_rate_sheet_group_member__pid_version
    on staging_octane.rate_sheet_group_member (rsgm_pid, rsgm_version);

grant select on staging_octane.rate_sheet_group_member to readonly;

grant delete, insert, select, truncate, update on staging_octane.rate_sheet_group_member to dms_octane_writer;

grant select on staging_octane.rate_sheet_group_member to etl_loan;

create table history_octane.rate_sheet_group
(
    rsg_pid bigint,
    rsg_version integer,
    rsg_account_pid bigint,
    rsg_rate_sheet_group_id varchar(32),
    rsg_rate_sheet_group_name varchar(128),
    rsg_investor_pid bigint,
    rsg_loan_amortization_type varchar(128),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.rate_sheet_group owner to deployer;

create index idx_rate_sheet_group__etl_batch_id
    on history_octane.rate_sheet_group (etl_batch_id);

create index idx_rate_sheet_group__pid
    on history_octane.rate_sheet_group (rsg_pid);

create index idx_rate_sheet_group__data_source_updated_datetime
    on history_octane.rate_sheet_group (data_source_updated_datetime);

create index idx_rate_sheet_group__data_source_deleted_flag
    on history_octane.rate_sheet_group (data_source_deleted_flag);

create index idx_rate_sheet_group__pid_version
    on history_octane.rate_sheet_group (rsg_pid, rsg_version);

create index fk_rate_sheet_group_1
    on history_octane.rate_sheet_group (rsg_account_pid);

create index fk_rate_sheet_group_2
    on history_octane.rate_sheet_group (rsg_investor_pid);

create index fkt_rsg_loan_amortization_type
    on history_octane.rate_sheet_group (rsg_loan_amortization_type);

grant select on history_octane.rate_sheet_group to readonly;

grant insert, select, update on history_octane.rate_sheet_group to etl_loan;

create table history_octane.rate_sheet_group_member
(
    rsgm_pid bigint,
    rsgm_version integer,
    rsgm_rate_sheet_group_pid bigint,
    rsgm_product_pid bigint,
    rsgm_from_date date,
    rsgm_through_date date,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.rate_sheet_group_member owner to deployer;

create index idx_rate_sheet_group_member__etl_batch_id
    on history_octane.rate_sheet_group_member (etl_batch_id);

create index idx_rate_sheet_group_member__pid
    on history_octane.rate_sheet_group_member (rsgm_pid);

create index idx_rate_sheet_group_member__data_source_updated_datetime
    on history_octane.rate_sheet_group_member (data_source_updated_datetime);

create index idx_rate_sheet_group_member__data_source_deleted_flag
    on history_octane.rate_sheet_group_member (data_source_deleted_flag);

create index idx_rate_sheet_group_member__pid_version
    on history_octane.rate_sheet_group_member (rsgm_pid, rsgm_version);

create index fk_rate_sheet_group_member_1
    on history_octane.rate_sheet_group_member (rsgm_rate_sheet_group_pid);

create index fk_rate_sheet_group_member_2
    on history_octane.rate_sheet_group_member (rsgm_product_pid);

grant select on history_octane.rate_sheet_group_member to readonly;

grant insert, select, update on history_octane.rate_sheet_group_member to etl_loan;

create table staging_octane.branch_license_contact
(
    brlc_pid bigint not null
        constraint pk_branch_license_contact
            primary key,
    brlc_version integer,
    brlc_lender_user_pid bigint,
    brlc_branch_license_pid bigint,
    brlc_from_date date,
    brlc_through_date date
);

alter table staging_octane.branch_license_contact owner to deployer;

create index idx_branch_license_contact__pid_version
    on staging_octane.branch_license_contact (brlc_pid, brlc_version);

grant select on staging_octane.branch_license_contact to readonly;

grant delete, insert, select, truncate, update on staging_octane.branch_license_contact to dms_octane_writer;

grant select on staging_octane.branch_license_contact to etl_loan;

create table history_octane.branch_license_contact
(
    brlc_pid bigint,
    brlc_version integer,
    brlc_lender_user_pid bigint,
    brlc_branch_license_pid bigint,
    brlc_from_date date,
    brlc_through_date date,
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.branch_license_contact owner to deployer;

create index idx_branch_license_contact__etl_batch_id
    on history_octane.branch_license_contact (etl_batch_id);

create index idx_branch_license_contact__pid
    on history_octane.branch_license_contact (brlc_pid);

create index idx_branch_license_contact__data_source_updated_datetime
    on history_octane.branch_license_contact (data_source_updated_datetime);

create index idx_branch_license_contact__data_source_deleted_flag
    on history_octane.branch_license_contact (data_source_deleted_flag);

create index idx_branch_license_contact__pid_version
    on history_octane.branch_license_contact (brlc_pid, brlc_version);

create index fk_branch_license_contact_1
    on history_octane.branch_license_contact (brlc_lender_user_pid);

create index fk_branch_license_contact_2
    on history_octane.branch_license_contact (brlc_branch_license_pid);

grant select on history_octane.branch_license_contact to readonly;

grant insert, select, update on history_octane.branch_license_contact to etl_loan;

create table staging_octane.company_settings
(
    cs_pid bigint not null
        constraint pk_company_settings
            primary key,
    cs_version integer,
    cs_company_pid bigint,
    cs_equifax_mortgage_services_internal_account_id varchar(256),
    cs_factual_data_internal_account_id varchar(256),
    cs_sharper_lending_internal_account_id varchar(256),
    cs_va_lender_id varchar(16),
    cs_usda_lender_id varchar(16),
    cs_fha_sponsor_address_country varchar(128),
    cs_fha_sponsor_id varchar(16),
    cs_fha_sponsor_company_name varchar(32),
    cs_fha_non_supervised_mortgagee boolean,
    cs_fha_sponsor_address_city varchar(128),
    cs_fha_lender_id varchar(16),
    cs_fha_sponsor_address_street2 varchar(128),
    cs_fha_sponsor_address_street1 varchar(128),
    cs_fha_sponsor_address_state varchar(128),
    cs_fha_home_office_location_pid bigint,
    cs_fha_sponsor_address_postal_code varchar(128),
    cs_fha_settings_present varchar(128),
    cs_va_settings_present varchar(128),
    cs_usda_settings_present varchar(128)
);

alter table staging_octane.company_settings owner to deployer;

create index idx_company_settings__pid_version
    on staging_octane.company_settings (cs_pid, cs_version);

grant select on staging_octane.company_settings to readonly;

grant delete, insert, select, truncate, update on staging_octane.company_settings to dms_octane_writer;

grant select on staging_octane.company_settings to etl_loan;

create table history_octane.company_settings
(
    cs_pid bigint,
    cs_version integer,
    cs_company_pid bigint,
    cs_equifax_mortgage_services_internal_account_id varchar(256),
    cs_factual_data_internal_account_id varchar(256),
    cs_sharper_lending_internal_account_id varchar(256),
    cs_va_lender_id varchar(16),
    cs_usda_lender_id varchar(16),
    cs_fha_sponsor_address_country varchar(128),
    cs_fha_sponsor_id varchar(16),
    cs_fha_sponsor_company_name varchar(32),
    cs_fha_non_supervised_mortgagee boolean,
    cs_fha_sponsor_address_city varchar(128),
    cs_fha_lender_id varchar(16),
    cs_fha_sponsor_address_street2 varchar(128),
    cs_fha_sponsor_address_street1 varchar(128),
    cs_fha_sponsor_address_state varchar(128),
    cs_fha_home_office_location_pid bigint,
    cs_fha_sponsor_address_postal_code varchar(128),
    cs_fha_settings_present varchar(128),
    cs_va_settings_present varchar(128),
    cs_usda_settings_present varchar(128),
    data_source_updated_datetime timestamp with time zone,
    data_source_deleted_flag boolean,
    etl_batch_id text
);

alter table history_octane.company_settings owner to deployer;

create index idx_company_settings__etl_batch_id
    on history_octane.company_settings (etl_batch_id);

create index idx_company_settings__pid
    on history_octane.company_settings (cs_pid);

create index idx_company_settings__data_source_updated_datetime
    on history_octane.company_settings (data_source_updated_datetime);

create index idx_company_settings__data_source_deleted_flag
    on history_octane.company_settings (data_source_deleted_flag);

create index idx_company_settings__pid_version
    on history_octane.company_settings (cs_pid, cs_version);

create index fk_company_settings_1
    on history_octane.company_settings (cs_company_pid);

create index fk_company_settings_2
    on history_octane.company_settings (cs_fha_home_office_location_pid);

create index fkt_cs_fha_sponsor_address_country
    on history_octane.company_settings (cs_fha_sponsor_address_country);

create index fkt_cs_fha_settings_present
    on history_octane.company_settings (cs_fha_settings_present);

create index fkt_cs_va_settings_present
    on history_octane.company_settings (cs_va_settings_present);

create index fkt_cs_usda_settings_present
    on history_octane.company_settings (cs_usda_settings_present);

grant select on history_octane.company_settings to readonly;

grant insert, select, update on history_octane.company_settings to etl_loan;

create table "flyway-permissions".flyway_schema_history
(
    installed_rank integer not null
        constraint flyway_schema_history_pk
            primary key,
    version varchar(50),
    description varchar(200) not null,
    type varchar(20) not null,
    script varchar(1000) not null,
    checksum integer,
    installed_by varchar(100) not null,
    installed_on timestamp default now() not null,
    execution_time integer not null,
    success boolean not null
);

alter table "flyway-permissions".flyway_schema_history owner to admin;

create index flyway_schema_history_s_idx
    on "flyway-permissions".flyway_schema_history (success);

grant select on "flyway-permissions".flyway_schema_history to readonly;

create table pg_catalog.pg_aggregate
(
    aggfnoid regproc not null,
    aggkind "char" not null,
    aggnumdirectargs smallint not null,
    aggtransfn regproc not null,
    aggfinalfn regproc not null,
    aggcombinefn regproc not null,
    aggserialfn regproc not null,
    aggdeserialfn regproc not null,
    aggmtransfn regproc not null,
    aggminvtransfn regproc not null,
    aggmfinalfn regproc not null,
    aggfinalextra boolean not null,
    aggmfinalextra boolean not null,
    aggfinalmodify "char" not null,
    aggmfinalmodify "char" not null,
    aggsortop oid not null,
    aggtranstype oid not null,
    aggtransspace integer not null,
    aggmtranstype oid not null,
    aggmtransspace integer not null,
    agginitval text,
    aggminitval text
);

create unique index pg_aggregate_fnoid_index
    on pg_catalog.pg_aggregate (aggfnoid);

create table pg_catalog.pg_am
(
    oid oid not null,
    amname information_schema.sql_identifier not null,
    amhandler regproc not null,
    amtype "char" not null
);

create unique index pg_am_name_index
    on pg_catalog.pg_am (amname collate "C");

create unique index pg_am_oid_index
    on pg_catalog.pg_am (oid);

create table pg_catalog.pg_amop
(
    oid oid not null,
    amopfamily oid not null,
    amoplefttype oid not null,
    amoprighttype oid not null,
    amopstrategy smallint not null,
    amoppurpose "char" not null,
    amopopr oid not null,
    amopmethod oid not null,
    amopsortfamily oid not null
);

create unique index pg_amop_fam_strat_index
    on pg_catalog.pg_amop (amopfamily, amoplefttype, amoprighttype, amopstrategy);

create unique index pg_amop_oid_index
    on pg_catalog.pg_amop (oid);

create unique index pg_amop_opr_fam_index
    on pg_catalog.pg_amop (amopopr, amoppurpose, amopfamily);

create table pg_catalog.pg_amproc
(
    oid oid not null,
    amprocfamily oid not null,
    amproclefttype oid not null,
    amprocrighttype oid not null,
    amprocnum smallint not null,
    amproc regproc not null
);

create unique index pg_amproc_fam_proc_index
    on pg_catalog.pg_amproc (amprocfamily, amproclefttype, amprocrighttype, amprocnum);

create unique index pg_amproc_oid_index
    on pg_catalog.pg_amproc (oid);

create table pg_catalog.pg_attrdef
(
    oid oid not null,
    adrelid oid not null,
    adnum smallint not null,
    adbin pg_node_tree not null
);

create unique index pg_attrdef_adrelid_adnum_index
    on pg_catalog.pg_attrdef (adrelid, adnum);

create unique index pg_attrdef_oid_index
    on pg_catalog.pg_attrdef (oid);

create table pg_catalog.pg_attribute
(
    attrelid oid not null,
    attname information_schema.sql_identifier not null,
    atttypid oid not null,
    attstattarget integer not null,
    attlen smallint not null,
    attnum smallint not null,
    attndims integer not null,
    attcacheoff integer not null,
    atttypmod integer not null,
    attbyval boolean not null,
    attstorage "char" not null,
    attalign "char" not null,
    attnotnull boolean not null,
    atthasdef boolean not null,
    atthasmissing boolean not null,
    attidentity "char" not null,
    attgenerated "char" not null,
    attisdropped boolean not null,
    attislocal boolean not null,
    attinhcount integer not null,
    attcollation oid not null,
    attacl aclitem[],
    attoptions text[],
    attfdwoptions text[],
    attmissingval anyarray
);

create unique index pg_attribute_relid_attnam_index
    on pg_catalog.pg_attribute (attrelid collate "C", attname);

create unique index pg_attribute_relid_attnum_index
    on pg_catalog.pg_attribute (attrelid, attnum);

create table pg_catalog.pg_auth_members
(
    roleid oid not null,
    member oid not null,
    grantor oid not null,
    admin_option boolean not null
);

create unique index pg_auth_members_member_role_index
    on pg_catalog.pg_auth_members (member, roleid);

create unique index pg_auth_members_role_member_index
    on pg_catalog.pg_auth_members (roleid, member);

create table pg_catalog.pg_authid
(
    oid oid not null,
    rolname information_schema.sql_identifier not null,
    rolsuper boolean not null,
    rolinherit boolean not null,
    rolcreaterole boolean not null,
    rolcreatedb boolean not null,
    rolcanlogin boolean not null,
    rolreplication boolean not null,
    rolbypassrls boolean not null,
    rolconnlimit integer not null,
    rolpassword text,
    rolvaliduntil timestamp with time zone
);

create unique index pg_authid_oid_index
    on pg_catalog.pg_authid (oid);

create unique index pg_authid_rolname_index
    on pg_catalog.pg_authid (rolname collate "C");

create table pg_catalog.pg_cast
(
    oid oid not null,
    castsource oid not null,
    casttarget oid not null,
    castfunc oid not null,
    castcontext "char" not null,
    castmethod "char" not null
);

create unique index pg_cast_oid_index
    on pg_catalog.pg_cast (oid);

create unique index pg_cast_source_target_index
    on pg_catalog.pg_cast (castsource, casttarget);

create table pg_catalog.pg_class
(
    oid oid not null,
    relname information_schema.sql_identifier not null,
    relnamespace oid not null,
    reltype oid not null,
    reloftype oid not null,
    relowner oid not null,
    relam oid not null,
    relfilenode oid not null,
    reltablespace oid not null,
    relpages integer not null,
    reltuples real not null,
    relallvisible integer not null,
    reltoastrelid oid not null,
    relhasindex boolean not null,
    relisshared boolean not null,
    relpersistence "char" not null,
    relkind "char" not null,
    relnatts smallint not null,
    relchecks smallint not null,
    relhasrules boolean not null,
    relhastriggers boolean not null,
    relhassubclass boolean not null,
    relrowsecurity boolean not null,
    relforcerowsecurity boolean not null,
    relispopulated boolean not null,
    relreplident "char" not null,
    relispartition boolean not null,
    relrewrite oid not null,
    relfrozenxid xid not null,
    relminmxid xid not null,
    relacl aclitem[],
    reloptions text[],
    relpartbound pg_node_tree
);

create unique index pg_class_oid_index
    on pg_catalog.pg_class (oid);

create unique index pg_class_relname_nsp_index
    on pg_catalog.pg_class (relname collate "C", relnamespace);

create index pg_class_tblspc_relfilenode_index
    on pg_catalog.pg_class (reltablespace, relfilenode);

create table pg_catalog.pg_collation
(
    oid oid not null,
    collname information_schema.sql_identifier not null,
    collnamespace oid not null,
    collowner oid not null,
    collprovider "char" not null,
    collisdeterministic boolean not null,
    collencoding integer not null,
    collcollate information_schema.sql_identifier not null,
    collctype information_schema.sql_identifier not null,
    collversion text
);

create unique index pg_collation_name_enc_nsp_index
    on pg_catalog.pg_collation (collname collate "C", collencoding, collnamespace);

create unique index pg_collation_oid_index
    on pg_catalog.pg_collation (oid);

create table pg_catalog.pg_constraint
(
    oid oid not null,
    conname information_schema.sql_identifier not null,
    connamespace oid not null,
    contype "char" not null,
    condeferrable boolean not null,
    condeferred boolean not null,
    convalidated boolean not null,
    conrelid oid not null,
    contypid oid not null,
    conindid oid not null,
    conparentid oid not null,
    confrelid oid not null,
    confupdtype "char" not null,
    confdeltype "char" not null,
    confmatchtype "char" not null,
    conislocal boolean not null,
    coninhcount integer not null,
    connoinherit boolean not null,
    conkey smallint[],
    confkey smallint[],
    conpfeqop oid[],
    conppeqop oid[],
    conffeqop oid[],
    conexclop oid[],
    conbin pg_node_tree
);

create index pg_constraint_conname_nsp_index
    on pg_catalog.pg_constraint (conname collate "C", connamespace);

create index pg_constraint_conparentid_index
    on pg_catalog.pg_constraint (conparentid);

create unique index pg_constraint_conrelid_contypid_conname_index
    on pg_catalog.pg_constraint (conrelid collate "C", contypid, conname);

create index pg_constraint_contypid_index
    on pg_catalog.pg_constraint (contypid);

create unique index pg_constraint_oid_index
    on pg_catalog.pg_constraint (oid);

create table pg_catalog.pg_conversion
(
    oid oid not null,
    conname information_schema.sql_identifier not null,
    connamespace oid not null,
    conowner oid not null,
    conforencoding integer not null,
    contoencoding integer not null,
    conproc regproc not null,
    condefault boolean not null
);

create unique index pg_conversion_default_index
    on pg_catalog.pg_conversion (connamespace, conforencoding, contoencoding, oid);

create unique index pg_conversion_name_nsp_index
    on pg_catalog.pg_conversion (conname collate "C", connamespace);

create unique index pg_conversion_oid_index
    on pg_catalog.pg_conversion (oid);

create table pg_catalog.pg_database
(
    oid oid not null,
    datname information_schema.sql_identifier not null,
    datdba oid not null,
    encoding integer not null,
    datcollate information_schema.sql_identifier not null,
    datctype information_schema.sql_identifier not null,
    datistemplate boolean not null,
    datallowconn boolean not null,
    datconnlimit integer not null,
    datlastsysoid oid not null,
    datfrozenxid xid not null,
    datminmxid xid not null,
    dattablespace oid not null,
    datacl aclitem[]
);

create unique index pg_database_datname_index
    on pg_catalog.pg_database (datname collate "C");

create unique index pg_database_oid_index
    on pg_catalog.pg_database (oid);

create table pg_catalog.pg_db_role_setting
(
    setdatabase oid not null,
    setrole oid not null,
    setconfig text[]
);

create unique index pg_db_role_setting_databaseid_rol_index
    on pg_catalog.pg_db_role_setting (setdatabase, setrole);

create table pg_catalog.pg_default_acl
(
    oid oid not null,
    defaclrole oid not null,
    defaclnamespace oid not null,
    defaclobjtype "char" not null,
    defaclacl aclitem[] not null
);

create unique index pg_default_acl_oid_index
    on pg_catalog.pg_default_acl (oid);

create unique index pg_default_acl_role_nsp_obj_index
    on pg_catalog.pg_default_acl (defaclrole, defaclnamespace, defaclobjtype);

create table pg_catalog.pg_depend
(
    classid oid not null,
    objid oid not null,
    objsubid integer not null,
    refclassid oid not null,
    refobjid oid not null,
    refobjsubid integer not null,
    deptype "char" not null
);

create index pg_depend_depender_index
    on pg_catalog.pg_depend (classid, objid, objsubid);

create index pg_depend_reference_index
    on pg_catalog.pg_depend (refclassid, refobjid, refobjsubid);

create table pg_catalog.pg_description
(
    objoid oid not null,
    classoid oid not null,
    objsubid integer not null,
    description text not null
);

create unique index pg_description_o_c_o_index
    on pg_catalog.pg_description (objoid, classoid, objsubid);

create table pg_catalog.pg_enum
(
    oid oid not null,
    enumtypid oid not null,
    enumsortorder real not null,
    enumlabel information_schema.sql_identifier not null
);

create unique index pg_enum_oid_index
    on pg_catalog.pg_enum (oid);

create unique index pg_enum_typid_label_index
    on pg_catalog.pg_enum (enumtypid collate "C", enumlabel);

create unique index pg_enum_typid_sortorder_index
    on pg_catalog.pg_enum (enumtypid, enumsortorder);

create table pg_catalog.pg_event_trigger
(
    oid oid not null,
    evtname information_schema.sql_identifier not null,
    evtevent information_schema.sql_identifier not null,
    evtowner oid not null,
    evtfoid oid not null,
    evtenabled "char" not null,
    evttags text[]
);

create unique index pg_event_trigger_evtname_index
    on pg_catalog.pg_event_trigger (evtname collate "C");

create unique index pg_event_trigger_oid_index
    on pg_catalog.pg_event_trigger (oid);

create table pg_catalog.pg_extension
(
    oid oid not null,
    extname information_schema.sql_identifier not null,
    extowner oid not null,
    extnamespace oid not null,
    extrelocatable boolean not null,
    extversion text not null,
    extconfig oid[],
    extcondition text[]
);

create unique index pg_extension_name_index
    on pg_catalog.pg_extension (extname collate "C");

create unique index pg_extension_oid_index
    on pg_catalog.pg_extension (oid);

create table pg_catalog.pg_foreign_data_wrapper
(
    oid oid not null,
    fdwname information_schema.sql_identifier not null,
    fdwowner oid not null,
    fdwhandler oid not null,
    fdwvalidator oid not null,
    fdwacl aclitem[],
    fdwoptions text[]
);

create unique index pg_foreign_data_wrapper_name_index
    on pg_catalog.pg_foreign_data_wrapper (fdwname collate "C");

create unique index pg_foreign_data_wrapper_oid_index
    on pg_catalog.pg_foreign_data_wrapper (oid);

create table pg_catalog.pg_foreign_server
(
    oid oid not null,
    srvname information_schema.sql_identifier not null,
    srvowner oid not null,
    srvfdw oid not null,
    srvtype text,
    srvversion text,
    srvacl aclitem[],
    srvoptions text[]
);

create unique index pg_foreign_server_name_index
    on pg_catalog.pg_foreign_server (srvname collate "C");

create unique index pg_foreign_server_oid_index
    on pg_catalog.pg_foreign_server (oid);

create table pg_catalog.pg_foreign_table
(
    ftrelid oid not null,
    ftserver oid not null,
    ftoptions text[]
);

create unique index pg_foreign_table_relid_index
    on pg_catalog.pg_foreign_table (ftrelid);

create table pg_catalog.pg_index
(
    indexrelid oid not null,
    indrelid oid not null,
    indnatts smallint not null,
    indnkeyatts smallint not null,
    indisunique boolean not null,
    indisprimary boolean not null,
    indisexclusion boolean not null,
    indimmediate boolean not null,
    indisclustered boolean not null,
    indisvalid boolean not null,
    indcheckxmin boolean not null,
    indisready boolean not null,
    indislive boolean not null,
    indisreplident boolean not null,
    indkey int2vector not null,
    indcollation oidvector not null,
    indclass oidvector not null,
    indoption int2vector not null,
    indexprs pg_node_tree,
    indpred pg_node_tree
);

create unique index pg_index_indexrelid_index
    on pg_catalog.pg_index (indexrelid);

create index pg_index_indrelid_index
    on pg_catalog.pg_index (indrelid);

create table pg_catalog.pg_inherits
(
    inhrelid oid not null,
    inhparent oid not null,
    inhseqno integer not null
);

create index pg_inherits_parent_index
    on pg_catalog.pg_inherits (inhparent);

create unique index pg_inherits_relid_seqno_index
    on pg_catalog.pg_inherits (inhrelid, inhseqno);

create table pg_catalog.pg_init_privs
(
    objoid oid not null,
    classoid oid not null,
    objsubid integer not null,
    privtype "char" not null,
    initprivs aclitem[] not null
);

create unique index pg_init_privs_o_c_o_index
    on pg_catalog.pg_init_privs (objoid, classoid, objsubid);

create table pg_catalog.pg_language
(
    oid oid not null,
    lanname information_schema.sql_identifier not null,
    lanowner oid not null,
    lanispl boolean not null,
    lanpltrusted boolean not null,
    lanplcallfoid oid not null,
    laninline oid not null,
    lanvalidator oid not null,
    lanacl aclitem[]
);

create unique index pg_language_name_index
    on pg_catalog.pg_language (lanname collate "C");

create unique index pg_language_oid_index
    on pg_catalog.pg_language (oid);

create table pg_catalog.pg_largeobject
(
    loid oid not null,
    pageno integer not null,
    data bytea not null
);

create unique index pg_largeobject_loid_pn_index
    on pg_catalog.pg_largeobject (loid, pageno);

create table pg_catalog.pg_largeobject_metadata
(
    oid oid not null,
    lomowner oid not null,
    lomacl aclitem[]
);

create unique index pg_largeobject_metadata_oid_index
    on pg_catalog.pg_largeobject_metadata (oid);

create table pg_catalog.pg_namespace
(
    oid oid not null,
    nspname information_schema.sql_identifier not null,
    nspowner oid not null,
    nspacl aclitem[]
);

create unique index pg_namespace_nspname_index
    on pg_catalog.pg_namespace (nspname collate "C");

create unique index pg_namespace_oid_index
    on pg_catalog.pg_namespace (oid);

create table pg_catalog.pg_opclass
(
    oid oid not null,
    opcmethod oid not null,
    opcname information_schema.sql_identifier not null,
    opcnamespace oid not null,
    opcowner oid not null,
    opcfamily oid not null,
    opcintype oid not null,
    opcdefault boolean not null,
    opckeytype oid not null
);

create unique index pg_opclass_am_name_nsp_index
    on pg_catalog.pg_opclass (opcmethod collate "C", opcname, opcnamespace);

create unique index pg_opclass_oid_index
    on pg_catalog.pg_opclass (oid);

create table pg_catalog.pg_operator
(
    oid oid not null,
    oprname information_schema.sql_identifier not null,
    oprnamespace oid not null,
    oprowner oid not null,
    oprkind "char" not null,
    oprcanmerge boolean not null,
    oprcanhash boolean not null,
    oprleft oid not null,
    oprright oid not null,
    oprresult oid not null,
    oprcom oid not null,
    oprnegate oid not null,
    oprcode regproc not null,
    oprrest regproc not null,
    oprjoin regproc not null
);

create unique index pg_operator_oid_index
    on pg_catalog.pg_operator (oid);

create unique index pg_operator_oprname_l_r_n_index
    on pg_catalog.pg_operator (oprname collate "C", oprleft, oprright, oprnamespace);

create table pg_catalog.pg_opfamily
(
    oid oid not null,
    opfmethod oid not null,
    opfname information_schema.sql_identifier not null,
    opfnamespace oid not null,
    opfowner oid not null
);

create unique index pg_opfamily_am_name_nsp_index
    on pg_catalog.pg_opfamily (opfmethod collate "C", opfname, opfnamespace);

create unique index pg_opfamily_oid_index
    on pg_catalog.pg_opfamily (oid);

create table pg_catalog.pg_partitioned_table
(
    partrelid oid not null,
    partstrat "char" not null,
    partnatts smallint not null,
    partdefid oid not null,
    partattrs int2vector not null,
    partclass oidvector not null,
    partcollation oidvector not null,
    partexprs pg_node_tree
);

create unique index pg_partitioned_table_partrelid_index
    on pg_catalog.pg_partitioned_table (partrelid);

create table pg_catalog.pg_pltemplate
(
    tmplname information_schema.sql_identifier not null,
    tmpltrusted boolean not null,
    tmpldbacreate boolean not null,
    tmplhandler text not null,
    tmplinline text,
    tmplvalidator text,
    tmpllibrary text not null,
    tmplacl aclitem[]
);

create unique index pg_pltemplate_name_index
    on pg_catalog.pg_pltemplate (tmplname collate "C");

create table pg_catalog.pg_policy
(
    oid oid not null,
    polname information_schema.sql_identifier not null,
    polrelid oid not null,
    polcmd "char" not null,
    polpermissive boolean not null,
    polroles oid[] not null,
    polqual pg_node_tree,
    polwithcheck pg_node_tree
);

create unique index pg_policy_oid_index
    on pg_catalog.pg_policy (oid);

create unique index pg_policy_polrelid_polname_index
    on pg_catalog.pg_policy (polrelid collate "C", polname);

create table pg_catalog.pg_proc
(
    oid oid not null,
    proname information_schema.sql_identifier not null,
    pronamespace oid not null,
    proowner oid not null,
    prolang oid not null,
    procost real not null,
    prorows real not null,
    provariadic oid not null,
    prosupport regproc not null,
    prokind "char" not null,
    prosecdef boolean not null,
    proleakproof boolean not null,
    proisstrict boolean not null,
    proretset boolean not null,
    provolatile "char" not null,
    proparallel "char" not null,
    pronargs smallint not null,
    pronargdefaults smallint not null,
    prorettype oid not null,
    proargtypes oidvector not null,
    proallargtypes oid[],
    proargmodes "char"[],
    proargnames text[],
    proargdefaults pg_node_tree,
    protrftypes oid[],
    prosrc text not null,
    probin text,
    proconfig text[],
    proacl aclitem[]
);

create unique index pg_proc_oid_index
    on pg_catalog.pg_proc (oid);

create unique index pg_proc_proname_args_nsp_index
    on pg_catalog.pg_proc (proname collate "C", proargtypes, pronamespace);

create table pg_catalog.pg_publication
(
    oid oid not null,
    pubname information_schema.sql_identifier not null,
    pubowner oid not null,
    puballtables boolean not null,
    pubinsert boolean not null,
    pubupdate boolean not null,
    pubdelete boolean not null,
    pubtruncate boolean not null
);

create unique index pg_publication_oid_index
    on pg_catalog.pg_publication (oid);

create unique index pg_publication_pubname_index
    on pg_catalog.pg_publication (pubname collate "C");

create table pg_catalog.pg_publication_rel
(
    oid oid not null,
    prpubid oid not null,
    prrelid oid not null
);

create unique index pg_publication_rel_oid_index
    on pg_catalog.pg_publication_rel (oid);

create unique index pg_publication_rel_prrelid_prpubid_index
    on pg_catalog.pg_publication_rel (prrelid, prpubid);

create table pg_catalog.pg_range
(
    rngtypid oid not null,
    rngsubtype oid not null,
    rngcollation oid not null,
    rngsubopc oid not null,
    rngcanonical regproc not null,
    rngsubdiff regproc not null
);

create unique index pg_range_rngtypid_index
    on pg_catalog.pg_range (rngtypid);

create table pg_catalog.pg_replication_origin
(
    roident oid not null,
    roname text not null
);

create unique index pg_replication_origin_roiident_index
    on pg_catalog.pg_replication_origin (roident);

create unique index pg_replication_origin_roname_index
    on pg_catalog.pg_replication_origin (roname collate "C");

create table pg_catalog.pg_rewrite
(
    oid oid not null,
    rulename information_schema.sql_identifier not null,
    ev_class oid not null,
    ev_type "char" not null,
    ev_enabled "char" not null,
    is_instead boolean not null,
    ev_qual pg_node_tree not null,
    ev_action pg_node_tree not null
);

create unique index pg_rewrite_oid_index
    on pg_catalog.pg_rewrite (oid);

create unique index pg_rewrite_rel_rulename_index
    on pg_catalog.pg_rewrite (ev_class collate "C", rulename);

create table pg_catalog.pg_seclabel
(
    objoid oid not null,
    classoid oid not null,
    objsubid integer not null,
    provider text not null,
    label text not null
);

create unique index pg_seclabel_object_index
    on pg_catalog.pg_seclabel (objoid collate "C", classoid, objsubid, provider);

create table pg_catalog.pg_sequence
(
    seqrelid oid not null,
    seqtypid oid not null,
    seqstart bigint not null,
    seqincrement bigint not null,
    seqmax bigint not null,
    seqmin bigint not null,
    seqcache bigint not null,
    seqcycle boolean not null
);

create unique index pg_sequence_seqrelid_index
    on pg_catalog.pg_sequence (seqrelid);

create table pg_catalog.pg_shdepend
(
    dbid oid not null,
    classid oid not null,
    objid oid not null,
    objsubid integer not null,
    refclassid oid not null,
    refobjid oid not null,
    deptype "char" not null
);

create index pg_shdepend_depender_index
    on pg_catalog.pg_shdepend (dbid, classid, objid, objsubid);

create index pg_shdepend_reference_index
    on pg_catalog.pg_shdepend (refclassid, refobjid);

create table pg_catalog.pg_shdescription
(
    objoid oid not null,
    classoid oid not null,
    description text not null
);

create unique index pg_shdescription_o_c_index
    on pg_catalog.pg_shdescription (objoid, classoid);

create table pg_catalog.pg_shseclabel
(
    objoid oid not null,
    classoid oid not null,
    provider text not null,
    label text not null
);

create unique index pg_shseclabel_object_index
    on pg_catalog.pg_shseclabel (objoid collate "C", classoid, provider);

create table pg_catalog.pg_statistic
(
    starelid oid not null,
    staattnum smallint not null,
    stainherit boolean not null,
    stanullfrac real not null,
    stawidth integer not null,
    stadistinct real not null,
    stakind1 smallint not null,
    stakind2 smallint not null,
    stakind3 smallint not null,
    stakind4 smallint not null,
    stakind5 smallint not null,
    staop1 oid not null,
    staop2 oid not null,
    staop3 oid not null,
    staop4 oid not null,
    staop5 oid not null,
    stacoll1 oid not null,
    stacoll2 oid not null,
    stacoll3 oid not null,
    stacoll4 oid not null,
    stacoll5 oid not null,
    stanumbers1 real[],
    stanumbers2 real[],
    stanumbers3 real[],
    stanumbers4 real[],
    stanumbers5 real[],
    stavalues1 anyarray,
    stavalues2 anyarray,
    stavalues3 anyarray,
    stavalues4 anyarray,
    stavalues5 anyarray
);

create unique index pg_statistic_relid_att_inh_index
    on pg_catalog.pg_statistic (starelid, staattnum, stainherit);

create table pg_catalog.pg_statistic_ext
(
    oid oid not null,
    stxrelid oid not null,
    stxname information_schema.sql_identifier not null,
    stxnamespace oid not null,
    stxowner oid not null,
    stxkeys int2vector not null,
    stxkind "char"[] not null
);

create unique index pg_statistic_ext_name_index
    on pg_catalog.pg_statistic_ext (stxname collate "C", stxnamespace);

create unique index pg_statistic_ext_oid_index
    on pg_catalog.pg_statistic_ext (oid);

create index pg_statistic_ext_relid_index
    on pg_catalog.pg_statistic_ext (stxrelid);

create table pg_catalog.pg_statistic_ext_data
(
    stxoid oid not null,
    stxdndistinct pg_ndistinct,
    stxddependencies pg_dependencies,
    stxdmcv pg_mcv_list
);

create unique index pg_statistic_ext_data_stxoid_index
    on pg_catalog.pg_statistic_ext_data (stxoid);

create table pg_catalog.pg_subscription
(
    oid oid not null,
    subdbid oid not null,
    subname information_schema.sql_identifier not null,
    subowner oid not null,
    subenabled boolean not null,
    subconninfo text not null,
    subslotname information_schema.sql_identifier not null,
    subsynccommit text not null,
    subpublications text[] not null
);

create unique index pg_subscription_oid_index
    on pg_catalog.pg_subscription (oid);

create unique index pg_subscription_subname_index
    on pg_catalog.pg_subscription (subdbid collate "C", subname);

create table pg_catalog.pg_subscription_rel
(
    srsubid oid not null,
    srrelid oid not null,
    srsubstate "char" not null,
    srsublsn pg_lsn not null
);

create unique index pg_subscription_rel_srrelid_srsubid_index
    on pg_catalog.pg_subscription_rel (srrelid, srsubid);

create table pg_catalog.pg_tablespace
(
    oid oid not null,
    spcname information_schema.sql_identifier not null,
    spcowner oid not null,
    spcacl aclitem[],
    spcoptions text[]
);

create unique index pg_tablespace_oid_index
    on pg_catalog.pg_tablespace (oid);

create unique index pg_tablespace_spcname_index
    on pg_catalog.pg_tablespace (spcname collate "C");

create table pg_catalog.pg_transform
(
    oid oid not null,
    trftype oid not null,
    trflang oid not null,
    trffromsql regproc not null,
    trftosql regproc not null
);

create unique index pg_transform_oid_index
    on pg_catalog.pg_transform (oid);

create unique index pg_transform_type_lang_index
    on pg_catalog.pg_transform (trftype, trflang);

create table pg_catalog.pg_trigger
(
    oid oid not null,
    tgrelid oid not null,
    tgname information_schema.sql_identifier not null,
    tgfoid oid not null,
    tgtype smallint not null,
    tgenabled "char" not null,
    tgisinternal boolean not null,
    tgconstrrelid oid not null,
    tgconstrindid oid not null,
    tgconstraint oid not null,
    tgdeferrable boolean not null,
    tginitdeferred boolean not null,
    tgnargs smallint not null,
    tgattr int2vector not null,
    tgargs bytea not null,
    tgqual pg_node_tree,
    tgoldtable information_schema.sql_identifier,
    tgnewtable information_schema.sql_identifier
);

create unique index pg_trigger_oid_index
    on pg_catalog.pg_trigger (oid);

create index pg_trigger_tgconstraint_index
    on pg_catalog.pg_trigger (tgconstraint);

create unique index pg_trigger_tgrelid_tgname_index
    on pg_catalog.pg_trigger (tgrelid collate "C", tgname);

create table pg_catalog.pg_ts_config
(
    oid oid not null,
    cfgname information_schema.sql_identifier not null,
    cfgnamespace oid not null,
    cfgowner oid not null,
    cfgparser oid not null
);

create unique index pg_ts_config_cfgname_index
    on pg_catalog.pg_ts_config (cfgname collate "C", cfgnamespace);

create unique index pg_ts_config_oid_index
    on pg_catalog.pg_ts_config (oid);

create table pg_catalog.pg_ts_config_map
(
    mapcfg oid not null,
    maptokentype integer not null,
    mapseqno integer not null,
    mapdict oid not null
);

create unique index pg_ts_config_map_index
    on pg_catalog.pg_ts_config_map (mapcfg, maptokentype, mapseqno);

create table pg_catalog.pg_ts_dict
(
    oid oid not null,
    dictname information_schema.sql_identifier not null,
    dictnamespace oid not null,
    dictowner oid not null,
    dicttemplate oid not null,
    dictinitoption text
);

create unique index pg_ts_dict_dictname_index
    on pg_catalog.pg_ts_dict (dictname collate "C", dictnamespace);

create unique index pg_ts_dict_oid_index
    on pg_catalog.pg_ts_dict (oid);

create table pg_catalog.pg_ts_parser
(
    oid oid not null,
    prsname information_schema.sql_identifier not null,
    prsnamespace oid not null,
    prsstart regproc not null,
    prstoken regproc not null,
    prsend regproc not null,
    prsheadline regproc not null,
    prslextype regproc not null
);

create unique index pg_ts_parser_oid_index
    on pg_catalog.pg_ts_parser (oid);

create unique index pg_ts_parser_prsname_index
    on pg_catalog.pg_ts_parser (prsname collate "C", prsnamespace);

create table pg_catalog.pg_ts_template
(
    oid oid not null,
    tmplname information_schema.sql_identifier not null,
    tmplnamespace oid not null,
    tmplinit regproc not null,
    tmpllexize regproc not null
);

create unique index pg_ts_template_oid_index
    on pg_catalog.pg_ts_template (oid);

create unique index pg_ts_template_tmplname_index
    on pg_catalog.pg_ts_template (tmplname collate "C", tmplnamespace);

create table pg_catalog.pg_type
(
    oid oid not null,
    typname information_schema.sql_identifier not null,
    typnamespace oid not null,
    typowner oid not null,
    typlen smallint not null,
    typbyval boolean not null,
    typtype "char" not null,
    typcategory "char" not null,
    typispreferred boolean not null,
    typisdefined boolean not null,
    typdelim "char" not null,
    typrelid oid not null,
    typelem oid not null,
    typarray oid not null,
    typinput regproc not null,
    typoutput regproc not null,
    typreceive regproc not null,
    typsend regproc not null,
    typmodin regproc not null,
    typmodout regproc not null,
    typanalyze regproc not null,
    typalign "char" not null,
    typstorage "char" not null,
    typnotnull boolean not null,
    typbasetype oid not null,
    typtypmod integer not null,
    typndims integer not null,
    typcollation oid not null,
    typdefaultbin pg_node_tree,
    typdefault text,
    typacl aclitem[]
);

create unique index pg_type_oid_index
    on pg_catalog.pg_type (oid);

create unique index pg_type_typname_nsp_index
    on pg_catalog.pg_type (typname collate "C", typnamespace);

create table pg_catalog.pg_user_mapping
(
    oid oid not null,
    umuser oid not null,
    umserver oid not null,
    umoptions text[]
);

create unique index pg_user_mapping_oid_index
    on pg_catalog.pg_user_mapping (oid);

create unique index pg_user_mapping_user_server_index
    on pg_catalog.pg_user_mapping (umuser, umserver);

create table information_schema.sql_features
(
    feature_id information_schema.character_data,
    feature_name information_schema.character_data,
    sub_feature_id information_schema.character_data,
    sub_feature_name information_schema.character_data,
    is_supported information_schema.yes_or_no,
    is_verified_by information_schema.character_data,
    comments information_schema.character_data
);

create table information_schema.sql_implementation_info
(
    implementation_info_id information_schema.character_data,
    implementation_info_name information_schema.character_data,
    integer_value information_schema.cardinal_number,
    character_value information_schema.character_data,
    comments information_schema.character_data
);

create table information_schema.sql_languages
(
    sql_language_source information_schema.character_data,
    sql_language_year information_schema.character_data,
    sql_language_conformance information_schema.character_data,
    sql_language_integrity information_schema.character_data,
    sql_language_implementation information_schema.character_data,
    sql_language_binding_style information_schema.character_data,
    sql_language_programming_language information_schema.character_data
);

create table information_schema.sql_packages
(
    feature_id information_schema.character_data,
    feature_name information_schema.character_data,
    is_supported information_schema.yes_or_no,
    is_verified_by information_schema.character_data,
    comments information_schema.character_data
);

create table information_schema.sql_parts
(
    feature_id information_schema.character_data,
    feature_name information_schema.character_data,
    is_supported information_schema.yes_or_no,
    is_verified_by information_schema.character_data,
    comments information_schema.character_data
);

create table information_schema.sql_sizing
(
    sizing_id information_schema.cardinal_number,
    sizing_name information_schema.character_data,
    supported_value information_schema.cardinal_number,
    comments information_schema.character_data
);

create table information_schema.sql_sizing_profiles
(
    sizing_id information_schema.cardinal_number,
    sizing_name information_schema.character_data,
    profile_id information_schema.character_data,
    required_value information_schema.cardinal_number,
    comments information_schema.character_data
);

create view octane_data_mart.nmls_call_report_national(mcr_field_id, mcr_description, average_unpaid_balance_amount, loan_count, total_unpaid_balance_amount, report_quarter) as
    SELECT nmls_call_report_national.mcr_field_id,
    nmls_call_report_national.mcr_description,
    nmls_call_report_national.average_unpaid_balance AS average_unpaid_balance_amount,
    nmls_call_report_national.loan_count,
    nmls_call_report_national.total_unpaid_balance AS total_unpaid_balance_amount,
    nmls_call_report_national.report_quarter
   FROM staging_compliance.nmls_call_report_national;

alter table octane_data_mart.nmls_call_report_national owner to deployer;

grant select on octane_data_mart.nmls_call_report_national to readonly;

grant select on octane_data_mart.nmls_call_report_national to svc_octane;

create view octane_data_mart.nmls_call_report_s540a(state_type, item_id, servicer_nmls_id, servicer_name, pool_number, total_unpaid_balance_amount, loan_count, average_unpaid_balance_amount, report_quarter) as
    SELECT nmls_call_report_s540a.state_type,
    nmls_call_report_s540a.item_id,
    nmls_call_report_s540a.servicer_nmls_id,
    nmls_call_report_s540a.servicer_name,
    nmls_call_report_s540a.pool_number,
    nmls_call_report_s540a.total_unpaid_balance AS total_unpaid_balance_amount,
    nmls_call_report_s540a.loan_count,
    nmls_call_report_s540a.average_unpaid_balance AS average_unpaid_balance_amount,
    nmls_call_report_s540a.report_quarter
   FROM staging_compliance.nmls_call_report_s540a;

alter table octane_data_mart.nmls_call_report_s540a owner to deployer;

grant select on octane_data_mart.nmls_call_report_s540a to readonly;

grant select on octane_data_mart.nmls_call_report_s540a to svc_octane;

create view octane_data_mart.nmls_call_report_state(mcr_field_id, mcr_description, state_type, total_unpaid_balance_amount, loan_count, average_unpaid_balance_amount, report_quarter) as
    SELECT nmls_call_report_state.mcr_field_id,
    nmls_call_report_state.mcr_description,
    nmls_call_report_state.state_type,
    nmls_call_report_state.total_unpaid_balance AS total_unpaid_balance_amount,
    nmls_call_report_state.loan_count,
    nmls_call_report_state.average_unpaid_balance AS average_unpaid_balance_amount,
    nmls_call_report_state.report_quarter
   FROM staging_compliance.nmls_call_report_state;

alter table octane_data_mart.nmls_call_report_state owner to deployer;

grant select on octane_data_mart.nmls_call_report_state to readonly;

grant select on octane_data_mart.nmls_call_report_state to svc_octane;

create view information_schema._pg_foreign_data_wrappers(oid, fdwowner, fdwoptions, foreign_data_wrapper_catalog, foreign_data_wrapper_name, authorization_identifier, foreign_data_wrapper_language) as
    -- missing source code
;

create view information_schema._pg_foreign_servers(oid, srvoptions, foreign_server_catalog, foreign_server_name, foreign_data_wrapper_catalog, foreign_data_wrapper_name, foreign_server_type, foreign_server_version, authorization_identifier) as
    -- missing source code
;

create view information_schema._pg_foreign_table_columns(nspname, relname, attname, attfdwoptions) as
    -- missing source code
;

create view information_schema._pg_foreign_tables(foreign_table_catalog, foreign_table_schema, foreign_table_name, ftoptions, foreign_server_catalog, foreign_server_name, authorization_identifier) as
    -- missing source code
;

create view information_schema._pg_user_mappings(oid, umoptions, umuser, authorization_identifier, foreign_server_catalog, foreign_server_name, srvowner) as
    -- missing source code
;

create view information_schema.administrable_role_authorizations(grantee, role_name, is_grantable) as
    -- missing source code
;

create view information_schema.applicable_roles(grantee, role_name, is_grantable) as
    -- missing source code
;

create view information_schema.attributes(udt_catalog, udt_schema, udt_name, attribute_name, ordinal_position, attribute_default, is_nullable, data_type, character_maximum_length, character_octet_length, character_set_catalog, character_set_schema, character_set_name, collation_catalog, collation_schema, collation_name, numeric_precision, numeric_precision_radix, numeric_scale, datetime_precision, interval_type, interval_precision, attribute_udt_catalog, attribute_udt_schema, attribute_udt_name, scope_catalog, scope_schema, scope_name, maximum_cardinality, dtd_identifier, is_derived_reference_attribute) as
    -- missing source code
;

create view information_schema.character_sets(character_set_catalog, character_set_schema, character_set_name, character_repertoire, form_of_use, default_collate_catalog, default_collate_schema, default_collate_name) as
    -- missing source code
;

create view information_schema.check_constraint_routine_usage(constraint_catalog, constraint_schema, constraint_name, specific_catalog, specific_schema, specific_name) as
    -- missing source code
;

create view information_schema.check_constraints(constraint_catalog, constraint_schema, constraint_name, check_clause) as
    -- missing source code
;

create view information_schema.collation_character_set_applicability(collation_catalog, collation_schema, collation_name, character_set_catalog, character_set_schema, character_set_name) as
    -- missing source code
;

create view information_schema.collations(collation_catalog, collation_schema, collation_name, pad_attribute) as
    -- missing source code
;

create view information_schema.column_column_usage(table_catalog, table_schema, table_name, column_name, dependent_column) as
    -- missing source code
;

create view information_schema.column_domain_usage(domain_catalog, domain_schema, domain_name, table_catalog, table_schema, table_name, column_name) as
    -- missing source code
;

create view information_schema.column_options(table_catalog, table_schema, table_name, column_name, option_name, option_value) as
    -- missing source code
;

create view information_schema.column_privileges(grantor, grantee, table_catalog, table_schema, table_name, column_name, privilege_type, is_grantable) as
    -- missing source code
;

create view information_schema.column_udt_usage(udt_catalog, udt_schema, udt_name, table_catalog, table_schema, table_name, column_name) as
    -- missing source code
;

create view information_schema.columns(table_catalog, table_schema, table_name, column_name, ordinal_position, column_default, is_nullable, data_type, character_maximum_length, character_octet_length, numeric_precision, numeric_precision_radix, numeric_scale, datetime_precision, interval_type, interval_precision, character_set_catalog, character_set_schema, character_set_name, collation_catalog, collation_schema, collation_name, domain_catalog, domain_schema, domain_name, udt_catalog, udt_schema, udt_name, scope_catalog, scope_schema, scope_name, maximum_cardinality, dtd_identifier, is_self_referencing, is_identity, identity_generation, identity_start, identity_increment, identity_maximum, identity_minimum, identity_cycle, is_generated, generation_expression, is_updatable) as
    -- missing source code
;

create view information_schema.constraint_column_usage(table_catalog, table_schema, table_name, column_name, constraint_catalog, constraint_schema, constraint_name) as
    -- missing source code
;

create view information_schema.constraint_table_usage(table_catalog, table_schema, table_name, constraint_catalog, constraint_schema, constraint_name) as
    -- missing source code
;

create view information_schema.data_type_privileges(object_catalog, object_schema, object_name, object_type, dtd_identifier) as
    -- missing source code
;

create view information_schema.domain_constraints(constraint_catalog, constraint_schema, constraint_name, domain_catalog, domain_schema, domain_name, is_deferrable, initially_deferred) as
    -- missing source code
;

create view information_schema.domain_udt_usage(udt_catalog, udt_schema, udt_name, domain_catalog, domain_schema, domain_name) as
    -- missing source code
;

create view information_schema.domains(domain_catalog, domain_schema, domain_name, data_type, character_maximum_length, character_octet_length, character_set_catalog, character_set_schema, character_set_name, collation_catalog, collation_schema, collation_name, numeric_precision, numeric_precision_radix, numeric_scale, datetime_precision, interval_type, interval_precision, domain_default, udt_catalog, udt_schema, udt_name, scope_catalog, scope_schema, scope_name, maximum_cardinality, dtd_identifier) as
    -- missing source code
;

create view information_schema.element_types(object_catalog, object_schema, object_name, object_type, collection_type_identifier, data_type, character_maximum_length, character_octet_length, character_set_catalog, character_set_schema, character_set_name, collation_catalog, collation_schema, collation_name, numeric_precision, numeric_precision_radix, numeric_scale, datetime_precision, interval_type, interval_precision, domain_default, udt_catalog, udt_schema, udt_name, scope_catalog, scope_schema, scope_name, maximum_cardinality, dtd_identifier) as
    -- missing source code
;

create view information_schema.enabled_roles(role_name) as
    -- missing source code
;

create view information_schema.foreign_data_wrapper_options(foreign_data_wrapper_catalog, foreign_data_wrapper_name, option_name, option_value) as
    -- missing source code
;

create view information_schema.foreign_data_wrappers(foreign_data_wrapper_catalog, foreign_data_wrapper_name, authorization_identifier, library_name, foreign_data_wrapper_language) as
    -- missing source code
;

create view information_schema.foreign_server_options(foreign_server_catalog, foreign_server_name, option_name, option_value) as
    -- missing source code
;

create view information_schema.foreign_servers(foreign_server_catalog, foreign_server_name, foreign_data_wrapper_catalog, foreign_data_wrapper_name, foreign_server_type, foreign_server_version, authorization_identifier) as
    -- missing source code
;

create view information_schema.foreign_table_options(foreign_table_catalog, foreign_table_schema, foreign_table_name, option_name, option_value) as
    -- missing source code
;

create view information_schema.foreign_tables(foreign_table_catalog, foreign_table_schema, foreign_table_name, foreign_server_catalog, foreign_server_name) as
    -- missing source code
;

create view information_schema.information_schema_catalog_name(catalog_name) as
    -- missing source code
;

create view information_schema.key_column_usage(constraint_catalog, constraint_schema, constraint_name, table_catalog, table_schema, table_name, column_name, ordinal_position, position_in_unique_constraint) as
    -- missing source code
;

create view information_schema.parameters(specific_catalog, specific_schema, specific_name, ordinal_position, parameter_mode, is_result, as_locator, parameter_name, data_type, character_maximum_length, character_octet_length, character_set_catalog, character_set_schema, character_set_name, collation_catalog, collation_schema, collation_name, numeric_precision, numeric_precision_radix, numeric_scale, datetime_precision, interval_type, interval_precision, udt_catalog, udt_schema, udt_name, scope_catalog, scope_schema, scope_name, maximum_cardinality, dtd_identifier, parameter_default) as
    -- missing source code
;

create view pg_catalog.pg_available_extension_versions(name, version, installed, superuser, relocatable, schema, requires, comment) as
    -- missing source code
;

create view pg_catalog.pg_available_extensions(name, default_version, installed_version, comment) as
    -- missing source code
;

create view pg_catalog.pg_config(name, setting) as
    -- missing source code
;

create view pg_catalog.pg_cursors(name, statement, is_holdable, is_binary, is_scrollable, creation_time) as
    -- missing source code
;

create view pg_catalog.pg_file_settings(sourcefile, sourceline, seqno, name, setting, applied, error) as
    -- missing source code
;

create view pg_catalog.pg_group(groname, grosysid, grolist) as
    -- missing source code
;

create view pg_catalog.pg_hba_file_rules(line_number, type, database, user_name, address, netmask, auth_method, options, error) as
    -- missing source code
;

create view pg_catalog.pg_indexes(schemaname, tablename, indexname, tablespace, indexdef) as
    -- missing source code
;

create view pg_catalog.pg_locks(locktype, database, relation, page, tuple, virtualxid, transactionid, classid, objid, objsubid, virtualtransaction, pid, mode, granted, fastpath) as
    -- missing source code
;

create view pg_catalog.pg_matviews(schemaname, matviewname, matviewowner, tablespace, hasindexes, ispopulated, definition) as
    -- missing source code
;

create view pg_catalog.pg_policies(schemaname, tablename, policyname, permissive, roles, cmd, qual, with_check) as
    -- missing source code
;

create view pg_catalog.pg_prepared_statements(name, statement, prepare_time, parameter_types, from_sql) as
    -- missing source code
;

create view pg_catalog.pg_prepared_xacts(transaction, gid, prepared, owner, database) as
    -- missing source code
;

create view pg_catalog.pg_publication_tables(pubname, schemaname, tablename) as
    -- missing source code
;

create view pg_catalog.pg_replication_origin_status(local_id, external_id, remote_lsn, local_lsn) as
    -- missing source code
;

create view pg_catalog.pg_replication_slots(slot_name, plugin, slot_type, datoid, database, temporary, active, active_pid, xmin, catalog_xmin, restart_lsn, confirmed_flush_lsn) as
    -- missing source code
;

create view pg_catalog.pg_roles(rolname, rolsuper, rolinherit, rolcreaterole, rolcreatedb, rolcanlogin, rolreplication, rolconnlimit, rolpassword, rolvaliduntil, rolbypassrls, rolconfig, oid) as
    -- missing source code
;

create view pg_catalog.pg_rules(schemaname, tablename, rulename, definition) as
    -- missing source code
;

create view pg_catalog.pg_seclabels(objoid, classoid, objsubid, objtype, objnamespace, objname, provider, label) as
    -- missing source code
;

create view pg_catalog.pg_sequences(schemaname, sequencename, sequenceowner, data_type, start_value, min_value, max_value, increment_by, cycle, cache_size, last_value) as
    -- missing source code
;

create view pg_catalog.pg_settings(name, setting, unit, category, short_desc, extra_desc, context, vartype, source, min_val, max_val, enumvals, boot_val, reset_val, sourcefile, sourceline, pending_restart) as
    -- missing source code
;

create rule pg_catalog.pg_settings_n as
    on update to pg_catalog.pg_settings
    do instead -- missing source code
;

create rule pg_catalog.pg_settings_u as
    on update to pg_catalog.pg_settings
    do also -- missing source code
;

create view pg_catalog.pg_shadow(usename, usesysid, usecreatedb, usesuper, userepl, usebypassrls, passwd, valuntil, useconfig) as
    -- missing source code
;

create view pg_catalog.pg_stat_activity(datid, datname, pid, usesysid, usename, application_name, client_addr, client_hostname, client_port, backend_start, xact_start, query_start, state_change, wait_event_type, wait_event, state, backend_xid, backend_xmin, query, backend_type) as
    -- missing source code
;

create view pg_catalog.pg_stat_all_indexes(relid, indexrelid, schemaname, relname, indexrelname, idx_scan, idx_tup_read, idx_tup_fetch) as
    -- missing source code
;

create view pg_catalog.pg_stat_all_tables(relid, schemaname, relname, seq_scan, seq_tup_read, idx_scan, idx_tup_fetch, n_tup_ins, n_tup_upd, n_tup_del, n_tup_hot_upd, n_live_tup, n_dead_tup, n_mod_since_analyze, last_vacuum, last_autovacuum, last_analyze, last_autoanalyze, vacuum_count, autovacuum_count, analyze_count, autoanalyze_count) as
    -- missing source code
;

create view pg_catalog.pg_stat_archiver(archived_count, last_archived_wal, last_archived_time, failed_count, last_failed_wal, last_failed_time, stats_reset) as
    -- missing source code
;

create view pg_catalog.pg_stat_bgwriter(checkpoints_timed, checkpoints_req, checkpoint_write_time, checkpoint_sync_time, buffers_checkpoint, buffers_clean, maxwritten_clean, buffers_backend, buffers_backend_fsync, buffers_alloc, stats_reset) as
    -- missing source code
;

create view pg_catalog.pg_stat_database(datid, datname, numbackends, xact_commit, xact_rollback, blks_read, blks_hit, tup_returned, tup_fetched, tup_inserted, tup_updated, tup_deleted, conflicts, temp_files, temp_bytes, deadlocks, checksum_failures, checksum_last_failure, blk_read_time, blk_write_time, stats_reset) as
    -- missing source code
;

create view pg_catalog.pg_stat_database_conflicts(datid, datname, confl_tablespace, confl_lock, confl_snapshot, confl_bufferpin, confl_deadlock) as
    -- missing source code
;

create view pg_catalog.pg_stat_gssapi(pid, gss_authenticated, principal, encrypted) as
    -- missing source code
;

create view pg_catalog.pg_stat_progress_cluster(pid, datid, datname, relid, command, phase, cluster_index_relid, heap_tuples_scanned, heap_tuples_written, heap_blks_total, heap_blks_scanned, index_rebuild_count) as
    -- missing source code
;

create view pg_catalog.pg_stat_progress_create_index(pid, datid, datname, relid, index_relid, command, phase, lockers_total, lockers_done, current_locker_pid, blocks_total, blocks_done, tuples_total, tuples_done, partitions_total, partitions_done) as
    -- missing source code
;

create view pg_catalog.pg_stat_progress_vacuum(pid, datid, datname, relid, phase, heap_blks_total, heap_blks_scanned, heap_blks_vacuumed, index_vacuum_count, max_dead_tuples, num_dead_tuples) as
    -- missing source code
;

create view pg_catalog.pg_stat_replication(pid, usesysid, usename, application_name, client_addr, client_hostname, client_port, backend_start, backend_xmin, state, sent_lsn, write_lsn, flush_lsn, replay_lsn, write_lag, flush_lag, replay_lag, sync_priority, sync_state, reply_time) as
    -- missing source code
;

create view pg_catalog.pg_stat_ssl(pid, ssl, version, cipher, bits, compression, client_dn, client_serial, issuer_dn) as
    -- missing source code
;

create view pg_catalog.pg_stat_subscription(subid, subname, pid, relid, received_lsn, last_msg_send_time, last_msg_receipt_time, latest_end_lsn, latest_end_time) as
    -- missing source code
;

create view pg_catalog.pg_stat_sys_indexes(relid, indexrelid, schemaname, relname, indexrelname, idx_scan, idx_tup_read, idx_tup_fetch) as
    -- missing source code
;

create view pg_catalog.pg_stat_sys_tables(relid, schemaname, relname, seq_scan, seq_tup_read, idx_scan, idx_tup_fetch, n_tup_ins, n_tup_upd, n_tup_del, n_tup_hot_upd, n_live_tup, n_dead_tup, n_mod_since_analyze, last_vacuum, last_autovacuum, last_analyze, last_autoanalyze, vacuum_count, autovacuum_count, analyze_count, autoanalyze_count) as
    -- missing source code
;

create view pg_catalog.pg_stat_user_functions(funcid, schemaname, funcname, calls, total_time, self_time) as
    -- missing source code
;

create view pg_catalog.pg_stat_user_indexes(relid, indexrelid, schemaname, relname, indexrelname, idx_scan, idx_tup_read, idx_tup_fetch) as
    -- missing source code
;

create view pg_catalog.pg_stat_user_tables(relid, schemaname, relname, seq_scan, seq_tup_read, idx_scan, idx_tup_fetch, n_tup_ins, n_tup_upd, n_tup_del, n_tup_hot_upd, n_live_tup, n_dead_tup, n_mod_since_analyze, last_vacuum, last_autovacuum, last_analyze, last_autoanalyze, vacuum_count, autovacuum_count, analyze_count, autoanalyze_count) as
    -- missing source code
;

create view pg_catalog.pg_stat_wal_receiver(pid, status, receive_start_lsn, receive_start_tli, received_lsn, received_tli, last_msg_send_time, last_msg_receipt_time, latest_end_lsn, latest_end_time, slot_name, sender_host, sender_port, conninfo) as
    -- missing source code
;

create view pg_catalog.pg_stat_xact_all_tables(relid, schemaname, relname, seq_scan, seq_tup_read, idx_scan, idx_tup_fetch, n_tup_ins, n_tup_upd, n_tup_del, n_tup_hot_upd) as
    -- missing source code
;

create view pg_catalog.pg_stat_xact_sys_tables(relid, schemaname, relname, seq_scan, seq_tup_read, idx_scan, idx_tup_fetch, n_tup_ins, n_tup_upd, n_tup_del, n_tup_hot_upd) as
    -- missing source code
;

create view pg_catalog.pg_stat_xact_user_functions(funcid, schemaname, funcname, calls, total_time, self_time) as
    -- missing source code
;

create view pg_catalog.pg_stat_xact_user_tables(relid, schemaname, relname, seq_scan, seq_tup_read, idx_scan, idx_tup_fetch, n_tup_ins, n_tup_upd, n_tup_del, n_tup_hot_upd) as
    -- missing source code
;

create view pg_catalog.pg_statio_all_indexes(relid, indexrelid, schemaname, relname, indexrelname, idx_blks_read, idx_blks_hit) as
    -- missing source code
;

create view pg_catalog.pg_statio_all_sequences(relid, schemaname, relname, blks_read, blks_hit) as
    -- missing source code
;

create view pg_catalog.pg_statio_all_tables(relid, schemaname, relname, heap_blks_read, heap_blks_hit, idx_blks_read, idx_blks_hit, toast_blks_read, toast_blks_hit, tidx_blks_read, tidx_blks_hit) as
    -- missing source code
;

create view pg_catalog.pg_statio_sys_indexes(relid, indexrelid, schemaname, relname, indexrelname, idx_blks_read, idx_blks_hit) as
    -- missing source code
;

create view pg_catalog.pg_statio_sys_sequences(relid, schemaname, relname, blks_read, blks_hit) as
    -- missing source code
;

create view pg_catalog.pg_statio_sys_tables(relid, schemaname, relname, heap_blks_read, heap_blks_hit, idx_blks_read, idx_blks_hit, toast_blks_read, toast_blks_hit, tidx_blks_read, tidx_blks_hit) as
    -- missing source code
;

create view pg_catalog.pg_statio_user_indexes(relid, indexrelid, schemaname, relname, indexrelname, idx_blks_read, idx_blks_hit) as
    -- missing source code
;

create view pg_catalog.pg_statio_user_sequences(relid, schemaname, relname, blks_read, blks_hit) as
    -- missing source code
;

create view pg_catalog.pg_statio_user_tables(relid, schemaname, relname, heap_blks_read, heap_blks_hit, idx_blks_read, idx_blks_hit, toast_blks_read, toast_blks_hit, tidx_blks_read, tidx_blks_hit) as
    -- missing source code
;

create view pg_catalog.pg_stats(schemaname, tablename, attname, inherited, null_frac, avg_width, n_distinct, most_common_vals, most_common_freqs, histogram_bounds, correlation, most_common_elems, most_common_elem_freqs, elem_count_histogram) as
    -- missing source code
;

create view pg_catalog.pg_stats_ext(schemaname, tablename, statistics_schemaname, statistics_name, statistics_owner, attnames, kinds, n_distinct, dependencies, most_common_vals, most_common_val_nulls, most_common_freqs, most_common_base_freqs) as
    -- missing source code
;

create view pg_catalog.pg_tables(schemaname, tablename, tableowner, tablespace, hasindexes, hasrules, hastriggers, rowsecurity) as
    -- missing source code
;

create view pg_catalog.pg_timezone_abbrevs(abbrev, utc_offset, is_dst) as
    -- missing source code
;

create view pg_catalog.pg_timezone_names(name, abbrev, utc_offset, is_dst) as
    -- missing source code
;

create view pg_catalog.pg_user(usename, usesysid, usecreatedb, usesuper, userepl, usebypassrls, passwd, valuntil, useconfig) as
    -- missing source code
;

create view pg_catalog.pg_user_mappings(umid, srvid, srvname, umuser, usename, umoptions) as
    -- missing source code
;

create view pg_catalog.pg_views(schemaname, viewname, viewowner, definition) as
    -- missing source code
;

create view information_schema.referential_constraints(constraint_catalog, constraint_schema, constraint_name, unique_constraint_catalog, unique_constraint_schema, unique_constraint_name, match_option, update_rule, delete_rule) as
    -- missing source code
;

create view information_schema.role_column_grants(grantor, grantee, table_catalog, table_schema, table_name, column_name, privilege_type, is_grantable) as
    -- missing source code
;

create view information_schema.role_routine_grants(grantor, grantee, specific_catalog, specific_schema, specific_name, routine_catalog, routine_schema, routine_name, privilege_type, is_grantable) as
    -- missing source code
;

create view information_schema.role_table_grants(grantor, grantee, table_catalog, table_schema, table_name, privilege_type, is_grantable, with_hierarchy) as
    -- missing source code
;

create view information_schema.role_udt_grants(grantor, grantee, udt_catalog, udt_schema, udt_name, privilege_type, is_grantable) as
    -- missing source code
;

create view information_schema.role_usage_grants(grantor, grantee, object_catalog, object_schema, object_name, object_type, privilege_type, is_grantable) as
    -- missing source code
;

create view information_schema.routine_privileges(grantor, grantee, specific_catalog, specific_schema, specific_name, routine_catalog, routine_schema, routine_name, privilege_type, is_grantable) as
    -- missing source code
;

create view information_schema.routines(specific_catalog, specific_schema, specific_name, routine_catalog, routine_schema, routine_name, routine_type, module_catalog, module_schema, module_name, udt_catalog, udt_schema, udt_name, data_type, character_maximum_length, character_octet_length, character_set_catalog, character_set_schema, character_set_name, collation_catalog, collation_schema, collation_name, numeric_precision, numeric_precision_radix, numeric_scale, datetime_precision, interval_type, interval_precision, type_udt_catalog, type_udt_schema, type_udt_name, scope_catalog, scope_schema, scope_name, maximum_cardinality, dtd_identifier, routine_body, routine_definition, external_name, external_language, parameter_style, is_deterministic, sql_data_access, is_null_call, sql_path, schema_level_routine, max_dynamic_result_sets, is_user_defined_cast, is_implicitly_invocable, security_type, to_sql_specific_catalog, to_sql_specific_schema, to_sql_specific_name, as_locator, created, last_altered, new_savepoint_level, is_udt_dependent, result_cast_from_data_type, result_cast_as_locator, result_cast_char_max_length, result_cast_char_octet_length, result_cast_char_set_catalog, result_cast_char_set_schema, result_cast_char_set_name, result_cast_collation_catalog, result_cast_collation_schema, result_cast_collation_name, result_cast_numeric_precision, result_cast_numeric_precision_radix, result_cast_numeric_scale, result_cast_datetime_precision, result_cast_interval_type, result_cast_interval_precision, result_cast_type_udt_catalog, result_cast_type_udt_schema, result_cast_type_udt_name, result_cast_scope_catalog, result_cast_scope_schema, result_cast_scope_name, result_cast_maximum_cardinality, result_cast_dtd_identifier) as
    -- missing source code
;

create view information_schema.schemata(catalog_name, schema_name, schema_owner, default_character_set_catalog, default_character_set_schema, default_character_set_name, sql_path) as
    -- missing source code
;

create view information_schema.sequences(sequence_catalog, sequence_schema, sequence_name, data_type, numeric_precision, numeric_precision_radix, numeric_scale, start_value, minimum_value, maximum_value, increment, cycle_option) as
    -- missing source code
;

create view information_schema.table_constraints(constraint_catalog, constraint_schema, constraint_name, table_catalog, table_schema, table_name, constraint_type, is_deferrable, initially_deferred, enforced) as
    -- missing source code
;

create view information_schema.table_privileges(grantor, grantee, table_catalog, table_schema, table_name, privilege_type, is_grantable, with_hierarchy) as
    -- missing source code
;

create view information_schema.tables(table_catalog, table_schema, table_name, table_type, self_referencing_column_name, reference_generation, user_defined_type_catalog, user_defined_type_schema, user_defined_type_name, is_insertable_into, is_typed, commit_action) as
    -- missing source code
;

create view information_schema.transforms(udt_catalog, udt_schema, udt_name, specific_catalog, specific_schema, specific_name, group_name, transform_type) as
    -- missing source code
;

create view information_schema.triggered_update_columns(trigger_catalog, trigger_schema, trigger_name, event_object_catalog, event_object_schema, event_object_table, event_object_column) as
    -- missing source code
;

create view information_schema.triggers(trigger_catalog, trigger_schema, trigger_name, event_manipulation, event_object_catalog, event_object_schema, event_object_table, action_order, action_condition, action_statement, action_orientation, action_timing, action_reference_old_table, action_reference_new_table, action_reference_old_row, action_reference_new_row, created) as
    -- missing source code
;

create view information_schema.udt_privileges(grantor, grantee, udt_catalog, udt_schema, udt_name, privilege_type, is_grantable) as
    -- missing source code
;

create view information_schema.usage_privileges(grantor, grantee, object_catalog, object_schema, object_name, object_type, privilege_type, is_grantable) as
    -- missing source code
;

create view information_schema.user_defined_types(user_defined_type_catalog, user_defined_type_schema, user_defined_type_name, user_defined_type_category, is_instantiable, is_final, ordering_form, ordering_category, ordering_routine_catalog, ordering_routine_schema, ordering_routine_name, reference_type, data_type, character_maximum_length, character_octet_length, character_set_catalog, character_set_schema, character_set_name, collation_catalog, collation_schema, collation_name, numeric_precision, numeric_precision_radix, numeric_scale, datetime_precision, interval_type, interval_precision, source_dtd_identifier, ref_dtd_identifier) as
    -- missing source code
;

create view information_schema.user_mapping_options(authorization_identifier, foreign_server_catalog, foreign_server_name, option_name, option_value) as
    -- missing source code
;

create view information_schema.user_mappings(authorization_identifier, foreign_server_catalog, foreign_server_name) as
    -- missing source code
;

create view information_schema.view_column_usage(view_catalog, view_schema, view_name, table_catalog, table_schema, table_name, column_name) as
    -- missing source code
;

create view information_schema.view_routine_usage(table_catalog, table_schema, table_name, specific_catalog, specific_schema, specific_name) as
    -- missing source code
;

create view information_schema.view_table_usage(view_catalog, view_schema, view_name, table_catalog, table_schema, table_name) as
    -- missing source code
;

create view information_schema.views(table_catalog, table_schema, table_name, view_definition, check_option, is_updatable, is_insertable_into, is_trigger_updatable, is_trigger_deletable, is_trigger_insertable_into) as
    -- missing source code
;

create function loan.set_timestamp() returns trigger
    language plpgsql
as $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$;

alter function loan.set_timestamp() owner to deployer;

create trigger set_timestamp_on_encompass_loan
    before update
    on loan.encompass_loan
    for each row
    execute procedure loan.set_timestamp();

create function pg_catalog."RI_FKey_cascade_del"() returns trigger
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."RI_FKey_cascade_del"() is 'referential integrity ON DELETE CASCADE';

create function pg_catalog."RI_FKey_cascade_upd"() returns trigger
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."RI_FKey_cascade_upd"() is 'referential integrity ON UPDATE CASCADE';

create function pg_catalog."RI_FKey_check_ins"() returns trigger
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."RI_FKey_check_ins"() is 'referential integrity FOREIGN KEY ... REFERENCES';

create function pg_catalog."RI_FKey_check_upd"() returns trigger
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."RI_FKey_check_upd"() is 'referential integrity FOREIGN KEY ... REFERENCES';

create function pg_catalog."RI_FKey_noaction_del"() returns trigger
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."RI_FKey_noaction_del"() is 'referential integrity ON DELETE NO ACTION';

create function pg_catalog."RI_FKey_noaction_upd"() returns trigger
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."RI_FKey_noaction_upd"() is 'referential integrity ON UPDATE NO ACTION';

create function pg_catalog."RI_FKey_restrict_del"() returns trigger
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."RI_FKey_restrict_del"() is 'referential integrity ON DELETE RESTRICT';

create function pg_catalog."RI_FKey_restrict_upd"() returns trigger
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."RI_FKey_restrict_upd"() is 'referential integrity ON UPDATE RESTRICT';

create function pg_catalog."RI_FKey_setdefault_del"() returns trigger
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."RI_FKey_setdefault_del"() is 'referential integrity ON DELETE SET DEFAULT';

create function pg_catalog."RI_FKey_setdefault_upd"() returns trigger
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."RI_FKey_setdefault_upd"() is 'referential integrity ON UPDATE SET DEFAULT';

create function pg_catalog."RI_FKey_setnull_del"() returns trigger
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."RI_FKey_setnull_del"() is 'referential integrity ON DELETE SET NULL';

create function pg_catalog."RI_FKey_setnull_upd"() returns trigger
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."RI_FKey_setnull_upd"() is 'referential integrity ON UPDATE SET NULL';

create function information_schema._pg_char_max_length(typid oid, typmod integer) returns integer
    immutable
    strict
    language sql
as $$
begin
-- missing source code
end;
$$;

create function information_schema._pg_char_octet_length(typid oid, typmod integer) returns integer
    immutable
    strict
    language sql
as $$
begin
-- missing source code
end;
$$;

create function information_schema._pg_datetime_precision(typid oid, typmod integer) returns integer
    immutable
    strict
    language sql
as $$
begin
-- missing source code
end;
$$;

create function information_schema._pg_expandarray(anyarray, OUT x anyelement, OUT n integer) returns SETOF record
    immutable
    strict
    language sql
as $$
begin
-- missing source code
end;
$$;

create function information_schema._pg_index_position(oid, smallint) returns integer
    stable
    strict
    language sql
as $$
begin
-- missing source code
end;
$$;

create function information_schema._pg_interval_type(typid oid, mod integer) returns text
    immutable
    strict
    language sql
as $$
begin
-- missing source code
end;
$$;

create function information_schema._pg_keysequal(smallint[], smallint[]) returns boolean
    immutable
    language sql
as $$
begin
-- missing source code
end;
$$;

create function information_schema._pg_numeric_precision(typid oid, typmod integer) returns integer
    immutable
    strict
    language sql
as $$
begin
-- missing source code
end;
$$;

create function information_schema._pg_numeric_precision_radix(typid oid, typmod integer) returns integer
    immutable
    strict
    language sql
as $$
begin
-- missing source code
end;
$$;

create function information_schema._pg_numeric_scale(typid oid, typmod integer) returns integer
    immutable
    strict
    language sql
as $$
begin
-- missing source code
end;
$$;

create function information_schema._pg_truetypid(pg_attribute, pg_type) returns oid
    immutable
    strict
    language sql
as $$
begin
-- missing source code
end;
$$;

create function information_schema._pg_truetypmod(pg_attribute, pg_type) returns integer
    immutable
    strict
    language sql
as $$
begin
-- missing source code
end;
$$;

create function pg_catalog.abbrev(cidr) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.abbrev(cidr) is 'abbreviated display of cidr value';

create function pg_catalog.abbrev(inet) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.abbrev(inet) is 'abbreviated display of inet value';

create function pg_catalog.abs(bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.abs(bigint) is 'absolute value';

create function pg_catalog.abs(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.abs(double precision) is 'absolute value';

create function pg_catalog.abs(integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.abs(integer) is 'absolute value';

create function pg_catalog.abs(numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.abs(numeric) is 'absolute value';

create function pg_catalog.abs(real) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.abs(real) is 'absolute value';

create function pg_catalog.abs(smallint) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.abs(smallint) is 'absolute value';

create function pg_catalog.aclcontains(aclitem[], aclitem) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.aclcontains(aclitem[], aclitem) is 'contains';

create function pg_catalog.acldefault("char", oid) returns aclitem[]
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.acldefault("char", oid) is 'show hardwired default privileges, primarily for use by the information schema';

create function pg_catalog.aclexplode(acl aclitem[], out grantor oid, out grantee oid, out privilege_type text, out is_grantable boolean) returns setof setof record
    stable
    strict
    cost 1
    rows 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.aclexplode(aclitem[], out oid, out oid, out text, out boolean) is 'convert ACL item array to table, primarily for use by information schema';

create function pg_catalog.aclinsert(aclitem[], aclitem) returns aclitem[]
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.aclinsert(aclitem[], aclitem) is 'add/update ACL item';

create function pg_catalog.aclitemeq(aclitem, aclitem) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.aclitemeq(aclitem, aclitem) is 'implementation of = operator';

create function pg_catalog.aclitemin(cstring) returns aclitem
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.aclitemin(cstring) is 'I/O';

create function pg_catalog.aclitemout(aclitem) returns cstring
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.aclitemout(aclitem) is 'I/O';

create function pg_catalog.aclremove(aclitem[], aclitem) returns aclitem[]
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.aclremove(aclitem[], aclitem) is 'remove ACL item';

create function pg_catalog.acos(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.acos(double precision) is 'arccosine';

create function pg_catalog.acosd(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.acosd(double precision) is 'arccosine, degrees';

create function pg_catalog.acosh(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.acosh(double precision) is 'inverse hyperbolic cosine';

create function pg_catalog.age(timestamp with time zone) returns interval
    stable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.age(timestamp with time zone) is 'date difference from today preserving months and years';

create function pg_catalog.age(timestamp with time zone, timestamp with time zone) returns interval
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.age(timestamp with time zone, timestamp with time zone) is 'date difference preserving months and years';

create function pg_catalog.age(timestamp without time zone) returns interval
    stable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.age(timestamp) is 'date difference from today preserving months and years';

create function pg_catalog.age(timestamp, timestamp) returns interval
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.age(timestamp, timestamp) is 'date difference preserving months and years';

create function pg_catalog.age(xid) returns integer
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.age(xid) is 'age of a transaction ID, in transactions before current transaction';

create function pg_catalog.amvalidate(oid) returns boolean
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.amvalidate(oid) is 'validate an operator class';

create function pg_catalog.any_in(cstring) returns "any"
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.any_in(cstring) is 'I/O';

create function pg_catalog.any_out("any") returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.any_out("any") is 'I/O';

create function pg_catalog.anyarray_in(cstring) returns anyarray
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.anyarray_in(cstring) is 'I/O';

create function pg_catalog.anyarray_out(anyarray) returns cstring
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.anyarray_out(anyarray) is 'I/O';

create function pg_catalog.anyarray_recv(internal) returns anyarray
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.anyarray_recv(internal) is 'I/O';

create function pg_catalog.anyarray_send(anyarray) returns bytea
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.anyarray_send(anyarray) is 'I/O';

create function pg_catalog.anyelement_in(cstring) returns anyelement
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.anyelement_in(cstring) is 'I/O';

create function pg_catalog.anyelement_out(anyelement) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.anyelement_out(anyelement) is 'I/O';

create function pg_catalog.anyenum_in(cstring) returns anyenum
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.anyenum_in(cstring) is 'I/O';

create function pg_catalog.anyenum_out(anyenum) returns cstring
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.anyenum_out(anyenum) is 'I/O';

create function pg_catalog.anynonarray_in(cstring) returns anynonarray
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.anynonarray_in(cstring) is 'I/O';

create function pg_catalog.anynonarray_out(anynonarray) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.anynonarray_out(anynonarray) is 'I/O';

create function pg_catalog.anyrange_in(cstring, oid, integer) returns anyrange
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.anyrange_in(cstring, oid, integer) is 'I/O';

create function pg_catalog.anyrange_out(anyrange) returns cstring
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.anyrange_out(anyrange) is 'I/O';

create function pg_catalog.anytextcat(anynonarray, text) returns text
    stable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.anytextcat(anynonarray, text) is 'implementation of || operator';

create function pg_catalog.area(box) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.area(box) is 'box area';

create function pg_catalog.area(circle) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.area(circle) is 'area of circle';

create function pg_catalog.area(path) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.area(path) is 'area of a closed path';

create function pg_catalog.areajoinsel(internal, oid, internal, smallint, internal) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.areajoinsel(internal, oid, internal, smallint, internal) is 'join selectivity for area-comparison operators';

create function pg_catalog.areasel(internal, oid, internal, integer) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.areasel(internal, oid, internal, integer) is 'restriction selectivity for area-comparison operators';

create function pg_catalog.array_agg_array_finalfn(internal, anyarray) returns anyarray
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_agg_array_finalfn(internal, anyarray) is 'aggregate final function';

create function pg_catalog.array_agg_array_transfn(internal, anyarray) returns internal
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_agg_array_transfn(internal, anyarray) is 'aggregate transition function';

create function pg_catalog.array_agg_finalfn(internal, anynonarray) returns anyarray
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_agg_finalfn(internal, anynonarray) is 'aggregate final function';

create function pg_catalog.array_agg_transfn(internal, anynonarray) returns internal
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_agg_transfn(internal, anynonarray) is 'aggregate transition function';

create function pg_catalog.array_append(anyarray, anyelement) returns anyarray
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_append(anyarray, anyelement) is 'append element onto end of array';

create function pg_catalog.array_cat(anyarray, anyarray) returns anyarray
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_cat(anyarray, anyarray) is 'implementation of || operator';

create function pg_catalog.array_dims(anyarray) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_dims(anyarray) is 'array dimensions';

create function pg_catalog.array_eq(anyarray, anyarray) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_eq(anyarray, anyarray) is 'implementation of = operator';

create function pg_catalog.array_fill(anyelement, integer[]) returns anyarray
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_fill(anyelement, integer[]) is 'array constructor with value';

create function pg_catalog.array_fill(anyelement, integer[], integer[]) returns anyarray
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_fill(anyelement, integer[], integer[]) is 'array constructor with value';

create function pg_catalog.array_ge(anyarray, anyarray) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_ge(anyarray, anyarray) is 'implementation of >= operator';

create function pg_catalog.array_gt(anyarray, anyarray) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_gt(anyarray, anyarray) is 'implementation of > operator';

create function pg_catalog.array_in(cstring, oid, integer) returns anyarray
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_in(cstring, oid, integer) is 'I/O';

create function pg_catalog.array_larger(anyarray, anyarray) returns anyarray
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_larger(anyarray, anyarray) is 'larger of two';

create function pg_catalog.array_le(anyarray, anyarray) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_le(anyarray, anyarray) is 'implementation of <= operator';

create function pg_catalog.array_length(anyarray, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_length(anyarray, integer) is 'array length';

create function pg_catalog.array_lower(anyarray, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_lower(anyarray, integer) is 'array lower dimension';

create function pg_catalog.array_lt(anyarray, anyarray) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_lt(anyarray, anyarray) is 'implementation of < operator';

create function pg_catalog.array_ndims(anyarray) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_ndims(anyarray) is 'number of array dimensions';

create function pg_catalog.array_ne(anyarray, anyarray) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_ne(anyarray, anyarray) is 'implementation of <> operator';

create function pg_catalog.array_out(anyarray) returns cstring
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_out(anyarray) is 'I/O';

create function pg_catalog.array_position(anyarray, anyelement) returns integer
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_position(anyarray, anyelement) is 'returns an offset of value in array';

create function pg_catalog.array_position(anyarray, anyelement, integer) returns integer
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_position(anyarray, anyelement, integer) is 'returns an offset of value in array with start index';

create function pg_catalog.array_positions(anyarray, anyelement) returns integer[]
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_positions(anyarray, anyelement) is 'returns an array of offsets of some value in array';

create function pg_catalog.array_prepend(anyelement, anyarray) returns anyarray
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_prepend(anyelement, anyarray) is 'prepend element onto front of array';

create function pg_catalog.array_recv(internal, oid, integer) returns anyarray
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_recv(internal, oid, integer) is 'I/O';

create function pg_catalog.array_remove(anyarray, anyelement) returns anyarray
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_remove(anyarray, anyelement) is 'remove any occurrences of an element from an array';

create function pg_catalog.array_replace(anyarray, anyelement, anyelement) returns anyarray
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_replace(anyarray, anyelement, anyelement) is 'replace any occurrences of an element in an array';

create function pg_catalog.array_send(anyarray) returns bytea
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_send(anyarray) is 'I/O';

create function pg_catalog.array_smaller(anyarray, anyarray) returns anyarray
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_smaller(anyarray, anyarray) is 'smaller of two';

create function pg_catalog.array_to_json(anyarray) returns json
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_to_json(anyarray) is 'map array to json';

create function pg_catalog.array_to_json(anyarray, boolean) returns json
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_to_json(anyarray, boolean) is 'map array to json with optional pretty printing';

create function pg_catalog.array_to_string(anyarray, text) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_to_string(anyarray, text) is 'concatenate array elements, using delimiter, into text';

create function pg_catalog.array_to_string(anyarray, text, text) returns text
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_to_string(anyarray, text, text) is 'concatenate array elements, using delimiter and null string, into text';

create function pg_catalog.array_to_tsvector(text[]) returns tsvector
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_to_tsvector(text[]) is 'build tsvector from array of lexemes';

create function pg_catalog.array_typanalyze(internal) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_typanalyze(internal) is 'array typanalyze';

create function pg_catalog.array_unnest_support(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_unnest_support(internal) is 'planner support for array_unnest';

create function pg_catalog.array_upper(anyarray, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.array_upper(anyarray, integer) is 'array upper dimension';

create function pg_catalog.arraycontained(anyarray, anyarray) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.arraycontained(anyarray, anyarray) is 'implementation of <@ operator';

create function pg_catalog.arraycontains(anyarray, anyarray) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.arraycontains(anyarray, anyarray) is 'implementation of @> operator';

create function pg_catalog.arraycontjoinsel(internal, oid, internal, smallint, internal) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.arraycontjoinsel(internal, oid, internal, smallint, internal) is 'join selectivity for array-containment operators';

create function pg_catalog.arraycontsel(internal, oid, internal, integer) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.arraycontsel(internal, oid, internal, integer) is 'restriction selectivity for array-containment operators';

create function pg_catalog.arrayoverlap(anyarray, anyarray) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.arrayoverlap(anyarray, anyarray) is 'implementation of && operator';

create function pg_catalog.ascii(text) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ascii(text) is 'convert first char to int4';

create function pg_catalog.ascii_to_mic(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ascii_to_mic(integer, integer, cstring, internal, integer) is 'internal conversion function for SQL_ASCII to MULE_INTERNAL';

create function pg_catalog.ascii_to_utf8(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ascii_to_utf8(integer, integer, cstring, internal, integer) is 'internal conversion function for SQL_ASCII to UTF8';

create function pg_catalog.asin(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.asin(double precision) is 'arcsine';

create function pg_catalog.asind(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.asind(double precision) is 'arcsine, degrees';

create function pg_catalog.asinh(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.asinh(double precision) is 'inverse hyperbolic sine';

create function pg_catalog.atan(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.atan(double precision) is 'arctangent';

create function pg_catalog.atan2(double precision, double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.atan2(double precision, double precision) is 'arctangent, two arguments';

create function pg_catalog.atan2d(double precision, double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.atan2d(double precision, double precision) is 'arctangent, two arguments, degrees';

create function pg_catalog.atand(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.atand(double precision) is 'arctangent, degrees';

create function pg_catalog.atanh(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.atanh(double precision) is 'inverse hyperbolic tangent';

create function pg_catalog.bernoulli(internal) returns tsm_handler
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bernoulli(internal) is 'BERNOULLI tablesample method handler';

create function pg_catalog.big5_to_euc_tw(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.big5_to_euc_tw(integer, integer, cstring, internal, integer) is 'internal conversion function for BIG5 to EUC_TW';

create function pg_catalog.big5_to_mic(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.big5_to_mic(integer, integer, cstring, internal, integer) is 'internal conversion function for BIG5 to MULE_INTERNAL';

create function pg_catalog.big5_to_utf8(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.big5_to_utf8(integer, integer, cstring, internal, integer) is 'internal conversion function for BIG5 to UTF8';

create function pg_catalog.binary_upgrade_create_empty_extension(text, text, boolean, text, oid[], text[], text[]) returns void
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.binary_upgrade_create_empty_extension(text, text, boolean, text, oid[], text[], text[]) is 'for use by pg_upgrade';

create function pg_catalog.binary_upgrade_set_missing_value(oid, text, text) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.binary_upgrade_set_missing_value(oid, text, text) is 'for use by pg_upgrade';

create function pg_catalog.binary_upgrade_set_next_array_pg_type_oid(oid) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.binary_upgrade_set_next_array_pg_type_oid(oid) is 'for use by pg_upgrade';

create function pg_catalog.binary_upgrade_set_next_heap_pg_class_oid(oid) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.binary_upgrade_set_next_heap_pg_class_oid(oid) is 'for use by pg_upgrade';

create function pg_catalog.binary_upgrade_set_next_index_pg_class_oid(oid) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.binary_upgrade_set_next_index_pg_class_oid(oid) is 'for use by pg_upgrade';

create function pg_catalog.binary_upgrade_set_next_pg_authid_oid(oid) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.binary_upgrade_set_next_pg_authid_oid(oid) is 'for use by pg_upgrade';

create function pg_catalog.binary_upgrade_set_next_pg_enum_oid(oid) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.binary_upgrade_set_next_pg_enum_oid(oid) is 'for use by pg_upgrade';

create function pg_catalog.binary_upgrade_set_next_pg_type_oid(oid) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.binary_upgrade_set_next_pg_type_oid(oid) is 'for use by pg_upgrade';

create function pg_catalog.binary_upgrade_set_next_toast_pg_class_oid(oid) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.binary_upgrade_set_next_toast_pg_class_oid(oid) is 'for use by pg_upgrade';

create function pg_catalog.binary_upgrade_set_next_toast_pg_type_oid(oid) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.binary_upgrade_set_next_toast_pg_type_oid(oid) is 'for use by pg_upgrade';

create function pg_catalog.binary_upgrade_set_record_init_privs(boolean) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.binary_upgrade_set_record_init_privs(boolean) is 'for use by pg_upgrade';

create function pg_catalog.bit(bigint, integer) returns bit
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bit(bigint, integer) is 'convert int8 to bitstring';

create function pg_catalog.bit(bit, integer, boolean) returns bit
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bit(bit, integer, boolean) is 'adjust bit() to typmod length';

create function pg_catalog.bit(integer, integer) returns bit
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bit(integer, integer) is 'convert int4 to bitstring';

create function pg_catalog.bit_in(cstring, oid, integer) returns bit
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bit_in(cstring, oid, integer) is 'I/O';

create function pg_catalog.bit_length(bit) returns integer
    immutable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bit_length(bit) is 'length in bits';

create function pg_catalog.bit_length(bytea) returns integer
    immutable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bit_length(bytea) is 'length in bits';

create function pg_catalog.bit_length(text) returns integer
    immutable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bit_length(text) is 'length in bits';

create function pg_catalog.bit_out(bit) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bit_out(bit) is 'I/O';

create function pg_catalog.bit_recv(internal, oid, integer) returns bit
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bit_recv(internal, oid, integer) is 'I/O';

create function pg_catalog.bit_send(bit) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bit_send(bit) is 'I/O';

create function pg_catalog.bitand(bit, bit) returns bit
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bitand(bit, bit) is 'implementation of & operator';

create function pg_catalog.bitcat(bit varying, bit varying) returns bit varying
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bitcat(bit varying, bit varying) is 'implementation of || operator';

create function pg_catalog.bitcmp(bit, bit) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bitcmp(bit, bit) is 'less-equal-greater';

create function pg_catalog.biteq(bit, bit) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.biteq(bit, bit) is 'implementation of = operator';

create function pg_catalog.bitge(bit, bit) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bitge(bit, bit) is 'implementation of >= operator';

create function pg_catalog.bitgt(bit, bit) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bitgt(bit, bit) is 'implementation of > operator';

create function pg_catalog.bitle(bit, bit) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bitle(bit, bit) is 'implementation of <= operator';

create function pg_catalog.bitlt(bit, bit) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bitlt(bit, bit) is 'implementation of < operator';

create function pg_catalog.bitne(bit, bit) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bitne(bit, bit) is 'implementation of <> operator';

create function pg_catalog.bitnot(bit) returns bit
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bitnot(bit) is 'implementation of ~ operator';

create function pg_catalog.bitor(bit, bit) returns bit
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bitor(bit, bit) is 'implementation of | operator';

create function pg_catalog.bitshiftleft(bit, integer) returns bit
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bitshiftleft(bit, integer) is 'implementation of << operator';

create function pg_catalog.bitshiftright(bit, integer) returns bit
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bitshiftright(bit, integer) is 'implementation of >> operator';

create function pg_catalog.bittypmodin(cstring[]) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bittypmodin(cstring[]) is 'I/O typmod';

create function pg_catalog.bittypmodout(integer) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bittypmodout(integer) is 'I/O typmod';

create function pg_catalog.bitxor(bit, bit) returns bit
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bitxor(bit, bit) is 'implementation of # operator';

create function pg_catalog.bool(integer) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bool(integer) is 'convert int4 to boolean';

create function pg_catalog.bool(jsonb) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bool(jsonb) is 'convert jsonb to boolean';

create function pg_catalog.bool_accum(internal, boolean) returns internal
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bool_accum(internal, boolean) is 'aggregate transition function';

create function pg_catalog.bool_accum_inv(internal, boolean) returns internal
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bool_accum_inv(internal, boolean) is 'aggregate transition function';

create function pg_catalog.bool_alltrue(internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bool_alltrue(internal) is 'aggregate final function';

create function pg_catalog.bool_anytrue(internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bool_anytrue(internal) is 'aggregate final function';

create function pg_catalog.booland_statefunc(boolean, boolean) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.booland_statefunc(boolean, boolean) is 'aggregate transition function';

create function pg_catalog.booleq(boolean, boolean) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.booleq(boolean, boolean) is 'implementation of = operator';

create function pg_catalog.boolge(boolean, boolean) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.boolge(boolean, boolean) is 'implementation of >= operator';

create function pg_catalog.boolgt(boolean, boolean) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.boolgt(boolean, boolean) is 'implementation of > operator';

create function pg_catalog.boolin(cstring) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.boolin(cstring) is 'I/O';

create function pg_catalog.boolle(boolean, boolean) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.boolle(boolean, boolean) is 'implementation of <= operator';

create function pg_catalog.boollt(boolean, boolean) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.boollt(boolean, boolean) is 'implementation of < operator';

create function pg_catalog.boolne(boolean, boolean) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.boolne(boolean, boolean) is 'implementation of <> operator';

create function pg_catalog.boolor_statefunc(boolean, boolean) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.boolor_statefunc(boolean, boolean) is 'aggregate transition function';

create function pg_catalog.boolout(boolean) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.boolout(boolean) is 'I/O';

create function pg_catalog.boolrecv(internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.boolrecv(internal) is 'I/O';

create function pg_catalog.boolsend(boolean) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.boolsend(boolean) is 'I/O';

create function pg_catalog.bound_box(box, box) returns box
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bound_box(box, box) is 'bounding box of two boxes';

create function pg_catalog.box(circle) returns box
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box(circle) is 'convert circle to box';

create function pg_catalog.box(point) returns box
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box(point) is 'convert point to empty box';

create function pg_catalog.box(point, point) returns box
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box(point, point) is 'convert points to box';

create function pg_catalog.box(polygon) returns box
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box(polygon) is 'convert polygon to bounding box';

create function pg_catalog.box_above(box, box) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_above(box, box) is 'implementation of |>> operator';

create function pg_catalog.box_above_eq(box, box) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_above_eq(box, box) is 'implementation of >^ operator';

create function pg_catalog.box_add(box, point) returns box
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_add(box, point) is 'implementation of + operator';

create function pg_catalog.box_below(box, box) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_below(box, box) is 'implementation of <<| operator';

create function pg_catalog.box_below_eq(box, box) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_below_eq(box, box) is 'implementation of <^ operator';

create function pg_catalog.box_center(box) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_center(box) is 'implementation of @@ operator';

create function pg_catalog.box_contain(box, box) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_contain(box, box) is 'implementation of @> operator';

create function pg_catalog.box_contain_pt(box, point) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_contain_pt(box, point) is 'implementation of @> operator';

create function pg_catalog.box_contained(box, box) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_contained(box, box) is 'implementation of <@ operator';

create function pg_catalog.box_distance(box, box) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_distance(box, box) is 'implementation of <-> operator';

create function pg_catalog.box_div(box, point) returns box
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_div(box, point) is 'implementation of / operator';

create function pg_catalog.box_eq(box, box) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_eq(box, box) is 'implementation of = operator';

create function pg_catalog.box_ge(box, box) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_ge(box, box) is 'implementation of >= operator';

create function pg_catalog.box_gt(box, box) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_gt(box, box) is 'implementation of > operator';

create function pg_catalog.box_in(cstring) returns box
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_in(cstring) is 'I/O';

create function pg_catalog.box_intersect(box, box) returns box
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_intersect(box, box) is 'implementation of # operator';

create function pg_catalog.box_le(box, box) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_le(box, box) is 'implementation of <= operator';

create function pg_catalog.box_left(box, box) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_left(box, box) is 'implementation of << operator';

create function pg_catalog.box_lt(box, box) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_lt(box, box) is 'implementation of < operator';

create function pg_catalog.box_mul(box, point) returns box
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_mul(box, point) is 'implementation of * operator';

create function pg_catalog.box_out(box) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_out(box) is 'I/O';

create function pg_catalog.box_overabove(box, box) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_overabove(box, box) is 'implementation of |&> operator';

create function pg_catalog.box_overbelow(box, box) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_overbelow(box, box) is 'implementation of &<| operator';

create function pg_catalog.box_overlap(box, box) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_overlap(box, box) is 'implementation of && operator';

create function pg_catalog.box_overleft(box, box) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_overleft(box, box) is 'implementation of &< operator';

create function pg_catalog.box_overright(box, box) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_overright(box, box) is 'implementation of &> operator';

create function pg_catalog.box_recv(internal) returns box
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_recv(internal) is 'I/O';

create function pg_catalog.box_right(box, box) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_right(box, box) is 'implementation of >> operator';

create function pg_catalog.box_same(box, box) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_same(box, box) is 'implementation of ~= operator';

create function pg_catalog.box_send(box) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_send(box) is 'I/O';

create function pg_catalog.box_sub(box, point) returns box
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.box_sub(box, point) is 'implementation of - operator';

create function pg_catalog.bpchar("char") returns char
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpchar("char") is 'convert char to char(n)';

create function pg_catalog.bpchar(char, integer, boolean) returns char
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpchar(char, integer, boolean) is 'adjust char() to typmod length';

create function pg_catalog.bpchar(name) returns char
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpchar(name) is 'convert name to char(n)';

create function pg_catalog.bpchar_larger(char, char) returns char
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpchar_larger(char, char) is 'larger of two';

create function pg_catalog.bpchar_pattern_ge(char, char) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpchar_pattern_ge(char, char) is 'implementation of ~>=~ operator';

create function pg_catalog.bpchar_pattern_gt(char, char) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpchar_pattern_gt(char, char) is 'implementation of ~>~ operator';

create function pg_catalog.bpchar_pattern_le(char, char) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpchar_pattern_le(char, char) is 'implementation of ~<=~ operator';

create function pg_catalog.bpchar_pattern_lt(char, char) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpchar_pattern_lt(char, char) is 'implementation of ~<~ operator';

create function pg_catalog.bpchar_smaller(char, char) returns char
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpchar_smaller(char, char) is 'smaller of two';

create function pg_catalog.bpchar_sortsupport(internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpchar_sortsupport(internal) is 'sort support';

create function pg_catalog.bpcharcmp(char, char) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpcharcmp(char, char) is 'less-equal-greater';

create function pg_catalog.bpchareq(char, char) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpchareq(char, char) is 'implementation of = operator';

create function pg_catalog.bpcharge(char, char) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpcharge(char, char) is 'implementation of >= operator';

create function pg_catalog.bpchargt(char, char) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpchargt(char, char) is 'implementation of > operator';

create function pg_catalog.bpchariclike(char, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpchariclike(char, text) is 'implementation of ~~* operator';

create function pg_catalog.bpcharicnlike(char, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpcharicnlike(char, text) is 'implementation of !~~* operator';

create function pg_catalog.bpcharicregexeq(char, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpcharicregexeq(char, text) is 'implementation of ~* operator';

create function pg_catalog.bpcharicregexne(char, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpcharicregexne(char, text) is 'implementation of !~* operator';

create function pg_catalog.bpcharin(cstring, oid, integer) returns char
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpcharin(cstring, oid, integer) is 'I/O';

create function pg_catalog.bpcharle(char, char) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpcharle(char, char) is 'implementation of <= operator';

create function pg_catalog.bpcharlike(char, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpcharlike(char, text) is 'implementation of ~~ operator';

create function pg_catalog.bpcharlt(char, char) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpcharlt(char, char) is 'implementation of < operator';

create function pg_catalog.bpcharne(char, char) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpcharne(char, char) is 'implementation of <> operator';

create function pg_catalog.bpcharnlike(char, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpcharnlike(char, text) is 'implementation of !~~ operator';

create function pg_catalog.bpcharout(char) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpcharout(char) is 'I/O';

create function pg_catalog.bpcharrecv(internal, oid, integer) returns char
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpcharrecv(internal, oid, integer) is 'I/O';

create function pg_catalog.bpcharregexeq(char, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpcharregexeq(char, text) is 'implementation of ~ operator';

create function pg_catalog.bpcharregexne(char, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpcharregexne(char, text) is 'implementation of !~ operator';

create function pg_catalog.bpcharsend(char) returns bytea
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpcharsend(char) is 'I/O';

create function pg_catalog.bpchartypmodin(cstring[]) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpchartypmodin(cstring[]) is 'I/O typmod';

create function pg_catalog.bpchartypmodout(integer) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bpchartypmodout(integer) is 'I/O typmod';

create function pg_catalog.brin_desummarize_range(regclass, bigint) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.brin_desummarize_range(regclass, bigint) is 'brin: desummarize page range';

create function pg_catalog.brin_inclusion_add_value(internal, internal, internal, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.brin_inclusion_add_value(internal, internal, internal, internal) is 'BRIN inclusion support';

create function pg_catalog.brin_inclusion_consistent(internal, internal, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.brin_inclusion_consistent(internal, internal, internal) is 'BRIN inclusion support';

create function pg_catalog.brin_inclusion_opcinfo(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.brin_inclusion_opcinfo(internal) is 'BRIN inclusion support';

create function pg_catalog.brin_inclusion_union(internal, internal, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.brin_inclusion_union(internal, internal, internal) is 'BRIN inclusion support';

create function pg_catalog.brin_minmax_add_value(internal, internal, internal, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.brin_minmax_add_value(internal, internal, internal, internal) is 'BRIN minmax support';

create function pg_catalog.brin_minmax_consistent(internal, internal, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.brin_minmax_consistent(internal, internal, internal) is 'BRIN minmax support';

create function pg_catalog.brin_minmax_opcinfo(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.brin_minmax_opcinfo(internal) is 'BRIN minmax support';

create function pg_catalog.brin_minmax_union(internal, internal, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.brin_minmax_union(internal, internal, internal) is 'BRIN minmax support';

create function pg_catalog.brin_summarize_new_values(regclass) returns integer
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.brin_summarize_new_values(regclass) is 'brin: standalone scan new table pages';

create function pg_catalog.brin_summarize_range(regclass, bigint) returns integer
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.brin_summarize_range(regclass, bigint) is 'brin: standalone scan new table pages';

create function pg_catalog.brinhandler(internal) returns index_am_handler
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.brinhandler(internal) is 'brin index access method handler';

create function pg_catalog.broadcast(inet) returns inet
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.broadcast(inet) is 'broadcast address of network';

create function pg_catalog.btarraycmp(anyarray, anyarray) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btarraycmp(anyarray, anyarray) is 'less-equal-greater';

create function pg_catalog.btboolcmp(boolean, boolean) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btboolcmp(boolean, boolean) is 'less-equal-greater';

create function pg_catalog.btbpchar_pattern_cmp(char, char) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btbpchar_pattern_cmp(char, char) is 'less-equal-greater';

create function pg_catalog.btbpchar_pattern_sortsupport(internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btbpchar_pattern_sortsupport(internal) is 'sort support';

create function pg_catalog.btcharcmp("char", "char") returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btcharcmp("char", "char") is 'less-equal-greater';

create function pg_catalog.btfloat48cmp(real, double precision) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btfloat48cmp(real, double precision) is 'less-equal-greater';

create function pg_catalog.btfloat4cmp(real, real) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btfloat4cmp(real, real) is 'less-equal-greater';

create function pg_catalog.btfloat4sortsupport(internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btfloat4sortsupport(internal) is 'sort support';

create function pg_catalog.btfloat84cmp(double precision, real) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btfloat84cmp(double precision, real) is 'less-equal-greater';

create function pg_catalog.btfloat8cmp(double precision, double precision) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btfloat8cmp(double precision, double precision) is 'less-equal-greater';

create function pg_catalog.btfloat8sortsupport(internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btfloat8sortsupport(internal) is 'sort support';

create function pg_catalog.bthandler(internal) returns index_am_handler
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bthandler(internal) is 'btree index access method handler';

create function pg_catalog.btint24cmp(smallint, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btint24cmp(smallint, integer) is 'less-equal-greater';

create function pg_catalog.btint28cmp(smallint, bigint) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btint28cmp(smallint, bigint) is 'less-equal-greater';

create function pg_catalog.btint2cmp(smallint, smallint) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btint2cmp(smallint, smallint) is 'less-equal-greater';

create function pg_catalog.btint2sortsupport(internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btint2sortsupport(internal) is 'sort support';

create function pg_catalog.btint42cmp(integer, smallint) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btint42cmp(integer, smallint) is 'less-equal-greater';

create function pg_catalog.btint48cmp(integer, bigint) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btint48cmp(integer, bigint) is 'less-equal-greater';

create function pg_catalog.btint4cmp(integer, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btint4cmp(integer, integer) is 'less-equal-greater';

create function pg_catalog.btint4sortsupport(internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btint4sortsupport(internal) is 'sort support';

create function pg_catalog.btint82cmp(bigint, smallint) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btint82cmp(bigint, smallint) is 'less-equal-greater';

create function pg_catalog.btint84cmp(bigint, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btint84cmp(bigint, integer) is 'less-equal-greater';

create function pg_catalog.btint8cmp(bigint, bigint) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btint8cmp(bigint, bigint) is 'less-equal-greater';

create function pg_catalog.btint8sortsupport(internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btint8sortsupport(internal) is 'sort support';

create function pg_catalog.btnamecmp(name, name) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btnamecmp(name, name) is 'less-equal-greater';

create function pg_catalog.btnamesortsupport(internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btnamesortsupport(internal) is 'sort support';

create function pg_catalog.btnametextcmp(name, text) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btnametextcmp(name, text) is 'less-equal-greater';

create function pg_catalog.btoidcmp(oid, oid) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btoidcmp(oid, oid) is 'less-equal-greater';

create function pg_catalog.btoidsortsupport(internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btoidsortsupport(internal) is 'sort support';

create function pg_catalog.btoidvectorcmp(oidvector, oidvector) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btoidvectorcmp(oidvector, oidvector) is 'less-equal-greater';

create function pg_catalog.btrecordcmp(record, record) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btrecordcmp(record, record) is 'less-equal-greater';

create function pg_catalog.btrecordimagecmp(record, record) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btrecordimagecmp(record, record) is 'less-equal-greater based on byte images';

create function pg_catalog.btrim(bytea, bytea) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btrim(bytea, bytea) is 'trim both ends of string';

create function pg_catalog.btrim(text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btrim(text) is 'trim spaces from both ends of string';

create function pg_catalog.btrim(text, text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.btrim(text, text) is 'trim selected characters from both ends of string';

create function pg_catalog.bttext_pattern_cmp(text, text) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bttext_pattern_cmp(text, text) is 'less-equal-greater';

create function pg_catalog.bttext_pattern_sortsupport(internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bttext_pattern_sortsupport(internal) is 'sort support';

create function pg_catalog.bttextcmp(text, text) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bttextcmp(text, text) is 'less-equal-greater';

create function pg_catalog.bttextnamecmp(text, name) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bttextnamecmp(text, name) is 'less-equal-greater';

create function pg_catalog.bttextsortsupport(internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bttextsortsupport(internal) is 'sort support';

create function pg_catalog.bttidcmp(tid, tid) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bttidcmp(tid, tid) is 'less-equal-greater';

create function pg_catalog.bytea_sortsupport(internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bytea_sortsupport(internal) is 'sort support';

create function pg_catalog.bytea_string_agg_finalfn(internal) returns bytea
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bytea_string_agg_finalfn(internal) is 'aggregate final function';

create function pg_catalog.bytea_string_agg_transfn(internal, bytea, bytea) returns internal
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bytea_string_agg_transfn(internal, bytea, bytea) is 'aggregate transition function';

create function pg_catalog.byteacat(bytea, bytea) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.byteacat(bytea, bytea) is 'implementation of || operator';

create function pg_catalog.byteacmp(bytea, bytea) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.byteacmp(bytea, bytea) is 'less-equal-greater';

create function pg_catalog.byteaeq(bytea, bytea) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.byteaeq(bytea, bytea) is 'implementation of = operator';

create function pg_catalog.byteage(bytea, bytea) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.byteage(bytea, bytea) is 'implementation of >= operator';

create function pg_catalog.byteagt(bytea, bytea) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.byteagt(bytea, bytea) is 'implementation of > operator';

create function pg_catalog.byteain(cstring) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.byteain(cstring) is 'I/O';

create function pg_catalog.byteale(bytea, bytea) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.byteale(bytea, bytea) is 'implementation of <= operator';

create function pg_catalog.bytealike(bytea, bytea) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bytealike(bytea, bytea) is 'implementation of ~~ operator';

create function pg_catalog.bytealt(bytea, bytea) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bytealt(bytea, bytea) is 'implementation of < operator';

create function pg_catalog.byteane(bytea, bytea) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.byteane(bytea, bytea) is 'implementation of <> operator';

create function pg_catalog.byteanlike(bytea, bytea) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.byteanlike(bytea, bytea) is 'implementation of !~~ operator';

create function pg_catalog.byteaout(bytea) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.byteaout(bytea) is 'I/O';

create function pg_catalog.bytearecv(internal) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.bytearecv(internal) is 'I/O';

create function pg_catalog.byteasend(bytea) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.byteasend(bytea) is 'I/O';

create function pg_catalog.cardinality(anyarray) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cardinality(anyarray) is 'array cardinality';

create function pg_catalog.cash_cmp(money, money) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cash_cmp(money, money) is 'less-equal-greater';

create function pg_catalog.cash_div_cash(money, money) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cash_div_cash(money, money) is 'implementation of / operator';

create function pg_catalog.cash_div_flt4(money, real) returns money
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cash_div_flt4(money, real) is 'implementation of / operator';

create function pg_catalog.cash_div_flt8(money, double precision) returns money
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cash_div_flt8(money, double precision) is 'implementation of / operator';

create function pg_catalog.cash_div_int2(money, smallint) returns money
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cash_div_int2(money, smallint) is 'implementation of / operator';

create function pg_catalog.cash_div_int4(money, integer) returns money
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cash_div_int4(money, integer) is 'implementation of / operator';

create function pg_catalog.cash_div_int8(money, bigint) returns money
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cash_div_int8(money, bigint) is 'implementation of / operator';

create function pg_catalog.cash_eq(money, money) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cash_eq(money, money) is 'implementation of = operator';

create function pg_catalog.cash_ge(money, money) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cash_ge(money, money) is 'implementation of >= operator';

create function pg_catalog.cash_gt(money, money) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cash_gt(money, money) is 'implementation of > operator';

create function pg_catalog.cash_in(cstring) returns money
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cash_in(cstring) is 'I/O';

create function pg_catalog.cash_le(money, money) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cash_le(money, money) is 'implementation of <= operator';

create function pg_catalog.cash_lt(money, money) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cash_lt(money, money) is 'implementation of < operator';

create function pg_catalog.cash_mi(money, money) returns money
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cash_mi(money, money) is 'implementation of - operator';

create function pg_catalog.cash_mul_flt4(money, real) returns money
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cash_mul_flt4(money, real) is 'implementation of * operator';

create function pg_catalog.cash_mul_flt8(money, double precision) returns money
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cash_mul_flt8(money, double precision) is 'implementation of * operator';

create function pg_catalog.cash_mul_int2(money, smallint) returns money
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cash_mul_int2(money, smallint) is 'implementation of * operator';

create function pg_catalog.cash_mul_int4(money, integer) returns money
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cash_mul_int4(money, integer) is 'implementation of * operator';

create function pg_catalog.cash_mul_int8(money, bigint) returns money
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cash_mul_int8(money, bigint) is 'implementation of * operator';

create function pg_catalog.cash_ne(money, money) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cash_ne(money, money) is 'implementation of <> operator';

create function pg_catalog.cash_out(money) returns cstring
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cash_out(money) is 'I/O';

create function pg_catalog.cash_pl(money, money) returns money
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cash_pl(money, money) is 'implementation of + operator';

create function pg_catalog.cash_recv(internal) returns money
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cash_recv(internal) is 'I/O';

create function pg_catalog.cash_send(money) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cash_send(money) is 'I/O';

create function pg_catalog.cash_words(money) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cash_words(money) is 'output money amount as words';

create function pg_catalog.cashlarger(money, money) returns money
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cashlarger(money, money) is 'larger of two';

create function pg_catalog.cashsmaller(money, money) returns money
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cashsmaller(money, money) is 'smaller of two';

create function pg_catalog.cbrt(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cbrt(double precision) is 'cube root';

create function pg_catalog.ceil(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ceil(double precision) is 'nearest integer >= value';

create function pg_catalog.ceil(numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ceil(numeric) is 'nearest integer >= value';

create function pg_catalog.ceiling(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ceiling(double precision) is 'nearest integer >= value';

create function pg_catalog.ceiling(numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ceiling(numeric) is 'nearest integer >= value';

create function pg_catalog.center(box) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.center(box) is 'center of';

create function pg_catalog.center(circle) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.center(circle) is 'center of';

create function pg_catalog.char(integer) returns "char"
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.char(integer) is 'convert int4 to char';

create function pg_catalog.char(text) returns "char"
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.char(text) is 'convert text to char';

create function pg_catalog.char_length(char) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.char_length(char) is 'character length';

create function pg_catalog.char_length(text) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.char_length(text) is 'character length';

create function pg_catalog.character_length(char) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.character_length(char) is 'character length';

create function pg_catalog.character_length(text) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.character_length(text) is 'character length';

create function pg_catalog.chareq("char", "char") returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.chareq("char", "char") is 'implementation of = operator';

create function pg_catalog.charge("char", "char") returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.charge("char", "char") is 'implementation of >= operator';

create function pg_catalog.chargt("char", "char") returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.chargt("char", "char") is 'implementation of > operator';

create function pg_catalog.charin(cstring) returns "char"
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.charin(cstring) is 'I/O';

create function pg_catalog.charle("char", "char") returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.charle("char", "char") is 'implementation of <= operator';

create function pg_catalog.charlt("char", "char") returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.charlt("char", "char") is 'implementation of < operator';

create function pg_catalog.charne("char", "char") returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.charne("char", "char") is 'implementation of <> operator';

create function pg_catalog.charout("char") returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.charout("char") is 'I/O';

create function pg_catalog.charrecv(internal) returns "char"
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.charrecv(internal) is 'I/O';

create function pg_catalog.charsend("char") returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.charsend("char") is 'I/O';

create function pg_catalog.chr(integer) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.chr(integer) is 'convert int4 to char';

create function pg_catalog.cideq(cid, cid) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cideq(cid, cid) is 'implementation of = operator';

create function pg_catalog.cidin(cstring) returns cid
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cidin(cstring) is 'I/O';

create function pg_catalog.cidout(cid) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cidout(cid) is 'I/O';

create function pg_catalog.cidr(inet) returns cidr
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cidr(inet) is 'convert inet to cidr';

create function pg_catalog.cidr_in(cstring) returns cidr
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cidr_in(cstring) is 'I/O';

create function pg_catalog.cidr_out(cidr) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cidr_out(cidr) is 'I/O';

create function pg_catalog.cidr_recv(internal) returns cidr
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cidr_recv(internal) is 'I/O';

create function pg_catalog.cidr_send(cidr) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cidr_send(cidr) is 'I/O';

create function pg_catalog.cidrecv(internal) returns cid
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cidrecv(internal) is 'I/O';

create function pg_catalog.cidsend(cid) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cidsend(cid) is 'I/O';

create function pg_catalog.circle(box) returns circle
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle(box) is 'convert box to circle';

create function pg_catalog.circle(point, double precision) returns circle
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle(point, double precision) is 'convert point and radius to circle';

create function pg_catalog.circle(polygon) returns circle
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle(polygon) is 'convert polygon to circle';

create function pg_catalog.circle_above(circle, circle) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_above(circle, circle) is 'implementation of |>> operator';

create function pg_catalog.circle_add_pt(circle, point) returns circle
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_add_pt(circle, point) is 'implementation of + operator';

create function pg_catalog.circle_below(circle, circle) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_below(circle, circle) is 'implementation of <<| operator';

create function pg_catalog.circle_center(circle) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_center(circle) is 'implementation of @@ operator';

create function pg_catalog.circle_contain(circle, circle) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_contain(circle, circle) is 'implementation of @> operator';

create function pg_catalog.circle_contain_pt(circle, point) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_contain_pt(circle, point) is 'implementation of @> operator';

create function pg_catalog.circle_contained(circle, circle) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_contained(circle, circle) is 'implementation of <@ operator';

create function pg_catalog.circle_distance(circle, circle) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_distance(circle, circle) is 'implementation of <-> operator';

create function pg_catalog.circle_div_pt(circle, point) returns circle
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_div_pt(circle, point) is 'implementation of / operator';

create function pg_catalog.circle_eq(circle, circle) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_eq(circle, circle) is 'implementation of = operator';

create function pg_catalog.circle_ge(circle, circle) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_ge(circle, circle) is 'implementation of >= operator';

create function pg_catalog.circle_gt(circle, circle) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_gt(circle, circle) is 'implementation of > operator';

create function pg_catalog.circle_in(cstring) returns circle
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_in(cstring) is 'I/O';

create function pg_catalog.circle_le(circle, circle) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_le(circle, circle) is 'implementation of <= operator';

create function pg_catalog.circle_left(circle, circle) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_left(circle, circle) is 'implementation of << operator';

create function pg_catalog.circle_lt(circle, circle) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_lt(circle, circle) is 'implementation of < operator';

create function pg_catalog.circle_mul_pt(circle, point) returns circle
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_mul_pt(circle, point) is 'implementation of * operator';

create function pg_catalog.circle_ne(circle, circle) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_ne(circle, circle) is 'implementation of <> operator';

create function pg_catalog.circle_out(circle) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_out(circle) is 'I/O';

create function pg_catalog.circle_overabove(circle, circle) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_overabove(circle, circle) is 'implementation of |&> operator';

create function pg_catalog.circle_overbelow(circle, circle) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_overbelow(circle, circle) is 'implementation of &<| operator';

create function pg_catalog.circle_overlap(circle, circle) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_overlap(circle, circle) is 'implementation of && operator';

create function pg_catalog.circle_overleft(circle, circle) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_overleft(circle, circle) is 'implementation of &< operator';

create function pg_catalog.circle_overright(circle, circle) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_overright(circle, circle) is 'implementation of &> operator';

create function pg_catalog.circle_recv(internal) returns circle
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_recv(internal) is 'I/O';

create function pg_catalog.circle_right(circle, circle) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_right(circle, circle) is 'implementation of >> operator';

create function pg_catalog.circle_same(circle, circle) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_same(circle, circle) is 'implementation of ~= operator';

create function pg_catalog.circle_send(circle) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_send(circle) is 'I/O';

create function pg_catalog.circle_sub_pt(circle, point) returns circle
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.circle_sub_pt(circle, point) is 'implementation of - operator';

create function pg_catalog.clock_timestamp() returns timestamp with time zone
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.clock_timestamp() is 'current clock time';

create function pg_catalog.close_lb(line, box) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.close_lb(line, box) is 'implementation of ## operator';

create function pg_catalog.close_ls(line, lseg) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.close_ls(line, lseg) is 'implementation of ## operator';

create function pg_catalog.close_lseg(lseg, lseg) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.close_lseg(lseg, lseg) is 'implementation of ## operator';

create function pg_catalog.close_pb(point, box) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.close_pb(point, box) is 'implementation of ## operator';

create function pg_catalog.close_pl(point, line) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.close_pl(point, line) is 'implementation of ## operator';

create function pg_catalog.close_ps(point, lseg) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.close_ps(point, lseg) is 'implementation of ## operator';

create function pg_catalog.close_sb(lseg, box) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.close_sb(lseg, box) is 'implementation of ## operator';

create function pg_catalog.close_sl(lseg, line) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.close_sl(lseg, line) is 'implementation of ## operator';

create function pg_catalog.col_description(oid, integer) returns text
    stable
    strict
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.col_description(oid, integer) is 'get description for table column';

create function pg_catalog.concat("any") returns text
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.concat("any") is 'concatenate values';

create function pg_catalog.concat_ws(text, "any") returns text
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.concat_ws(text, "any") is 'concatenate values with separators';

create function pg_catalog.contjoinsel(internal, oid, internal, smallint, internal) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.contjoinsel(internal, oid, internal, smallint, internal) is 'join selectivity for containment comparison operators';

create function pg_catalog.contsel(internal, oid, internal, integer) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.contsel(internal, oid, internal, integer) is 'restriction selectivity for containment comparison operators';

create function pg_catalog.convert(bytea, name, name) returns bytea
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.convert(bytea, name, name) is 'convert string with specified encoding names';

create function pg_catalog.convert_from(bytea, name) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.convert_from(bytea, name) is 'convert string with specified source encoding name';

create function pg_catalog.convert_to(text, name) returns bytea
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.convert_to(text, name) is 'convert string with specified destination encoding name';

create function pg_catalog.cos(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cos(double precision) is 'cosine';

create function pg_catalog.cosd(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cosd(double precision) is 'cosine, degrees';

create function pg_catalog.cosh(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cosh(double precision) is 'hyperbolic cosine';

create function pg_catalog.cot(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cot(double precision) is 'cotangent';

create function pg_catalog.cotd(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cotd(double precision) is 'cotangent, degrees';

create function pg_catalog.cstring_in(cstring) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cstring_in(cstring) is 'I/O';

create function pg_catalog.cstring_out(cstring) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cstring_out(cstring) is 'I/O';

create function pg_catalog.cstring_recv(internal) returns cstring
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cstring_recv(internal) is 'I/O';

create function pg_catalog.cstring_send(cstring) returns bytea
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cstring_send(cstring) is 'I/O';

create function pg_catalog.cume_dist() returns double precision
    immutable
    window
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cume_dist() is 'fractional row number within partition';

create function pg_catalog.cume_dist_final(internal, "any") returns double precision
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cume_dist_final(internal, "any") is 'aggregate final function';

create function pg_catalog.current_database() returns name
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.current_database() is 'name of the current database';

create function pg_catalog.current_query() returns text
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.current_query() is 'get the currently executing query';

create function pg_catalog."current_schema"() returns name
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."current_schema"() is 'current schema name';

create function pg_catalog.current_schemas(boolean) returns name[]
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.current_schemas(boolean) is 'current schema search list';

create function pg_catalog.current_setting(text) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.current_setting(text) is 'SHOW X as a function';

create function pg_catalog.current_setting(text, boolean) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.current_setting(text, boolean) is 'SHOW X as a function, optionally no error for missing variable';

create function pg_catalog."current_user"() returns name
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."current_user"() is 'current user name';

create function pg_catalog.currtid(oid, tid) returns tid
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.currtid(oid, tid) is 'latest tid of a tuple';

create function pg_catalog.currtid2(text, tid) returns tid
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.currtid2(text, tid) is 'latest tid of a tuple';

create function pg_catalog.currval(regclass) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.currval(regclass) is 'sequence current value';

create function pg_catalog.cursor_to_xml(cursor refcursor, count integer, nulls boolean, tableforest boolean, targetns text) returns xml
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cursor_to_xml(refcursor, integer, boolean, boolean, text) is 'map rows from cursor to XML';

create function pg_catalog.cursor_to_xmlschema(cursor refcursor, nulls boolean, tableforest boolean, targetns text) returns xml
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.cursor_to_xmlschema(refcursor, boolean, boolean, text) is 'map cursor structure to XML Schema';

create function pg_catalog.database_to_xml(nulls boolean, tableforest boolean, targetns text) returns xml
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.database_to_xml(boolean, boolean, text) is 'map database contents to XML';

create function pg_catalog.database_to_xml_and_xmlschema(nulls boolean, tableforest boolean, targetns text) returns xml
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.database_to_xml_and_xmlschema(boolean, boolean, text) is 'map database contents and structure to XML and XML Schema';

create function pg_catalog.database_to_xmlschema(nulls boolean, tableforest boolean, targetns text) returns xml
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.database_to_xmlschema(boolean, boolean, text) is 'map database structure to XML Schema';

create function pg_catalog.date(timestamp with time zone) returns date
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date(timestamp with time zone) is 'convert timestamp with time zone to date';

create function pg_catalog.date(timestamp) returns date
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date(timestamp) is 'convert timestamp to date';

create function pg_catalog.date_cmp(date, date) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_cmp(date, date) is 'less-equal-greater';

create function pg_catalog.date_cmp_timestamp(date, timestamp) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_cmp_timestamp(date, timestamp) is 'less-equal-greater';

create function pg_catalog.date_cmp_timestamptz(date, timestamp with time zone) returns integer
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_cmp_timestamptz(date, timestamp with time zone) is 'less-equal-greater';

create function pg_catalog.date_eq(date, date) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_eq(date, date) is 'implementation of = operator';

create function pg_catalog.date_eq_timestamp(date, timestamp) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_eq_timestamp(date, timestamp) is 'implementation of = operator';

create function pg_catalog.date_eq_timestamptz(date, timestamp with time zone) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_eq_timestamptz(date, timestamp with time zone) is 'implementation of = operator';

create function pg_catalog.date_ge(date, date) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_ge(date, date) is 'implementation of >= operator';

create function pg_catalog.date_ge_timestamp(date, timestamp) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_ge_timestamp(date, timestamp) is 'implementation of >= operator';

create function pg_catalog.date_ge_timestamptz(date, timestamp with time zone) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_ge_timestamptz(date, timestamp with time zone) is 'implementation of >= operator';

create function pg_catalog.date_gt(date, date) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_gt(date, date) is 'implementation of > operator';

create function pg_catalog.date_gt_timestamp(date, timestamp) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_gt_timestamp(date, timestamp) is 'implementation of > operator';

create function pg_catalog.date_gt_timestamptz(date, timestamp with time zone) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_gt_timestamptz(date, timestamp with time zone) is 'implementation of > operator';

create function pg_catalog.date_in(cstring) returns date
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_in(cstring) is 'I/O';

create function pg_catalog.date_larger(date, date) returns date
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_larger(date, date) is 'larger of two';

create function pg_catalog.date_le(date, date) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_le(date, date) is 'implementation of <= operator';

create function pg_catalog.date_le_timestamp(date, timestamp) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_le_timestamp(date, timestamp) is 'implementation of <= operator';

create function pg_catalog.date_le_timestamptz(date, timestamp with time zone) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_le_timestamptz(date, timestamp with time zone) is 'implementation of <= operator';

create function pg_catalog.date_lt(date, date) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_lt(date, date) is 'implementation of < operator';

create function pg_catalog.date_lt_timestamp(date, timestamp) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_lt_timestamp(date, timestamp) is 'implementation of < operator';

create function pg_catalog.date_lt_timestamptz(date, timestamp with time zone) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_lt_timestamptz(date, timestamp with time zone) is 'implementation of < operator';

create function pg_catalog.date_mi(date, date) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_mi(date, date) is 'implementation of - operator';

create function pg_catalog.date_mi_interval(date, interval) returns timestamp
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_mi_interval(date, interval) is 'implementation of - operator';

create function pg_catalog.date_mii(date, integer) returns date
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_mii(date, integer) is 'implementation of - operator';

create function pg_catalog.date_ne(date, date) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_ne(date, date) is 'implementation of <> operator';

create function pg_catalog.date_ne_timestamp(date, timestamp) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_ne_timestamp(date, timestamp) is 'implementation of <> operator';

create function pg_catalog.date_ne_timestamptz(date, timestamp with time zone) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_ne_timestamptz(date, timestamp with time zone) is 'implementation of <> operator';

create function pg_catalog.date_out(date) returns cstring
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_out(date) is 'I/O';

create function pg_catalog.date_part(text, date) returns double precision
    immutable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_part(text, date) is 'extract field from date';

create function pg_catalog.date_part(text, interval) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_part(text, interval) is 'extract field from interval';

create function pg_catalog.date_part(text, time with time zone) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_part(text, time with time zone) is 'extract field from time with time zone';

create function pg_catalog.date_part(text, time) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_part(text, time) is 'extract field from time';

create function pg_catalog.date_part(text, timestamp with time zone) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_part(text, timestamp with time zone) is 'extract field from timestamp with time zone';

create function pg_catalog.date_part(text, timestamp) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_part(text, timestamp) is 'extract field from timestamp';

create function pg_catalog.date_pl_interval(date, interval) returns timestamp
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_pl_interval(date, interval) is 'implementation of + operator';

create function pg_catalog.date_pli(date, integer) returns date
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_pli(date, integer) is 'implementation of + operator';

create function pg_catalog.date_recv(internal) returns date
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_recv(internal) is 'I/O';

create function pg_catalog.date_send(date) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_send(date) is 'I/O';

create function pg_catalog.date_smaller(date, date) returns date
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_smaller(date, date) is 'smaller of two';

create function pg_catalog.date_sortsupport(internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_sortsupport(internal) is 'sort support';

create function pg_catalog.date_trunc(text, interval) returns interval
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_trunc(text, interval) is 'truncate interval to specified units';

create function pg_catalog.date_trunc(text, timestamp with time zone) returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_trunc(text, timestamp with time zone) is 'truncate timestamp with time zone to specified units';

create function pg_catalog.date_trunc(text, timestamp with time zone, text) returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_trunc(text, timestamp with time zone, text) is 'truncate timestamp with time zone to specified units in specified time zone';

create function pg_catalog.date_trunc(text, timestamp) returns timestamp
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.date_trunc(text, timestamp) is 'truncate timestamp to specified units';

create function pg_catalog.daterange(date, date) returns daterange
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.daterange(date, date) is 'daterange constructor';

create function pg_catalog.daterange(date, date, text) returns daterange
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.daterange(date, date, text) is 'daterange constructor';

create function pg_catalog.daterange_canonical(daterange) returns daterange
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.daterange_canonical(daterange) is 'convert a date range to canonical form';

create function pg_catalog.daterange_subdiff(date, date) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.daterange_subdiff(date, date) is 'float8 difference of two date values';

create function pg_catalog.datetime_pl(date, time) returns timestamp
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.datetime_pl(date, time) is 'implementation of + operator';

create function pg_catalog.datetimetz_pl(date, time with time zone) returns timestamp with time zone
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.datetimetz_pl(date, time with time zone) is 'implementation of + operator';

create function pg_catalog.dcbrt(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dcbrt(double precision) is 'implementation of ||/ operator';

create function pg_catalog.decode(text, text) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.decode(text, text) is 'convert ascii-encoded text string into bytea value';

create function pg_catalog.degrees(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.degrees(double precision) is 'radians to degrees';

create function pg_catalog.dense_rank() returns bigint
    immutable
    window
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dense_rank() is 'integer rank without gaps';

create function pg_catalog.dense_rank_final(internal, "any") returns bigint
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dense_rank_final(internal, "any") is 'aggregate final function';

create function pg_catalog.dexp(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dexp(double precision) is 'natural exponential (e^x)';

create function pg_catalog.diagonal(box) returns lseg
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.diagonal(box) is 'box diagonal';

create function pg_catalog.diameter(circle) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.diameter(circle) is 'diameter of circle';

create function pg_catalog.dispell_init(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dispell_init(internal) is '(internal)';

create function pg_catalog.dispell_lexize(internal, internal, internal, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dispell_lexize(internal, internal, internal, internal) is '(internal)';

create function pg_catalog.dist_cpoint(circle, point) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dist_cpoint(circle, point) is 'implementation of <-> operator';

create function pg_catalog.dist_cpoly(circle, polygon) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dist_cpoly(circle, polygon) is 'implementation of <-> operator';

create function pg_catalog.dist_lb(line, box) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dist_lb(line, box) is 'implementation of <-> operator';

create function pg_catalog.dist_pb(point, box) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dist_pb(point, box) is 'implementation of <-> operator';

create function pg_catalog.dist_pc(point, circle) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dist_pc(point, circle) is 'implementation of <-> operator';

create function pg_catalog.dist_pl(point, line) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dist_pl(point, line) is 'implementation of <-> operator';

create function pg_catalog.dist_polyp(polygon, point) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dist_polyp(polygon, point) is 'implementation of <-> operator';

create function pg_catalog.dist_ppath(point, path) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dist_ppath(point, path) is 'implementation of <-> operator';

create function pg_catalog.dist_ppoly(point, polygon) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dist_ppoly(point, polygon) is 'implementation of <-> operator';

create function pg_catalog.dist_ps(point, lseg) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dist_ps(point, lseg) is 'implementation of <-> operator';

create function pg_catalog.dist_sb(lseg, box) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dist_sb(lseg, box) is 'implementation of <-> operator';

create function pg_catalog.dist_sl(lseg, line) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dist_sl(lseg, line) is 'implementation of <-> operator';

create function pg_catalog.div(numeric, numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.div(numeric, numeric) is 'trunc(x/y)';

create function pg_catalog.dlog1(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dlog1(double precision) is 'natural logarithm';

create function pg_catalog.dlog10(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dlog10(double precision) is 'base 10 logarithm';

create function pg_catalog.domain_in(cstring, oid, integer) returns "any"
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.domain_in(cstring, oid, integer) is 'I/O';

create function pg_catalog.domain_recv(internal, oid, integer) returns "any"
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.domain_recv(internal, oid, integer) is 'I/O';

create function pg_catalog.dpow(double precision, double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dpow(double precision, double precision) is 'implementation of ^ operator';

create function pg_catalog.dround(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dround(double precision) is 'round to nearest integer';

create function pg_catalog.dsimple_init(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dsimple_init(internal) is '(internal)';

create function pg_catalog.dsimple_lexize(internal, internal, internal, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dsimple_lexize(internal, internal, internal, internal) is '(internal)';

create function pg_catalog.dsnowball_init(internal) returns internal
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

create function pg_catalog.dsnowball_lexize(internal, internal, internal, internal) returns internal
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

create function pg_catalog.dsqrt(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dsqrt(double precision) is 'implementation of |/ operator';

create function pg_catalog.dsynonym_init(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dsynonym_init(internal) is '(internal)';

create function pg_catalog.dsynonym_lexize(internal, internal, internal, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dsynonym_lexize(internal, internal, internal, internal) is '(internal)';

create function pg_catalog.dtrunc(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.dtrunc(double precision) is 'truncate to integer';

create function pg_catalog.elem_contained_by_range(anyelement, anyrange) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.elem_contained_by_range(anyelement, anyrange) is 'implementation of <@ operator';

create function pg_catalog.encode(bytea, text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.encode(bytea, text) is 'convert bytea value into some ascii-only text string';

create function pg_catalog.enum_cmp(anyenum, anyenum) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.enum_cmp(anyenum, anyenum) is 'less-equal-greater';

create function pg_catalog.enum_eq(anyenum, anyenum) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.enum_eq(anyenum, anyenum) is 'implementation of = operator';

create function pg_catalog.enum_first(anyenum) returns anyenum
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.enum_first(anyenum) is 'first value of the input enum type';

create function pg_catalog.enum_ge(anyenum, anyenum) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.enum_ge(anyenum, anyenum) is 'implementation of >= operator';

create function pg_catalog.enum_gt(anyenum, anyenum) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.enum_gt(anyenum, anyenum) is 'implementation of > operator';

create function pg_catalog.enum_in(cstring, oid) returns anyenum
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.enum_in(cstring, oid) is 'I/O';

create function pg_catalog.enum_larger(anyenum, anyenum) returns anyenum
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.enum_larger(anyenum, anyenum) is 'larger of two';

create function pg_catalog.enum_last(anyenum) returns anyenum
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.enum_last(anyenum) is 'last value of the input enum type';

create function pg_catalog.enum_le(anyenum, anyenum) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.enum_le(anyenum, anyenum) is 'implementation of <= operator';

create function pg_catalog.enum_lt(anyenum, anyenum) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.enum_lt(anyenum, anyenum) is 'implementation of < operator';

create function pg_catalog.enum_ne(anyenum, anyenum) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.enum_ne(anyenum, anyenum) is 'implementation of <> operator';

create function pg_catalog.enum_out(anyenum) returns cstring
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.enum_out(anyenum) is 'I/O';

create function pg_catalog.enum_range(anyenum) returns anyarray
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.enum_range(anyenum) is 'range of the given enum type, as an ordered array';

create function pg_catalog.enum_range(anyenum, anyenum) returns anyarray
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.enum_range(anyenum, anyenum) is 'range between the two given enum values, as an ordered array';

create function pg_catalog.enum_recv(internal, oid) returns anyenum
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.enum_recv(internal, oid) is 'I/O';

create function pg_catalog.enum_send(anyenum) returns bytea
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.enum_send(anyenum) is 'I/O';

create function pg_catalog.enum_smaller(anyenum, anyenum) returns anyenum
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.enum_smaller(anyenum, anyenum) is 'smaller of two';

create function pg_catalog.eqjoinsel(internal, oid, internal, smallint, internal) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.eqjoinsel(internal, oid, internal, smallint, internal) is 'join selectivity of = and related operators';

create function pg_catalog.eqsel(internal, oid, internal, integer) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.eqsel(internal, oid, internal, integer) is 'restriction selectivity of = and related operators';

create function pg_catalog.euc_cn_to_mic(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.euc_cn_to_mic(integer, integer, cstring, internal, integer) is 'internal conversion function for EUC_CN to MULE_INTERNAL';

create function pg_catalog.euc_cn_to_utf8(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.euc_cn_to_utf8(integer, integer, cstring, internal, integer) is 'internal conversion function for EUC_CN to UTF8';

create function pg_catalog.euc_jis_2004_to_shift_jis_2004(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.euc_jis_2004_to_shift_jis_2004(integer, integer, cstring, internal, integer) is 'internal conversion function for EUC_JIS_2004 to SHIFT_JIS_2004';

create function pg_catalog.euc_jis_2004_to_utf8(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.euc_jis_2004_to_utf8(integer, integer, cstring, internal, integer) is 'internal conversion function for EUC_JIS_2004 to UTF8';

create function pg_catalog.euc_jp_to_mic(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.euc_jp_to_mic(integer, integer, cstring, internal, integer) is 'internal conversion function for EUC_JP to MULE_INTERNAL';

create function pg_catalog.euc_jp_to_sjis(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.euc_jp_to_sjis(integer, integer, cstring, internal, integer) is 'internal conversion function for EUC_JP to SJIS';

create function pg_catalog.euc_jp_to_utf8(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.euc_jp_to_utf8(integer, integer, cstring, internal, integer) is 'internal conversion function for EUC_JP to UTF8';

create function pg_catalog.euc_kr_to_mic(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.euc_kr_to_mic(integer, integer, cstring, internal, integer) is 'internal conversion function for EUC_KR to MULE_INTERNAL';

create function pg_catalog.euc_kr_to_utf8(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.euc_kr_to_utf8(integer, integer, cstring, internal, integer) is 'internal conversion function for EUC_KR to UTF8';

create function pg_catalog.euc_tw_to_big5(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.euc_tw_to_big5(integer, integer, cstring, internal, integer) is 'internal conversion function for EUC_TW to BIG5';

create function pg_catalog.euc_tw_to_mic(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.euc_tw_to_mic(integer, integer, cstring, internal, integer) is 'internal conversion function for EUC_TW to MULE_INTERNAL';

create function pg_catalog.euc_tw_to_utf8(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.euc_tw_to_utf8(integer, integer, cstring, internal, integer) is 'internal conversion function for EUC_TW to UTF8';

create function pg_catalog.event_trigger_in(cstring) returns event_trigger
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.event_trigger_in(cstring) is 'I/O';

create function pg_catalog.event_trigger_out(event_trigger) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.event_trigger_out(event_trigger) is 'I/O';

create function pg_catalog.exp(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.exp(double precision) is 'natural exponential (e^x)';

create function pg_catalog.exp(numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.exp(numeric) is 'natural exponential (e^x)';

create function pg_catalog.factorial(bigint) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.factorial(bigint) is 'factorial';

create function pg_catalog.family(inet) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.family(inet) is 'address family (4 for IPv4, 6 for IPv6)';

create function pg_catalog.fdw_handler_in(cstring) returns fdw_handler
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.fdw_handler_in(cstring) is 'I/O';

create function pg_catalog.fdw_handler_out(fdw_handler) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.fdw_handler_out(fdw_handler) is 'I/O';

create function pg_catalog.first_value(anyelement) returns anyelement
    immutable
    window
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.first_value(anyelement) is 'fetch the first row value';

create function pg_catalog.float4(bigint) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4(bigint) is 'convert int8 to float4';

create function pg_catalog.float4(double precision) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4(double precision) is 'convert float8 to float4';

create function pg_catalog.float4(integer) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4(integer) is 'convert int4 to float4';

create function pg_catalog.float4(jsonb) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4(jsonb) is 'convert jsonb to float4';

create function pg_catalog.float4(numeric) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4(numeric) is 'convert numeric to float4';

create function pg_catalog.float4(smallint) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4(smallint) is 'convert int2 to float4';

create function pg_catalog.float48div(real, double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float48div(real, double precision) is 'implementation of / operator';

create function pg_catalog.float48eq(real, double precision) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float48eq(real, double precision) is 'implementation of = operator';

create function pg_catalog.float48ge(real, double precision) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float48ge(real, double precision) is 'implementation of >= operator';

create function pg_catalog.float48gt(real, double precision) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float48gt(real, double precision) is 'implementation of > operator';

create function pg_catalog.float48le(real, double precision) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float48le(real, double precision) is 'implementation of <= operator';

create function pg_catalog.float48lt(real, double precision) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float48lt(real, double precision) is 'implementation of < operator';

create function pg_catalog.float48mi(real, double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float48mi(real, double precision) is 'implementation of - operator';

create function pg_catalog.float48mul(real, double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float48mul(real, double precision) is 'implementation of * operator';

create function pg_catalog.float48ne(real, double precision) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float48ne(real, double precision) is 'implementation of <> operator';

create function pg_catalog.float48pl(real, double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float48pl(real, double precision) is 'implementation of + operator';

create function pg_catalog.float4_accum(double precision[], real) returns double precision[]
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4_accum(double precision[], real) is 'aggregate transition function';

create function pg_catalog.float4abs(real) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4abs(real) is 'implementation of @ operator';

create function pg_catalog.float4div(real, real) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4div(real, real) is 'implementation of / operator';

create function pg_catalog.float4eq(real, real) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4eq(real, real) is 'implementation of = operator';

create function pg_catalog.float4ge(real, real) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4ge(real, real) is 'implementation of >= operator';

create function pg_catalog.float4gt(real, real) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4gt(real, real) is 'implementation of > operator';

create function pg_catalog.float4in(cstring) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4in(cstring) is 'I/O';

create function pg_catalog.float4larger(real, real) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4larger(real, real) is 'larger of two';

create function pg_catalog.float4le(real, real) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4le(real, real) is 'implementation of <= operator';

create function pg_catalog.float4lt(real, real) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4lt(real, real) is 'implementation of < operator';

create function pg_catalog.float4mi(real, real) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4mi(real, real) is 'implementation of - operator';

create function pg_catalog.float4mul(real, real) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4mul(real, real) is 'implementation of * operator';

create function pg_catalog.float4ne(real, real) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4ne(real, real) is 'implementation of <> operator';

create function pg_catalog.float4out(real) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4out(real) is 'I/O';

create function pg_catalog.float4pl(real, real) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4pl(real, real) is 'implementation of + operator';

create function pg_catalog.float4recv(internal) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4recv(internal) is 'I/O';

create function pg_catalog.float4send(real) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4send(real) is 'I/O';

create function pg_catalog.float4smaller(real, real) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4smaller(real, real) is 'smaller of two';

create function pg_catalog.float4um(real) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4um(real) is 'implementation of - operator';

create function pg_catalog.float4up(real) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float4up(real) is 'implementation of + operator';

create function pg_catalog.float8(bigint) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8(bigint) is 'convert int8 to float8';

create function pg_catalog.float8(integer) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8(integer) is 'convert int4 to float8';

create function pg_catalog.float8(jsonb) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8(jsonb) is 'convert jsonb to float8';

create function pg_catalog.float8(numeric) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8(numeric) is 'convert numeric to float8';

create function pg_catalog.float8(real) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8(real) is 'convert float4 to float8';

create function pg_catalog.float8(smallint) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8(smallint) is 'convert int2 to float8';

create function pg_catalog.float84div(double precision, real) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float84div(double precision, real) is 'implementation of / operator';

create function pg_catalog.float84eq(double precision, real) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float84eq(double precision, real) is 'implementation of = operator';

create function pg_catalog.float84ge(double precision, real) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float84ge(double precision, real) is 'implementation of >= operator';

create function pg_catalog.float84gt(double precision, real) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float84gt(double precision, real) is 'implementation of > operator';

create function pg_catalog.float84le(double precision, real) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float84le(double precision, real) is 'implementation of <= operator';

create function pg_catalog.float84lt(double precision, real) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float84lt(double precision, real) is 'implementation of < operator';

create function pg_catalog.float84mi(double precision, real) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float84mi(double precision, real) is 'implementation of - operator';

create function pg_catalog.float84mul(double precision, real) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float84mul(double precision, real) is 'implementation of * operator';

create function pg_catalog.float84ne(double precision, real) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float84ne(double precision, real) is 'implementation of <> operator';

create function pg_catalog.float84pl(double precision, real) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float84pl(double precision, real) is 'implementation of + operator';

create function pg_catalog.float8_accum(double precision[], double precision) returns double precision[]
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8_accum(double precision[], double precision) is 'aggregate transition function';

create function pg_catalog.float8_avg(double precision[]) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8_avg(double precision[]) is 'aggregate final function';

create function pg_catalog.float8_combine(double precision[], double precision[]) returns double precision[]
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8_combine(double precision[], double precision[]) is 'aggregate combine function';

create function pg_catalog.float8_corr(double precision[]) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8_corr(double precision[]) is 'aggregate final function';

create function pg_catalog.float8_covar_pop(double precision[]) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8_covar_pop(double precision[]) is 'aggregate final function';

create function pg_catalog.float8_covar_samp(double precision[]) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8_covar_samp(double precision[]) is 'aggregate final function';

create function pg_catalog.float8_regr_accum(double precision[], double precision, double precision) returns double precision[]
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8_regr_accum(double precision[], double precision, double precision) is 'aggregate transition function';

create function pg_catalog.float8_regr_avgx(double precision[]) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8_regr_avgx(double precision[]) is 'aggregate final function';

create function pg_catalog.float8_regr_avgy(double precision[]) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8_regr_avgy(double precision[]) is 'aggregate final function';

create function pg_catalog.float8_regr_combine(double precision[], double precision[]) returns double precision[]
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8_regr_combine(double precision[], double precision[]) is 'aggregate combine function';

create function pg_catalog.float8_regr_intercept(double precision[]) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8_regr_intercept(double precision[]) is 'aggregate final function';

create function pg_catalog.float8_regr_r2(double precision[]) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8_regr_r2(double precision[]) is 'aggregate final function';

create function pg_catalog.float8_regr_slope(double precision[]) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8_regr_slope(double precision[]) is 'aggregate final function';

create function pg_catalog.float8_regr_sxx(double precision[]) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8_regr_sxx(double precision[]) is 'aggregate final function';

create function pg_catalog.float8_regr_sxy(double precision[]) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8_regr_sxy(double precision[]) is 'aggregate final function';

create function pg_catalog.float8_regr_syy(double precision[]) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8_regr_syy(double precision[]) is 'aggregate final function';

create function pg_catalog.float8_stddev_pop(double precision[]) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8_stddev_pop(double precision[]) is 'aggregate final function';

create function pg_catalog.float8_stddev_samp(double precision[]) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8_stddev_samp(double precision[]) is 'aggregate final function';

create function pg_catalog.float8_var_pop(double precision[]) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8_var_pop(double precision[]) is 'aggregate final function';

create function pg_catalog.float8_var_samp(double precision[]) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8_var_samp(double precision[]) is 'aggregate final function';

create function pg_catalog.float8abs(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8abs(double precision) is 'implementation of @ operator';

create function pg_catalog.float8div(double precision, double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8div(double precision, double precision) is 'implementation of / operator';

create function pg_catalog.float8eq(double precision, double precision) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8eq(double precision, double precision) is 'implementation of = operator';

create function pg_catalog.float8ge(double precision, double precision) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8ge(double precision, double precision) is 'implementation of >= operator';

create function pg_catalog.float8gt(double precision, double precision) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8gt(double precision, double precision) is 'implementation of > operator';

create function pg_catalog.float8in(cstring) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8in(cstring) is 'I/O';

create function pg_catalog.float8larger(double precision, double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8larger(double precision, double precision) is 'larger of two';

create function pg_catalog.float8le(double precision, double precision) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8le(double precision, double precision) is 'implementation of <= operator';

create function pg_catalog.float8lt(double precision, double precision) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8lt(double precision, double precision) is 'implementation of < operator';

create function pg_catalog.float8mi(double precision, double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8mi(double precision, double precision) is 'implementation of - operator';

create function pg_catalog.float8mul(double precision, double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8mul(double precision, double precision) is 'implementation of * operator';

create function pg_catalog.float8ne(double precision, double precision) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8ne(double precision, double precision) is 'implementation of <> operator';

create function pg_catalog.float8out(double precision) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8out(double precision) is 'I/O';

create function pg_catalog.float8pl(double precision, double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8pl(double precision, double precision) is 'implementation of + operator';

create function pg_catalog.float8recv(internal) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8recv(internal) is 'I/O';

create function pg_catalog.float8send(double precision) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8send(double precision) is 'I/O';

create function pg_catalog.float8smaller(double precision, double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8smaller(double precision, double precision) is 'smaller of two';

create function pg_catalog.float8um(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8um(double precision) is 'implementation of - operator';

create function pg_catalog.float8up(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.float8up(double precision) is 'implementation of + operator';

create function pg_catalog.floor(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.floor(double precision) is 'nearest integer <= value';

create function pg_catalog.floor(numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.floor(numeric) is 'nearest integer <= value';

create function pg_catalog.flt4_mul_cash(real, money) returns money
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.flt4_mul_cash(real, money) is 'implementation of * operator';

create function pg_catalog.flt8_mul_cash(double precision, money) returns money
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.flt8_mul_cash(double precision, money) is 'implementation of * operator';

create function pg_catalog.fmgr_c_validator(oid) returns void
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.fmgr_c_validator(oid) is '(internal)';

create function pg_catalog.fmgr_internal_validator(oid) returns void
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.fmgr_internal_validator(oid) is '(internal)';

create function pg_catalog.fmgr_sql_validator(oid) returns void
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.fmgr_sql_validator(oid) is '(internal)';

create function pg_catalog.format(text) returns text
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.format(text) is 'format text message';

create function pg_catalog.format(text, "any") returns text
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.format(text, "any") is 'format text message';

create function pg_catalog.format_type(oid, integer) returns text
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.format_type(oid, integer) is 'format a type oid and atttypmod to canonical SQL';

create function pg_catalog.gb18030_to_utf8(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gb18030_to_utf8(integer, integer, cstring, internal, integer) is 'internal conversion function for GB18030 to UTF8';

create function pg_catalog.gbk_to_utf8(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gbk_to_utf8(integer, integer, cstring, internal, integer) is 'internal conversion function for GBK to UTF8';

create function pg_catalog.generate_series(bigint, bigint) returns setof setof bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.generate_series(bigint, bigint) is 'non-persistent series generator';

create function pg_catalog.generate_series(bigint, bigint, bigint) returns setof setof bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.generate_series(bigint, bigint, bigint) is 'non-persistent series generator';

create function pg_catalog.generate_series(integer, integer) returns setof setof integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.generate_series(integer, integer) is 'non-persistent series generator';

create function pg_catalog.generate_series(integer, integer, integer) returns setof setof integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.generate_series(integer, integer, integer) is 'non-persistent series generator';

create function pg_catalog.generate_series(numeric, numeric) returns setof setof numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.generate_series(numeric, numeric) is 'non-persistent series generator';

create function pg_catalog.generate_series(numeric, numeric, numeric) returns setof setof numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.generate_series(numeric, numeric, numeric) is 'non-persistent series generator';

create function pg_catalog.generate_series(timestamp with time zone, timestamp with time zone, interval) returns setof setof timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.generate_series(timestamp with time zone, timestamp with time zone, interval) is 'non-persistent series generator';

create function pg_catalog.generate_series(timestamp, timestamp, interval) returns setof setof timestamp
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.generate_series(timestamp, timestamp, interval) is 'non-persistent series generator';

create function pg_catalog.generate_series_int4_support(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.generate_series_int4_support(internal) is 'planner support for generate_series';

create function pg_catalog.generate_series_int8_support(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.generate_series_int8_support(internal) is 'planner support for generate_series';

create function pg_catalog.generate_subscripts(anyarray, integer) returns setof setof integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.generate_subscripts(anyarray, integer) is 'array subscripts generator';

create function pg_catalog.generate_subscripts(anyarray, integer, boolean) returns setof setof integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.generate_subscripts(anyarray, integer, boolean) is 'array subscripts generator';

create function pg_catalog.get_bit(bit, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.get_bit(bit, integer) is 'get bit';

create function pg_catalog.get_bit(bytea, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.get_bit(bytea, integer) is 'get bit';

create function pg_catalog.get_byte(bytea, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.get_byte(bytea, integer) is 'get byte';

create function pg_catalog.get_current_ts_config() returns regconfig
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.get_current_ts_config() is 'get current tsearch configuration';

create function pg_catalog.getdatabaseencoding() returns name
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.getdatabaseencoding() is 'encoding name of current database';

create function pg_catalog.getpgusername() returns name
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.getpgusername() is 'deprecated, use current_user instead';

create function pg_catalog.gin_clean_pending_list(regclass) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gin_clean_pending_list(regclass) is 'clean up GIN pending list';

create function pg_catalog.gin_cmp_prefix(text, text, smallint, internal) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gin_cmp_prefix(text, text, smallint, internal) is 'GIN tsvector support';

create function pg_catalog.gin_cmp_tslexeme(text, text) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gin_cmp_tslexeme(text, text) is 'GIN tsvector support';

create function pg_catalog.gin_compare_jsonb(text, text) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gin_compare_jsonb(text, text) is 'GIN support';

create function pg_catalog.gin_consistent_jsonb(internal, smallint, jsonb, integer, internal, internal, internal, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gin_consistent_jsonb(internal, smallint, jsonb, integer, internal, internal, internal, internal) is 'GIN support';

create function pg_catalog.gin_consistent_jsonb_path(internal, smallint, jsonb, integer, internal, internal, internal, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gin_consistent_jsonb_path(internal, smallint, jsonb, integer, internal, internal, internal, internal) is 'GIN support';

create function pg_catalog.gin_extract_jsonb(jsonb, internal, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gin_extract_jsonb(jsonb, internal, internal) is 'GIN support';

create function pg_catalog.gin_extract_jsonb_path(jsonb, internal, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gin_extract_jsonb_path(jsonb, internal, internal) is 'GIN support';

create function pg_catalog.gin_extract_jsonb_query(jsonb, internal, smallint, internal, internal, internal, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gin_extract_jsonb_query(jsonb, internal, smallint, internal, internal, internal, internal) is 'GIN support';

create function pg_catalog.gin_extract_jsonb_query_path(jsonb, internal, smallint, internal, internal, internal, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gin_extract_jsonb_query_path(jsonb, internal, smallint, internal, internal, internal, internal) is 'GIN support';

create function pg_catalog.gin_extract_tsquery(tsquery, internal, smallint, internal, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gin_extract_tsquery(tsquery, internal, smallint, internal, internal) is 'GIN tsvector support (obsolete)';

create function pg_catalog.gin_extract_tsquery(tsquery, internal, smallint, internal, internal, internal, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gin_extract_tsquery(tsquery, internal, smallint, internal, internal, internal, internal) is 'GIN tsvector support (obsolete)';

create function pg_catalog.gin_extract_tsquery(tsvector, internal, smallint, internal, internal, internal, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gin_extract_tsquery(tsvector, internal, smallint, internal, internal, internal, internal) is 'GIN tsvector support';

create function pg_catalog.gin_extract_tsvector(tsvector, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gin_extract_tsvector(tsvector, internal) is 'GIN tsvector support (obsolete)';

create function pg_catalog.gin_extract_tsvector(tsvector, internal, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gin_extract_tsvector(tsvector, internal, internal) is 'GIN tsvector support';

create function pg_catalog.gin_triconsistent_jsonb(internal, smallint, jsonb, integer, internal, internal, internal) returns "char"
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gin_triconsistent_jsonb(internal, smallint, jsonb, integer, internal, internal, internal) is 'GIN support';

create function pg_catalog.gin_triconsistent_jsonb_path(internal, smallint, jsonb, integer, internal, internal, internal) returns "char"
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gin_triconsistent_jsonb_path(internal, smallint, jsonb, integer, internal, internal, internal) is 'GIN support';

create function pg_catalog.gin_tsquery_consistent(internal, smallint, tsquery, integer, internal, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gin_tsquery_consistent(internal, smallint, tsquery, integer, internal, internal) is 'GIN tsvector support (obsolete)';

create function pg_catalog.gin_tsquery_consistent(internal, smallint, tsquery, integer, internal, internal, internal, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gin_tsquery_consistent(internal, smallint, tsquery, integer, internal, internal, internal, internal) is 'GIN tsvector support (obsolete)';

create function pg_catalog.gin_tsquery_consistent(internal, smallint, tsvector, integer, internal, internal, internal, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gin_tsquery_consistent(internal, smallint, tsvector, integer, internal, internal, internal, internal) is 'GIN tsvector support';

create function pg_catalog.gin_tsquery_triconsistent(internal, smallint, tsvector, integer, internal, internal, internal) returns "char"
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gin_tsquery_triconsistent(internal, smallint, tsvector, integer, internal, internal, internal) is 'GIN tsvector support';

create function pg_catalog.ginarrayconsistent(internal, smallint, anyarray, integer, internal, internal, internal, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ginarrayconsistent(internal, smallint, anyarray, integer, internal, internal, internal, internal) is 'GIN array support';

create function pg_catalog.ginarrayextract(anyarray, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ginarrayextract(anyarray, internal) is 'GIN array support (obsolete)';

create function pg_catalog.ginarrayextract(anyarray, internal, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ginarrayextract(anyarray, internal, internal) is 'GIN array support';

create function pg_catalog.ginarraytriconsistent(internal, smallint, anyarray, integer, internal, internal, internal) returns "char"
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ginarraytriconsistent(internal, smallint, anyarray, integer, internal, internal, internal) is 'GIN array support';

create function pg_catalog.ginhandler(internal) returns index_am_handler
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ginhandler(internal) is 'gin index access method handler';

create function pg_catalog.ginqueryarrayextract(anyarray, internal, smallint, internal, internal, internal, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ginqueryarrayextract(anyarray, internal, smallint, internal, internal, internal, internal) is 'GIN array support';

create function pg_catalog.gist_box_consistent(internal, box, smallint, oid, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gist_box_consistent(internal, box, smallint, oid, internal) is 'GiST support';

create function pg_catalog.gist_box_penalty(internal, internal, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gist_box_penalty(internal, internal, internal) is 'GiST support';

create function pg_catalog.gist_box_picksplit(internal, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gist_box_picksplit(internal, internal) is 'GiST support';

create function pg_catalog.gist_box_same(box, box, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gist_box_same(box, box, internal) is 'GiST support';

create function pg_catalog.gist_box_union(internal, internal) returns box
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gist_box_union(internal, internal) is 'GiST support';

create function pg_catalog.gist_circle_compress(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gist_circle_compress(internal) is 'GiST support';

create function pg_catalog.gist_circle_consistent(internal, circle, smallint, oid, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gist_circle_consistent(internal, circle, smallint, oid, internal) is 'GiST support';

create function pg_catalog.gist_circle_distance(internal, circle, smallint, oid, internal) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gist_circle_distance(internal, circle, smallint, oid, internal) is 'GiST support';

create function pg_catalog.gist_point_compress(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gist_point_compress(internal) is 'GiST support';

create function pg_catalog.gist_point_consistent(internal, point, smallint, oid, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gist_point_consistent(internal, point, smallint, oid, internal) is 'GiST support';

create function pg_catalog.gist_point_distance(internal, point, smallint, oid, internal) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gist_point_distance(internal, point, smallint, oid, internal) is 'GiST support';

create function pg_catalog.gist_point_fetch(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gist_point_fetch(internal) is 'GiST support';

create function pg_catalog.gist_poly_compress(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gist_poly_compress(internal) is 'GiST support';

create function pg_catalog.gist_poly_consistent(internal, polygon, smallint, oid, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gist_poly_consistent(internal, polygon, smallint, oid, internal) is 'GiST support';

create function pg_catalog.gist_poly_distance(internal, polygon, smallint, oid, internal) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gist_poly_distance(internal, polygon, smallint, oid, internal) is 'GiST support';

create function pg_catalog.gisthandler(internal) returns index_am_handler
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gisthandler(internal) is 'gist index access method handler';

create function pg_catalog.gtsquery_compress(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gtsquery_compress(internal) is 'GiST tsquery support';

create function pg_catalog.gtsquery_consistent(internal, internal, integer, oid, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gtsquery_consistent(internal, internal, integer, oid, internal) is 'GiST tsquery support (obsolete)';

create function pg_catalog.gtsquery_consistent(internal, tsquery, smallint, oid, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gtsquery_consistent(internal, tsquery, smallint, oid, internal) is 'GiST tsquery support';

create function pg_catalog.gtsquery_penalty(internal, internal, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gtsquery_penalty(internal, internal, internal) is 'GiST tsquery support';

create function pg_catalog.gtsquery_picksplit(internal, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gtsquery_picksplit(internal, internal) is 'GiST tsquery support';

create function pg_catalog.gtsquery_same(bigint, bigint, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gtsquery_same(bigint, bigint, internal) is 'GiST tsquery support';

create function pg_catalog.gtsquery_union(internal, internal) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gtsquery_union(internal, internal) is 'GiST tsquery support';

create function pg_catalog.gtsvector_compress(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gtsvector_compress(internal) is 'GiST tsvector support';

create function pg_catalog.gtsvector_consistent(internal, gtsvector, integer, oid, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gtsvector_consistent(internal, gtsvector, integer, oid, internal) is 'GiST tsvector support (obsolete)';

create function pg_catalog.gtsvector_consistent(internal, tsvector, smallint, oid, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gtsvector_consistent(internal, tsvector, smallint, oid, internal) is 'GiST tsvector support';

create function pg_catalog.gtsvector_decompress(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gtsvector_decompress(internal) is 'GiST tsvector support';

create function pg_catalog.gtsvector_penalty(internal, internal, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gtsvector_penalty(internal, internal, internal) is 'GiST tsvector support';

create function pg_catalog.gtsvector_picksplit(internal, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gtsvector_picksplit(internal, internal) is 'GiST tsvector support';

create function pg_catalog.gtsvector_same(gtsvector, gtsvector, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gtsvector_same(gtsvector, gtsvector, internal) is 'GiST tsvector support';

create function pg_catalog.gtsvector_union(internal, internal) returns gtsvector
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gtsvector_union(internal, internal) is 'GiST tsvector support';

create function pg_catalog.gtsvectorin(cstring) returns gtsvector
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gtsvectorin(cstring) is 'I/O';

create function pg_catalog.gtsvectorout(gtsvector) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.gtsvectorout(gtsvector) is 'I/O';

create function pg_catalog.has_any_column_privilege(name, oid, text) returns boolean
    stable
    strict
    cost 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_any_column_privilege(name, oid, text) is 'user privilege on any column by username, rel oid';

create function pg_catalog.has_any_column_privilege(name, text, text) returns boolean
    stable
    strict
    cost 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_any_column_privilege(name, text, text) is 'user privilege on any column by username, rel name';

create function pg_catalog.has_any_column_privilege(oid, oid, text) returns boolean
    stable
    strict
    cost 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_any_column_privilege(oid, oid, text) is 'user privilege on any column by user oid, rel oid';

create function pg_catalog.has_any_column_privilege(oid, text) returns boolean
    stable
    strict
    cost 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_any_column_privilege(oid, text) is 'current user privilege on any column by rel oid';

create function pg_catalog.has_any_column_privilege(oid, text, text) returns boolean
    stable
    strict
    cost 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_any_column_privilege(oid, text, text) is 'user privilege on any column by user oid, rel name';

create function pg_catalog.has_any_column_privilege(text, text) returns boolean
    stable
    strict
    cost 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_any_column_privilege(text, text) is 'current user privilege on any column by rel name';

create function pg_catalog.has_column_privilege(name, oid, smallint, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_column_privilege(name, oid, smallint, text) is 'user privilege on column by username, rel oid, col attnum';

create function pg_catalog.has_column_privilege(name, oid, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_column_privilege(name, oid, text, text) is 'user privilege on column by username, rel oid, col name';

create function pg_catalog.has_column_privilege(name, text, smallint, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_column_privilege(name, text, smallint, text) is 'user privilege on column by username, rel name, col attnum';

create function pg_catalog.has_column_privilege(name, text, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_column_privilege(name, text, text, text) is 'user privilege on column by username, rel name, col name';

create function pg_catalog.has_column_privilege(oid, oid, smallint, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_column_privilege(oid, oid, smallint, text) is 'user privilege on column by user oid, rel oid, col attnum';

create function pg_catalog.has_column_privilege(oid, oid, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_column_privilege(oid, oid, text, text) is 'user privilege on column by user oid, rel oid, col name';

create function pg_catalog.has_column_privilege(oid, smallint, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_column_privilege(oid, smallint, text) is 'current user privilege on column by rel oid, col attnum';

create function pg_catalog.has_column_privilege(oid, text, smallint, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_column_privilege(oid, text, smallint, text) is 'user privilege on column by user oid, rel name, col attnum';

create function pg_catalog.has_column_privilege(oid, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_column_privilege(oid, text, text) is 'current user privilege on column by rel oid, col name';

create function pg_catalog.has_column_privilege(oid, text, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_column_privilege(oid, text, text, text) is 'user privilege on column by user oid, rel name, col name';

create function pg_catalog.has_column_privilege(text, smallint, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_column_privilege(text, smallint, text) is 'current user privilege on column by rel name, col attnum';

create function pg_catalog.has_column_privilege(text, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_column_privilege(text, text, text) is 'current user privilege on column by rel name, col name';

create function pg_catalog.has_database_privilege(name, oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_database_privilege(name, oid, text) is 'user privilege on database by username, database oid';

create function pg_catalog.has_database_privilege(name, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_database_privilege(name, text, text) is 'user privilege on database by username, database name';

create function pg_catalog.has_database_privilege(oid, oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_database_privilege(oid, oid, text) is 'user privilege on database by user oid, database oid';

create function pg_catalog.has_database_privilege(oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_database_privilege(oid, text) is 'current user privilege on database by database oid';

create function pg_catalog.has_database_privilege(oid, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_database_privilege(oid, text, text) is 'user privilege on database by user oid, database name';

create function pg_catalog.has_database_privilege(text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_database_privilege(text, text) is 'current user privilege on database by database name';

create function pg_catalog.has_foreign_data_wrapper_privilege(name, oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_foreign_data_wrapper_privilege(name, oid, text) is 'user privilege on foreign data wrapper by username, foreign data wrapper oid';

create function pg_catalog.has_foreign_data_wrapper_privilege(name, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_foreign_data_wrapper_privilege(name, text, text) is 'user privilege on foreign data wrapper by username, foreign data wrapper name';

create function pg_catalog.has_foreign_data_wrapper_privilege(oid, oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_foreign_data_wrapper_privilege(oid, oid, text) is 'user privilege on foreign data wrapper by user oid, foreign data wrapper oid';

create function pg_catalog.has_foreign_data_wrapper_privilege(oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_foreign_data_wrapper_privilege(oid, text) is 'current user privilege on foreign data wrapper by foreign data wrapper oid';

create function pg_catalog.has_foreign_data_wrapper_privilege(oid, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_foreign_data_wrapper_privilege(oid, text, text) is 'user privilege on foreign data wrapper by user oid, foreign data wrapper name';

create function pg_catalog.has_foreign_data_wrapper_privilege(text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_foreign_data_wrapper_privilege(text, text) is 'current user privilege on foreign data wrapper by foreign data wrapper name';

create function pg_catalog.has_function_privilege(name, oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_function_privilege(name, oid, text) is 'user privilege on function by username, function oid';

create function pg_catalog.has_function_privilege(name, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_function_privilege(name, text, text) is 'user privilege on function by username, function name';

create function pg_catalog.has_function_privilege(oid, oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_function_privilege(oid, oid, text) is 'user privilege on function by user oid, function oid';

create function pg_catalog.has_function_privilege(oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_function_privilege(oid, text) is 'current user privilege on function by function oid';

create function pg_catalog.has_function_privilege(oid, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_function_privilege(oid, text, text) is 'user privilege on function by user oid, function name';

create function pg_catalog.has_function_privilege(text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_function_privilege(text, text) is 'current user privilege on function by function name';

create function pg_catalog.has_language_privilege(name, oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_language_privilege(name, oid, text) is 'user privilege on language by username, language oid';

create function pg_catalog.has_language_privilege(name, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_language_privilege(name, text, text) is 'user privilege on language by username, language name';

create function pg_catalog.has_language_privilege(oid, oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_language_privilege(oid, oid, text) is 'user privilege on language by user oid, language oid';

create function pg_catalog.has_language_privilege(oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_language_privilege(oid, text) is 'current user privilege on language by language oid';

create function pg_catalog.has_language_privilege(oid, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_language_privilege(oid, text, text) is 'user privilege on language by user oid, language name';

create function pg_catalog.has_language_privilege(text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_language_privilege(text, text) is 'current user privilege on language by language name';

create function pg_catalog.has_schema_privilege(name, oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_schema_privilege(name, oid, text) is 'user privilege on schema by username, schema oid';

create function pg_catalog.has_schema_privilege(name, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_schema_privilege(name, text, text) is 'user privilege on schema by username, schema name';

create function pg_catalog.has_schema_privilege(oid, oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_schema_privilege(oid, oid, text) is 'user privilege on schema by user oid, schema oid';

create function pg_catalog.has_schema_privilege(oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_schema_privilege(oid, text) is 'current user privilege on schema by schema oid';

create function pg_catalog.has_schema_privilege(oid, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_schema_privilege(oid, text, text) is 'user privilege on schema by user oid, schema name';

create function pg_catalog.has_schema_privilege(text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_schema_privilege(text, text) is 'current user privilege on schema by schema name';

create function pg_catalog.has_sequence_privilege(name, oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_sequence_privilege(name, oid, text) is 'user privilege on sequence by username, seq oid';

create function pg_catalog.has_sequence_privilege(name, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_sequence_privilege(name, text, text) is 'user privilege on sequence by username, seq name';

create function pg_catalog.has_sequence_privilege(oid, oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_sequence_privilege(oid, oid, text) is 'user privilege on sequence by user oid, seq oid';

create function pg_catalog.has_sequence_privilege(oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_sequence_privilege(oid, text) is 'current user privilege on sequence by seq oid';

create function pg_catalog.has_sequence_privilege(oid, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_sequence_privilege(oid, text, text) is 'user privilege on sequence by user oid, seq name';

create function pg_catalog.has_sequence_privilege(text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_sequence_privilege(text, text) is 'current user privilege on sequence by seq name';

create function pg_catalog.has_server_privilege(name, oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_server_privilege(name, oid, text) is 'user privilege on server by username, server oid';

create function pg_catalog.has_server_privilege(name, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_server_privilege(name, text, text) is 'user privilege on server by username, server name';

create function pg_catalog.has_server_privilege(oid, oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_server_privilege(oid, oid, text) is 'user privilege on server by user oid, server oid';

create function pg_catalog.has_server_privilege(oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_server_privilege(oid, text) is 'current user privilege on server by server oid';

create function pg_catalog.has_server_privilege(oid, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_server_privilege(oid, text, text) is 'user privilege on server by user oid, server name';

create function pg_catalog.has_server_privilege(text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_server_privilege(text, text) is 'current user privilege on server by server name';

create function pg_catalog.has_table_privilege(name, oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_table_privilege(name, oid, text) is 'user privilege on relation by username, rel oid';

create function pg_catalog.has_table_privilege(name, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_table_privilege(name, text, text) is 'user privilege on relation by username, rel name';

create function pg_catalog.has_table_privilege(oid, oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_table_privilege(oid, oid, text) is 'user privilege on relation by user oid, rel oid';

create function pg_catalog.has_table_privilege(oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_table_privilege(oid, text) is 'current user privilege on relation by rel oid';

create function pg_catalog.has_table_privilege(oid, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_table_privilege(oid, text, text) is 'user privilege on relation by user oid, rel name';

create function pg_catalog.has_table_privilege(text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_table_privilege(text, text) is 'current user privilege on relation by rel name';

create function pg_catalog.has_tablespace_privilege(name, oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_tablespace_privilege(name, oid, text) is 'user privilege on tablespace by username, tablespace oid';

create function pg_catalog.has_tablespace_privilege(name, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_tablespace_privilege(name, text, text) is 'user privilege on tablespace by username, tablespace name';

create function pg_catalog.has_tablespace_privilege(oid, oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_tablespace_privilege(oid, oid, text) is 'user privilege on tablespace by user oid, tablespace oid';

create function pg_catalog.has_tablespace_privilege(oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_tablespace_privilege(oid, text) is 'current user privilege on tablespace by tablespace oid';

create function pg_catalog.has_tablespace_privilege(oid, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_tablespace_privilege(oid, text, text) is 'user privilege on tablespace by user oid, tablespace name';

create function pg_catalog.has_tablespace_privilege(text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_tablespace_privilege(text, text) is 'current user privilege on tablespace by tablespace name';

create function pg_catalog.has_type_privilege(name, oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_type_privilege(name, oid, text) is 'user privilege on type by username, type oid';

create function pg_catalog.has_type_privilege(name, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_type_privilege(name, text, text) is 'user privilege on type by username, type name';

create function pg_catalog.has_type_privilege(oid, oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_type_privilege(oid, oid, text) is 'user privilege on type by user oid, type oid';

create function pg_catalog.has_type_privilege(oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_type_privilege(oid, text) is 'current user privilege on type by type oid';

create function pg_catalog.has_type_privilege(oid, text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_type_privilege(oid, text, text) is 'user privilege on type by user oid, type name';

create function pg_catalog.has_type_privilege(text, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.has_type_privilege(text, text) is 'current user privilege on type by type name';

create function pg_catalog.hash_aclitem(aclitem) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hash_aclitem(aclitem) is 'hash';

create function pg_catalog.hash_aclitem_extended(aclitem, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hash_aclitem_extended(aclitem, bigint) is 'hash';

create function pg_catalog.hash_array(anyarray) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hash_array(anyarray) is 'hash';

create function pg_catalog.hash_array_extended(anyarray, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hash_array_extended(anyarray, bigint) is 'hash';

create function pg_catalog.hash_numeric(numeric) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hash_numeric(numeric) is 'hash';

create function pg_catalog.hash_numeric_extended(numeric, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hash_numeric_extended(numeric, bigint) is 'hash';

create function pg_catalog.hash_range(anyrange) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hash_range(anyrange) is 'hash a range';

create function pg_catalog.hash_range_extended(anyrange, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hash_range_extended(anyrange, bigint) is 'hash a range';

create function pg_catalog.hashbpchar(char) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashbpchar(char) is 'hash';

create function pg_catalog.hashbpcharextended(char, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashbpcharextended(char, bigint) is 'hash';

create function pg_catalog.hashchar("char") returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashchar("char") is 'hash';

create function pg_catalog.hashcharextended("char", bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashcharextended("char", bigint) is 'hash';

create function pg_catalog.hashenum(anyenum) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashenum(anyenum) is 'hash';

create function pg_catalog.hashenumextended(anyenum, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashenumextended(anyenum, bigint) is 'hash';

create function pg_catalog.hashfloat4(real) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashfloat4(real) is 'hash';

create function pg_catalog.hashfloat4extended(real, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashfloat4extended(real, bigint) is 'hash';

create function pg_catalog.hashfloat8(double precision) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashfloat8(double precision) is 'hash';

create function pg_catalog.hashfloat8extended(double precision, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashfloat8extended(double precision, bigint) is 'hash';

create function pg_catalog.hashhandler(internal) returns index_am_handler
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashhandler(internal) is 'hash index access method handler';

create function pg_catalog.hashinet(inet) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashinet(inet) is 'hash';

create function pg_catalog.hashinetextended(inet, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashinetextended(inet, bigint) is 'hash';

create function pg_catalog.hashint2(smallint) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashint2(smallint) is 'hash';

create function pg_catalog.hashint2extended(smallint, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashint2extended(smallint, bigint) is 'hash';

create function pg_catalog.hashint4(integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashint4(integer) is 'hash';

create function pg_catalog.hashint4extended(integer, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashint4extended(integer, bigint) is 'hash';

create function pg_catalog.hashint8(bigint) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashint8(bigint) is 'hash';

create function pg_catalog.hashint8extended(bigint, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashint8extended(bigint, bigint) is 'hash';

create function pg_catalog.hashmacaddr(macaddr) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashmacaddr(macaddr) is 'hash';

create function pg_catalog.hashmacaddr8(macaddr8) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashmacaddr8(macaddr8) is 'hash';

create function pg_catalog.hashmacaddr8extended(macaddr8, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashmacaddr8extended(macaddr8, bigint) is 'hash';

create function pg_catalog.hashmacaddrextended(macaddr, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashmacaddrextended(macaddr, bigint) is 'hash';

create function pg_catalog.hashname(name) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashname(name) is 'hash';

create function pg_catalog.hashnameextended(name, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashnameextended(name, bigint) is 'hash';

create function pg_catalog.hashoid(oid) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashoid(oid) is 'hash';

create function pg_catalog.hashoidextended(oid, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashoidextended(oid, bigint) is 'hash';

create function pg_catalog.hashoidvector(oidvector) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashoidvector(oidvector) is 'hash';

create function pg_catalog.hashoidvectorextended(oidvector, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashoidvectorextended(oidvector, bigint) is 'hash';

create function pg_catalog.hashtext(text) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashtext(text) is 'hash';

create function pg_catalog.hashtextextended(text, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashtextextended(text, bigint) is 'hash';

create function pg_catalog.hashtid(tid) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashtid(tid) is 'hash';

create function pg_catalog.hashtidextended(tid, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashtidextended(tid, bigint) is 'hash';

create function pg_catalog.hashvarlena(internal) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashvarlena(internal) is 'hash';

create function pg_catalog.hashvarlenaextended(internal, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hashvarlenaextended(internal, bigint) is 'hash';

create function pg_catalog.heap_tableam_handler(internal) returns table_am_handler
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.heap_tableam_handler(internal) is 'row-oriented heap table access method handler';

create function pg_catalog.height(box) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.height(box) is 'box height';

create function pg_catalog.host(inet) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.host(inet) is 'show address octets only';

create function pg_catalog.hostmask(inet) returns inet
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.hostmask(inet) is 'hostmask of address';

create function pg_catalog.iclikejoinsel(internal, oid, internal, smallint, internal) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.iclikejoinsel(internal, oid, internal, smallint, internal) is 'join selectivity of ILIKE';

create function pg_catalog.iclikesel(internal, oid, internal, integer) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.iclikesel(internal, oid, internal, integer) is 'restriction selectivity of ILIKE';

create function pg_catalog.icnlikejoinsel(internal, oid, internal, smallint, internal) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.icnlikejoinsel(internal, oid, internal, smallint, internal) is 'join selectivity of NOT ILIKE';

create function pg_catalog.icnlikesel(internal, oid, internal, integer) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.icnlikesel(internal, oid, internal, integer) is 'restriction selectivity of NOT ILIKE';

create function pg_catalog.icregexeqjoinsel(internal, oid, internal, smallint, internal) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.icregexeqjoinsel(internal, oid, internal, smallint, internal) is 'join selectivity of case-insensitive regex match';

create function pg_catalog.icregexeqsel(internal, oid, internal, integer) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.icregexeqsel(internal, oid, internal, integer) is 'restriction selectivity of case-insensitive regex match';

create function pg_catalog.icregexnejoinsel(internal, oid, internal, smallint, internal) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.icregexnejoinsel(internal, oid, internal, smallint, internal) is 'join selectivity of case-insensitive regex non-match';

create function pg_catalog.icregexnesel(internal, oid, internal, integer) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.icregexnesel(internal, oid, internal, integer) is 'restriction selectivity of case-insensitive regex non-match';

create function pg_catalog.in_range(bigint, bigint, bigint, boolean, boolean) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.in_range(bigint, bigint, bigint, boolean, boolean) is 'window RANGE support';

create function pg_catalog.in_range(date, date, interval, boolean, boolean) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.in_range(date, date, interval, boolean, boolean) is 'window RANGE support';

create function pg_catalog.in_range(double precision, double precision, double precision, boolean, boolean) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.in_range(double precision, double precision, double precision, boolean, boolean) is 'window RANGE support';

create function pg_catalog.in_range(integer, integer, bigint, boolean, boolean) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.in_range(integer, integer, bigint, boolean, boolean) is 'window RANGE support';

create function pg_catalog.in_range(integer, integer, integer, boolean, boolean) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.in_range(integer, integer, integer, boolean, boolean) is 'window RANGE support';

create function pg_catalog.in_range(integer, integer, smallint, boolean, boolean) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.in_range(integer, integer, smallint, boolean, boolean) is 'window RANGE support';

create function pg_catalog.in_range(interval, interval, interval, boolean, boolean) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.in_range(interval, interval, interval, boolean, boolean) is 'window RANGE support';

create function pg_catalog.in_range(numeric, numeric, numeric, boolean, boolean) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.in_range(numeric, numeric, numeric, boolean, boolean) is 'window RANGE support';

create function pg_catalog.in_range(real, real, double precision, boolean, boolean) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.in_range(real, real, double precision, boolean, boolean) is 'window RANGE support';

create function pg_catalog.in_range(smallint, smallint, bigint, boolean, boolean) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.in_range(smallint, smallint, bigint, boolean, boolean) is 'window RANGE support';

create function pg_catalog.in_range(smallint, smallint, integer, boolean, boolean) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.in_range(smallint, smallint, integer, boolean, boolean) is 'window RANGE support';

create function pg_catalog.in_range(smallint, smallint, smallint, boolean, boolean) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.in_range(smallint, smallint, smallint, boolean, boolean) is 'window RANGE support';

create function pg_catalog.in_range(time with time zone, time with time zone, interval, boolean, boolean) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.in_range(time with time zone, time with time zone, interval, boolean, boolean) is 'window RANGE support';

create function pg_catalog.in_range(time, time, interval, boolean, boolean) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.in_range(time, time, interval, boolean, boolean) is 'window RANGE support';

create function pg_catalog.in_range(timestamp with time zone, timestamp with time zone, interval, boolean, boolean) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.in_range(timestamp with time zone, timestamp with time zone, interval, boolean, boolean) is 'window RANGE support';

create function pg_catalog.in_range(timestamp, timestamp, interval, boolean, boolean) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.in_range(timestamp, timestamp, interval, boolean, boolean) is 'window RANGE support';

create function pg_catalog.index_am_handler_in(cstring) returns index_am_handler
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.index_am_handler_in(cstring) is 'I/O';

create function pg_catalog.index_am_handler_out(index_am_handler) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.index_am_handler_out(index_am_handler) is 'I/O';

create function pg_catalog.inet_client_addr() returns inet
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inet_client_addr() is 'inet address of the client';

create function pg_catalog.inet_client_port() returns integer
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inet_client_port() is 'client''s port number for this connection';

create function pg_catalog.inet_gist_compress(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inet_gist_compress(internal) is 'GiST support';

create function pg_catalog.inet_gist_consistent(internal, inet, smallint, oid, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inet_gist_consistent(internal, inet, smallint, oid, internal) is 'GiST support';

create function pg_catalog.inet_gist_fetch(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inet_gist_fetch(internal) is 'GiST support';

create function pg_catalog.inet_gist_penalty(internal, internal, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inet_gist_penalty(internal, internal, internal) is 'GiST support';

create function pg_catalog.inet_gist_picksplit(internal, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inet_gist_picksplit(internal, internal) is 'GiST support';

create function pg_catalog.inet_gist_same(inet, inet, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inet_gist_same(inet, inet, internal) is 'GiST support';

create function pg_catalog.inet_gist_union(internal, internal) returns inet
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inet_gist_union(internal, internal) is 'GiST support';

create function pg_catalog.inet_in(cstring) returns inet
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inet_in(cstring) is 'I/O';

create function pg_catalog.inet_merge(inet, inet) returns cidr
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inet_merge(inet, inet) is 'the smallest network which includes both of the given networks';

create function pg_catalog.inet_out(inet) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inet_out(inet) is 'I/O';

create function pg_catalog.inet_recv(internal) returns inet
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inet_recv(internal) is 'I/O';

create function pg_catalog.inet_same_family(inet, inet) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inet_same_family(inet, inet) is 'are the addresses from the same family?';

create function pg_catalog.inet_send(inet) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inet_send(inet) is 'I/O';

create function pg_catalog.inet_server_addr() returns inet
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inet_server_addr() is 'inet address of the server';

create function pg_catalog.inet_server_port() returns integer
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inet_server_port() is 'server''s port number for this connection';

create function pg_catalog.inet_spg_choose(internal, internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inet_spg_choose(internal, internal) is 'SP-GiST support';

create function pg_catalog.inet_spg_config(internal, internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inet_spg_config(internal, internal) is 'SP-GiST support';

create function pg_catalog.inet_spg_inner_consistent(internal, internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inet_spg_inner_consistent(internal, internal) is 'SP-GiST support';

create function pg_catalog.inet_spg_leaf_consistent(internal, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inet_spg_leaf_consistent(internal, internal) is 'SP-GiST support';

create function pg_catalog.inet_spg_picksplit(internal, internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inet_spg_picksplit(internal, internal) is 'SP-GiST support';

create function pg_catalog.inetand(inet, inet) returns inet
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inetand(inet, inet) is 'implementation of & operator';

create function pg_catalog.inetmi(inet, inet) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inetmi(inet, inet) is 'implementation of - operator';

create function pg_catalog.inetmi_int8(inet, bigint) returns inet
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inetmi_int8(inet, bigint) is 'implementation of - operator';

create function pg_catalog.inetnot(inet) returns inet
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inetnot(inet) is 'implementation of ~ operator';

create function pg_catalog.inetor(inet, inet) returns inet
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inetor(inet, inet) is 'implementation of | operator';

create function pg_catalog.inetpl(inet, bigint) returns inet
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inetpl(inet, bigint) is 'implementation of + operator';

create function pg_catalog.initcap(text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.initcap(text) is 'capitalize each word';

create function pg_catalog.int2(bigint) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2(bigint) is 'convert int8 to int2';

create function pg_catalog.int2(double precision) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2(double precision) is 'convert float8 to int2';

create function pg_catalog.int2(integer) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2(integer) is 'convert int4 to int2';

create function pg_catalog.int2(jsonb) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2(jsonb) is 'convert jsonb to int2';

create function pg_catalog.int2(numeric) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2(numeric) is 'convert numeric to int2';

create function pg_catalog.int2(real) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2(real) is 'convert float4 to int2';

create function pg_catalog.int24div(smallint, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int24div(smallint, integer) is 'implementation of / operator';

create function pg_catalog.int24eq(smallint, integer) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int24eq(smallint, integer) is 'implementation of = operator';

create function pg_catalog.int24ge(smallint, integer) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int24ge(smallint, integer) is 'implementation of >= operator';

create function pg_catalog.int24gt(smallint, integer) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int24gt(smallint, integer) is 'implementation of > operator';

create function pg_catalog.int24le(smallint, integer) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int24le(smallint, integer) is 'implementation of <= operator';

create function pg_catalog.int24lt(smallint, integer) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int24lt(smallint, integer) is 'implementation of < operator';

create function pg_catalog.int24mi(smallint, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int24mi(smallint, integer) is 'implementation of - operator';

create function pg_catalog.int24mul(smallint, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int24mul(smallint, integer) is 'implementation of * operator';

create function pg_catalog.int24ne(smallint, integer) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int24ne(smallint, integer) is 'implementation of <> operator';

create function pg_catalog.int24pl(smallint, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int24pl(smallint, integer) is 'implementation of + operator';

create function pg_catalog.int28div(smallint, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int28div(smallint, bigint) is 'implementation of / operator';

create function pg_catalog.int28eq(smallint, bigint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int28eq(smallint, bigint) is 'implementation of = operator';

create function pg_catalog.int28ge(smallint, bigint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int28ge(smallint, bigint) is 'implementation of >= operator';

create function pg_catalog.int28gt(smallint, bigint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int28gt(smallint, bigint) is 'implementation of > operator';

create function pg_catalog.int28le(smallint, bigint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int28le(smallint, bigint) is 'implementation of <= operator';

create function pg_catalog.int28lt(smallint, bigint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int28lt(smallint, bigint) is 'implementation of < operator';

create function pg_catalog.int28mi(smallint, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int28mi(smallint, bigint) is 'implementation of - operator';

create function pg_catalog.int28mul(smallint, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int28mul(smallint, bigint) is 'implementation of * operator';

create function pg_catalog.int28ne(smallint, bigint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int28ne(smallint, bigint) is 'implementation of <> operator';

create function pg_catalog.int28pl(smallint, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int28pl(smallint, bigint) is 'implementation of + operator';

create function pg_catalog.int2_accum(internal, smallint) returns internal
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2_accum(internal, smallint) is 'aggregate transition function';

create function pg_catalog.int2_accum_inv(internal, smallint) returns internal
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2_accum_inv(internal, smallint) is 'aggregate transition function';

create function pg_catalog.int2_avg_accum(bigint[], smallint) returns bigint[]
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2_avg_accum(bigint[], smallint) is 'aggregate transition function';

create function pg_catalog.int2_avg_accum_inv(bigint[], smallint) returns bigint[]
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2_avg_accum_inv(bigint[], smallint) is 'aggregate transition function';

create function pg_catalog.int2_mul_cash(smallint, money) returns money
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2_mul_cash(smallint, money) is 'implementation of * operator';

create function pg_catalog.int2_sum(bigint, smallint) returns bigint
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2_sum(bigint, smallint) is 'aggregate transition function';

create function pg_catalog.int2abs(smallint) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2abs(smallint) is 'implementation of @ operator';

create function pg_catalog.int2and(smallint, smallint) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2and(smallint, smallint) is 'implementation of & operator';

create function pg_catalog.int2div(smallint, smallint) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2div(smallint, smallint) is 'implementation of / operator';

create function pg_catalog.int2eq(smallint, smallint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2eq(smallint, smallint) is 'implementation of = operator';

create function pg_catalog.int2ge(smallint, smallint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2ge(smallint, smallint) is 'implementation of >= operator';

create function pg_catalog.int2gt(smallint, smallint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2gt(smallint, smallint) is 'implementation of > operator';

create function pg_catalog.int2in(cstring) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2in(cstring) is 'I/O';

create function pg_catalog.int2int4_sum(bigint[]) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2int4_sum(bigint[]) is 'aggregate final function';

create function pg_catalog.int2larger(smallint, smallint) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2larger(smallint, smallint) is 'larger of two';

create function pg_catalog.int2le(smallint, smallint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2le(smallint, smallint) is 'implementation of <= operator';

create function pg_catalog.int2lt(smallint, smallint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2lt(smallint, smallint) is 'implementation of < operator';

create function pg_catalog.int2mi(smallint, smallint) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2mi(smallint, smallint) is 'implementation of - operator';

create function pg_catalog.int2mod(smallint, smallint) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2mod(smallint, smallint) is 'implementation of % operator';

create function pg_catalog.int2mul(smallint, smallint) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2mul(smallint, smallint) is 'implementation of * operator';

create function pg_catalog.int2ne(smallint, smallint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2ne(smallint, smallint) is 'implementation of <> operator';

create function pg_catalog.int2not(smallint) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2not(smallint) is 'implementation of ~ operator';

create function pg_catalog.int2or(smallint, smallint) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2or(smallint, smallint) is 'implementation of | operator';

create function pg_catalog.int2out(smallint) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2out(smallint) is 'I/O';

create function pg_catalog.int2pl(smallint, smallint) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2pl(smallint, smallint) is 'implementation of + operator';

create function pg_catalog.int2recv(internal) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2recv(internal) is 'I/O';

create function pg_catalog.int2send(smallint) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2send(smallint) is 'I/O';

create function pg_catalog.int2shl(smallint, integer) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2shl(smallint, integer) is 'implementation of << operator';

create function pg_catalog.int2shr(smallint, integer) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2shr(smallint, integer) is 'implementation of >> operator';

create function pg_catalog.int2smaller(smallint, smallint) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2smaller(smallint, smallint) is 'smaller of two';

create function pg_catalog.int2um(smallint) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2um(smallint) is 'implementation of - operator';

create function pg_catalog.int2up(smallint) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2up(smallint) is 'implementation of + operator';

create function pg_catalog.int2vectorin(cstring) returns int2vector
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2vectorin(cstring) is 'I/O';

create function pg_catalog.int2vectorout(int2vector) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2vectorout(int2vector) is 'I/O';

create function pg_catalog.int2vectorrecv(internal) returns int2vector
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2vectorrecv(internal) is 'I/O';

create function pg_catalog.int2vectorsend(int2vector) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2vectorsend(int2vector) is 'I/O';

create function pg_catalog.int2xor(smallint, smallint) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int2xor(smallint, smallint) is 'implementation of # operator';

create function pg_catalog.int4("char") returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4("char") is 'convert char to int4';

create function pg_catalog.int4(bigint) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4(bigint) is 'convert int8 to int4';

create function pg_catalog.int4(bit) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4(bit) is 'convert bitstring to int4';

create function pg_catalog.int4(boolean) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4(boolean) is 'convert boolean to int4';

create function pg_catalog.int4(double precision) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4(double precision) is 'convert float8 to int4';

create function pg_catalog.int4(jsonb) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4(jsonb) is 'convert jsonb to int4';

create function pg_catalog.int4(numeric) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4(numeric) is 'convert numeric to int4';

create function pg_catalog.int4(real) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4(real) is 'convert float4 to int4';

create function pg_catalog.int4(smallint) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4(smallint) is 'convert int2 to int4';

create function pg_catalog.int42div(integer, smallint) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int42div(integer, smallint) is 'implementation of / operator';

create function pg_catalog.int42eq(integer, smallint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int42eq(integer, smallint) is 'implementation of = operator';

create function pg_catalog.int42ge(integer, smallint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int42ge(integer, smallint) is 'implementation of >= operator';

create function pg_catalog.int42gt(integer, smallint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int42gt(integer, smallint) is 'implementation of > operator';

create function pg_catalog.int42le(integer, smallint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int42le(integer, smallint) is 'implementation of <= operator';

create function pg_catalog.int42lt(integer, smallint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int42lt(integer, smallint) is 'implementation of < operator';

create function pg_catalog.int42mi(integer, smallint) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int42mi(integer, smallint) is 'implementation of - operator';

create function pg_catalog.int42mul(integer, smallint) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int42mul(integer, smallint) is 'implementation of * operator';

create function pg_catalog.int42ne(integer, smallint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int42ne(integer, smallint) is 'implementation of <> operator';

create function pg_catalog.int42pl(integer, smallint) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int42pl(integer, smallint) is 'implementation of + operator';

create function pg_catalog.int48div(integer, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int48div(integer, bigint) is 'implementation of / operator';

create function pg_catalog.int48eq(integer, bigint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int48eq(integer, bigint) is 'implementation of = operator';

create function pg_catalog.int48ge(integer, bigint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int48ge(integer, bigint) is 'implementation of >= operator';

create function pg_catalog.int48gt(integer, bigint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int48gt(integer, bigint) is 'implementation of > operator';

create function pg_catalog.int48le(integer, bigint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int48le(integer, bigint) is 'implementation of <= operator';

create function pg_catalog.int48lt(integer, bigint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int48lt(integer, bigint) is 'implementation of < operator';

create function pg_catalog.int48mi(integer, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int48mi(integer, bigint) is 'implementation of - operator';

create function pg_catalog.int48mul(integer, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int48mul(integer, bigint) is 'implementation of * operator';

create function pg_catalog.int48ne(integer, bigint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int48ne(integer, bigint) is 'implementation of <> operator';

create function pg_catalog.int48pl(integer, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int48pl(integer, bigint) is 'implementation of + operator';

create function pg_catalog.int4_accum(internal, integer) returns internal
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4_accum(internal, integer) is 'aggregate transition function';

create function pg_catalog.int4_accum_inv(internal, integer) returns internal
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4_accum_inv(internal, integer) is 'aggregate transition function';

create function pg_catalog.int4_avg_accum(bigint[], integer) returns bigint[]
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4_avg_accum(bigint[], integer) is 'aggregate transition function';

create function pg_catalog.int4_avg_accum_inv(bigint[], integer) returns bigint[]
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4_avg_accum_inv(bigint[], integer) is 'aggregate transition function';

create function pg_catalog.int4_avg_combine(bigint[], bigint[]) returns bigint[]
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4_avg_combine(bigint[], bigint[]) is 'aggregate combine function';

create function pg_catalog.int4_mul_cash(integer, money) returns money
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4_mul_cash(integer, money) is 'implementation of * operator';

create function pg_catalog.int4_sum(bigint, integer) returns bigint
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4_sum(bigint, integer) is 'aggregate transition function';

create function pg_catalog.int4abs(integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4abs(integer) is 'implementation of @ operator';

create function pg_catalog.int4and(integer, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4and(integer, integer) is 'implementation of & operator';

create function pg_catalog.int4div(integer, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4div(integer, integer) is 'implementation of / operator';

create function pg_catalog.int4eq(integer, integer) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4eq(integer, integer) is 'implementation of = operator';

create function pg_catalog.int4ge(integer, integer) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4ge(integer, integer) is 'implementation of >= operator';

create function pg_catalog.int4gt(integer, integer) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4gt(integer, integer) is 'implementation of > operator';

create function pg_catalog.int4in(cstring) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4in(cstring) is 'I/O';

create function pg_catalog.int4inc(integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4inc(integer) is 'increment';

create function pg_catalog.int4larger(integer, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4larger(integer, integer) is 'larger of two';

create function pg_catalog.int4le(integer, integer) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4le(integer, integer) is 'implementation of <= operator';

create function pg_catalog.int4lt(integer, integer) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4lt(integer, integer) is 'implementation of < operator';

create function pg_catalog.int4mi(integer, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4mi(integer, integer) is 'implementation of - operator';

create function pg_catalog.int4mod(integer, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4mod(integer, integer) is 'implementation of % operator';

create function pg_catalog.int4mul(integer, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4mul(integer, integer) is 'implementation of * operator';

create function pg_catalog.int4ne(integer, integer) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4ne(integer, integer) is 'implementation of <> operator';

create function pg_catalog.int4not(integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4not(integer) is 'implementation of ~ operator';

create function pg_catalog.int4or(integer, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4or(integer, integer) is 'implementation of | operator';

create function pg_catalog.int4out(integer) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4out(integer) is 'I/O';

create function pg_catalog.int4pl(integer, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4pl(integer, integer) is 'implementation of + operator';

create function pg_catalog.int4range(integer, integer) returns int4range
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4range(integer, integer) is 'int4range constructor';

create function pg_catalog.int4range(integer, integer, text) returns int4range
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4range(integer, integer, text) is 'int4range constructor';

create function pg_catalog.int4range_canonical(int4range) returns int4range
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4range_canonical(int4range) is 'convert an int4 range to canonical form';

create function pg_catalog.int4range_subdiff(integer, integer) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4range_subdiff(integer, integer) is 'float8 difference of two int4 values';

create function pg_catalog.int4recv(internal) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4recv(internal) is 'I/O';

create function pg_catalog.int4send(integer) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4send(integer) is 'I/O';

create function pg_catalog.int4shl(integer, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4shl(integer, integer) is 'implementation of << operator';

create function pg_catalog.int4shr(integer, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4shr(integer, integer) is 'implementation of >> operator';

create function pg_catalog.int4smaller(integer, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4smaller(integer, integer) is 'smaller of two';

create function pg_catalog.int4um(integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4um(integer) is 'implementation of - operator';

create function pg_catalog.int4up(integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4up(integer) is 'implementation of + operator';

create function pg_catalog.int4xor(integer, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int4xor(integer, integer) is 'implementation of # operator';

create function pg_catalog.int8(bit) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8(bit) is 'convert bitstring to int8';

create function pg_catalog.int8(double precision) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8(double precision) is 'convert float8 to int8';

create function pg_catalog.int8(integer) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8(integer) is 'convert int4 to int8';

create function pg_catalog.int8(jsonb) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8(jsonb) is 'convert jsonb to int8';

create function pg_catalog.int8(numeric) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8(numeric) is 'convert numeric to int8';

create function pg_catalog.int8(oid) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8(oid) is 'convert oid to int8';

create function pg_catalog.int8(real) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8(real) is 'convert float4 to int8';

create function pg_catalog.int8(smallint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8(smallint) is 'convert int2 to int8';

create function pg_catalog.int82div(bigint, smallint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int82div(bigint, smallint) is 'implementation of / operator';

create function pg_catalog.int82eq(bigint, smallint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int82eq(bigint, smallint) is 'implementation of = operator';

create function pg_catalog.int82ge(bigint, smallint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int82ge(bigint, smallint) is 'implementation of >= operator';

create function pg_catalog.int82gt(bigint, smallint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int82gt(bigint, smallint) is 'implementation of > operator';

create function pg_catalog.int82le(bigint, smallint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int82le(bigint, smallint) is 'implementation of <= operator';

create function pg_catalog.int82lt(bigint, smallint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int82lt(bigint, smallint) is 'implementation of < operator';

create function pg_catalog.int82mi(bigint, smallint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int82mi(bigint, smallint) is 'implementation of - operator';

create function pg_catalog.int82mul(bigint, smallint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int82mul(bigint, smallint) is 'implementation of * operator';

create function pg_catalog.int82ne(bigint, smallint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int82ne(bigint, smallint) is 'implementation of <> operator';

create function pg_catalog.int82pl(bigint, smallint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int82pl(bigint, smallint) is 'implementation of + operator';

create function pg_catalog.int84div(bigint, integer) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int84div(bigint, integer) is 'implementation of / operator';

create function pg_catalog.int84eq(bigint, integer) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int84eq(bigint, integer) is 'implementation of = operator';

create function pg_catalog.int84ge(bigint, integer) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int84ge(bigint, integer) is 'implementation of >= operator';

create function pg_catalog.int84gt(bigint, integer) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int84gt(bigint, integer) is 'implementation of > operator';

create function pg_catalog.int84le(bigint, integer) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int84le(bigint, integer) is 'implementation of <= operator';

create function pg_catalog.int84lt(bigint, integer) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int84lt(bigint, integer) is 'implementation of < operator';

create function pg_catalog.int84mi(bigint, integer) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int84mi(bigint, integer) is 'implementation of - operator';

create function pg_catalog.int84mul(bigint, integer) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int84mul(bigint, integer) is 'implementation of * operator';

create function pg_catalog.int84ne(bigint, integer) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int84ne(bigint, integer) is 'implementation of <> operator';

create function pg_catalog.int84pl(bigint, integer) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int84pl(bigint, integer) is 'implementation of + operator';

create function pg_catalog.int8_accum(internal, bigint) returns internal
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8_accum(internal, bigint) is 'aggregate transition function';

create function pg_catalog.int8_accum_inv(internal, bigint) returns internal
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8_accum_inv(internal, bigint) is 'aggregate transition function';

create function pg_catalog.int8_avg(bigint[]) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8_avg(bigint[]) is 'aggregate final function';

create function pg_catalog.int8_avg_accum(internal, bigint) returns internal
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8_avg_accum(internal, bigint) is 'aggregate transition function';

create function pg_catalog.int8_avg_accum_inv(internal, bigint) returns internal
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8_avg_accum_inv(internal, bigint) is 'aggregate transition function';

create function pg_catalog.int8_avg_combine(internal, internal) returns internal
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8_avg_combine(internal, internal) is 'aggregate combine function';

create function pg_catalog.int8_avg_deserialize(bytea, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8_avg_deserialize(bytea, internal) is 'aggregate deserial function';

create function pg_catalog.int8_avg_serialize(internal) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8_avg_serialize(internal) is 'aggregate serial function';

create function pg_catalog.int8_mul_cash(bigint, money) returns money
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8_mul_cash(bigint, money) is 'implementation of * operator';

create function pg_catalog.int8_sum(numeric, bigint) returns numeric
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8_sum(numeric, bigint) is 'aggregate transition function';

create function pg_catalog.int8abs(bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8abs(bigint) is 'implementation of @ operator';

create function pg_catalog.int8and(bigint, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8and(bigint, bigint) is 'implementation of & operator';

create function pg_catalog.int8dec(bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8dec(bigint) is 'decrement';

create function pg_catalog.int8dec_any(bigint, "any") returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8dec_any(bigint, "any") is 'decrement, ignores second argument';

create function pg_catalog.int8div(bigint, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8div(bigint, bigint) is 'implementation of / operator';

create function pg_catalog.int8eq(bigint, bigint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8eq(bigint, bigint) is 'implementation of = operator';

create function pg_catalog.int8ge(bigint, bigint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8ge(bigint, bigint) is 'implementation of >= operator';

create function pg_catalog.int8gt(bigint, bigint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8gt(bigint, bigint) is 'implementation of > operator';

create function pg_catalog.int8in(cstring) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8in(cstring) is 'I/O';

create function pg_catalog.int8inc(bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8inc(bigint) is 'increment';

create function pg_catalog.int8inc_any(bigint, "any") returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8inc_any(bigint, "any") is 'increment, ignores second argument';

create function pg_catalog.int8inc_float8_float8(bigint, double precision, double precision) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8inc_float8_float8(bigint, double precision, double precision) is 'aggregate transition function';

create function pg_catalog.int8larger(bigint, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8larger(bigint, bigint) is 'larger of two';

create function pg_catalog.int8le(bigint, bigint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8le(bigint, bigint) is 'implementation of <= operator';

create function pg_catalog.int8lt(bigint, bigint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8lt(bigint, bigint) is 'implementation of < operator';

create function pg_catalog.int8mi(bigint, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8mi(bigint, bigint) is 'implementation of - operator';

create function pg_catalog.int8mod(bigint, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8mod(bigint, bigint) is 'implementation of % operator';

create function pg_catalog.int8mul(bigint, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8mul(bigint, bigint) is 'implementation of * operator';

create function pg_catalog.int8ne(bigint, bigint) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8ne(bigint, bigint) is 'implementation of <> operator';

create function pg_catalog.int8not(bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8not(bigint) is 'implementation of ~ operator';

create function pg_catalog.int8or(bigint, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8or(bigint, bigint) is 'implementation of | operator';

create function pg_catalog.int8out(bigint) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8out(bigint) is 'I/O';

create function pg_catalog.int8pl(bigint, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8pl(bigint, bigint) is 'implementation of + operator';

create function pg_catalog.int8pl_inet(bigint, inet) returns inet
    immutable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8pl_inet(bigint, inet) is 'implementation of + operator';

create function pg_catalog.int8range(bigint, bigint) returns int8range
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8range(bigint, bigint) is 'int8range constructor';

create function pg_catalog.int8range(bigint, bigint, text) returns int8range
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8range(bigint, bigint, text) is 'int8range constructor';

create function pg_catalog.int8range_canonical(int8range) returns int8range
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8range_canonical(int8range) is 'convert an int8 range to canonical form';

create function pg_catalog.int8range_subdiff(bigint, bigint) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8range_subdiff(bigint, bigint) is 'float8 difference of two int8 values';

create function pg_catalog.int8recv(internal) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8recv(internal) is 'I/O';

create function pg_catalog.int8send(bigint) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8send(bigint) is 'I/O';

create function pg_catalog.int8shl(bigint, integer) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8shl(bigint, integer) is 'implementation of << operator';

create function pg_catalog.int8shr(bigint, integer) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8shr(bigint, integer) is 'implementation of >> operator';

create function pg_catalog.int8smaller(bigint, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8smaller(bigint, bigint) is 'smaller of two';

create function pg_catalog.int8um(bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8um(bigint) is 'implementation of - operator';

create function pg_catalog.int8up(bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8up(bigint) is 'implementation of + operator';

create function pg_catalog.int8xor(bigint, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.int8xor(bigint, bigint) is 'implementation of # operator';

create function pg_catalog.integer_pl_date(integer, date) returns date
    immutable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.integer_pl_date(integer, date) is 'implementation of + operator';

create function pg_catalog.inter_lb(line, box) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inter_lb(line, box) is 'implementation of ?# operator';

create function pg_catalog.inter_sb(lseg, box) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inter_sb(lseg, box) is 'implementation of ?# operator';

create function pg_catalog.inter_sl(lseg, line) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.inter_sl(lseg, line) is 'implementation of ?# operator';

create function pg_catalog.internal_in(cstring) returns internal
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.internal_in(cstring) is 'I/O';

create function pg_catalog.internal_out(internal) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.internal_out(internal) is 'I/O';

create function pg_catalog.interval(interval, integer) returns interval
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval(interval, integer) is 'adjust interval precision';

create function pg_catalog.interval(time) returns interval
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval(time) is 'convert time to interval';

create function pg_catalog.interval_accum(interval[], interval) returns interval[]
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_accum(interval[], interval) is 'aggregate transition function';

create function pg_catalog.interval_accum_inv(interval[], interval) returns interval[]
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_accum_inv(interval[], interval) is 'aggregate transition function';

create function pg_catalog.interval_avg(interval[]) returns interval
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_avg(interval[]) is 'aggregate final function';

create function pg_catalog.interval_cmp(interval, interval) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_cmp(interval, interval) is 'less-equal-greater';

create function pg_catalog.interval_combine(interval[], interval[]) returns interval[]
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_combine(interval[], interval[]) is 'aggregate combine function';

create function pg_catalog.interval_div(interval, double precision) returns interval
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_div(interval, double precision) is 'implementation of / operator';

create function pg_catalog.interval_eq(interval, interval) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_eq(interval, interval) is 'implementation of = operator';

create function pg_catalog.interval_ge(interval, interval) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_ge(interval, interval) is 'implementation of >= operator';

create function pg_catalog.interval_gt(interval, interval) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_gt(interval, interval) is 'implementation of > operator';

create function pg_catalog.interval_hash(interval) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_hash(interval) is 'hash';

create function pg_catalog.interval_hash_extended(interval, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_hash_extended(interval, bigint) is 'hash';

create function pg_catalog.interval_in(cstring, oid, integer) returns interval
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_in(cstring, oid, integer) is 'I/O';

create function pg_catalog.interval_larger(interval, interval) returns interval
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_larger(interval, interval) is 'larger of two';

create function pg_catalog.interval_le(interval, interval) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_le(interval, interval) is 'implementation of <= operator';

create function pg_catalog.interval_lt(interval, interval) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_lt(interval, interval) is 'implementation of < operator';

create function pg_catalog.interval_mi(interval, interval) returns interval
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_mi(interval, interval) is 'implementation of - operator';

create function pg_catalog.interval_mul(interval, double precision) returns interval
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_mul(interval, double precision) is 'implementation of * operator';

create function pg_catalog.interval_ne(interval, interval) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_ne(interval, interval) is 'implementation of <> operator';

create function pg_catalog.interval_out(interval) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_out(interval) is 'I/O';

create function pg_catalog.interval_pl(interval, interval) returns interval
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_pl(interval, interval) is 'implementation of + operator';

create function pg_catalog.interval_pl_date(interval, date) returns timestamp without time zone
    immutable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_pl_date(interval, date) is 'implementation of + operator';

create function pg_catalog.interval_pl_time(interval, time without time zone) returns time without time zone
    immutable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_pl_time(interval, time) is 'implementation of + operator';

create function pg_catalog.interval_pl_timestamp(interval, timestamp without time zone) returns timestamp without time zone
    immutable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_pl_timestamp(interval, timestamp) is 'implementation of + operator';

create function pg_catalog.interval_pl_timestamptz(interval, timestamp with time zone) returns timestamp with time zone
    stable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_pl_timestamptz(interval, timestamp with time zone) is 'implementation of + operator';

create function pg_catalog.interval_pl_timetz(interval, time with time zone) returns time with time zone
    immutable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_pl_timetz(interval, time with time zone) is 'implementation of + operator';

create function pg_catalog.interval_recv(internal, oid, integer) returns interval
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_recv(internal, oid, integer) is 'I/O';

create function pg_catalog.interval_send(interval) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_send(interval) is 'I/O';

create function pg_catalog.interval_smaller(interval, interval) returns interval
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_smaller(interval, interval) is 'smaller of two';

create function pg_catalog.interval_support(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_support(internal) is 'planner support for interval length coercion';

create function pg_catalog.interval_um(interval) returns interval
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.interval_um(interval) is 'implementation of - operator';

create function pg_catalog.intervaltypmodin(cstring[]) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.intervaltypmodin(cstring[]) is 'I/O typmod';

create function pg_catalog.intervaltypmodout(integer) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.intervaltypmodout(integer) is 'I/O typmod';

create function pg_catalog.isclosed(path) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.isclosed(path) is 'path closed?';

create function pg_catalog.isempty(anyrange) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.isempty(anyrange) is 'is the range empty?';

create function pg_catalog.isfinite(date) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.isfinite(date) is 'finite date?';

create function pg_catalog.isfinite(interval) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.isfinite(interval) is 'finite interval?';

create function pg_catalog.isfinite(timestamp with time zone) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.isfinite(timestamp with time zone) is 'finite timestamp?';

create function pg_catalog.isfinite(timestamp) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.isfinite(timestamp) is 'finite timestamp?';

create function pg_catalog.ishorizontal(line) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ishorizontal(line) is 'horizontal';

create function pg_catalog.ishorizontal(lseg) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ishorizontal(lseg) is 'horizontal';

create function pg_catalog.ishorizontal(point, point) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ishorizontal(point, point) is 'horizontally aligned';

create function pg_catalog.iso8859_1_to_utf8(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.iso8859_1_to_utf8(integer, integer, cstring, internal, integer) is 'internal conversion function for LATIN1 to UTF8';

create function pg_catalog.iso8859_to_utf8(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.iso8859_to_utf8(integer, integer, cstring, internal, integer) is 'internal conversion function for ISO-8859 2-16 to UTF8';

create function pg_catalog.iso_to_koi8r(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.iso_to_koi8r(integer, integer, cstring, internal, integer) is 'internal conversion function for ISO-8859-5 to KOI8R';

create function pg_catalog.iso_to_mic(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.iso_to_mic(integer, integer, cstring, internal, integer) is 'internal conversion function for ISO-8859-5 to MULE_INTERNAL';

create function pg_catalog.iso_to_win1251(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.iso_to_win1251(integer, integer, cstring, internal, integer) is 'internal conversion function for ISO-8859-5 to WIN1251';

create function pg_catalog.iso_to_win866(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.iso_to_win866(integer, integer, cstring, internal, integer) is 'internal conversion function for ISO-8859-5 to WIN866';

create function pg_catalog.isopen(path) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.isopen(path) is 'path open?';

create function pg_catalog.isparallel(line, line) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.isparallel(line, line) is 'parallel';

create function pg_catalog.isparallel(lseg, lseg) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.isparallel(lseg, lseg) is 'parallel';

create function pg_catalog.isperp(line, line) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.isperp(line, line) is 'perpendicular';

create function pg_catalog.isperp(lseg, lseg) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.isperp(lseg, lseg) is 'perpendicular';

create function pg_catalog.isvertical(line) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.isvertical(line) is 'vertical';

create function pg_catalog.isvertical(lseg) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.isvertical(lseg) is 'vertical';

create function pg_catalog.isvertical(point, point) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.isvertical(point, point) is 'vertically aligned';

create function pg_catalog.johab_to_utf8(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.johab_to_utf8(integer, integer, cstring, internal, integer) is 'internal conversion function for JOHAB to UTF8';

create function pg_catalog.json_agg_finalfn(internal) returns json
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_agg_finalfn(internal) is 'json aggregate final function';

create function pg_catalog.json_agg_transfn(internal, anyelement) returns internal
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_agg_transfn(internal, anyelement) is 'json aggregate transition function';

create function pg_catalog.json_array_element(from_json json, element_index integer) returns json
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_array_element(json, integer) is 'implementation of -> operator';

create function pg_catalog.json_array_element_text(from_json json, element_index integer) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_array_element_text(json, integer) is 'implementation of ->> operator';

create function pg_catalog.json_array_elements(from_json json, out value json) returns setof setof json
    immutable
    strict
    cost 1
    rows 100
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_array_elements(json, out json) is 'key value pairs of a json object';

create function pg_catalog.json_array_elements_text(from_json json, out value text) returns setof setof text
    immutable
    strict
    cost 1
    rows 100
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_array_elements_text(json, out text) is 'elements of json array';

create function pg_catalog.json_array_length(json) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_array_length(json) is 'length of json array';

create function pg_catalog.json_build_array("any") returns json
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_build_array("any") is 'build a json array from any inputs';

create function pg_catalog.json_build_array() returns json
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_build_array() is 'build an empty json array';

create function pg_catalog.json_build_object("any") returns json
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_build_object("any") is 'build a json object from pairwise key/value inputs';

create function pg_catalog.json_build_object() returns json
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_build_object() is 'build an empty json object';

create function pg_catalog.json_each(from_json json, out key text, out value json) returns setof setof record
    immutable
    strict
    cost 1
    rows 100
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_each(json, out text, out json) is 'key value pairs of a json object';

create function pg_catalog.json_each_text(from_json json, out key text, out value text) returns setof setof record
    immutable
    strict
    cost 1
    rows 100
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_each_text(json, out text, out text) is 'key value pairs of a json object';

create function pg_catalog.json_extract_path(from_json json, path_elems text[]) returns json
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_extract_path(json, text[]) is 'get value from json with path elements';

create function pg_catalog.json_extract_path_text(from_json json, path_elems text[]) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_extract_path_text(json, text[]) is 'get value from json as text with path elements';

create function pg_catalog.json_in(cstring) returns json
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_in(cstring) is 'I/O';

create function pg_catalog.json_object(text[]) returns json
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_object(text[]) is 'map text array of key value pairs to json object';

create function pg_catalog.json_object(text[], text[]) returns json
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_object(text[], text[]) is 'map text arrays of keys and values to json object';

create function pg_catalog.json_object_agg_finalfn(internal) returns json
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_object_agg_finalfn(internal) is 'json object aggregate final function';

create function pg_catalog.json_object_agg_transfn(internal, "any", "any") returns internal
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_object_agg_transfn(internal, "any", "any") is 'json object aggregate transition function';

create function pg_catalog.json_object_field(from_json json, field_name text) returns json
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_object_field(json, text) is 'implementation of -> operator';

create function pg_catalog.json_object_field_text(from_json json, field_name text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_object_field_text(json, text) is 'implementation of ->> operator';

create function pg_catalog.json_object_keys(json) returns setof setof text
    immutable
    strict
    cost 1
    rows 100
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_object_keys(json) is 'get json object keys';

create function pg_catalog.json_out(json) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_out(json) is 'I/O';

create function pg_catalog.json_populate_record(base anyelement, from_json json, use_json_as_text boolean default false) returns anyelement
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_populate_record(anyelement, json, boolean) is 'get record fields from a json object';

create function pg_catalog.json_populate_recordset(base anyelement, from_json json, use_json_as_text boolean default false) returns setof setof anyelement
    stable
    cost 1
    rows 100
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_populate_recordset(anyelement, json, boolean) is 'get set of records with fields from a json array of objects';

create function pg_catalog.json_recv(internal) returns json
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_recv(internal) is 'I/O';

create function pg_catalog.json_send(json) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_send(json) is 'I/O';

create function pg_catalog.json_strip_nulls(json) returns json
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_strip_nulls(json) is 'remove object fields with null values from json';

create function pg_catalog.json_to_record(json) returns record
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_to_record(json) is 'get record fields from a json object';

create function pg_catalog.json_to_recordset(json) returns setof setof record
    stable
    cost 1
    rows 100
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_to_recordset(json) is 'get set of records with fields from a json array of objects';

create function pg_catalog.json_to_tsvector(json, jsonb) returns tsvector
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_to_tsvector(json, jsonb) is 'transform specified values from json to tsvector';

create function pg_catalog.json_to_tsvector(regconfig, json, jsonb) returns tsvector
    immutable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_to_tsvector(regconfig, json, jsonb) is 'transform specified values from json to tsvector';

create function pg_catalog.json_typeof(json) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.json_typeof(json) is 'get the type of a json value';

create function pg_catalog.jsonb_agg_finalfn(internal) returns jsonb
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_agg_finalfn(internal) is 'jsonb aggregate final function';

create function pg_catalog.jsonb_agg_transfn(internal, anyelement) returns internal
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_agg_transfn(internal, anyelement) is 'jsonb aggregate transition function';

create function pg_catalog.jsonb_array_element(from_json jsonb, element_index integer) returns jsonb
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_array_element(jsonb, integer) is 'implementation of -> operator';

create function pg_catalog.jsonb_array_element_text(from_json jsonb, element_index integer) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_array_element_text(jsonb, integer) is 'implementation of ->> operator';

create function pg_catalog.jsonb_array_elements(from_json jsonb, out value jsonb) returns setof setof jsonb
    immutable
    strict
    cost 1
    rows 100
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_array_elements(jsonb, out jsonb) is 'elements of a jsonb array';

create function pg_catalog.jsonb_array_elements_text(from_json jsonb, out value text) returns setof setof text
    immutable
    strict
    cost 1
    rows 100
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_array_elements_text(jsonb, out text) is 'elements of jsonb array';

create function pg_catalog.jsonb_array_length(jsonb) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_array_length(jsonb) is 'length of jsonb array';

create function pg_catalog.jsonb_build_array("any") returns jsonb
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_build_array("any") is 'build a jsonb array from any inputs';

create function pg_catalog.jsonb_build_array() returns jsonb
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_build_array() is 'build an empty jsonb array';

create function pg_catalog.jsonb_build_object("any") returns jsonb
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_build_object("any") is 'build a jsonb object from pairwise key/value inputs';

create function pg_catalog.jsonb_build_object() returns jsonb
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_build_object() is 'build an empty jsonb object';

create function pg_catalog.jsonb_cmp(jsonb, jsonb) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_cmp(jsonb, jsonb) is 'less-equal-greater';

create function pg_catalog.jsonb_concat(jsonb, jsonb) returns jsonb
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_concat(jsonb, jsonb) is 'implementation of || operator';

create function pg_catalog.jsonb_contained(jsonb, jsonb) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_contained(jsonb, jsonb) is 'implementation of <@ operator';

create function pg_catalog.jsonb_contains(jsonb, jsonb) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_contains(jsonb, jsonb) is 'implementation of @> operator';

create function pg_catalog.jsonb_delete(jsonb, integer) returns jsonb
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_delete(jsonb, integer) is 'implementation of - operator';

create function pg_catalog.jsonb_delete(jsonb, text) returns jsonb
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_delete(jsonb, text) is 'implementation of - operator';

create function pg_catalog.jsonb_delete(from_json jsonb, path_elems text[]) returns jsonb
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_delete(jsonb, text[]) is 'implementation of - operator';

create function pg_catalog.jsonb_delete_path(jsonb, text[]) returns jsonb
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_delete_path(jsonb, text[]) is 'implementation of #- operator';

create function pg_catalog.jsonb_each(from_json jsonb, out key text, out value jsonb) returns setof setof record
    immutable
    strict
    cost 1
    rows 100
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_each(jsonb, out text, out jsonb) is 'key value pairs of a jsonb object';

create function pg_catalog.jsonb_each_text(from_json jsonb, out key text, out value text) returns setof setof record
    immutable
    strict
    cost 1
    rows 100
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_each_text(jsonb, out text, out text) is 'key value pairs of a jsonb object';

create function pg_catalog.jsonb_eq(jsonb, jsonb) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_eq(jsonb, jsonb) is 'implementation of = operator';

create function pg_catalog.jsonb_exists(jsonb, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_exists(jsonb, text) is 'implementation of ? operator';

create function pg_catalog.jsonb_exists_all(jsonb, text[]) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_exists_all(jsonb, text[]) is 'implementation of ?& operator';

create function pg_catalog.jsonb_exists_any(jsonb, text[]) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_exists_any(jsonb, text[]) is 'implementation of ?| operator';

create function pg_catalog.jsonb_extract_path(from_json jsonb, path_elems text[]) returns jsonb
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_extract_path(jsonb, text[]) is 'get value from jsonb with path elements';

create function pg_catalog.jsonb_extract_path_text(from_json jsonb, path_elems text[]) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_extract_path_text(jsonb, text[]) is 'get value from jsonb as text with path elements';

create function pg_catalog.jsonb_ge(jsonb, jsonb) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_ge(jsonb, jsonb) is 'implementation of >= operator';

create function pg_catalog.jsonb_gt(jsonb, jsonb) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_gt(jsonb, jsonb) is 'implementation of > operator';

create function pg_catalog.jsonb_hash(jsonb) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_hash(jsonb) is 'hash';

create function pg_catalog.jsonb_hash_extended(jsonb, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_hash_extended(jsonb, bigint) is 'hash';

create function pg_catalog.jsonb_in(cstring) returns jsonb
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_in(cstring) is 'I/O';

create function pg_catalog.jsonb_insert(jsonb_in jsonb, path text[], replacement jsonb, insert_after boolean default false) returns jsonb
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_insert(jsonb, text[], jsonb, boolean) is 'Insert value into a jsonb';

create function pg_catalog.jsonb_le(jsonb, jsonb) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_le(jsonb, jsonb) is 'implementation of <= operator';

create function pg_catalog.jsonb_lt(jsonb, jsonb) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_lt(jsonb, jsonb) is 'implementation of < operator';

create function pg_catalog.jsonb_ne(jsonb, jsonb) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_ne(jsonb, jsonb) is 'implementation of <> operator';

create function pg_catalog.jsonb_object(text[]) returns jsonb
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_object(text[]) is 'map text array of key value pairs to jsonb object';

create function pg_catalog.jsonb_object(text[], text[]) returns jsonb
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_object(text[], text[]) is 'map text array of key value pairs to jsonb object';

create function pg_catalog.jsonb_object_agg_finalfn(internal) returns jsonb
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_object_agg_finalfn(internal) is 'jsonb object aggregate final function';

create function pg_catalog.jsonb_object_agg_transfn(internal, "any", "any") returns internal
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_object_agg_transfn(internal, "any", "any") is 'jsonb object aggregate transition function';

create function pg_catalog.jsonb_object_field(from_json jsonb, field_name text) returns jsonb
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_object_field(jsonb, text) is 'implementation of -> operator';

create function pg_catalog.jsonb_object_field_text(from_json jsonb, field_name text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_object_field_text(jsonb, text) is 'implementation of ->> operator';

create function pg_catalog.jsonb_object_keys(jsonb) returns setof setof text
    immutable
    strict
    cost 1
    rows 100
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_object_keys(jsonb) is 'get jsonb object keys';

create function pg_catalog.jsonb_out(jsonb) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_out(jsonb) is 'I/O';

create function pg_catalog.jsonb_path_exists(target jsonb, path jsonpath, vars jsonb default '{}'::jsonb, silent boolean default false) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_path_exists(jsonb, jsonpath, jsonb, boolean) is 'jsonpath exists test';

create function pg_catalog.jsonb_path_exists_opr(jsonb, jsonpath) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_path_exists_opr(jsonb, jsonpath) is 'implementation of @? operator';

create function pg_catalog.jsonb_path_match(target jsonb, path jsonpath, vars jsonb default '{}'::jsonb, silent boolean default false) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_path_match(jsonb, jsonpath, jsonb, boolean) is 'jsonpath match';

create function pg_catalog.jsonb_path_match_opr(jsonb, jsonpath) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_path_match_opr(jsonb, jsonpath) is 'implementation of @@ operator';

create function pg_catalog.jsonb_path_query(target jsonb, path jsonpath, vars jsonb default '{}'::jsonb, silent boolean default false) returns setof setof jsonb
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_path_query(jsonb, jsonpath, jsonb, boolean) is 'jsonpath query';

create function pg_catalog.jsonb_path_query_array(target jsonb, path jsonpath, vars jsonb default '{}'::jsonb, silent boolean default false) returns jsonb
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_path_query_array(jsonb, jsonpath, jsonb, boolean) is 'jsonpath query wrapped into array';

create function pg_catalog.jsonb_path_query_first(target jsonb, path jsonpath, vars jsonb default '{}'::jsonb, silent boolean default false) returns jsonb
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_path_query_first(jsonb, jsonpath, jsonb, boolean) is 'jsonpath query first item';

create function pg_catalog.jsonb_populate_record(anyelement, jsonb) returns anyelement
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_populate_record(anyelement, jsonb) is 'get record fields from a jsonb object';

create function pg_catalog.jsonb_populate_recordset(anyelement, jsonb) returns setof setof anyelement
    stable
    cost 1
    rows 100
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_populate_recordset(anyelement, jsonb) is 'get set of records with fields from a jsonb array of objects';

create function pg_catalog.jsonb_pretty(jsonb) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_pretty(jsonb) is 'Indented text from jsonb';

create function pg_catalog.jsonb_recv(internal) returns jsonb
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_recv(internal) is 'I/O';

create function pg_catalog.jsonb_send(jsonb) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_send(jsonb) is 'I/O';

create function pg_catalog.jsonb_set(jsonb_in jsonb, path text[], replacement jsonb, create_if_missing boolean default true) returns jsonb
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_set(jsonb, text[], jsonb, boolean) is 'Set part of a jsonb';

create function pg_catalog.jsonb_strip_nulls(jsonb) returns jsonb
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_strip_nulls(jsonb) is 'remove object fields with null values from jsonb';

create function pg_catalog.jsonb_to_record(jsonb) returns record
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_to_record(jsonb) is 'get record fields from a jsonb object';

create function pg_catalog.jsonb_to_recordset(jsonb) returns setof setof record
    stable
    cost 1
    rows 100
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_to_recordset(jsonb) is 'get set of records with fields from a jsonb array of objects';

create function pg_catalog.jsonb_to_tsvector(jsonb, jsonb) returns tsvector
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_to_tsvector(jsonb, jsonb) is 'transform specified values from jsonb to tsvector';

create function pg_catalog.jsonb_to_tsvector(regconfig, jsonb, jsonb) returns tsvector
    immutable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_to_tsvector(regconfig, jsonb, jsonb) is 'transform specified values from jsonb to tsvector';

create function pg_catalog.jsonb_typeof(jsonb) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonb_typeof(jsonb) is 'get the type of a jsonb value';

create function pg_catalog.jsonpath_in(cstring) returns jsonpath
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonpath_in(cstring) is 'I/O';

create function pg_catalog.jsonpath_out(jsonpath) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonpath_out(jsonpath) is 'I/O';

create function pg_catalog.jsonpath_recv(internal) returns jsonpath
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonpath_recv(internal) is 'I/O';

create function pg_catalog.jsonpath_send(jsonpath) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.jsonpath_send(jsonpath) is 'I/O';

create function pg_catalog.justify_days(interval) returns interval
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.justify_days(interval) is 'promote groups of 30 days to numbers of months';

create function pg_catalog.justify_hours(interval) returns interval
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.justify_hours(interval) is 'promote groups of 24 hours to numbers of days';

create function pg_catalog.justify_interval(interval) returns interval
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.justify_interval(interval) is 'promote groups of 24 hours to numbers of days and promote groups of 30 days to numbers of months';

create function pg_catalog.koi8r_to_iso(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.koi8r_to_iso(integer, integer, cstring, internal, integer) is 'internal conversion function for KOI8R to ISO-8859-5';

create function pg_catalog.koi8r_to_mic(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.koi8r_to_mic(integer, integer, cstring, internal, integer) is 'internal conversion function for KOI8R to MULE_INTERNAL';

create function pg_catalog.koi8r_to_utf8(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.koi8r_to_utf8(integer, integer, cstring, internal, integer) is 'internal conversion function for KOI8R to UTF8';

create function pg_catalog.koi8r_to_win1251(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.koi8r_to_win1251(integer, integer, cstring, internal, integer) is 'internal conversion function for KOI8R to WIN1251';

create function pg_catalog.koi8r_to_win866(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.koi8r_to_win866(integer, integer, cstring, internal, integer) is 'internal conversion function for KOI8R to WIN866';

create function pg_catalog.koi8u_to_utf8(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.koi8u_to_utf8(integer, integer, cstring, internal, integer) is 'internal conversion function for KOI8U to UTF8';

create function pg_catalog.lag(anyelement) returns anyelement
    immutable
    window
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lag(anyelement) is 'fetch the preceding row value';

create function pg_catalog.lag(anyelement, integer) returns anyelement
    immutable
    window
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lag(anyelement, integer) is 'fetch the Nth preceding row value';

create function pg_catalog.lag(anyelement, integer, anyelement) returns anyelement
    immutable
    window
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lag(anyelement, integer, anyelement) is 'fetch the Nth preceding row value with default';

create function pg_catalog.language_handler_in(cstring) returns language_handler
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.language_handler_in(cstring) is 'I/O';

create function pg_catalog.language_handler_out(language_handler) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.language_handler_out(language_handler) is 'I/O';

create function pg_catalog.last_value(anyelement) returns anyelement
    immutable
    window
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.last_value(anyelement) is 'fetch the last row value';

create function pg_catalog.lastval() returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lastval() is 'current value from last used sequence';

create function pg_catalog.latin1_to_mic(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.latin1_to_mic(integer, integer, cstring, internal, integer) is 'internal conversion function for LATIN1 to MULE_INTERNAL';

create function pg_catalog.latin2_to_mic(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.latin2_to_mic(integer, integer, cstring, internal, integer) is 'internal conversion function for LATIN2 to MULE_INTERNAL';

create function pg_catalog.latin2_to_win1250(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.latin2_to_win1250(integer, integer, cstring, internal, integer) is 'internal conversion function for LATIN2 to WIN1250';

create function pg_catalog.latin3_to_mic(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.latin3_to_mic(integer, integer, cstring, internal, integer) is 'internal conversion function for LATIN3 to MULE_INTERNAL';

create function pg_catalog.latin4_to_mic(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.latin4_to_mic(integer, integer, cstring, internal, integer) is 'internal conversion function for LATIN4 to MULE_INTERNAL';

create function pg_catalog.lead(anyelement) returns anyelement
    immutable
    window
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lead(anyelement) is 'fetch the following row value';

create function pg_catalog.lead(anyelement, integer) returns anyelement
    immutable
    window
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lead(anyelement, integer) is 'fetch the Nth following row value';

create function pg_catalog.lead(anyelement, integer, anyelement) returns anyelement
    immutable
    window
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lead(anyelement, integer, anyelement) is 'fetch the Nth following row value with default';

create function pg_catalog."left"(text, integer) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."left"(text, integer) is 'extract the first n characters';

create function pg_catalog.length(bit) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.length(bit) is 'bitstring length';

create function pg_catalog.length(bytea) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.length(bytea) is 'octet length';

create function pg_catalog.length(bytea, name) returns integer
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.length(bytea, name) is 'length of string in specified encoding';

create function pg_catalog.length(char) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.length(char) is 'character length';

create function pg_catalog.length(lseg) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.length(lseg) is 'distance between endpoints';

create function pg_catalog.length(path) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.length(path) is 'sum of path segments';

create function pg_catalog.length(text) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.length(text) is 'length';

create function pg_catalog.length(tsvector) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.length(tsvector) is 'number of lexemes';

create function pg_catalog."like"(bytea, bytea) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."like"(bytea, bytea) is 'matches LIKE expression';

create function pg_catalog."like"(name, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."like"(name, text) is 'matches LIKE expression';

create function pg_catalog."like"(text, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."like"(text, text) is 'matches LIKE expression';

create function pg_catalog.like_escape(bytea, bytea) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.like_escape(bytea, bytea) is 'convert LIKE pattern to use backslash escapes';

create function pg_catalog.like_escape(text, text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.like_escape(text, text) is 'convert LIKE pattern to use backslash escapes';

create function pg_catalog.likejoinsel(internal, oid, internal, smallint, internal) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.likejoinsel(internal, oid, internal, smallint, internal) is 'join selectivity of LIKE';

create function pg_catalog.likesel(internal, oid, internal, integer) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.likesel(internal, oid, internal, integer) is 'restriction selectivity of LIKE';

create function pg_catalog.line(point, point) returns line
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.line(point, point) is 'construct line from points';

create function pg_catalog.line_distance(line, line) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.line_distance(line, line) is 'implementation of <-> operator';

create function pg_catalog.line_eq(line, line) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.line_eq(line, line) is 'implementation of = operator';

create function pg_catalog.line_horizontal(line) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.line_horizontal(line) is 'implementation of ?- operator';

create function pg_catalog.line_in(cstring) returns line
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.line_in(cstring) is 'I/O';

create function pg_catalog.line_interpt(line, line) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.line_interpt(line, line) is 'implementation of # operator';

create function pg_catalog.line_intersect(line, line) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.line_intersect(line, line) is 'implementation of ?# operator';

create function pg_catalog.line_out(line) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.line_out(line) is 'I/O';

create function pg_catalog.line_parallel(line, line) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.line_parallel(line, line) is 'implementation of ?|| operator';

create function pg_catalog.line_perp(line, line) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.line_perp(line, line) is 'implementation of ?-| operator';

create function pg_catalog.line_recv(internal) returns line
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.line_recv(internal) is 'I/O';

create function pg_catalog.line_send(line) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.line_send(line) is 'I/O';

create function pg_catalog.line_vertical(line) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.line_vertical(line) is 'implementation of ?| operator';

create function pg_catalog.ln(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ln(double precision) is 'natural logarithm';

create function pg_catalog.ln(numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ln(numeric) is 'natural logarithm';

create function pg_catalog.lo_close(integer) returns integer
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lo_close(integer) is 'large object close';

create function pg_catalog.lo_creat(integer) returns oid
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lo_creat(integer) is 'large object create';

create function pg_catalog.lo_create(oid) returns oid
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lo_create(oid) is 'large object create';

create function pg_catalog.lo_export(oid, text) returns integer
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lo_export(oid, text) is 'large object export';

create function pg_catalog.lo_from_bytea(oid, bytea) returns oid
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lo_from_bytea(oid, bytea) is 'create new large object with given content';

create function pg_catalog.lo_get(oid) returns bytea
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lo_get(oid) is 'read entire large object';

create function pg_catalog.lo_get(oid, bigint, integer) returns bytea
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lo_get(oid, bigint, integer) is 'read large object from offset for length';

create function pg_catalog.lo_import(text) returns oid
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lo_import(text) is 'large object import';

create function pg_catalog.lo_import(text, oid) returns oid
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lo_import(text, oid) is 'large object import';

create function pg_catalog.lo_lseek(integer, integer, integer) returns integer
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lo_lseek(integer, integer, integer) is 'large object seek';

create function pg_catalog.lo_lseek64(integer, bigint, integer) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lo_lseek64(integer, bigint, integer) is 'large object seek (64 bit)';

create function pg_catalog.lo_open(oid, integer) returns integer
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lo_open(oid, integer) is 'large object open';

create function pg_catalog.lo_put(oid, bigint, bytea) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lo_put(oid, bigint, bytea) is 'write data at offset';

create function pg_catalog.lo_tell(integer) returns integer
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lo_tell(integer) is 'large object position';

create function pg_catalog.lo_tell64(integer) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lo_tell64(integer) is 'large object position (64 bit)';

create function pg_catalog.lo_truncate(integer, integer) returns integer
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lo_truncate(integer, integer) is 'truncate large object';

create function pg_catalog.lo_truncate64(integer, bigint) returns integer
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lo_truncate64(integer, bigint) is 'truncate large object (64 bit)';

create function pg_catalog.lo_unlink(oid) returns integer
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lo_unlink(oid) is 'large object unlink (delete)';

create function pg_catalog.log(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.log(double precision) is 'base 10 logarithm';

create function pg_catalog.log(numeric) returns numeric
    immutable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.log(numeric) is 'base 10 logarithm';

create function pg_catalog.log(numeric, numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.log(numeric, numeric) is 'logarithm base m of n';

create function pg_catalog.log10(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.log10(double precision) is 'base 10 logarithm';

create function pg_catalog.log10(numeric) returns numeric
    immutable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.log10(numeric) is 'base 10 logarithm';

create function pg_catalog.loread(integer, integer) returns bytea
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.loread(integer, integer) is 'large object read';

create function pg_catalog.lower(anyrange) returns anyelement
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lower(anyrange) is 'lower bound of range';

create function pg_catalog.lower(text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lower(text) is 'lowercase';

create function pg_catalog.lower_inc(anyrange) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lower_inc(anyrange) is 'is the range''s lower bound inclusive?';

create function pg_catalog.lower_inf(anyrange) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lower_inf(anyrange) is 'is the range''s lower bound infinite?';

create function pg_catalog.lowrite(integer, bytea) returns integer
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lowrite(integer, bytea) is 'large object write';

create function pg_catalog.lpad(text, integer) returns text
    immutable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lpad(text, integer) is 'left-pad string to length';

create function pg_catalog.lpad(text, integer, text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lpad(text, integer, text) is 'left-pad string to length';

create function pg_catalog.lseg(box) returns lseg
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lseg(box) is 'diagonal of';

create function pg_catalog.lseg(point, point) returns lseg
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lseg(point, point) is 'convert points to line segment';

create function pg_catalog.lseg_center(lseg) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lseg_center(lseg) is 'implementation of @@ operator';

create function pg_catalog.lseg_distance(lseg, lseg) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lseg_distance(lseg, lseg) is 'implementation of <-> operator';

create function pg_catalog.lseg_eq(lseg, lseg) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lseg_eq(lseg, lseg) is 'implementation of = operator';

create function pg_catalog.lseg_ge(lseg, lseg) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lseg_ge(lseg, lseg) is 'implementation of >= operator';

create function pg_catalog.lseg_gt(lseg, lseg) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lseg_gt(lseg, lseg) is 'implementation of > operator';

create function pg_catalog.lseg_horizontal(lseg) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lseg_horizontal(lseg) is 'implementation of ?- operator';

create function pg_catalog.lseg_in(cstring) returns lseg
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lseg_in(cstring) is 'I/O';

create function pg_catalog.lseg_interpt(lseg, lseg) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lseg_interpt(lseg, lseg) is 'implementation of # operator';

create function pg_catalog.lseg_intersect(lseg, lseg) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lseg_intersect(lseg, lseg) is 'implementation of ?# operator';

create function pg_catalog.lseg_le(lseg, lseg) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lseg_le(lseg, lseg) is 'implementation of <= operator';

create function pg_catalog.lseg_length(lseg) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lseg_length(lseg) is 'implementation of @-@ operator';

create function pg_catalog.lseg_lt(lseg, lseg) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lseg_lt(lseg, lseg) is 'implementation of < operator';

create function pg_catalog.lseg_ne(lseg, lseg) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lseg_ne(lseg, lseg) is 'implementation of <> operator';

create function pg_catalog.lseg_out(lseg) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lseg_out(lseg) is 'I/O';

create function pg_catalog.lseg_parallel(lseg, lseg) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lseg_parallel(lseg, lseg) is 'implementation of ?|| operator';

create function pg_catalog.lseg_perp(lseg, lseg) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lseg_perp(lseg, lseg) is 'implementation of ?-| operator';

create function pg_catalog.lseg_recv(internal) returns lseg
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lseg_recv(internal) is 'I/O';

create function pg_catalog.lseg_send(lseg) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lseg_send(lseg) is 'I/O';

create function pg_catalog.lseg_vertical(lseg) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.lseg_vertical(lseg) is 'implementation of ?| operator';

create function pg_catalog.ltrim(text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ltrim(text) is 'trim spaces from left end of string';

create function pg_catalog.ltrim(text, text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ltrim(text, text) is 'trim selected characters from left end of string';

create function pg_catalog.macaddr(macaddr8) returns macaddr
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr(macaddr8) is 'convert macaddr8 to macaddr';

create function pg_catalog.macaddr8(macaddr) returns macaddr8
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr8(macaddr) is 'convert macaddr to macaddr8';

create function pg_catalog.macaddr8_and(macaddr8, macaddr8) returns macaddr8
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr8_and(macaddr8, macaddr8) is 'implementation of & operator';

create function pg_catalog.macaddr8_cmp(macaddr8, macaddr8) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr8_cmp(macaddr8, macaddr8) is 'less-equal-greater';

create function pg_catalog.macaddr8_eq(macaddr8, macaddr8) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr8_eq(macaddr8, macaddr8) is 'implementation of = operator';

create function pg_catalog.macaddr8_ge(macaddr8, macaddr8) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr8_ge(macaddr8, macaddr8) is 'implementation of >= operator';

create function pg_catalog.macaddr8_gt(macaddr8, macaddr8) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr8_gt(macaddr8, macaddr8) is 'implementation of > operator';

create function pg_catalog.macaddr8_in(cstring) returns macaddr8
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr8_in(cstring) is 'I/O';

create function pg_catalog.macaddr8_le(macaddr8, macaddr8) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr8_le(macaddr8, macaddr8) is 'implementation of <= operator';

create function pg_catalog.macaddr8_lt(macaddr8, macaddr8) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr8_lt(macaddr8, macaddr8) is 'implementation of < operator';

create function pg_catalog.macaddr8_ne(macaddr8, macaddr8) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr8_ne(macaddr8, macaddr8) is 'implementation of <> operator';

create function pg_catalog.macaddr8_not(macaddr8) returns macaddr8
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr8_not(macaddr8) is 'implementation of ~ operator';

create function pg_catalog.macaddr8_or(macaddr8, macaddr8) returns macaddr8
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr8_or(macaddr8, macaddr8) is 'implementation of | operator';

create function pg_catalog.macaddr8_out(macaddr8) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr8_out(macaddr8) is 'I/O';

create function pg_catalog.macaddr8_recv(internal) returns macaddr8
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr8_recv(internal) is 'I/O';

create function pg_catalog.macaddr8_send(macaddr8) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr8_send(macaddr8) is 'I/O';

create function pg_catalog.macaddr8_set7bit(macaddr8) returns macaddr8
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr8_set7bit(macaddr8) is 'set 7th bit in macaddr8';

create function pg_catalog.macaddr_and(macaddr, macaddr) returns macaddr
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr_and(macaddr, macaddr) is 'implementation of & operator';

create function pg_catalog.macaddr_cmp(macaddr, macaddr) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr_cmp(macaddr, macaddr) is 'less-equal-greater';

create function pg_catalog.macaddr_eq(macaddr, macaddr) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr_eq(macaddr, macaddr) is 'implementation of = operator';

create function pg_catalog.macaddr_ge(macaddr, macaddr) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr_ge(macaddr, macaddr) is 'implementation of >= operator';

create function pg_catalog.macaddr_gt(macaddr, macaddr) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr_gt(macaddr, macaddr) is 'implementation of > operator';

create function pg_catalog.macaddr_in(cstring) returns macaddr
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr_in(cstring) is 'I/O';

create function pg_catalog.macaddr_le(macaddr, macaddr) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr_le(macaddr, macaddr) is 'implementation of <= operator';

create function pg_catalog.macaddr_lt(macaddr, macaddr) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr_lt(macaddr, macaddr) is 'implementation of < operator';

create function pg_catalog.macaddr_ne(macaddr, macaddr) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr_ne(macaddr, macaddr) is 'implementation of <> operator';

create function pg_catalog.macaddr_not(macaddr) returns macaddr
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr_not(macaddr) is 'implementation of ~ operator';

create function pg_catalog.macaddr_or(macaddr, macaddr) returns macaddr
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr_or(macaddr, macaddr) is 'implementation of | operator';

create function pg_catalog.macaddr_out(macaddr) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr_out(macaddr) is 'I/O';

create function pg_catalog.macaddr_recv(internal) returns macaddr
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr_recv(internal) is 'I/O';

create function pg_catalog.macaddr_send(macaddr) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr_send(macaddr) is 'I/O';

create function pg_catalog.macaddr_sortsupport(internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.macaddr_sortsupport(internal) is 'sort support';

create function pg_catalog.make_date(year integer, month integer, day integer) returns date
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.make_date(integer, integer, integer) is 'construct date';

create function pg_catalog.make_interval(years integer default 0, months integer default 0, weeks integer default 0, days integer default 0, hours integer default 0, mins integer default 0, secs double precision default 0.0) returns interval
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.make_interval(integer, integer, integer, integer, integer, integer, double precision) is 'construct interval';

create function pg_catalog.make_time(hour integer, min integer, sec double precision) returns time
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.make_time(integer, integer, double precision) is 'construct time';

create function pg_catalog.make_timestamp(year integer, month integer, mday integer, hour integer, min integer, sec double precision) returns timestamp
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.make_timestamp(integer, integer, integer, integer, integer, double precision) is 'construct timestamp';

create function pg_catalog.make_timestamptz(year integer, month integer, mday integer, hour integer, min integer, sec double precision) returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.make_timestamptz(integer, integer, integer, integer, integer, double precision) is 'construct timestamp with time zone';

create function pg_catalog.make_timestamptz(year integer, month integer, mday integer, hour integer, min integer, sec double precision, timezone text) returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.make_timestamptz(integer, integer, integer, integer, integer, double precision, text) is 'construct timestamp with time zone';

create function pg_catalog.makeaclitem(oid, oid, text, boolean) returns aclitem
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.makeaclitem(oid, oid, text, boolean) is 'make ACL item';

create function pg_catalog.masklen(inet) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.masklen(inet) is 'netmask length';

create function pg_catalog.md5(bytea) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.md5(bytea) is 'MD5 hash';

create function pg_catalog.md5(text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.md5(text) is 'MD5 hash';

create function pg_catalog.mic_to_ascii(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.mic_to_ascii(integer, integer, cstring, internal, integer) is 'internal conversion function for MULE_INTERNAL to SQL_ASCII';

create function pg_catalog.mic_to_big5(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.mic_to_big5(integer, integer, cstring, internal, integer) is 'internal conversion function for MULE_INTERNAL to BIG5';

create function pg_catalog.mic_to_euc_cn(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.mic_to_euc_cn(integer, integer, cstring, internal, integer) is 'internal conversion function for MULE_INTERNAL to EUC_CN';

create function pg_catalog.mic_to_euc_jp(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.mic_to_euc_jp(integer, integer, cstring, internal, integer) is 'internal conversion function for MULE_INTERNAL to EUC_JP';

create function pg_catalog.mic_to_euc_kr(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.mic_to_euc_kr(integer, integer, cstring, internal, integer) is 'internal conversion function for MULE_INTERNAL to EUC_KR';

create function pg_catalog.mic_to_euc_tw(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.mic_to_euc_tw(integer, integer, cstring, internal, integer) is 'internal conversion function for MULE_INTERNAL to EUC_TW';

create function pg_catalog.mic_to_iso(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.mic_to_iso(integer, integer, cstring, internal, integer) is 'internal conversion function for MULE_INTERNAL to ISO-8859-5';

create function pg_catalog.mic_to_koi8r(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.mic_to_koi8r(integer, integer, cstring, internal, integer) is 'internal conversion function for MULE_INTERNAL to KOI8R';

create function pg_catalog.mic_to_latin1(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.mic_to_latin1(integer, integer, cstring, internal, integer) is 'internal conversion function for MULE_INTERNAL to LATIN1';

create function pg_catalog.mic_to_latin2(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.mic_to_latin2(integer, integer, cstring, internal, integer) is 'internal conversion function for MULE_INTERNAL to LATIN2';

create function pg_catalog.mic_to_latin3(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.mic_to_latin3(integer, integer, cstring, internal, integer) is 'internal conversion function for MULE_INTERNAL to LATIN3';

create function pg_catalog.mic_to_latin4(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.mic_to_latin4(integer, integer, cstring, internal, integer) is 'internal conversion function for MULE_INTERNAL to LATIN4';

create function pg_catalog.mic_to_sjis(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.mic_to_sjis(integer, integer, cstring, internal, integer) is 'internal conversion function for MULE_INTERNAL to SJIS';

create function pg_catalog.mic_to_win1250(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.mic_to_win1250(integer, integer, cstring, internal, integer) is 'internal conversion function for MULE_INTERNAL to WIN1250';

create function pg_catalog.mic_to_win1251(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.mic_to_win1251(integer, integer, cstring, internal, integer) is 'internal conversion function for MULE_INTERNAL to WIN1251';

create function pg_catalog.mic_to_win866(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.mic_to_win866(integer, integer, cstring, internal, integer) is 'internal conversion function for MULE_INTERNAL to WIN866';

create function pg_catalog.mod(bigint, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.mod(bigint, bigint) is 'modulus';

create function pg_catalog.mod(integer, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.mod(integer, integer) is 'modulus';

create function pg_catalog.mod(numeric, numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.mod(numeric, numeric) is 'modulus';

create function pg_catalog.mod(smallint, smallint) returns smallint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.mod(smallint, smallint) is 'modulus';

create function pg_catalog.mode_final(internal, anyelement) returns anyelement
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.mode_final(internal, anyelement) is 'aggregate final function';

create function pg_catalog.money(bigint) returns money
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.money(bigint) is 'convert int8 to money';

create function pg_catalog.money(integer) returns money
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.money(integer) is 'convert int4 to money';

create function pg_catalog.money(numeric) returns money
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.money(numeric) is 'convert numeric to money';

create function pg_catalog.mul_d_interval(double precision, interval) returns interval
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.mul_d_interval(double precision, interval) is 'implementation of * operator';

create function pg_catalog.mxid_age(xid) returns integer
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.mxid_age(xid) is 'age of a multi-transaction ID, in multi-transactions before current multi-transaction';

create function pg_catalog.name(char) returns name
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.name(char) is 'convert char(n) to name';

create function pg_catalog.name(text) returns name
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.name(text) is 'convert text to name';

create function pg_catalog.name(varchar) returns name
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.name(varchar) is 'convert varchar to name';

create function pg_catalog.nameconcatoid(name, oid) returns name
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.nameconcatoid(name, oid) is 'concatenate name and oid';

create function pg_catalog.nameeq(name, name) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.nameeq(name, name) is 'implementation of = operator';

create function pg_catalog.nameeqtext(name, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.nameeqtext(name, text) is 'implementation of = operator';

create function pg_catalog.namege(name, name) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.namege(name, name) is 'implementation of >= operator';

create function pg_catalog.namegetext(name, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.namegetext(name, text) is 'implementation of >= operator';

create function pg_catalog.namegt(name, name) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.namegt(name, name) is 'implementation of > operator';

create function pg_catalog.namegttext(name, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.namegttext(name, text) is 'implementation of > operator';

create function pg_catalog.nameiclike(name, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.nameiclike(name, text) is 'implementation of ~~* operator';

create function pg_catalog.nameicnlike(name, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.nameicnlike(name, text) is 'implementation of !~~* operator';

create function pg_catalog.nameicregexeq(name, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.nameicregexeq(name, text) is 'implementation of ~* operator';

create function pg_catalog.nameicregexne(name, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.nameicregexne(name, text) is 'implementation of !~* operator';

create function pg_catalog.namein(cstring) returns name
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.namein(cstring) is 'I/O';

create function pg_catalog.namele(name, name) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.namele(name, name) is 'implementation of <= operator';

create function pg_catalog.nameletext(name, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.nameletext(name, text) is 'implementation of <= operator';

create function pg_catalog.namelike(name, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.namelike(name, text) is 'implementation of ~~ operator';

create function pg_catalog.namelt(name, name) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.namelt(name, name) is 'implementation of < operator';

create function pg_catalog.namelttext(name, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.namelttext(name, text) is 'implementation of < operator';

create function pg_catalog.namene(name, name) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.namene(name, name) is 'implementation of <> operator';

create function pg_catalog.namenetext(name, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.namenetext(name, text) is 'implementation of <> operator';

create function pg_catalog.namenlike(name, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.namenlike(name, text) is 'implementation of !~~ operator';

create function pg_catalog.nameout(name) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.nameout(name) is 'I/O';

create function pg_catalog.namerecv(internal) returns name
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.namerecv(internal) is 'I/O';

create function pg_catalog.nameregexeq(name, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.nameregexeq(name, text) is 'implementation of ~ operator';

create function pg_catalog.nameregexne(name, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.nameregexne(name, text) is 'implementation of !~ operator';

create function pg_catalog.namesend(name) returns bytea
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.namesend(name) is 'I/O';

create function pg_catalog.neqjoinsel(internal, oid, internal, smallint, internal) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.neqjoinsel(internal, oid, internal, smallint, internal) is 'join selectivity of <> and related operators';

create function pg_catalog.neqsel(internal, oid, internal, integer) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.neqsel(internal, oid, internal, integer) is 'restriction selectivity of <> and related operators';

create function pg_catalog.netmask(inet) returns inet
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.netmask(inet) is 'netmask of address';

create function pg_catalog.network(inet) returns cidr
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.network(inet) is 'network part of address';

create function pg_catalog.network_cmp(inet, inet) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.network_cmp(inet, inet) is 'less-equal-greater';

create function pg_catalog.network_eq(inet, inet) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.network_eq(inet, inet) is 'implementation of = operator';

create function pg_catalog.network_ge(inet, inet) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.network_ge(inet, inet) is 'implementation of >= operator';

create function pg_catalog.network_gt(inet, inet) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.network_gt(inet, inet) is 'implementation of > operator';

create function pg_catalog.network_larger(inet, inet) returns inet
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.network_larger(inet, inet) is 'larger of two';

create function pg_catalog.network_le(inet, inet) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.network_le(inet, inet) is 'implementation of <= operator';

create function pg_catalog.network_lt(inet, inet) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.network_lt(inet, inet) is 'implementation of < operator';

create function pg_catalog.network_ne(inet, inet) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.network_ne(inet, inet) is 'implementation of <> operator';

create function pg_catalog.network_overlap(inet, inet) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.network_overlap(inet, inet) is 'implementation of && operator';

create function pg_catalog.network_smaller(inet, inet) returns inet
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.network_smaller(inet, inet) is 'smaller of two';

create function pg_catalog.network_sub(inet, inet) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.network_sub(inet, inet) is 'implementation of << operator';

create function pg_catalog.network_subeq(inet, inet) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.network_subeq(inet, inet) is 'implementation of <<= operator';

create function pg_catalog.network_subset_support(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.network_subset_support(internal) is 'planner support for network_sub/superset';

create function pg_catalog.network_sup(inet, inet) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.network_sup(inet, inet) is 'implementation of >> operator';

create function pg_catalog.network_supeq(inet, inet) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.network_supeq(inet, inet) is 'implementation of >>= operator';

create function pg_catalog.networkjoinsel(internal, oid, internal, smallint, internal) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.networkjoinsel(internal, oid, internal, smallint, internal) is 'join selectivity for network operators';

create function pg_catalog.networksel(internal, oid, internal, integer) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.networksel(internal, oid, internal, integer) is 'restriction selectivity for network operators';

create function pg_catalog.nextval(regclass) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.nextval(regclass) is 'sequence next value';

create function pg_catalog.nlikejoinsel(internal, oid, internal, smallint, internal) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.nlikejoinsel(internal, oid, internal, smallint, internal) is 'join selectivity of NOT LIKE';

create function pg_catalog.nlikesel(internal, oid, internal, integer) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.nlikesel(internal, oid, internal, integer) is 'restriction selectivity of NOT LIKE';

create function pg_catalog.notlike(bytea, bytea) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.notlike(bytea, bytea) is 'does not match LIKE expression';

create function pg_catalog.notlike(name, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.notlike(name, text) is 'does not match LIKE expression';

create function pg_catalog.notlike(text, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.notlike(text, text) is 'does not match LIKE expression';

create function pg_catalog.now() returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.now() is 'current transaction time';

create function pg_catalog.npoints(path) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.npoints(path) is 'number of points';

create function pg_catalog.npoints(polygon) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.npoints(polygon) is 'number of points';

create function pg_catalog.nth_value(anyelement, integer) returns anyelement
    immutable
    window
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.nth_value(anyelement, integer) is 'fetch the Nth row value';

create function pg_catalog.ntile(integer) returns integer
    immutable
    window
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ntile(integer) is 'split rows into N groups';

create function pg_catalog.num_nonnulls("any") returns integer
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.num_nonnulls("any") is 'count the number of non-NULL arguments';

create function pg_catalog.num_nulls("any") returns integer
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.num_nulls("any") is 'count the number of NULL arguments';

create function pg_catalog.numeric(bigint) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric(bigint) is 'convert int8 to numeric';

create function pg_catalog.numeric(double precision) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric(double precision) is 'convert float8 to numeric';

create function pg_catalog.numeric(integer) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric(integer) is 'convert int4 to numeric';

create function pg_catalog.numeric(jsonb) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric(jsonb) is 'convert jsonb to numeric';

create function pg_catalog.numeric(money) returns numeric
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric(money) is 'convert money to numeric';

create function pg_catalog.numeric(numeric, integer) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric(numeric, integer) is 'adjust numeric to typmod precision/scale';

create function pg_catalog.numeric(real) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric(real) is 'convert float4 to numeric';

create function pg_catalog.numeric(smallint) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric(smallint) is 'convert int2 to numeric';

create function pg_catalog.numeric_abs(numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_abs(numeric) is 'implementation of @ operator';

create function pg_catalog.numeric_accum(internal, numeric) returns internal
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_accum(internal, numeric) is 'aggregate transition function';

create function pg_catalog.numeric_accum_inv(internal, numeric) returns internal
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_accum_inv(internal, numeric) is 'aggregate transition function';

create function pg_catalog.numeric_add(numeric, numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_add(numeric, numeric) is 'implementation of + operator';

create function pg_catalog.numeric_avg(internal) returns numeric
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_avg(internal) is 'aggregate final function';

create function pg_catalog.numeric_avg_accum(internal, numeric) returns internal
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_avg_accum(internal, numeric) is 'aggregate transition function';

create function pg_catalog.numeric_avg_combine(internal, internal) returns internal
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_avg_combine(internal, internal) is 'aggregate combine function';

create function pg_catalog.numeric_avg_deserialize(bytea, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_avg_deserialize(bytea, internal) is 'aggregate deserial function';

create function pg_catalog.numeric_avg_serialize(internal) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_avg_serialize(internal) is 'aggregate serial function';

create function pg_catalog.numeric_cmp(numeric, numeric) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_cmp(numeric, numeric) is 'less-equal-greater';

create function pg_catalog.numeric_combine(internal, internal) returns internal
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_combine(internal, internal) is 'aggregate combine function';

create function pg_catalog.numeric_deserialize(bytea, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_deserialize(bytea, internal) is 'aggregate deserial function';

create function pg_catalog.numeric_div(numeric, numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_div(numeric, numeric) is 'implementation of / operator';

create function pg_catalog.numeric_div_trunc(numeric, numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_div_trunc(numeric, numeric) is 'trunc(x/y)';

create function pg_catalog.numeric_eq(numeric, numeric) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_eq(numeric, numeric) is 'implementation of = operator';

create function pg_catalog.numeric_exp(numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_exp(numeric) is 'natural exponential (e^x)';

create function pg_catalog.numeric_fac(bigint) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_fac(bigint) is 'implementation of ! operator';

create function pg_catalog.numeric_ge(numeric, numeric) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_ge(numeric, numeric) is 'implementation of >= operator';

create function pg_catalog.numeric_gt(numeric, numeric) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_gt(numeric, numeric) is 'implementation of > operator';

create function pg_catalog.numeric_in(cstring, oid, integer) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_in(cstring, oid, integer) is 'I/O';

create function pg_catalog.numeric_inc(numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_inc(numeric) is 'increment by one';

create function pg_catalog.numeric_larger(numeric, numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_larger(numeric, numeric) is 'larger of two';

create function pg_catalog.numeric_le(numeric, numeric) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_le(numeric, numeric) is 'implementation of <= operator';

create function pg_catalog.numeric_ln(numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_ln(numeric) is 'natural logarithm';

create function pg_catalog.numeric_log(numeric, numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_log(numeric, numeric) is 'logarithm base m of n';

create function pg_catalog.numeric_lt(numeric, numeric) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_lt(numeric, numeric) is 'implementation of < operator';

create function pg_catalog.numeric_mod(numeric, numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_mod(numeric, numeric) is 'implementation of % operator';

create function pg_catalog.numeric_mul(numeric, numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_mul(numeric, numeric) is 'implementation of * operator';

create function pg_catalog.numeric_ne(numeric, numeric) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_ne(numeric, numeric) is 'implementation of <> operator';

create function pg_catalog.numeric_out(numeric) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_out(numeric) is 'I/O';

create function pg_catalog.numeric_poly_avg(internal) returns numeric
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_poly_avg(internal) is 'aggregate final function';

create function pg_catalog.numeric_poly_combine(internal, internal) returns internal
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_poly_combine(internal, internal) is 'aggregate combine function';

create function pg_catalog.numeric_poly_deserialize(bytea, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_poly_deserialize(bytea, internal) is 'aggregate deserial function';

create function pg_catalog.numeric_poly_serialize(internal) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_poly_serialize(internal) is 'aggregate serial function';

create function pg_catalog.numeric_poly_stddev_pop(internal) returns numeric
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_poly_stddev_pop(internal) is 'aggregate final function';

create function pg_catalog.numeric_poly_stddev_samp(internal) returns numeric
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_poly_stddev_samp(internal) is 'aggregate final function';

create function pg_catalog.numeric_poly_sum(internal) returns numeric
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_poly_sum(internal) is 'aggregate final function';

create function pg_catalog.numeric_poly_var_pop(internal) returns numeric
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_poly_var_pop(internal) is 'aggregate final function';

create function pg_catalog.numeric_poly_var_samp(internal) returns numeric
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_poly_var_samp(internal) is 'aggregate final function';

create function pg_catalog.numeric_power(numeric, numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_power(numeric, numeric) is 'implementation of ^ operator';

create function pg_catalog.numeric_recv(internal, oid, integer) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_recv(internal, oid, integer) is 'I/O';

create function pg_catalog.numeric_send(numeric) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_send(numeric) is 'I/O';

create function pg_catalog.numeric_serialize(internal) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_serialize(internal) is 'aggregate serial function';

create function pg_catalog.numeric_smaller(numeric, numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_smaller(numeric, numeric) is 'smaller of two';

create function pg_catalog.numeric_sortsupport(internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_sortsupport(internal) is 'sort support';

create function pg_catalog.numeric_sqrt(numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_sqrt(numeric) is 'square root';

create function pg_catalog.numeric_stddev_pop(internal) returns numeric
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_stddev_pop(internal) is 'aggregate final function';

create function pg_catalog.numeric_stddev_samp(internal) returns numeric
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_stddev_samp(internal) is 'aggregate final function';

create function pg_catalog.numeric_sub(numeric, numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_sub(numeric, numeric) is 'implementation of - operator';

create function pg_catalog.numeric_sum(internal) returns numeric
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_sum(internal) is 'aggregate final function';

create function pg_catalog.numeric_support(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_support(internal) is 'planner support for numeric length coercion';

create function pg_catalog.numeric_uminus(numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_uminus(numeric) is 'implementation of - operator';

create function pg_catalog.numeric_uplus(numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_uplus(numeric) is 'implementation of + operator';

create function pg_catalog.numeric_var_pop(internal) returns numeric
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_var_pop(internal) is 'aggregate final function';

create function pg_catalog.numeric_var_samp(internal) returns numeric
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numeric_var_samp(internal) is 'aggregate final function';

create function pg_catalog.numerictypmodin(cstring[]) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numerictypmodin(cstring[]) is 'I/O typmod';

create function pg_catalog.numerictypmodout(integer) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numerictypmodout(integer) is 'I/O typmod';

create function pg_catalog.numnode(tsquery) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numnode(tsquery) is 'number of nodes';

create function pg_catalog.numrange(numeric, numeric) returns numrange
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numrange(numeric, numeric) is 'numrange constructor';

create function pg_catalog.numrange(numeric, numeric, text) returns numrange
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numrange(numeric, numeric, text) is 'numrange constructor';

create function pg_catalog.numrange_subdiff(numeric, numeric) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.numrange_subdiff(numeric, numeric) is 'float8 difference of two numeric values';

create function pg_catalog.obj_description(oid) returns text
    stable
    strict
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.obj_description(oid) is 'deprecated, use two-argument form instead';

create function pg_catalog.obj_description(oid, name) returns text
    stable
    strict
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.obj_description(oid, name) is 'get description for object id and catalog name';

create function pg_catalog.octet_length(bit) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.octet_length(bit) is 'octet length';

create function pg_catalog.octet_length(bytea) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.octet_length(bytea) is 'octet length';

create function pg_catalog.octet_length(char) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.octet_length(char) is 'octet length';

create function pg_catalog.octet_length(text) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.octet_length(text) is 'octet length';

create function pg_catalog.oid(bigint) returns oid
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.oid(bigint) is 'convert int8 to oid';

create function pg_catalog.oideq(oid, oid) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.oideq(oid, oid) is 'implementation of = operator';

create function pg_catalog.oidge(oid, oid) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.oidge(oid, oid) is 'implementation of >= operator';

create function pg_catalog.oidgt(oid, oid) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.oidgt(oid, oid) is 'implementation of > operator';

create function pg_catalog.oidin(cstring) returns oid
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.oidin(cstring) is 'I/O';

create function pg_catalog.oidlarger(oid, oid) returns oid
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.oidlarger(oid, oid) is 'larger of two';

create function pg_catalog.oidle(oid, oid) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.oidle(oid, oid) is 'implementation of <= operator';

create function pg_catalog.oidlt(oid, oid) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.oidlt(oid, oid) is 'implementation of < operator';

create function pg_catalog.oidne(oid, oid) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.oidne(oid, oid) is 'implementation of <> operator';

create function pg_catalog.oidout(oid) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.oidout(oid) is 'I/O';

create function pg_catalog.oidrecv(internal) returns oid
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.oidrecv(internal) is 'I/O';

create function pg_catalog.oidsend(oid) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.oidsend(oid) is 'I/O';

create function pg_catalog.oidsmaller(oid, oid) returns oid
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.oidsmaller(oid, oid) is 'smaller of two';

create function pg_catalog.oidvectoreq(oidvector, oidvector) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.oidvectoreq(oidvector, oidvector) is 'implementation of = operator';

create function pg_catalog.oidvectorge(oidvector, oidvector) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.oidvectorge(oidvector, oidvector) is 'implementation of >= operator';

create function pg_catalog.oidvectorgt(oidvector, oidvector) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.oidvectorgt(oidvector, oidvector) is 'implementation of > operator';

create function pg_catalog.oidvectorin(cstring) returns oidvector
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.oidvectorin(cstring) is 'I/O';

create function pg_catalog.oidvectorle(oidvector, oidvector) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.oidvectorle(oidvector, oidvector) is 'implementation of <= operator';

create function pg_catalog.oidvectorlt(oidvector, oidvector) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.oidvectorlt(oidvector, oidvector) is 'implementation of < operator';

create function pg_catalog.oidvectorne(oidvector, oidvector) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.oidvectorne(oidvector, oidvector) is 'implementation of <> operator';

create function pg_catalog.oidvectorout(oidvector) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.oidvectorout(oidvector) is 'I/O';

create function pg_catalog.oidvectorrecv(internal) returns oidvector
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.oidvectorrecv(internal) is 'I/O';

create function pg_catalog.oidvectorsend(oidvector) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.oidvectorsend(oidvector) is 'I/O';

create function pg_catalog.oidvectortypes(oidvector) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.oidvectortypes(oidvector) is 'print type names of oidvector field';

create function pg_catalog.on_pb(point, box) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.on_pb(point, box) is 'implementation of <@ operator';

create function pg_catalog.on_pl(point, line) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.on_pl(point, line) is 'implementation of <@ operator';

create function pg_catalog.on_ppath(point, path) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.on_ppath(point, path) is 'implementation of <@ operator';

create function pg_catalog.on_ps(point, lseg) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.on_ps(point, lseg) is 'implementation of <@ operator';

create function pg_catalog.on_sb(lseg, box) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.on_sb(lseg, box) is 'implementation of <@ operator';

create function pg_catalog.on_sl(lseg, line) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.on_sl(lseg, line) is 'implementation of <@ operator';

create function pg_catalog.opaque_in(cstring) returns opaque
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.opaque_in(cstring) is 'I/O';

create function pg_catalog.opaque_out(opaque) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.opaque_out(opaque) is 'I/O';

create function pg_catalog.ordered_set_transition(internal, "any") returns internal
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ordered_set_transition(internal, "any") is 'aggregate transition function';

create function pg_catalog.ordered_set_transition_multi(internal, "any") returns internal
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ordered_set_transition_multi(internal, "any") is 'aggregate transition function';

create function pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone) returns boolean
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone) is 'intervals overlap?';

create function pg_catalog."overlaps"(time without time zone, interval, time without time zone, interval) returns boolean
    immutable
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."overlaps"(time, interval, time, interval) is 'intervals overlap?';

create function pg_catalog."overlaps"(time without time zone, interval, time without time zone, time without time zone) returns boolean
    immutable
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."overlaps"(time, interval, time, time) is 'intervals overlap?';

create function pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, interval) returns boolean
    immutable
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."overlaps"(time, time, time, interval) is 'intervals overlap?';

create function pg_catalog."overlaps"(time, time, time, time) returns boolean
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."overlaps"(time, time, time, time) is 'intervals overlap?';

create function pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, interval) returns boolean
    stable
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, interval) is 'intervals overlap?';

create function pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, timestamp with time zone) returns boolean
    stable
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, timestamp with time zone) is 'intervals overlap?';

create function pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, interval) returns boolean
    stable
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, interval) is 'intervals overlap?';

create function pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, timestamp with time zone) returns boolean
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, timestamp with time zone) is 'intervals overlap?';

create function pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, interval) returns boolean
    immutable
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."overlaps"(timestamp, interval, timestamp, interval) is 'intervals overlap?';

create function pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, timestamp without time zone) returns boolean
    immutable
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."overlaps"(timestamp, interval, timestamp, timestamp) is 'intervals overlap?';

create function pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, interval) returns boolean
    immutable
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."overlaps"(timestamp, timestamp, timestamp, interval) is 'intervals overlap?';

create function pg_catalog."overlaps"(timestamp, timestamp, timestamp, timestamp) returns boolean
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."overlaps"(timestamp, timestamp, timestamp, timestamp) is 'intervals overlap?';

create function pg_catalog.overlay(bit, bit, integer) returns bit
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.overlay(bit, bit, integer) is 'substitute portion of bitstring';

create function pg_catalog.overlay(bit, bit, integer, integer) returns bit
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.overlay(bit, bit, integer, integer) is 'substitute portion of bitstring';

create function pg_catalog.overlay(bytea, bytea, integer) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.overlay(bytea, bytea, integer) is 'substitute portion of string';

create function pg_catalog.overlay(bytea, bytea, integer, integer) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.overlay(bytea, bytea, integer, integer) is 'substitute portion of string';

create function pg_catalog.overlay(text, text, integer) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.overlay(text, text, integer) is 'substitute portion of string';

create function pg_catalog.overlay(text, text, integer, integer) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.overlay(text, text, integer, integer) is 'substitute portion of string';

create function pg_catalog.parse_ident(str text, strict boolean default true) returns text[]
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.parse_ident(text, boolean) is 'parse qualified identifier to array of identifiers';

create function pg_catalog.path(polygon) returns path
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.path(polygon) is 'convert polygon to path';

create function pg_catalog.path_add(path, path) returns path
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.path_add(path, path) is 'implementation of + operator';

create function pg_catalog.path_add_pt(path, point) returns path
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.path_add_pt(path, point) is 'implementation of + operator';

create function pg_catalog.path_center(path) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.path_center(path) is 'implementation of @@ operator';

create function pg_catalog.path_contain_pt(path, point) returns boolean
    immutable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.path_contain_pt(path, point) is 'implementation of @> operator';

create function pg_catalog.path_distance(path, path) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.path_distance(path, path) is 'implementation of <-> operator';

create function pg_catalog.path_div_pt(path, point) returns path
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.path_div_pt(path, point) is 'implementation of / operator';

create function pg_catalog.path_in(cstring) returns path
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.path_in(cstring) is 'I/O';

create function pg_catalog.path_inter(path, path) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.path_inter(path, path) is 'implementation of ?# operator';

create function pg_catalog.path_length(path) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.path_length(path) is 'implementation of @-@ operator';

create function pg_catalog.path_mul_pt(path, point) returns path
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.path_mul_pt(path, point) is 'implementation of * operator';

create function pg_catalog.path_n_eq(path, path) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.path_n_eq(path, path) is 'implementation of = operator';

create function pg_catalog.path_n_ge(path, path) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.path_n_ge(path, path) is 'implementation of >= operator';

create function pg_catalog.path_n_gt(path, path) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.path_n_gt(path, path) is 'implementation of > operator';

create function pg_catalog.path_n_le(path, path) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.path_n_le(path, path) is 'implementation of <= operator';

create function pg_catalog.path_n_lt(path, path) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.path_n_lt(path, path) is 'implementation of < operator';

create function pg_catalog.path_npoints(path) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.path_npoints(path) is 'implementation of # operator';

create function pg_catalog.path_out(path) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.path_out(path) is 'I/O';

create function pg_catalog.path_recv(internal) returns path
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.path_recv(internal) is 'I/O';

create function pg_catalog.path_send(path) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.path_send(path) is 'I/O';

create function pg_catalog.path_sub_pt(path, point) returns path
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.path_sub_pt(path, point) is 'implementation of - operator';

create function pg_catalog.pclose(path) returns path
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pclose(path) is 'close path';

create function pg_catalog.percent_rank() returns double precision
    immutable
    window
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.percent_rank() is 'fractional rank within partition';

create function pg_catalog.percent_rank_final(internal, "any") returns double precision
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.percent_rank_final(internal, "any") is 'aggregate final function';

create function pg_catalog.percentile_cont_float8_final(internal, double precision) returns double precision
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.percentile_cont_float8_final(internal, double precision) is 'aggregate final function';

create function pg_catalog.percentile_cont_float8_multi_final(internal, double precision[]) returns double precision[]
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.percentile_cont_float8_multi_final(internal, double precision[]) is 'aggregate final function';

create function pg_catalog.percentile_cont_interval_final(internal, double precision) returns interval
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.percentile_cont_interval_final(internal, double precision) is 'aggregate final function';

create function pg_catalog.percentile_cont_interval_multi_final(internal, double precision[]) returns interval[]
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.percentile_cont_interval_multi_final(internal, double precision[]) is 'aggregate final function';

create function pg_catalog.percentile_disc_final(internal, double precision, anyelement) returns anyelement
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.percentile_disc_final(internal, double precision, anyelement) is 'aggregate final function';

create function pg_catalog.percentile_disc_multi_final(internal, double precision[], anyelement) returns anyarray
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.percentile_disc_multi_final(internal, double precision[], anyelement) is 'aggregate final function';

create function pg_catalog.pg_advisory_lock(bigint) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_advisory_lock(bigint) is 'obtain exclusive advisory lock';

create function pg_catalog.pg_advisory_lock(integer, integer) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_advisory_lock(integer, integer) is 'obtain exclusive advisory lock';

create function pg_catalog.pg_advisory_lock_shared(bigint) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_advisory_lock_shared(bigint) is 'obtain shared advisory lock';

create function pg_catalog.pg_advisory_lock_shared(integer, integer) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_advisory_lock_shared(integer, integer) is 'obtain shared advisory lock';

create function pg_catalog.pg_advisory_unlock(bigint) returns boolean
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_advisory_unlock(bigint) is 'release exclusive advisory lock';

create function pg_catalog.pg_advisory_unlock(integer, integer) returns boolean
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_advisory_unlock(integer, integer) is 'release exclusive advisory lock';

create function pg_catalog.pg_advisory_unlock_all() returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_advisory_unlock_all() is 'release all advisory locks';

create function pg_catalog.pg_advisory_unlock_shared(bigint) returns boolean
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_advisory_unlock_shared(bigint) is 'release shared advisory lock';

create function pg_catalog.pg_advisory_unlock_shared(integer, integer) returns boolean
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_advisory_unlock_shared(integer, integer) is 'release shared advisory lock';

create function pg_catalog.pg_advisory_xact_lock(bigint) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_advisory_xact_lock(bigint) is 'obtain exclusive advisory lock';

create function pg_catalog.pg_advisory_xact_lock(integer, integer) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_advisory_xact_lock(integer, integer) is 'obtain exclusive advisory lock';

create function pg_catalog.pg_advisory_xact_lock_shared(bigint) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_advisory_xact_lock_shared(bigint) is 'obtain shared advisory lock';

create function pg_catalog.pg_advisory_xact_lock_shared(integer, integer) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_advisory_xact_lock_shared(integer, integer) is 'obtain shared advisory lock';

create function pg_catalog.pg_available_extension_versions(out name name, out version text, out superuser boolean, out relocatable boolean, out schema name, out requires name[], out comment text) returns setof setof record
    stable
    strict
    cost 10
    rows 100
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_available_extension_versions(out name, out text, out boolean, out boolean, out name, out name[], out text) is 'list available extension versions';

create function pg_catalog.pg_available_extensions(out name name, out default_version text, out comment text) returns setof setof record
    stable
    strict
    cost 10
    rows 100
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_available_extensions(out name, out text, out text) is 'list available extensions';

create function pg_catalog.pg_backend_pid() returns integer
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_backend_pid() is 'statistics: current backend PID';

create function pg_catalog.pg_backup_start_time() returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_backup_start_time() is 'start time of an online backup';

create function pg_catalog.pg_blocking_pids(integer) returns integer[]
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_blocking_pids(integer) is 'get array of PIDs of sessions blocking specified backend PID from acquiring a heavyweight lock';

create function pg_catalog.pg_cancel_backend(integer) returns boolean
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_cancel_backend(integer) is 'cancel a server process'' current query';

create function pg_catalog.pg_char_to_encoding(name) returns integer
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_char_to_encoding(name) is 'convert encoding name to encoding id';

create function pg_catalog.pg_client_encoding() returns name
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_client_encoding() is 'encoding name of current database';

create function pg_catalog.pg_collation_actual_version(oid) returns text
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_collation_actual_version(oid) is 'get actual version of collation from operating system';

create function pg_catalog.pg_collation_for("any") returns text
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_collation_for("any") is 'collation of the argument; implementation of the COLLATION FOR expression';

create function pg_catalog.pg_collation_is_visible(oid) returns boolean
    stable
    strict
    cost 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_collation_is_visible(oid) is 'is collation visible in search path?';

create function pg_catalog.pg_column_is_updatable(regclass, smallint, boolean) returns boolean
    stable
    strict
    cost 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_column_is_updatable(regclass, smallint, boolean) is 'is a column updatable';

create function pg_catalog.pg_column_size("any") returns integer
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_column_size("any") is 'bytes required to store the value, perhaps with compression';

create function pg_catalog.pg_conf_load_time() returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_conf_load_time() is 'configuration load time';

create function pg_catalog.pg_config(out name text, out setting text) returns setof setof record
    stable
    strict
    cost 1
    rows 23
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_config(out text, out text) is 'pg_config binary as a function';

create function pg_catalog.pg_control_checkpoint(out checkpoint_lsn pg_lsn, out redo_lsn pg_lsn, out redo_wal_file text, out timeline_id integer, out prev_timeline_id integer, out full_page_writes boolean, out next_xid text, out next_oid oid, out next_multixact_id xid, out next_multi_offset xid, out oldest_xid xid, out oldest_xid_dbid oid, out oldest_active_xid xid, out oldest_multi_xid xid, out oldest_multi_dbid oid, out oldest_commit_ts_xid xid, out newest_commit_ts_xid xid, out checkpoint_time timestamp with time zone) returns record
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_control_checkpoint(out pg_lsn, out pg_lsn, out text, out integer, out integer, out boolean, out text, out oid, out xid, out xid, out xid, out oid, out xid, out xid, out oid, out xid, out xid, out timestamp with time zone) is 'pg_controldata checkpoint state information as a function';

create function pg_catalog.pg_control_init(out max_data_alignment integer, out database_block_size integer, out blocks_per_segment integer, out wal_block_size integer, out bytes_per_wal_segment integer, out max_identifier_length integer, out max_index_columns integer, out max_toast_chunk_size integer, out large_object_chunk_size integer, out float4_pass_by_value boolean, out float8_pass_by_value boolean, out data_page_checksum_version integer) returns record
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_control_init(out integer, out integer, out integer, out integer, out integer, out integer, out integer, out integer, out integer, out boolean, out boolean, out integer) is 'pg_controldata init state information as a function';

create function pg_catalog.pg_control_recovery(out min_recovery_end_lsn pg_lsn, out min_recovery_end_timeline integer, out backup_start_lsn pg_lsn, out backup_end_lsn pg_lsn, out end_of_backup_record_required boolean) returns record
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_control_recovery(out pg_lsn, out integer, out pg_lsn, out pg_lsn, out boolean) is 'pg_controldata recovery state information as a function';

create function pg_catalog.pg_control_system(out pg_control_version integer, out catalog_version_no integer, out system_identifier bigint, out pg_control_last_modified timestamp with time zone) returns record
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_control_system(out integer, out integer, out bigint, out timestamp with time zone) is 'pg_controldata general state information as a function';

create function pg_catalog.pg_conversion_is_visible(oid) returns boolean
    stable
    strict
    cost 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_conversion_is_visible(oid) is 'is conversion visible in search path?';

create function pg_catalog.pg_copy_logical_replication_slot(src_slot_name name, dst_slot_name name, out slot_name name, out lsn pg_lsn) returns record
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_copy_logical_replication_slot(name, name, out name, out pg_lsn) is 'copy a logical replication slot';

create function pg_catalog.pg_copy_logical_replication_slot(src_slot_name name, dst_slot_name name, temporary boolean, out slot_name name, out lsn pg_lsn) returns record
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_copy_logical_replication_slot(name, name, boolean, out name, out pg_lsn) is 'copy a logical replication slot, changing temporality';

create function pg_catalog.pg_copy_logical_replication_slot(src_slot_name name, dst_slot_name name, temporary boolean, plugin name, out slot_name name, out lsn pg_lsn) returns record
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_copy_logical_replication_slot(name, name, boolean, name, out name, out pg_lsn) is 'copy a logical replication slot, changing temporality and plugin';

create function pg_catalog.pg_copy_physical_replication_slot(src_slot_name name, dst_slot_name name, out slot_name name, out lsn pg_lsn) returns record
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_copy_physical_replication_slot(name, name, out name, out pg_lsn) is 'copy a physical replication slot';

create function pg_catalog.pg_copy_physical_replication_slot(src_slot_name name, dst_slot_name name, temporary boolean, out slot_name name, out lsn pg_lsn) returns record
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_copy_physical_replication_slot(name, name, boolean, out name, out pg_lsn) is 'copy a physical replication slot, changing temporality';

create function pg_catalog.pg_create_logical_replication_slot(slot_name name, plugin name, temporary boolean default false, out slot_name name, out lsn pg_lsn) returns record
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_create_logical_replication_slot(name, name, boolean, out name, out pg_lsn) is 'set up a logical replication slot';

create function pg_catalog.pg_create_physical_replication_slot(slot_name name, immediately_reserve boolean default false, temporary boolean default false, out slot_name name, out lsn pg_lsn) returns record
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_create_physical_replication_slot(name, boolean, boolean, out name, out pg_lsn) is 'create a physical replication slot';

create function pg_catalog.pg_create_restore_point(text) returns pg_lsn
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_create_restore_point(text) is 'create a named restore point';

create function pg_catalog.pg_current_logfile() returns text
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_current_logfile() is 'current logging collector file location';

create function pg_catalog.pg_current_logfile(text) returns text
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_current_logfile(text) is 'current logging collector file location';

create function pg_catalog.pg_current_wal_flush_lsn() returns pg_lsn
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_current_wal_flush_lsn() is 'current wal flush location';

create function pg_catalog.pg_current_wal_insert_lsn() returns pg_lsn
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_current_wal_insert_lsn() is 'current wal insert location';

create function pg_catalog.pg_current_wal_lsn() returns pg_lsn
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_current_wal_lsn() is 'current wal write location';

create function pg_catalog.pg_cursor(out name text, out statement text, out is_holdable boolean, out is_binary boolean, out is_scrollable boolean, out creation_time timestamp with time zone) returns setof setof record
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_cursor(out text, out text, out boolean, out boolean, out boolean, out timestamp with time zone) is 'get the open cursors for this session';

create function pg_catalog.pg_database_size(name) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_database_size(name) is 'total disk space usage for the specified database';

create function pg_catalog.pg_database_size(oid) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_database_size(oid) is 'total disk space usage for the specified database';

create function pg_catalog.pg_ddl_command_in(cstring) returns pg_ddl_command
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_ddl_command_in(cstring) is 'I/O';

create function pg_catalog.pg_ddl_command_out(pg_ddl_command) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_ddl_command_out(pg_ddl_command) is 'I/O';

create function pg_catalog.pg_ddl_command_recv(internal) returns pg_ddl_command
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_ddl_command_recv(internal) is 'I/O';

create function pg_catalog.pg_ddl_command_send(pg_ddl_command) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_ddl_command_send(pg_ddl_command) is 'I/O';

create function pg_catalog.pg_dependencies_in(cstring) returns pg_dependencies
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_dependencies_in(cstring) is 'I/O';

create function pg_catalog.pg_dependencies_out(pg_dependencies) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_dependencies_out(pg_dependencies) is 'I/O';

create function pg_catalog.pg_dependencies_recv(internal) returns pg_dependencies
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_dependencies_recv(internal) is 'I/O';

create function pg_catalog.pg_dependencies_send(pg_dependencies) returns bytea
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_dependencies_send(pg_dependencies) is 'I/O';

create function pg_catalog.pg_describe_object(oid, oid, integer) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_describe_object(oid, oid, integer) is 'get identification of SQL object';

create function pg_catalog.pg_drop_replication_slot(name) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_drop_replication_slot(name) is 'drop a replication slot';

create function pg_catalog.pg_encoding_max_length(integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_encoding_max_length(integer) is 'maximum octet length of a character in given encoding';

create function pg_catalog.pg_encoding_to_char(integer) returns name
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_encoding_to_char(integer) is 'convert encoding id to encoding name';

create function pg_catalog.pg_event_trigger_ddl_commands(out classid oid, out objid oid, out objsubid integer, out command_tag text, out object_type text, out schema_name text, out object_identity text, out in_extension boolean, out command pg_ddl_command) returns setof setof record
    stable
    strict
    cost 10
    rows 100
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_event_trigger_ddl_commands(out oid, out oid, out integer, out text, out text, out text, out text, out boolean, out pg_ddl_command) is 'list DDL actions being executed by the current command';

create function pg_catalog.pg_event_trigger_dropped_objects(out classid oid, out objid oid, out objsubid integer, out original boolean, out normal boolean, out is_temporary boolean, out object_type text, out schema_name text, out object_name text, out object_identity text, out address_names text[], out address_args text[]) returns setof setof record
    stable
    strict
    cost 10
    rows 100
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_event_trigger_dropped_objects(out oid, out oid, out integer, out boolean, out boolean, out boolean, out text, out text, out text, out text, out text[], out text[]) is 'list objects dropped by the current command';

create function pg_catalog.pg_event_trigger_table_rewrite_oid(out oid oid) returns oid
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_event_trigger_table_rewrite_oid(out oid) is 'return Oid of the table getting rewritten';

create function pg_catalog.pg_event_trigger_table_rewrite_reason() returns integer
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_event_trigger_table_rewrite_reason() is 'return reason code for table getting rewritten';

create function pg_catalog.pg_export_snapshot() returns text
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_export_snapshot() is 'export a snapshot';

create function pg_catalog.pg_extension_config_dump(regclass, text) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_extension_config_dump(regclass, text) is 'flag an extension''s table contents to be emitted by pg_dump';

create function pg_catalog.pg_extension_update_paths(name name, out source text, out target text, out path text) returns setof setof record
    stable
    strict
    cost 10
    rows 100
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_extension_update_paths(name, out text, out text, out text) is 'list an extension''s version update paths';

create function pg_catalog.pg_filenode_relation(oid, oid) returns regclass
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_filenode_relation(oid, oid) is 'relation OID for filenode and tablespace';

create function pg_catalog.pg_function_is_visible(oid) returns boolean
    stable
    strict
    cost 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_function_is_visible(oid) is 'is function visible in search path?';

create function pg_catalog.pg_get_constraintdef(oid) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_constraintdef(oid) is 'constraint description';

create function pg_catalog.pg_get_constraintdef(oid, boolean) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_constraintdef(oid, boolean) is 'constraint description with pretty-print option';

create function pg_catalog.pg_get_expr(pg_node_tree, oid) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_expr(pg_node_tree, oid) is 'deparse an encoded expression';

create function pg_catalog.pg_get_expr(pg_node_tree, oid, boolean) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_expr(pg_node_tree, oid, boolean) is 'deparse an encoded expression with pretty-print option';

create function pg_catalog.pg_get_function_arg_default(oid, integer) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_function_arg_default(oid, integer) is 'function argument default';

create function pg_catalog.pg_get_function_arguments(oid) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_function_arguments(oid) is 'argument list of a function';

create function pg_catalog.pg_get_function_identity_arguments(oid) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_function_identity_arguments(oid) is 'identity argument list of a function';

create function pg_catalog.pg_get_function_result(oid) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_function_result(oid) is 'result type of a function';

create function pg_catalog.pg_get_functiondef(oid) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_functiondef(oid) is 'definition of a function';

create function pg_catalog.pg_get_indexdef(oid) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_indexdef(oid) is 'index description';

create function pg_catalog.pg_get_indexdef(oid, integer, boolean) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_indexdef(oid, integer, boolean) is 'index description (full create statement or single expression) with pretty-print option';

create function pg_catalog.pg_get_keywords(out word text, out catcode "char", out catdesc text) returns setof setof record
    stable
    strict
    cost 10
    rows 400
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_keywords(out text, out "char", out text) is 'list of SQL keywords';

create function pg_catalog.pg_get_multixact_members(multixid xid, out xid xid, out mode text) returns setof setof record
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_multixact_members(xid, out xid, out text) is 'view members of a multixactid';

create function pg_catalog.pg_get_object_address(type text, object_names text[], object_args text[], out classid oid, out objid oid, out objsubid integer) returns record
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_object_address(text, text[], text[], out oid, out oid, out integer) is 'get OID-based object address from name/args arrays';

create function pg_catalog.pg_get_partition_constraintdef(oid) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_partition_constraintdef(oid) is 'partition constraint description';

create function pg_catalog.pg_get_partkeydef(oid) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_partkeydef(oid) is 'partition key description';

create function pg_catalog.pg_get_publication_tables(pubname text, out relid oid) returns setof setof oid
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_publication_tables(text, out oid) is 'get OIDs of tables in a publication';

create function pg_catalog.pg_get_replica_identity_index(regclass) returns regclass
    stable
    strict
    cost 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_replica_identity_index(regclass) is 'oid of replica identity index if any';

create function pg_catalog.pg_get_replication_slots(out slot_name name, out plugin name, out slot_type text, out datoid oid, out temporary boolean, out active boolean, out active_pid integer, out xmin xid, out catalog_xmin xid, out restart_lsn pg_lsn, out confirmed_flush_lsn pg_lsn) returns setof setof record
    stable
    cost 1
    rows 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_replication_slots(out name, out name, out text, out oid, out boolean, out boolean, out integer, out xid, out xid, out pg_lsn, out pg_lsn) is 'information about replication slots currently in use';

create function pg_catalog.pg_get_ruledef(oid) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_ruledef(oid) is 'source text of a rule';

create function pg_catalog.pg_get_ruledef(oid, boolean) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_ruledef(oid, boolean) is 'source text of a rule with pretty-print option';

create function pg_catalog.pg_get_serial_sequence(text, text) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_serial_sequence(text, text) is 'name of sequence for a serial column';

create function pg_catalog.pg_get_statisticsobjdef(oid) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_statisticsobjdef(oid) is 'extended statistics object description';

create function pg_catalog.pg_get_triggerdef(oid) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_triggerdef(oid) is 'trigger description';

create function pg_catalog.pg_get_triggerdef(oid, boolean) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_triggerdef(oid, boolean) is 'trigger description with pretty-print option';

create function pg_catalog.pg_get_userbyid(oid) returns name
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_userbyid(oid) is 'role name by OID (with fallback)';

create function pg_catalog.pg_get_viewdef(oid) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_viewdef(oid) is 'select statement of a view';

create function pg_catalog.pg_get_viewdef(oid, boolean) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_viewdef(oid, boolean) is 'select statement of a view with pretty-print option';

create function pg_catalog.pg_get_viewdef(oid, integer) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_viewdef(oid, integer) is 'select statement of a view with pretty-printing and specified line wrapping';

create function pg_catalog.pg_get_viewdef(text) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_viewdef(text) is 'select statement of a view';

create function pg_catalog.pg_get_viewdef(text, boolean) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_get_viewdef(text, boolean) is 'select statement of a view with pretty-print option';

create function pg_catalog.pg_has_role(name, name, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_has_role(name, name, text) is 'user privilege on role by username, role name';

create function pg_catalog.pg_has_role(name, oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_has_role(name, oid, text) is 'user privilege on role by username, role oid';

create function pg_catalog.pg_has_role(name, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_has_role(name, text) is 'current user privilege on role by role name';

create function pg_catalog.pg_has_role(oid, name, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_has_role(oid, name, text) is 'user privilege on role by user oid, role name';

create function pg_catalog.pg_has_role(oid, oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_has_role(oid, oid, text) is 'user privilege on role by user oid, role oid';

create function pg_catalog.pg_has_role(oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_has_role(oid, text) is 'current user privilege on role by role oid';

create function pg_catalog.pg_hba_file_rules(out line_number integer, out type text, out database text[], out user_name text[], out address text, out netmask text, out auth_method text, out options text[], out error text) returns setof setof record
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_hba_file_rules(out integer, out text, out text[], out text[], out text, out text, out text, out text[], out text) is 'show pg_hba.conf rules';

create function pg_catalog.pg_identify_object(classid oid, objid oid, objsubid integer, out type text, out schema text, out name text, out identity text) returns record
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_identify_object(oid, oid, integer, out text, out text, out text, out text) is 'get machine-parseable identification of SQL object';

create function pg_catalog.pg_identify_object_as_address(classid oid, objid oid, objsubid integer, out type text, out object_names text[], out object_args text[]) returns record
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_identify_object_as_address(oid, oid, integer, out text, out text[], out text[]) is 'get identification of SQL object for pg_get_object_address()';

create function pg_catalog.pg_import_system_collations(regnamespace) returns integer
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_import_system_collations(regnamespace) is 'import collations from operating system';

create function pg_catalog.pg_index_column_has_property(regclass, integer, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_index_column_has_property(regclass, integer, text) is 'test property of an index column';

create function pg_catalog.pg_index_has_property(regclass, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_index_has_property(regclass, text) is 'test property of an index';

create function pg_catalog.pg_indexam_has_property(oid, text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_indexam_has_property(oid, text) is 'test property of an index access method';

create function pg_catalog.pg_indexam_progress_phasename(oid, bigint) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_indexam_progress_phasename(oid, bigint) is 'return name of given index build phase';

create function pg_catalog.pg_indexes_size(regclass) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_indexes_size(regclass) is 'disk space usage for all indexes attached to the specified table';

create function pg_catalog.pg_is_in_backup() returns boolean
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_is_in_backup() is 'true if server is in online backup';

create function pg_catalog.pg_is_in_recovery() returns boolean
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_is_in_recovery() is 'true if server is in recovery';

create function pg_catalog.pg_is_other_temp_schema(oid) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_is_other_temp_schema(oid) is 'is schema another session''s temp schema?';

create function pg_catalog.pg_is_wal_replay_paused() returns boolean
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_is_wal_replay_paused() is 'true if wal replay is paused';

create function pg_catalog.pg_isolation_test_session_is_blocked(integer, integer[]) returns boolean
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_isolation_test_session_is_blocked(integer, integer[]) is 'isolationtester support function';

create function pg_catalog.pg_jit_available() returns boolean
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_jit_available() is 'Is JIT compilation available in this session?';

create function pg_catalog.pg_last_committed_xact(out xid xid, out timestamp timestamp with time zone) returns record
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_last_committed_xact(out xid, out timestamp with time zone) is 'get transaction Id and commit timestamp of latest transaction commit';

create function pg_catalog.pg_last_wal_receive_lsn() returns pg_lsn
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_last_wal_receive_lsn() is 'current wal flush location';

create function pg_catalog.pg_last_wal_replay_lsn() returns pg_lsn
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_last_wal_replay_lsn() is 'last wal replay location';

create function pg_catalog.pg_last_xact_replay_timestamp() returns timestamp with time zone
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_last_xact_replay_timestamp() is 'timestamp of last replay xact';

create function pg_catalog.pg_listening_channels() returns setof setof text
    stable
    strict
    cost 1
    rows 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_listening_channels() is 'get the channels that the current backend listens to';

create function pg_catalog.pg_lock_status(out locktype text, out database oid, out relation oid, out page integer, out tuple smallint, out virtualxid text, out transactionid xid, out classid oid, out objid oid, out objsubid smallint, out virtualtransaction text, out pid integer, out mode text, out granted boolean, out fastpath boolean) returns setof setof record
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_lock_status(out text, out oid, out oid, out integer, out smallint, out text, out xid, out oid, out oid, out smallint, out text, out integer, out text, out boolean, out boolean) is 'view system lock information';

create function pg_catalog.pg_logical_emit_message(boolean, text, bytea) returns pg_lsn
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_logical_emit_message(boolean, text, bytea) is 'emit a binary logical decoding message';

create function pg_catalog.pg_logical_emit_message(boolean, text, text) returns pg_lsn
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_logical_emit_message(boolean, text, text) is 'emit a textual logical decoding message';

create function pg_catalog.pg_logical_slot_get_binary_changes(slot_name name, upto_lsn pg_lsn, upto_nchanges integer, options text[] default '{}'::text[], out lsn pg_lsn, out xid xid, out data bytea) returns setof setof record
    cost 1000
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_logical_slot_get_binary_changes(name, pg_lsn, integer, text[], out pg_lsn, out xid, out bytea) is 'get binary changes from replication slot';

create function pg_catalog.pg_logical_slot_get_changes(slot_name name, upto_lsn pg_lsn, upto_nchanges integer, options text[] default '{}'::text[], out lsn pg_lsn, out xid xid, out data text) returns setof setof record
    cost 1000
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_logical_slot_get_changes(name, pg_lsn, integer, text[], out pg_lsn, out xid, out text) is 'get changes from replication slot';

create function pg_catalog.pg_logical_slot_peek_binary_changes(slot_name name, upto_lsn pg_lsn, upto_nchanges integer, options text[] default '{}'::text[], out lsn pg_lsn, out xid xid, out data bytea) returns setof setof record
    cost 1000
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_logical_slot_peek_binary_changes(name, pg_lsn, integer, text[], out pg_lsn, out xid, out bytea) is 'peek at binary changes from replication slot';

create function pg_catalog.pg_logical_slot_peek_changes(slot_name name, upto_lsn pg_lsn, upto_nchanges integer, options text[] default '{}'::text[], out lsn pg_lsn, out xid xid, out data text) returns setof setof record
    cost 1000
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_logical_slot_peek_changes(name, pg_lsn, integer, text[], out pg_lsn, out xid, out text) is 'peek at changes from replication slot';

create function pg_catalog.pg_ls_archive_statusdir(out name text, out size bigint, out modification timestamp with time zone) returns setof setof record
    strict
    cost 10
    rows 20
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_ls_archive_statusdir(out text, out bigint, out timestamp with time zone) is 'list of files in the archive_status directory';

create function pg_catalog.pg_ls_dir(text) returns setof setof text
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_ls_dir(text) is 'list all files in a directory';

create function pg_catalog.pg_ls_dir(text, boolean, boolean) returns setof setof text
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_ls_dir(text, boolean, boolean) is 'list all files in a directory';

create function pg_catalog.pg_ls_logdir(out name text, out size bigint, out modification timestamp with time zone) returns setof setof record
    strict
    cost 10
    rows 20
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_ls_logdir(out text, out bigint, out timestamp with time zone) is 'list files in the log directory';

create function pg_catalog.pg_ls_tmpdir(out name text, out size bigint, out modification timestamp with time zone) returns setof setof record
    strict
    cost 10
    rows 20
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_ls_tmpdir(out text, out bigint, out timestamp with time zone) is 'list files in the pgsql_tmp directory';

create function pg_catalog.pg_ls_tmpdir(tablespace oid, out name text, out size bigint, out modification timestamp with time zone) returns setof setof record
    strict
    cost 10
    rows 20
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_ls_tmpdir(oid, out text, out bigint, out timestamp with time zone) is 'list files in the pgsql_tmp directory';

create function pg_catalog.pg_ls_waldir(out name text, out size bigint, out modification timestamp with time zone) returns setof setof record
    strict
    cost 10
    rows 20
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_ls_waldir(out text, out bigint, out timestamp with time zone) is 'list of files in the WAL directory';

create function pg_catalog.pg_lsn_cmp(pg_lsn, pg_lsn) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_lsn_cmp(pg_lsn, pg_lsn) is 'less-equal-greater';

create function pg_catalog.pg_lsn_eq(pg_lsn, pg_lsn) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_lsn_eq(pg_lsn, pg_lsn) is 'implementation of = operator';

create function pg_catalog.pg_lsn_ge(pg_lsn, pg_lsn) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_lsn_ge(pg_lsn, pg_lsn) is 'implementation of >= operator';

create function pg_catalog.pg_lsn_gt(pg_lsn, pg_lsn) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_lsn_gt(pg_lsn, pg_lsn) is 'implementation of > operator';

create function pg_catalog.pg_lsn_hash(pg_lsn) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_lsn_hash(pg_lsn) is 'hash';

create function pg_catalog.pg_lsn_hash_extended(pg_lsn, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_lsn_hash_extended(pg_lsn, bigint) is 'hash';

create function pg_catalog.pg_lsn_in(cstring) returns pg_lsn
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_lsn_in(cstring) is 'I/O';

create function pg_catalog.pg_lsn_le(pg_lsn, pg_lsn) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_lsn_le(pg_lsn, pg_lsn) is 'implementation of <= operator';

create function pg_catalog.pg_lsn_lt(pg_lsn, pg_lsn) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_lsn_lt(pg_lsn, pg_lsn) is 'implementation of < operator';

create function pg_catalog.pg_lsn_mi(pg_lsn, pg_lsn) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_lsn_mi(pg_lsn, pg_lsn) is 'implementation of - operator';

create function pg_catalog.pg_lsn_ne(pg_lsn, pg_lsn) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_lsn_ne(pg_lsn, pg_lsn) is 'implementation of <> operator';

create function pg_catalog.pg_lsn_out(pg_lsn) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_lsn_out(pg_lsn) is 'I/O';

create function pg_catalog.pg_lsn_recv(internal) returns pg_lsn
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_lsn_recv(internal) is 'I/O';

create function pg_catalog.pg_lsn_send(pg_lsn) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_lsn_send(pg_lsn) is 'I/O';

create function pg_catalog.pg_mcv_list_in(cstring) returns pg_mcv_list
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_mcv_list_in(cstring) is 'I/O';

create function pg_catalog.pg_mcv_list_items(mcv_list pg_mcv_list, out index integer, out values text[], out nulls boolean[], out frequency double precision, out base_frequency double precision) returns setof setof record
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_mcv_list_items(pg_mcv_list, out integer, out text[], out boolean[], out double precision, out double precision) is 'details about MCV list items';

create function pg_catalog.pg_mcv_list_out(pg_mcv_list) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_mcv_list_out(pg_mcv_list) is 'I/O';

create function pg_catalog.pg_mcv_list_recv(internal) returns pg_mcv_list
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_mcv_list_recv(internal) is 'I/O';

create function pg_catalog.pg_mcv_list_send(pg_mcv_list) returns bytea
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_mcv_list_send(pg_mcv_list) is 'I/O';

create function pg_catalog.pg_my_temp_schema() returns oid
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_my_temp_schema() is 'get OID of current session''s temp schema, if any';

create function pg_catalog.pg_ndistinct_in(cstring) returns pg_ndistinct
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_ndistinct_in(cstring) is 'I/O';

create function pg_catalog.pg_ndistinct_out(pg_ndistinct) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_ndistinct_out(pg_ndistinct) is 'I/O';

create function pg_catalog.pg_ndistinct_recv(internal) returns pg_ndistinct
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_ndistinct_recv(internal) is 'I/O';

create function pg_catalog.pg_ndistinct_send(pg_ndistinct) returns bytea
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_ndistinct_send(pg_ndistinct) is 'I/O';

create function pg_catalog.pg_nextoid(regclass, name, regclass) returns oid
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_nextoid(regclass, name, regclass) is 'return the next oid for a system table';

create function pg_catalog.pg_node_tree_in(cstring) returns pg_node_tree
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_node_tree_in(cstring) is 'I/O';

create function pg_catalog.pg_node_tree_out(pg_node_tree) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_node_tree_out(pg_node_tree) is 'I/O';

create function pg_catalog.pg_node_tree_recv(internal) returns pg_node_tree
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_node_tree_recv(internal) is 'I/O';

create function pg_catalog.pg_node_tree_send(pg_node_tree) returns bytea
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_node_tree_send(pg_node_tree) is 'I/O';

create function pg_catalog.pg_notification_queue_usage() returns double precision
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_notification_queue_usage() is 'get the fraction of the asynchronous notification queue currently in use';

create function pg_catalog.pg_notify(text, text) returns void
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_notify(text, text) is 'send a notification event';

create function pg_catalog.pg_opclass_is_visible(oid) returns boolean
    stable
    strict
    cost 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_opclass_is_visible(oid) is 'is opclass visible in search path?';

create function pg_catalog.pg_operator_is_visible(oid) returns boolean
    stable
    strict
    cost 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_operator_is_visible(oid) is 'is operator visible in search path?';

create function pg_catalog.pg_opfamily_is_visible(oid) returns boolean
    stable
    strict
    cost 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_opfamily_is_visible(oid) is 'is opfamily visible in search path?';

create function pg_catalog.pg_options_to_table(options_array text[], out option_name text, out option_value text) returns setof setof record
    stable
    strict
    cost 1
    rows 3
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_options_to_table(text[], out text, out text) is 'convert generic options array to name/value table';

create function pg_catalog.pg_partition_ancestors(partitionid regclass, out relid regclass) returns setof setof regclass
    strict
    cost 1
    rows 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_partition_ancestors(regclass, out regclass) is 'view ancestors of the partition';

create function pg_catalog.pg_partition_root(regclass) returns regclass
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_partition_root(regclass) is 'get top-most partition root parent';

create function pg_catalog.pg_partition_tree(rootrelid regclass, out relid regclass, out parentrelid regclass, out isleaf boolean, out level integer) returns setof setof record
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_partition_tree(regclass, out regclass, out regclass, out boolean, out integer) is 'view partition tree tables';

create function pg_catalog.pg_postmaster_start_time() returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_postmaster_start_time() is 'postmaster start time';

create function pg_catalog.pg_prepared_statement(out name text, out statement text, out prepare_time timestamp with time zone, out parameter_types regtype[], out from_sql boolean) returns setof setof record
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_prepared_statement(out text, out text, out timestamp with time zone, out regtype[], out boolean) is 'get the prepared statements for this session';

create function pg_catalog.pg_prepared_xact(out transaction xid, out gid text, out prepared timestamp with time zone, out ownerid oid, out dbid oid) returns setof setof record
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_prepared_xact(out xid, out text, out timestamp with time zone, out oid, out oid) is 'view two-phase transactions';

create function pg_catalog.pg_promote(wait boolean default true, wait_seconds integer default 60) returns boolean
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_promote(boolean, integer) is 'promote standby server';

create function pg_catalog.pg_read_binary_file(text) returns bytea
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_read_binary_file(text) is 'read bytea from a file';

create function pg_catalog.pg_read_binary_file(text, bigint, bigint) returns bytea
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_read_binary_file(text, bigint, bigint) is 'read bytea from a file';

create function pg_catalog.pg_read_binary_file(text, bigint, bigint, boolean) returns bytea
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_read_binary_file(text, bigint, bigint, boolean) is 'read bytea from a file';

create function pg_catalog.pg_read_file(text) returns text
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_read_file(text) is 'read text from a file';

create function pg_catalog.pg_read_file(text, bigint, bigint) returns text
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_read_file(text, bigint, bigint) is 'read text from a file';

create function pg_catalog.pg_read_file(text, bigint, bigint, boolean) returns text
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_read_file(text, bigint, bigint, boolean) is 'read text from a file';

create function pg_catalog.pg_read_file_old(text, bigint, bigint) returns text
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_read_file_old(text, bigint, bigint) is 'read text from a file - old version for adminpack 1.0';

create function pg_catalog.pg_relation_filenode(regclass) returns oid
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_relation_filenode(regclass) is 'filenode identifier of relation';

create function pg_catalog.pg_relation_filepath(regclass) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_relation_filepath(regclass) is 'file path of relation';

create function pg_catalog.pg_relation_is_publishable(regclass) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_relation_is_publishable(regclass) is 'returns whether a relation can be part of a publication';

create function pg_catalog.pg_relation_is_updatable(regclass, boolean) returns integer
    stable
    strict
    cost 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_relation_is_updatable(regclass, boolean) is 'is a relation insertable/updatable/deletable';

create function pg_catalog.pg_relation_size(regclass) returns bigint
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_relation_size(regclass) is 'disk space usage for the main fork of the specified table or index';

create function pg_catalog.pg_relation_size(regclass, text) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_relation_size(regclass, text) is 'disk space usage for the specified fork of a table or index';

create function pg_catalog.pg_reload_conf() returns boolean
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_reload_conf() is 'reload configuration files';

create function pg_catalog.pg_replication_origin_advance(text, pg_lsn) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_replication_origin_advance(text, pg_lsn) is 'advance replication origin to specific location';

create function pg_catalog.pg_replication_origin_create(text) returns oid
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_replication_origin_create(text) is 'create a replication origin';

create function pg_catalog.pg_replication_origin_drop(text) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_replication_origin_drop(text) is 'drop replication origin identified by its name';

create function pg_catalog.pg_replication_origin_oid(text) returns oid
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_replication_origin_oid(text) is 'translate the replication origin''s name to its id';

create function pg_catalog.pg_replication_origin_progress(text, boolean) returns pg_lsn
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_replication_origin_progress(text, boolean) is 'get an individual replication origin''s replication progress';

create function pg_catalog.pg_replication_origin_session_is_setup() returns boolean
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_replication_origin_session_is_setup() is 'is a replication origin configured in this session';

create function pg_catalog.pg_replication_origin_session_progress(boolean) returns pg_lsn
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_replication_origin_session_progress(boolean) is 'get the replication progress of the current session';

create function pg_catalog.pg_replication_origin_session_reset() returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_replication_origin_session_reset() is 'teardown configured replication progress tracking';

create function pg_catalog.pg_replication_origin_session_setup(text) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_replication_origin_session_setup(text) is 'configure session to maintain replication progress tracking for the passed in origin';

create function pg_catalog.pg_replication_origin_xact_reset() returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_replication_origin_xact_reset() is 'reset the transaction''s origin lsn and timestamp';

create function pg_catalog.pg_replication_origin_xact_setup(pg_lsn, timestamp with time zone) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_replication_origin_xact_setup(pg_lsn, timestamp with time zone) is 'setup the transaction''s origin lsn and timestamp';

create function pg_catalog.pg_replication_slot_advance(slot_name name, upto_lsn pg_lsn, out slot_name name, out end_lsn pg_lsn) returns record
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_replication_slot_advance(name, pg_lsn, out name, out pg_lsn) is 'advance logical replication slot';

create function pg_catalog.pg_rotate_logfile() returns boolean
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_rotate_logfile() is 'rotate log file';

create function pg_catalog.pg_rotate_logfile_old() returns boolean
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_rotate_logfile_old() is 'rotate log file - old version for adminpack 1.0';

create function pg_catalog.pg_safe_snapshot_blocking_pids(integer) returns integer[]
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_safe_snapshot_blocking_pids(integer) is 'get array of PIDs of sessions blocking specified backend PID from acquiring a safe snapshot';

create function pg_catalog.pg_sequence_last_value(regclass) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_sequence_last_value(regclass) is 'sequence last value';

create function pg_catalog.pg_sequence_parameters(sequence_oid oid, out start_value bigint, out minimum_value bigint, out maximum_value bigint, out increment bigint, out cycle_option boolean, out cache_size bigint, out data_type oid) returns record
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_sequence_parameters(oid, out bigint, out bigint, out bigint, out bigint, out boolean, out bigint, out oid) is 'sequence parameters, for use by information schema';

create function pg_catalog.pg_show_all_file_settings(out sourcefile text, out sourceline integer, out seqno integer, out name text, out setting text, out applied boolean, out error text) returns setof setof record
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_show_all_file_settings(out text, out integer, out integer, out text, out text, out boolean, out text) is 'show config file settings';

create function pg_catalog.pg_show_all_settings(out name text, out setting text, out unit text, out category text, out short_desc text, out extra_desc text, out context text, out vartype text, out source text, out min_val text, out max_val text, out enumvals text[], out boot_val text, out reset_val text, out sourcefile text, out sourceline integer, out pending_restart boolean) returns setof setof record
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_show_all_settings(out text, out text, out text, out text, out text, out text, out text, out text, out text, out text, out text, out text[], out text, out text, out text, out integer, out boolean) is 'SHOW ALL as a function';

create function pg_catalog.pg_show_replication_origin_status(out local_id oid, out external_id text, out remote_lsn pg_lsn, out local_lsn pg_lsn) returns setof setof record
    cost 1
    rows 100
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_show_replication_origin_status(out oid, out text, out pg_lsn, out pg_lsn) is 'get progress for all replication origins';

create function pg_catalog.pg_size_bytes(text) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_size_bytes(text) is 'convert a size in human-readable format with size units into bytes';

create function pg_catalog.pg_size_pretty(bigint) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_size_pretty(bigint) is 'convert a long int to a human readable text using size units';

create function pg_catalog.pg_size_pretty(numeric) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_size_pretty(numeric) is 'convert a numeric to a human readable text using size units';

create function pg_catalog.pg_sleep(double precision) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_sleep(double precision) is 'sleep for the specified time in seconds';

create function pg_catalog.pg_sleep_for(interval) returns void
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_sleep_for(interval) is 'sleep for the specified interval';

create function pg_catalog.pg_sleep_until(timestamp with time zone) returns void
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_sleep_until(timestamp with time zone) is 'sleep until the specified time';

create function pg_catalog.pg_start_backup(label text, fast boolean default false, exclusive boolean default true) returns pg_lsn
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_start_backup(text, boolean, boolean) is 'prepare for taking an online backup';

create function pg_catalog.pg_stat_clear_snapshot() returns void
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_clear_snapshot() is 'statistics: discard current transaction''s statistics snapshot';

create function pg_catalog.pg_stat_file(filename text, out size bigint, out access timestamp with time zone, out modification timestamp with time zone, out change timestamp with time zone, out creation timestamp with time zone, out isdir boolean) returns record
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_file(text, out bigint, out timestamp with time zone, out timestamp with time zone, out timestamp with time zone, out timestamp with time zone, out boolean) is 'get information about file';

create function pg_catalog.pg_stat_file(filename text, missing_ok boolean, out size bigint, out access timestamp with time zone, out modification timestamp with time zone, out change timestamp with time zone, out creation timestamp with time zone, out isdir boolean) returns record
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_file(text, boolean, out bigint, out timestamp with time zone, out timestamp with time zone, out timestamp with time zone, out timestamp with time zone, out boolean) is 'get information about file';

create function pg_catalog.pg_stat_get_activity(pid integer, out datid oid, out pid integer, out usesysid oid, out application_name text, out state text, out query text, out wait_event_type text, out wait_event text, out xact_start timestamp with time zone, out query_start timestamp with time zone, out backend_start timestamp with time zone, out state_change timestamp with time zone, out client_addr inet, out client_hostname text, out client_port integer, out backend_xid xid, out backend_xmin xid, out backend_type text, out ssl boolean, out sslversion text, out sslcipher text, out sslbits integer, out sslcompression boolean, out ssl_client_dn text, out ssl_client_serial numeric, out ssl_issuer_dn text, out gss_auth boolean, out gss_princ text, out gss_enc boolean) returns setof setof record
    stable
    cost 1
    rows 100
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_activity(integer, out oid, out integer, out oid, out text, out text, out text, out text, out text, out timestamp with time zone, out timestamp with time zone, out timestamp with time zone, out timestamp with time zone, out inet, out text, out integer, out xid, out xid, out text, out boolean, out text, out text, out integer, out boolean, out text, out numeric, out text, out boolean, out text, out boolean) is 'statistics: information about currently active backends';

create function pg_catalog.pg_stat_get_analyze_count(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_analyze_count(oid) is 'statistics: number of manual analyzes for a table';

create function pg_catalog.pg_stat_get_archiver(out archived_count bigint, out last_archived_wal text, out last_archived_time timestamp with time zone, out failed_count bigint, out last_failed_wal text, out last_failed_time timestamp with time zone, out stats_reset timestamp with time zone) returns record
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_archiver(out bigint, out text, out timestamp with time zone, out bigint, out text, out timestamp with time zone, out timestamp with time zone) is 'statistics: information about WAL archiver';

create function pg_catalog.pg_stat_get_autoanalyze_count(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_autoanalyze_count(oid) is 'statistics: number of auto analyzes for a table';

create function pg_catalog.pg_stat_get_autovacuum_count(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_autovacuum_count(oid) is 'statistics: number of auto vacuums for a table';

create function pg_catalog.pg_stat_get_backend_activity(integer) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_backend_activity(integer) is 'statistics: current query of backend';

create function pg_catalog.pg_stat_get_backend_activity_start(integer) returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_backend_activity_start(integer) is 'statistics: start time for current query of backend';

create function pg_catalog.pg_stat_get_backend_client_addr(integer) returns inet
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_backend_client_addr(integer) is 'statistics: address of client connected to backend';

create function pg_catalog.pg_stat_get_backend_client_port(integer) returns integer
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_backend_client_port(integer) is 'statistics: port number of client connected to backend';

create function pg_catalog.pg_stat_get_backend_dbid(integer) returns oid
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_backend_dbid(integer) is 'statistics: database ID of backend';

create function pg_catalog.pg_stat_get_backend_idset() returns setof setof integer
    stable
    strict
    cost 1
    rows 100
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_backend_idset() is 'statistics: currently active backend IDs';

create function pg_catalog.pg_stat_get_backend_pid(integer) returns integer
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_backend_pid(integer) is 'statistics: PID of backend';

create function pg_catalog.pg_stat_get_backend_start(integer) returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_backend_start(integer) is 'statistics: start time for current backend session';

create function pg_catalog.pg_stat_get_backend_userid(integer) returns oid
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_backend_userid(integer) is 'statistics: user ID of backend';

create function pg_catalog.pg_stat_get_backend_wait_event(integer) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_backend_wait_event(integer) is 'statistics: wait event on which backend is currently waiting';

create function pg_catalog.pg_stat_get_backend_wait_event_type(integer) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_backend_wait_event_type(integer) is 'statistics: wait event type on which backend is currently waiting';

create function pg_catalog.pg_stat_get_backend_xact_start(integer) returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_backend_xact_start(integer) is 'statistics: start time for backend''s current transaction';

create function pg_catalog.pg_stat_get_bgwriter_buf_written_checkpoints() returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_bgwriter_buf_written_checkpoints() is 'statistics: number of buffers written by the bgwriter during checkpoints';

create function pg_catalog.pg_stat_get_bgwriter_buf_written_clean() returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_bgwriter_buf_written_clean() is 'statistics: number of buffers written by the bgwriter for cleaning dirty buffers';

create function pg_catalog.pg_stat_get_bgwriter_maxwritten_clean() returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_bgwriter_maxwritten_clean() is 'statistics: number of times the bgwriter stopped processing when it had written too many buffers while cleaning';

create function pg_catalog.pg_stat_get_bgwriter_requested_checkpoints() returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_bgwriter_requested_checkpoints() is 'statistics: number of backend requested checkpoints started by the bgwriter';

create function pg_catalog.pg_stat_get_bgwriter_stat_reset_time() returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_bgwriter_stat_reset_time() is 'statistics: last reset for the bgwriter';

create function pg_catalog.pg_stat_get_bgwriter_timed_checkpoints() returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_bgwriter_timed_checkpoints() is 'statistics: number of timed checkpoints started by the bgwriter';

create function pg_catalog.pg_stat_get_blocks_fetched(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_blocks_fetched(oid) is 'statistics: number of blocks fetched';

create function pg_catalog.pg_stat_get_blocks_hit(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_blocks_hit(oid) is 'statistics: number of blocks found in cache';

create function pg_catalog.pg_stat_get_buf_alloc() returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_buf_alloc() is 'statistics: number of buffer allocations';

create function pg_catalog.pg_stat_get_buf_fsync_backend() returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_buf_fsync_backend() is 'statistics: number of backend buffer writes that did their own fsync';

create function pg_catalog.pg_stat_get_buf_written_backend() returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_buf_written_backend() is 'statistics: number of buffers written by backends';

create function pg_catalog.pg_stat_get_checkpoint_sync_time() returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_checkpoint_sync_time() is 'statistics: checkpoint time spent synchronizing buffers to disk, in milliseconds';

create function pg_catalog.pg_stat_get_checkpoint_write_time() returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_checkpoint_write_time() is 'statistics: checkpoint time spent writing buffers to disk, in milliseconds';

create function pg_catalog.pg_stat_get_db_blk_read_time(oid) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_db_blk_read_time(oid) is 'statistics: block read time, in milliseconds';

create function pg_catalog.pg_stat_get_db_blk_write_time(oid) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_db_blk_write_time(oid) is 'statistics: block write time, in milliseconds';

create function pg_catalog.pg_stat_get_db_blocks_fetched(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_db_blocks_fetched(oid) is 'statistics: blocks fetched for database';

create function pg_catalog.pg_stat_get_db_blocks_hit(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_db_blocks_hit(oid) is 'statistics: blocks found in cache for database';

create function pg_catalog.pg_stat_get_db_checksum_failures(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_db_checksum_failures(oid) is 'statistics: checksum failures detected in database';

create function pg_catalog.pg_stat_get_db_checksum_last_failure(oid) returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_db_checksum_last_failure(oid) is 'statistics: when last checksum failure was detected in database';

create function pg_catalog.pg_stat_get_db_conflict_all(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_db_conflict_all(oid) is 'statistics: recovery conflicts in database';

create function pg_catalog.pg_stat_get_db_conflict_bufferpin(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_db_conflict_bufferpin(oid) is 'statistics: recovery conflicts in database caused by shared buffer pin';

create function pg_catalog.pg_stat_get_db_conflict_lock(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_db_conflict_lock(oid) is 'statistics: recovery conflicts in database caused by relation lock';

create function pg_catalog.pg_stat_get_db_conflict_snapshot(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_db_conflict_snapshot(oid) is 'statistics: recovery conflicts in database caused by snapshot expiry';

create function pg_catalog.pg_stat_get_db_conflict_startup_deadlock(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_db_conflict_startup_deadlock(oid) is 'statistics: recovery conflicts in database caused by buffer deadlock';

create function pg_catalog.pg_stat_get_db_conflict_tablespace(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_db_conflict_tablespace(oid) is 'statistics: recovery conflicts in database caused by drop tablespace';

create function pg_catalog.pg_stat_get_db_deadlocks(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_db_deadlocks(oid) is 'statistics: deadlocks detected in database';

create function pg_catalog.pg_stat_get_db_numbackends(oid) returns integer
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_db_numbackends(oid) is 'statistics: number of backends in database';

create function pg_catalog.pg_stat_get_db_stat_reset_time(oid) returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_db_stat_reset_time(oid) is 'statistics: last reset for a database';

create function pg_catalog.pg_stat_get_db_temp_bytes(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_db_temp_bytes(oid) is 'statistics: number of bytes in temporary files written';

create function pg_catalog.pg_stat_get_db_temp_files(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_db_temp_files(oid) is 'statistics: number of temporary files written';

create function pg_catalog.pg_stat_get_db_tuples_deleted(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_db_tuples_deleted(oid) is 'statistics: tuples deleted in database';

create function pg_catalog.pg_stat_get_db_tuples_fetched(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_db_tuples_fetched(oid) is 'statistics: tuples fetched for database';

create function pg_catalog.pg_stat_get_db_tuples_inserted(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_db_tuples_inserted(oid) is 'statistics: tuples inserted in database';

create function pg_catalog.pg_stat_get_db_tuples_returned(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_db_tuples_returned(oid) is 'statistics: tuples returned for database';

create function pg_catalog.pg_stat_get_db_tuples_updated(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_db_tuples_updated(oid) is 'statistics: tuples updated in database';

create function pg_catalog.pg_stat_get_db_xact_commit(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_db_xact_commit(oid) is 'statistics: transactions committed';

create function pg_catalog.pg_stat_get_db_xact_rollback(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_db_xact_rollback(oid) is 'statistics: transactions rolled back';

create function pg_catalog.pg_stat_get_dead_tuples(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_dead_tuples(oid) is 'statistics: number of dead tuples';

create function pg_catalog.pg_stat_get_function_calls(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_function_calls(oid) is 'statistics: number of function calls';

create function pg_catalog.pg_stat_get_function_self_time(oid) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_function_self_time(oid) is 'statistics: self execution time of function, in milliseconds';

create function pg_catalog.pg_stat_get_function_total_time(oid) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_function_total_time(oid) is 'statistics: total execution time of function, in milliseconds';

create function pg_catalog.pg_stat_get_last_analyze_time(oid) returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_last_analyze_time(oid) is 'statistics: last manual analyze time for a table';

create function pg_catalog.pg_stat_get_last_autoanalyze_time(oid) returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_last_autoanalyze_time(oid) is 'statistics: last auto analyze time for a table';

create function pg_catalog.pg_stat_get_last_autovacuum_time(oid) returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_last_autovacuum_time(oid) is 'statistics: last auto vacuum time for a table';

create function pg_catalog.pg_stat_get_last_vacuum_time(oid) returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_last_vacuum_time(oid) is 'statistics: last manual vacuum time for a table';

create function pg_catalog.pg_stat_get_live_tuples(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_live_tuples(oid) is 'statistics: number of live tuples';

create function pg_catalog.pg_stat_get_mod_since_analyze(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_mod_since_analyze(oid) is 'statistics: number of tuples changed since last analyze';

create function pg_catalog.pg_stat_get_numscans(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_numscans(oid) is 'statistics: number of scans done for table/index';

create function pg_catalog.pg_stat_get_progress_info(cmdtype text, out pid integer, out datid oid, out relid oid, out param1 bigint, out param2 bigint, out param3 bigint, out param4 bigint, out param5 bigint, out param6 bigint, out param7 bigint, out param8 bigint, out param9 bigint, out param10 bigint, out param11 bigint, out param12 bigint, out param13 bigint, out param14 bigint, out param15 bigint, out param16 bigint, out param17 bigint, out param18 bigint, out param19 bigint, out param20 bigint) returns setof setof record
    stable
    strict
    cost 1
    rows 100
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_progress_info(text, out integer, out oid, out oid, out bigint, out bigint, out bigint, out bigint, out bigint, out bigint, out bigint, out bigint, out bigint, out bigint, out bigint, out bigint, out bigint, out bigint, out bigint, out bigint, out bigint, out bigint, out bigint, out bigint) is 'statistics: information about progress of backends running maintenance command';

create function pg_catalog.pg_stat_get_snapshot_timestamp() returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_snapshot_timestamp() is 'statistics: timestamp of the current statistics snapshot';

create function pg_catalog.pg_stat_get_subscription(subid oid, out subid oid, out relid oid, out pid integer, out received_lsn pg_lsn, out last_msg_send_time timestamp with time zone, out last_msg_receipt_time timestamp with time zone, out latest_end_lsn pg_lsn, out latest_end_time timestamp with time zone) returns record
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_subscription(oid, out oid, out oid, out integer, out pg_lsn, out timestamp with time zone, out timestamp with time zone, out pg_lsn, out timestamp with time zone) is 'statistics: information about subscription';

create function pg_catalog.pg_stat_get_tuples_deleted(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_tuples_deleted(oid) is 'statistics: number of tuples deleted';

create function pg_catalog.pg_stat_get_tuples_fetched(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_tuples_fetched(oid) is 'statistics: number of tuples fetched by idxscan';

create function pg_catalog.pg_stat_get_tuples_hot_updated(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_tuples_hot_updated(oid) is 'statistics: number of tuples hot updated';

create function pg_catalog.pg_stat_get_tuples_inserted(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_tuples_inserted(oid) is 'statistics: number of tuples inserted';

create function pg_catalog.pg_stat_get_tuples_returned(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_tuples_returned(oid) is 'statistics: number of tuples read by seqscan';

create function pg_catalog.pg_stat_get_tuples_updated(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_tuples_updated(oid) is 'statistics: number of tuples updated';

create function pg_catalog.pg_stat_get_vacuum_count(oid) returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_vacuum_count(oid) is 'statistics: number of manual vacuums for a table';

create function pg_catalog.pg_stat_get_wal_receiver(out pid integer, out status text, out receive_start_lsn pg_lsn, out receive_start_tli integer, out received_lsn pg_lsn, out received_tli integer, out last_msg_send_time timestamp with time zone, out last_msg_receipt_time timestamp with time zone, out latest_end_lsn pg_lsn, out latest_end_time timestamp with time zone, out slot_name text, out sender_host text, out sender_port integer, out conninfo text) returns record
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_wal_receiver(out integer, out text, out pg_lsn, out integer, out pg_lsn, out integer, out timestamp with time zone, out timestamp with time zone, out pg_lsn, out timestamp with time zone, out text, out text, out integer, out text) is 'statistics: information about WAL receiver';

create function pg_catalog.pg_stat_get_wal_senders(out pid integer, out state text, out sent_lsn pg_lsn, out write_lsn pg_lsn, out flush_lsn pg_lsn, out replay_lsn pg_lsn, out write_lag interval, out flush_lag interval, out replay_lag interval, out sync_priority integer, out sync_state text, out reply_time timestamp with time zone) returns setof setof record
    stable
    cost 1
    rows 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_wal_senders(out integer, out text, out pg_lsn, out pg_lsn, out pg_lsn, out pg_lsn, out interval, out interval, out interval, out integer, out text, out timestamp with time zone) is 'statistics: information about currently active replication';

create function pg_catalog.pg_stat_get_xact_blocks_fetched(oid) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_xact_blocks_fetched(oid) is 'statistics: number of blocks fetched in current transaction';

create function pg_catalog.pg_stat_get_xact_blocks_hit(oid) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_xact_blocks_hit(oid) is 'statistics: number of blocks found in cache in current transaction';

create function pg_catalog.pg_stat_get_xact_function_calls(oid) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_xact_function_calls(oid) is 'statistics: number of function calls in current transaction';

create function pg_catalog.pg_stat_get_xact_function_self_time(oid) returns double precision
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_xact_function_self_time(oid) is 'statistics: self execution time of function in current transaction, in milliseconds';

create function pg_catalog.pg_stat_get_xact_function_total_time(oid) returns double precision
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_xact_function_total_time(oid) is 'statistics: total execution time of function in current transaction, in milliseconds';

create function pg_catalog.pg_stat_get_xact_numscans(oid) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_xact_numscans(oid) is 'statistics: number of scans done for table/index in current transaction';

create function pg_catalog.pg_stat_get_xact_tuples_deleted(oid) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_xact_tuples_deleted(oid) is 'statistics: number of tuples deleted in current transaction';

create function pg_catalog.pg_stat_get_xact_tuples_fetched(oid) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_xact_tuples_fetched(oid) is 'statistics: number of tuples fetched by idxscan in current transaction';

create function pg_catalog.pg_stat_get_xact_tuples_hot_updated(oid) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_xact_tuples_hot_updated(oid) is 'statistics: number of tuples hot updated in current transaction';

create function pg_catalog.pg_stat_get_xact_tuples_inserted(oid) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_xact_tuples_inserted(oid) is 'statistics: number of tuples inserted in current transaction';

create function pg_catalog.pg_stat_get_xact_tuples_returned(oid) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_xact_tuples_returned(oid) is 'statistics: number of tuples read by seqscan in current transaction';

create function pg_catalog.pg_stat_get_xact_tuples_updated(oid) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_get_xact_tuples_updated(oid) is 'statistics: number of tuples updated in current transaction';

create function pg_catalog.pg_stat_reset() returns void
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_reset() is 'statistics: reset collected statistics for current database';

create function pg_catalog.pg_stat_reset_shared(text) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_reset_shared(text) is 'statistics: reset collected statistics shared across the cluster';

create function pg_catalog.pg_stat_reset_single_function_counters(oid) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_reset_single_function_counters(oid) is 'statistics: reset collected statistics for a single function in the current database';

create function pg_catalog.pg_stat_reset_single_table_counters(oid) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stat_reset_single_table_counters(oid) is 'statistics: reset collected statistics for a single table or index in the current database';

create function pg_catalog.pg_statistics_obj_is_visible(oid) returns boolean
    stable
    strict
    cost 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_statistics_obj_is_visible(oid) is 'is statistics object visible in search path?';

create function pg_catalog.pg_stop_backup() returns pg_lsn
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stop_backup() is 'finish taking an online backup';

create function pg_catalog.pg_stop_backup(exclusive boolean, wait_for_archive boolean default true, out lsn pg_lsn, out labelfile text, out spcmapfile text) returns setof setof record
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_stop_backup(boolean, boolean, out pg_lsn, out text, out text) is 'finish taking an online backup';

create function pg_catalog.pg_switch_wal() returns pg_lsn
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_switch_wal() is 'switch to new wal file';

create function pg_catalog.pg_table_is_visible(oid) returns boolean
    stable
    strict
    cost 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_table_is_visible(oid) is 'is table visible in search path?';

create function pg_catalog.pg_table_size(regclass) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_table_size(regclass) is 'disk space usage for the specified table, including TOAST, free space and visibility map';

create function pg_catalog.pg_tablespace_databases(oid) returns setof setof oid
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_tablespace_databases(oid) is 'get OIDs of databases in a tablespace';

create function pg_catalog.pg_tablespace_location(oid) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_tablespace_location(oid) is 'tablespace location';

create function pg_catalog.pg_tablespace_size(name) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_tablespace_size(name) is 'total disk space usage for the specified tablespace';

create function pg_catalog.pg_tablespace_size(oid) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_tablespace_size(oid) is 'total disk space usage for the specified tablespace';

create function pg_catalog.pg_terminate_backend(integer) returns boolean
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_terminate_backend(integer) is 'terminate a server process';

create function pg_catalog.pg_timezone_abbrevs(out abbrev text, out utc_offset interval, out is_dst boolean) returns setof setof record
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_timezone_abbrevs(out text, out interval, out boolean) is 'get the available time zone abbreviations';

create function pg_catalog.pg_timezone_names(out name text, out abbrev text, out utc_offset interval, out is_dst boolean) returns setof setof record
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_timezone_names(out text, out text, out interval, out boolean) is 'get the available time zone names';

create function pg_catalog.pg_total_relation_size(regclass) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_total_relation_size(regclass) is 'total disk space usage for the specified table and associated indexes';

create function pg_catalog.pg_trigger_depth() returns integer
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_trigger_depth() is 'current trigger depth';

create function pg_catalog.pg_try_advisory_lock(bigint) returns boolean
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_try_advisory_lock(bigint) is 'obtain exclusive advisory lock if available';

create function pg_catalog.pg_try_advisory_lock(integer, integer) returns boolean
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_try_advisory_lock(integer, integer) is 'obtain exclusive advisory lock if available';

create function pg_catalog.pg_try_advisory_lock_shared(bigint) returns boolean
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_try_advisory_lock_shared(bigint) is 'obtain shared advisory lock if available';

create function pg_catalog.pg_try_advisory_lock_shared(integer, integer) returns boolean
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_try_advisory_lock_shared(integer, integer) is 'obtain shared advisory lock if available';

create function pg_catalog.pg_try_advisory_xact_lock(bigint) returns boolean
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_try_advisory_xact_lock(bigint) is 'obtain exclusive advisory lock if available';

create function pg_catalog.pg_try_advisory_xact_lock(integer, integer) returns boolean
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_try_advisory_xact_lock(integer, integer) is 'obtain exclusive advisory lock if available';

create function pg_catalog.pg_try_advisory_xact_lock_shared(bigint) returns boolean
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_try_advisory_xact_lock_shared(bigint) is 'obtain shared advisory lock if available';

create function pg_catalog.pg_try_advisory_xact_lock_shared(integer, integer) returns boolean
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_try_advisory_xact_lock_shared(integer, integer) is 'obtain shared advisory lock if available';

create function pg_catalog.pg_ts_config_is_visible(oid) returns boolean
    stable
    strict
    cost 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_ts_config_is_visible(oid) is 'is text search configuration visible in search path?';

create function pg_catalog.pg_ts_dict_is_visible(oid) returns boolean
    stable
    strict
    cost 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_ts_dict_is_visible(oid) is 'is text search dictionary visible in search path?';

create function pg_catalog.pg_ts_parser_is_visible(oid) returns boolean
    stable
    strict
    cost 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_ts_parser_is_visible(oid) is 'is text search parser visible in search path?';

create function pg_catalog.pg_ts_template_is_visible(oid) returns boolean
    stable
    strict
    cost 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_ts_template_is_visible(oid) is 'is text search template visible in search path?';

create function pg_catalog.pg_type_is_visible(oid) returns boolean
    stable
    strict
    cost 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_type_is_visible(oid) is 'is type visible in search path?';

create function pg_catalog.pg_typeof("any") returns regtype
    stable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_typeof("any") is 'type of the argument';

create function pg_catalog.pg_wal_lsn_diff(pg_lsn, pg_lsn) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_wal_lsn_diff(pg_lsn, pg_lsn) is 'difference in bytes, given two wal locations';

create function pg_catalog.pg_wal_replay_pause() returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_wal_replay_pause() is 'pause wal replay';

create function pg_catalog.pg_wal_replay_resume() returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_wal_replay_resume() is 'resume wal replay, if it was paused';

create function pg_catalog.pg_walfile_name(pg_lsn) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_walfile_name(pg_lsn) is 'wal filename, given a wal location';

create function pg_catalog.pg_walfile_name_offset(lsn pg_lsn, out file_name text, out file_offset integer) returns record
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_walfile_name_offset(pg_lsn, out text, out integer) is 'wal filename and byte offset, given a wal location';

create function pg_catalog.pg_xact_commit_timestamp(xid) returns timestamp with time zone
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pg_xact_commit_timestamp(xid) is 'get commit timestamp of a transaction';

create function pg_catalog.phraseto_tsquery(regconfig, text) returns tsquery
    immutable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.phraseto_tsquery(regconfig, text) is 'transform to tsquery';

create function pg_catalog.phraseto_tsquery(text) returns tsquery
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.phraseto_tsquery(text) is 'transform to tsquery';

create function pg_catalog.pi() returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pi() is 'PI';

create function pg_catalog.plainto_tsquery(regconfig, text) returns tsquery
    immutable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.plainto_tsquery(regconfig, text) is 'transform to tsquery';

create function pg_catalog.plainto_tsquery(text) returns tsquery
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.plainto_tsquery(text) is 'transform to tsquery';

create function pg_catalog.plpgsql_call_handler() returns language_handler
    language c
as $$
begin
-- missing source code
end;
$$;

create function pg_catalog.plpgsql_inline_handler(internal) returns void
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

create function pg_catalog.plpgsql_validator(oid) returns void
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

create function pg_catalog.point(box) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.point(box) is 'center of';

create function pg_catalog.point(circle) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.point(circle) is 'center of';

create function pg_catalog.point(double precision, double precision) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.point(double precision, double precision) is 'convert x, y to point';

create function pg_catalog.point(lseg) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.point(lseg) is 'center of';

create function pg_catalog.point(path) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.point(path) is 'center of';

create function pg_catalog.point(polygon) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.point(polygon) is 'center of';

create function pg_catalog.point_above(point, point) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.point_above(point, point) is 'implementation of >^ operator';

create function pg_catalog.point_add(point, point) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.point_add(point, point) is 'implementation of + operator';

create function pg_catalog.point_below(point, point) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.point_below(point, point) is 'implementation of <^ operator';

create function pg_catalog.point_distance(point, point) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.point_distance(point, point) is 'implementation of <-> operator';

create function pg_catalog.point_div(point, point) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.point_div(point, point) is 'implementation of / operator';

create function pg_catalog.point_eq(point, point) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.point_eq(point, point) is 'implementation of ~= operator';

create function pg_catalog.point_horiz(point, point) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.point_horiz(point, point) is 'implementation of ?- operator';

create function pg_catalog.point_in(cstring) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.point_in(cstring) is 'I/O';

create function pg_catalog.point_left(point, point) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.point_left(point, point) is 'implementation of << operator';

create function pg_catalog.point_mul(point, point) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.point_mul(point, point) is 'implementation of * operator';

create function pg_catalog.point_ne(point, point) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.point_ne(point, point) is 'implementation of <> operator';

create function pg_catalog.point_out(point) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.point_out(point) is 'I/O';

create function pg_catalog.point_recv(internal) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.point_recv(internal) is 'I/O';

create function pg_catalog.point_right(point, point) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.point_right(point, point) is 'implementation of >> operator';

create function pg_catalog.point_send(point) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.point_send(point) is 'I/O';

create function pg_catalog.point_sub(point, point) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.point_sub(point, point) is 'implementation of - operator';

create function pg_catalog.point_vert(point, point) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.point_vert(point, point) is 'implementation of ?| operator';

create function pg_catalog.poly_above(polygon, polygon) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.poly_above(polygon, polygon) is 'implementation of |>> operator';

create function pg_catalog.poly_below(polygon, polygon) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.poly_below(polygon, polygon) is 'implementation of <<| operator';

create function pg_catalog.poly_center(polygon) returns point
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.poly_center(polygon) is 'implementation of @@ operator';

create function pg_catalog.poly_contain(polygon, polygon) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.poly_contain(polygon, polygon) is 'implementation of @> operator';

create function pg_catalog.poly_contain_pt(polygon, point) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.poly_contain_pt(polygon, point) is 'implementation of @> operator';

create function pg_catalog.poly_contained(polygon, polygon) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.poly_contained(polygon, polygon) is 'implementation of <@ operator';

create function pg_catalog.poly_distance(polygon, polygon) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.poly_distance(polygon, polygon) is 'implementation of <-> operator';

create function pg_catalog.poly_in(cstring) returns polygon
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.poly_in(cstring) is 'I/O';

create function pg_catalog.poly_left(polygon, polygon) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.poly_left(polygon, polygon) is 'implementation of << operator';

create function pg_catalog.poly_npoints(polygon) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.poly_npoints(polygon) is 'implementation of # operator';

create function pg_catalog.poly_out(polygon) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.poly_out(polygon) is 'I/O';

create function pg_catalog.poly_overabove(polygon, polygon) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.poly_overabove(polygon, polygon) is 'implementation of |&> operator';

create function pg_catalog.poly_overbelow(polygon, polygon) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.poly_overbelow(polygon, polygon) is 'implementation of &<| operator';

create function pg_catalog.poly_overlap(polygon, polygon) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.poly_overlap(polygon, polygon) is 'implementation of && operator';

create function pg_catalog.poly_overleft(polygon, polygon) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.poly_overleft(polygon, polygon) is 'implementation of &< operator';

create function pg_catalog.poly_overright(polygon, polygon) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.poly_overright(polygon, polygon) is 'implementation of &> operator';

create function pg_catalog.poly_recv(internal) returns polygon
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.poly_recv(internal) is 'I/O';

create function pg_catalog.poly_right(polygon, polygon) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.poly_right(polygon, polygon) is 'implementation of >> operator';

create function pg_catalog.poly_same(polygon, polygon) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.poly_same(polygon, polygon) is 'implementation of ~= operator';

create function pg_catalog.poly_send(polygon) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.poly_send(polygon) is 'I/O';

create function pg_catalog.polygon(box) returns polygon
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.polygon(box) is 'convert box to polygon';

create function pg_catalog.polygon(circle) returns polygon
    immutable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.polygon(circle) is 'convert circle to 12-vertex polygon';

create function pg_catalog.polygon(integer, circle) returns polygon
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.polygon(integer, circle) is 'convert vertex count and circle to polygon';

create function pg_catalog.polygon(path) returns polygon
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.polygon(path) is 'convert path to polygon';

create function pg_catalog.popen(path) returns path
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.popen(path) is 'open path';

create function pg_catalog.position(bit, bit) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.position(bit, bit) is 'position of sub-bitstring';

create function pg_catalog.position(bytea, bytea) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.position(bytea, bytea) is 'position of substring';

create function pg_catalog.position(text, text) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.position(text, text) is 'position of substring';

create function pg_catalog.positionjoinsel(internal, oid, internal, smallint, internal) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.positionjoinsel(internal, oid, internal, smallint, internal) is 'join selectivity for position-comparison operators';

create function pg_catalog.positionsel(internal, oid, internal, integer) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.positionsel(internal, oid, internal, integer) is 'restriction selectivity for position-comparison operators';

create function pg_catalog.postgresql_fdw_validator(text[], oid) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.postgresql_fdw_validator(text[], oid) is '(internal)';

create function pg_catalog.pow(double precision, double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pow(double precision, double precision) is 'exponentiation';

create function pg_catalog.pow(numeric, numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pow(numeric, numeric) is 'exponentiation';

create function pg_catalog.power(double precision, double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.power(double precision, double precision) is 'exponentiation';

create function pg_catalog.power(numeric, numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.power(numeric, numeric) is 'exponentiation';

create function pg_catalog.prefixjoinsel(internal, oid, internal, smallint, internal) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.prefixjoinsel(internal, oid, internal, smallint, internal) is 'join selectivity of exact prefix';

create function pg_catalog.prefixsel(internal, oid, internal, integer) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.prefixsel(internal, oid, internal, integer) is 'restriction selectivity of exact prefix';

create function pg_catalog.prsd_end(internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.prsd_end(internal) is '(internal)';

create function pg_catalog.prsd_headline(internal, internal, tsquery) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.prsd_headline(internal, internal, tsquery) is '(internal)';

create function pg_catalog.prsd_lextype(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.prsd_lextype(internal) is '(internal)';

create function pg_catalog.prsd_nexttoken(internal, internal, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.prsd_nexttoken(internal, internal, internal) is '(internal)';

create function pg_catalog.prsd_start(internal, integer) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.prsd_start(internal, integer) is '(internal)';

create function pg_catalog.pt_contained_circle(point, circle) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pt_contained_circle(point, circle) is 'implementation of <@ operator';

create function pg_catalog.pt_contained_poly(point, polygon) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.pt_contained_poly(point, polygon) is 'implementation of <@ operator';

create function pg_catalog.query_to_xml(query text, nulls boolean, tableforest boolean, targetns text) returns xml
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.query_to_xml(text, boolean, boolean, text) is 'map query result to XML';

create function pg_catalog.query_to_xml_and_xmlschema(query text, nulls boolean, tableforest boolean, targetns text) returns xml
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.query_to_xml_and_xmlschema(text, boolean, boolean, text) is 'map query result and structure to XML and XML Schema';

create function pg_catalog.query_to_xmlschema(query text, nulls boolean, tableforest boolean, targetns text) returns xml
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.query_to_xmlschema(text, boolean, boolean, text) is 'map query result structure to XML Schema';

create function pg_catalog.querytree(tsquery) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.querytree(tsquery) is 'show real useful query for GiST index';

create function pg_catalog.quote_ident(text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.quote_ident(text) is 'quote an identifier for usage in a querystring';

create function pg_catalog.quote_literal(anyelement) returns text
    stable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.quote_literal(anyelement) is 'quote a data value for usage in a querystring';

create function pg_catalog.quote_literal(text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.quote_literal(text) is 'quote a literal for usage in a querystring';

create function pg_catalog.quote_nullable(anyelement) returns text
    stable
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.quote_nullable(anyelement) is 'quote a possibly-null data value for usage in a querystring';

create function pg_catalog.quote_nullable(text) returns text
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.quote_nullable(text) is 'quote a possibly-null literal for usage in a querystring';

create function pg_catalog.radians(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.radians(double precision) is 'degrees to radians';

create function pg_catalog.radius(circle) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.radius(circle) is 'radius of circle';

create function pg_catalog.random() returns double precision
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.random() is 'random value';

create function pg_catalog.range_adjacent(anyrange, anyrange) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_adjacent(anyrange, anyrange) is 'implementation of -|- operator';

create function pg_catalog.range_after(anyrange, anyrange) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_after(anyrange, anyrange) is 'implementation of >> operator';

create function pg_catalog.range_before(anyrange, anyrange) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_before(anyrange, anyrange) is 'implementation of << operator';

create function pg_catalog.range_cmp(anyrange, anyrange) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_cmp(anyrange, anyrange) is 'less-equal-greater';

create function pg_catalog.range_contained_by(anyrange, anyrange) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_contained_by(anyrange, anyrange) is 'implementation of <@ operator';

create function pg_catalog.range_contains(anyrange, anyrange) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_contains(anyrange, anyrange) is 'implementation of @> operator';

create function pg_catalog.range_contains_elem(anyrange, anyelement) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_contains_elem(anyrange, anyelement) is 'implementation of @> operator';

create function pg_catalog.range_eq(anyrange, anyrange) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_eq(anyrange, anyrange) is 'implementation of = operator';

create function pg_catalog.range_ge(anyrange, anyrange) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_ge(anyrange, anyrange) is 'implementation of >= operator';

create function pg_catalog.range_gist_consistent(internal, anyrange, smallint, oid, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_gist_consistent(internal, anyrange, smallint, oid, internal) is 'GiST support';

create function pg_catalog.range_gist_penalty(internal, internal, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_gist_penalty(internal, internal, internal) is 'GiST support';

create function pg_catalog.range_gist_picksplit(internal, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_gist_picksplit(internal, internal) is 'GiST support';

create function pg_catalog.range_gist_same(anyrange, anyrange, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_gist_same(anyrange, anyrange, internal) is 'GiST support';

create function pg_catalog.range_gist_union(internal, internal) returns anyrange
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_gist_union(internal, internal) is 'GiST support';

create function pg_catalog.range_gt(anyrange, anyrange) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_gt(anyrange, anyrange) is 'implementation of > operator';

create function pg_catalog.range_in(cstring, oid, integer) returns anyrange
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_in(cstring, oid, integer) is 'I/O';

create function pg_catalog.range_intersect(anyrange, anyrange) returns anyrange
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_intersect(anyrange, anyrange) is 'implementation of * operator';

create function pg_catalog.range_le(anyrange, anyrange) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_le(anyrange, anyrange) is 'implementation of <= operator';

create function pg_catalog.range_lt(anyrange, anyrange) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_lt(anyrange, anyrange) is 'implementation of < operator';

create function pg_catalog.range_merge(anyrange, anyrange) returns anyrange
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_merge(anyrange, anyrange) is 'the smallest range which includes both of the given ranges';

create function pg_catalog.range_minus(anyrange, anyrange) returns anyrange
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_minus(anyrange, anyrange) is 'implementation of - operator';

create function pg_catalog.range_ne(anyrange, anyrange) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_ne(anyrange, anyrange) is 'implementation of <> operator';

create function pg_catalog.range_out(anyrange) returns cstring
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_out(anyrange) is 'I/O';

create function pg_catalog.range_overlaps(anyrange, anyrange) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_overlaps(anyrange, anyrange) is 'implementation of && operator';

create function pg_catalog.range_overleft(anyrange, anyrange) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_overleft(anyrange, anyrange) is 'implementation of &< operator';

create function pg_catalog.range_overright(anyrange, anyrange) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_overright(anyrange, anyrange) is 'implementation of &> operator';

create function pg_catalog.range_recv(internal, oid, integer) returns anyrange
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_recv(internal, oid, integer) is 'I/O';

create function pg_catalog.range_send(anyrange) returns bytea
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_send(anyrange) is 'I/O';

create function pg_catalog.range_typanalyze(internal) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_typanalyze(internal) is 'range typanalyze';

create function pg_catalog.range_union(anyrange, anyrange) returns anyrange
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.range_union(anyrange, anyrange) is 'implementation of + operator';

create function pg_catalog.rangesel(internal, oid, internal, integer) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.rangesel(internal, oid, internal, integer) is 'restriction selectivity for range operators';

create function pg_catalog.rank() returns bigint
    immutable
    window
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.rank() is 'integer rank with gaps';

create function pg_catalog.rank_final(internal, "any") returns bigint
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.rank_final(internal, "any") is 'aggregate final function';

create function pg_catalog.record_eq(record, record) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.record_eq(record, record) is 'implementation of = operator';

create function pg_catalog.record_ge(record, record) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.record_ge(record, record) is 'implementation of >= operator';

create function pg_catalog.record_gt(record, record) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.record_gt(record, record) is 'implementation of > operator';

create function pg_catalog.record_image_eq(record, record) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.record_image_eq(record, record) is 'implementation of *= operator';

create function pg_catalog.record_image_ge(record, record) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.record_image_ge(record, record) is 'implementation of *>= operator';

create function pg_catalog.record_image_gt(record, record) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.record_image_gt(record, record) is 'implementation of *> operator';

create function pg_catalog.record_image_le(record, record) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.record_image_le(record, record) is 'implementation of *<= operator';

create function pg_catalog.record_image_lt(record, record) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.record_image_lt(record, record) is 'implementation of *< operator';

create function pg_catalog.record_image_ne(record, record) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.record_image_ne(record, record) is 'implementation of *<> operator';

create function pg_catalog.record_in(cstring, oid, integer) returns record
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.record_in(cstring, oid, integer) is 'I/O';

create function pg_catalog.record_le(record, record) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.record_le(record, record) is 'implementation of <= operator';

create function pg_catalog.record_lt(record, record) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.record_lt(record, record) is 'implementation of < operator';

create function pg_catalog.record_ne(record, record) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.record_ne(record, record) is 'implementation of <> operator';

create function pg_catalog.record_out(record) returns cstring
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.record_out(record) is 'I/O';

create function pg_catalog.record_recv(internal, oid, integer) returns record
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.record_recv(internal, oid, integer) is 'I/O';

create function pg_catalog.record_send(record) returns bytea
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.record_send(record) is 'I/O';

create function pg_catalog.regclass(text) returns regclass
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regclass(text) is 'convert text to regclass';

create function pg_catalog.regclassin(cstring) returns regclass
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regclassin(cstring) is 'I/O';

create function pg_catalog.regclassout(regclass) returns cstring
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regclassout(regclass) is 'I/O';

create function pg_catalog.regclassrecv(internal) returns regclass
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regclassrecv(internal) is 'I/O';

create function pg_catalog.regclasssend(regclass) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regclasssend(regclass) is 'I/O';

create function pg_catalog.regconfigin(cstring) returns regconfig
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regconfigin(cstring) is 'I/O';

create function pg_catalog.regconfigout(regconfig) returns cstring
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regconfigout(regconfig) is 'I/O';

create function pg_catalog.regconfigrecv(internal) returns regconfig
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regconfigrecv(internal) is 'I/O';

create function pg_catalog.regconfigsend(regconfig) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regconfigsend(regconfig) is 'I/O';

create function pg_catalog.regdictionaryin(cstring) returns regdictionary
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regdictionaryin(cstring) is 'I/O';

create function pg_catalog.regdictionaryout(regdictionary) returns cstring
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regdictionaryout(regdictionary) is 'I/O';

create function pg_catalog.regdictionaryrecv(internal) returns regdictionary
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regdictionaryrecv(internal) is 'I/O';

create function pg_catalog.regdictionarysend(regdictionary) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regdictionarysend(regdictionary) is 'I/O';

create function pg_catalog.regexeqjoinsel(internal, oid, internal, smallint, internal) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regexeqjoinsel(internal, oid, internal, smallint, internal) is 'join selectivity of regex match';

create function pg_catalog.regexeqsel(internal, oid, internal, integer) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regexeqsel(internal, oid, internal, integer) is 'restriction selectivity of regex match';

create function pg_catalog.regexnejoinsel(internal, oid, internal, smallint, internal) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regexnejoinsel(internal, oid, internal, smallint, internal) is 'join selectivity of regex non-match';

create function pg_catalog.regexnesel(internal, oid, internal, integer) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regexnesel(internal, oid, internal, integer) is 'restriction selectivity of regex non-match';

create function pg_catalog.regexp_match(text, text) returns text[]
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regexp_match(text, text) is 'find first match for regexp';

create function pg_catalog.regexp_match(text, text, text) returns text[]
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regexp_match(text, text, text) is 'find first match for regexp';

create function pg_catalog.regexp_matches(text, text) returns setof setof text[]
    immutable
    strict
    cost 1
    rows 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regexp_matches(text, text) is 'find match(es) for regexp';

create function pg_catalog.regexp_matches(text, text, text) returns setof setof text[]
    immutable
    strict
    cost 1
    rows 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regexp_matches(text, text, text) is 'find match(es) for regexp';

create function pg_catalog.regexp_replace(text, text, text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regexp_replace(text, text, text) is 'replace text using regexp';

create function pg_catalog.regexp_replace(text, text, text, text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regexp_replace(text, text, text, text) is 'replace text using regexp';

create function pg_catalog.regexp_split_to_array(text, text) returns text[]
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regexp_split_to_array(text, text) is 'split string by pattern';

create function pg_catalog.regexp_split_to_array(text, text, text) returns text[]
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regexp_split_to_array(text, text, text) is 'split string by pattern';

create function pg_catalog.regexp_split_to_table(text, text) returns setof setof text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regexp_split_to_table(text, text) is 'split string by pattern';

create function pg_catalog.regexp_split_to_table(text, text, text) returns setof setof text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regexp_split_to_table(text, text, text) is 'split string by pattern';

create function pg_catalog.regnamespacein(cstring) returns regnamespace
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regnamespacein(cstring) is 'I/O';

create function pg_catalog.regnamespaceout(regnamespace) returns cstring
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regnamespaceout(regnamespace) is 'I/O';

create function pg_catalog.regnamespacerecv(internal) returns regnamespace
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regnamespacerecv(internal) is 'I/O';

create function pg_catalog.regnamespacesend(regnamespace) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regnamespacesend(regnamespace) is 'I/O';

create function pg_catalog.regoperatorin(cstring) returns regoperator
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regoperatorin(cstring) is 'I/O';

create function pg_catalog.regoperatorout(regoperator) returns cstring
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regoperatorout(regoperator) is 'I/O';

create function pg_catalog.regoperatorrecv(internal) returns regoperator
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regoperatorrecv(internal) is 'I/O';

create function pg_catalog.regoperatorsend(regoperator) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regoperatorsend(regoperator) is 'I/O';

create function pg_catalog.regoperin(cstring) returns regoper
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regoperin(cstring) is 'I/O';

create function pg_catalog.regoperout(regoper) returns cstring
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regoperout(regoper) is 'I/O';

create function pg_catalog.regoperrecv(internal) returns regoper
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regoperrecv(internal) is 'I/O';

create function pg_catalog.regopersend(regoper) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regopersend(regoper) is 'I/O';

create function pg_catalog.regprocedurein(cstring) returns regprocedure
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regprocedurein(cstring) is 'I/O';

create function pg_catalog.regprocedureout(regprocedure) returns cstring
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regprocedureout(regprocedure) is 'I/O';

create function pg_catalog.regprocedurerecv(internal) returns regprocedure
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regprocedurerecv(internal) is 'I/O';

create function pg_catalog.regproceduresend(regprocedure) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regproceduresend(regprocedure) is 'I/O';

create function pg_catalog.regprocin(cstring) returns regproc
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regprocin(cstring) is 'I/O';

create function pg_catalog.regprocout(regproc) returns cstring
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regprocout(regproc) is 'I/O';

create function pg_catalog.regprocrecv(internal) returns regproc
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regprocrecv(internal) is 'I/O';

create function pg_catalog.regprocsend(regproc) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regprocsend(regproc) is 'I/O';

create function pg_catalog.regrolein(cstring) returns regrole
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regrolein(cstring) is 'I/O';

create function pg_catalog.regroleout(regrole) returns cstring
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regroleout(regrole) is 'I/O';

create function pg_catalog.regrolerecv(internal) returns regrole
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regrolerecv(internal) is 'I/O';

create function pg_catalog.regrolesend(regrole) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regrolesend(regrole) is 'I/O';

create function pg_catalog.regtypein(cstring) returns regtype
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regtypein(cstring) is 'I/O';

create function pg_catalog.regtypeout(regtype) returns cstring
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regtypeout(regtype) is 'I/O';

create function pg_catalog.regtyperecv(internal) returns regtype
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regtyperecv(internal) is 'I/O';

create function pg_catalog.regtypesend(regtype) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.regtypesend(regtype) is 'I/O';

create function pg_catalog.repeat(text, integer) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.repeat(text, integer) is 'replicate string n times';

create function pg_catalog.replace(text, text, text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.replace(text, text, text) is 'replace all occurrences in string of old_substr with new_substr';

create function pg_catalog.reverse(text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.reverse(text) is 'reverse text';

create function pg_catalog."right"(text, integer) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."right"(text, integer) is 'extract the last n characters';

create function pg_catalog.round(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.round(double precision) is 'round to nearest integer';

create function pg_catalog.round(numeric) returns numeric
    immutable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.round(numeric) is 'value rounded to ''scale'' of zero';

create function pg_catalog.round(numeric, integer) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.round(numeric, integer) is 'value rounded to ''scale''';

create function pg_catalog.row_number() returns bigint
    immutable
    window
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.row_number() is 'row number within partition';

create function pg_catalog.row_security_active(oid) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.row_security_active(oid) is 'row security for current context active on table by table oid';

create function pg_catalog.row_security_active(text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.row_security_active(text) is 'row security for current context active on table by table name';

create function pg_catalog.row_to_json(record) returns json
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.row_to_json(record) is 'map row to json';

create function pg_catalog.row_to_json(record, boolean) returns json
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.row_to_json(record, boolean) is 'map row to json with optional pretty printing';

create function pg_catalog.rpad(text, integer) returns text
    immutable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.rpad(text, integer) is 'right-pad string to length';

create function pg_catalog.rpad(text, integer, text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.rpad(text, integer, text) is 'right-pad string to length';

create function pg_catalog.rtrim(text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.rtrim(text) is 'trim spaces from right end of string';

create function pg_catalog.rtrim(text, text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.rtrim(text, text) is 'trim selected characters from right end of string';

create function pg_catalog.satisfies_hash_partition(oid, integer, integer, "any") returns boolean
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.satisfies_hash_partition(oid, integer, integer, "any") is 'hash partition CHECK constraint';

create function pg_catalog.scalargejoinsel(internal, oid, internal, smallint, internal) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.scalargejoinsel(internal, oid, internal, smallint, internal) is 'join selectivity of >= and related operators on scalar datatypes';

create function pg_catalog.scalargesel(internal, oid, internal, integer) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.scalargesel(internal, oid, internal, integer) is 'restriction selectivity of >= and related operators on scalar datatypes';

create function pg_catalog.scalargtjoinsel(internal, oid, internal, smallint, internal) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.scalargtjoinsel(internal, oid, internal, smallint, internal) is 'join selectivity of > and related operators on scalar datatypes';

create function pg_catalog.scalargtsel(internal, oid, internal, integer) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.scalargtsel(internal, oid, internal, integer) is 'restriction selectivity of > and related operators on scalar datatypes';

create function pg_catalog.scalarlejoinsel(internal, oid, internal, smallint, internal) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.scalarlejoinsel(internal, oid, internal, smallint, internal) is 'join selectivity of <= and related operators on scalar datatypes';

create function pg_catalog.scalarlesel(internal, oid, internal, integer) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.scalarlesel(internal, oid, internal, integer) is 'restriction selectivity of <= and related operators on scalar datatypes';

create function pg_catalog.scalarltjoinsel(internal, oid, internal, smallint, internal) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.scalarltjoinsel(internal, oid, internal, smallint, internal) is 'join selectivity of < and related operators on scalar datatypes';

create function pg_catalog.scalarltsel(internal, oid, internal, integer) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.scalarltsel(internal, oid, internal, integer) is 'restriction selectivity of < and related operators on scalar datatypes';

create function pg_catalog.scale(numeric) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.scale(numeric) is 'number of decimal digits in the fractional part';

create function pg_catalog.schema_to_xml(schema name, nulls boolean, tableforest boolean, targetns text) returns xml
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.schema_to_xml(name, boolean, boolean, text) is 'map schema contents to XML';

create function pg_catalog.schema_to_xml_and_xmlschema(schema name, nulls boolean, tableforest boolean, targetns text) returns xml
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.schema_to_xml_and_xmlschema(name, boolean, boolean, text) is 'map schema contents and structure to XML and XML Schema';

create function pg_catalog.schema_to_xmlschema(schema name, nulls boolean, tableforest boolean, targetns text) returns xml
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.schema_to_xmlschema(name, boolean, boolean, text) is 'map schema structure to XML Schema';

create function pg_catalog."session_user"() returns name
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog."session_user"() is 'session user name';

create function pg_catalog.set_bit(bit, integer, integer) returns bit
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.set_bit(bit, integer, integer) is 'set bit';

create function pg_catalog.set_bit(bytea, integer, integer) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.set_bit(bytea, integer, integer) is 'set bit';

create function pg_catalog.set_byte(bytea, integer, integer) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.set_byte(bytea, integer, integer) is 'set byte';

create function pg_catalog.set_config(text, text, boolean) returns text
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.set_config(text, text, boolean) is 'SET X as a function';

create function pg_catalog.set_masklen(cidr, integer) returns cidr
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.set_masklen(cidr, integer) is 'change netmask of cidr';

create function pg_catalog.set_masklen(inet, integer) returns inet
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.set_masklen(inet, integer) is 'change netmask of inet';

create function pg_catalog.setseed(double precision) returns void
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.setseed(double precision) is 'set random seed';

create function pg_catalog.setval(regclass, bigint) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.setval(regclass, bigint) is 'set sequence value';

create function pg_catalog.setval(regclass, bigint, boolean) returns bigint
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.setval(regclass, bigint, boolean) is 'set sequence value and is_called status';

create function pg_catalog.setweight(tsvector, "char") returns tsvector
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.setweight(tsvector, "char") is 'set given weight for whole tsvector';

create function pg_catalog.setweight(tsvector, "char", text[]) returns tsvector
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.setweight(tsvector, "char", text[]) is 'set given weight for given lexemes';

create function pg_catalog.sha224(bytea) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.sha224(bytea) is 'SHA-224 hash';

create function pg_catalog.sha256(bytea) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.sha256(bytea) is 'SHA-256 hash';

create function pg_catalog.sha384(bytea) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.sha384(bytea) is 'SHA-384 hash';

create function pg_catalog.sha512(bytea) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.sha512(bytea) is 'SHA-512 hash';

create function pg_catalog.shell_in(cstring) returns opaque
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.shell_in(cstring) is 'I/O';

create function pg_catalog.shell_out(opaque) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.shell_out(opaque) is 'I/O';

create function pg_catalog.shift_jis_2004_to_euc_jis_2004(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.shift_jis_2004_to_euc_jis_2004(integer, integer, cstring, internal, integer) is 'internal conversion function for SHIFT_JIS_2004 to EUC_JIS_2004';

create function pg_catalog.shift_jis_2004_to_utf8(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.shift_jis_2004_to_utf8(integer, integer, cstring, internal, integer) is 'internal conversion function for SHIFT_JIS_2004 to UTF8';

create function pg_catalog.shobj_description(oid, name) returns text
    stable
    strict
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.shobj_description(oid, name) is 'get description for object id and shared catalog name';

create function pg_catalog.sign(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.sign(double precision) is 'sign of value';

create function pg_catalog.sign(numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.sign(numeric) is 'sign of value';

create function pg_catalog.similar_escape(text, text) returns text
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.similar_escape(text, text) is 'convert SQL99 regexp pattern to POSIX style';

create function pg_catalog.sin(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.sin(double precision) is 'sine';

create function pg_catalog.sind(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.sind(double precision) is 'sine, degrees';

create function pg_catalog.sinh(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.sinh(double precision) is 'hyperbolic sine';

create function pg_catalog.sjis_to_euc_jp(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.sjis_to_euc_jp(integer, integer, cstring, internal, integer) is 'internal conversion function for SJIS to EUC_JP';

create function pg_catalog.sjis_to_mic(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.sjis_to_mic(integer, integer, cstring, internal, integer) is 'internal conversion function for SJIS to MULE_INTERNAL';

create function pg_catalog.sjis_to_utf8(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.sjis_to_utf8(integer, integer, cstring, internal, integer) is 'internal conversion function for SJIS to UTF8';

create function pg_catalog.slope(point, point) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.slope(point, point) is 'slope between points';

create function pg_catalog.spg_bbox_quad_config(internal, internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_bbox_quad_config(internal, internal) is 'SP-GiST support for quad tree over 2-D types represented by their bounding boxes';

create function pg_catalog.spg_box_quad_choose(internal, internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_box_quad_choose(internal, internal) is 'SP-GiST support for quad tree over box';

create function pg_catalog.spg_box_quad_config(internal, internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_box_quad_config(internal, internal) is 'SP-GiST support for quad tree over box';

create function pg_catalog.spg_box_quad_inner_consistent(internal, internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_box_quad_inner_consistent(internal, internal) is 'SP-GiST support for quad tree over box';

create function pg_catalog.spg_box_quad_leaf_consistent(internal, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_box_quad_leaf_consistent(internal, internal) is 'SP-GiST support for quad tree over box';

create function pg_catalog.spg_box_quad_picksplit(internal, internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_box_quad_picksplit(internal, internal) is 'SP-GiST support for quad tree over box';

create function pg_catalog.spg_kd_choose(internal, internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_kd_choose(internal, internal) is 'SP-GiST support for k-d tree over point';

create function pg_catalog.spg_kd_config(internal, internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_kd_config(internal, internal) is 'SP-GiST support for k-d tree over point';

create function pg_catalog.spg_kd_inner_consistent(internal, internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_kd_inner_consistent(internal, internal) is 'SP-GiST support for k-d tree over point';

create function pg_catalog.spg_kd_picksplit(internal, internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_kd_picksplit(internal, internal) is 'SP-GiST support for k-d tree over point';

create function pg_catalog.spg_poly_quad_compress(polygon) returns box
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_poly_quad_compress(polygon) is 'SP-GiST support for quad tree over polygons';

create function pg_catalog.spg_quad_choose(internal, internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_quad_choose(internal, internal) is 'SP-GiST support for quad tree over point';

create function pg_catalog.spg_quad_config(internal, internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_quad_config(internal, internal) is 'SP-GiST support for quad tree over point';

create function pg_catalog.spg_quad_inner_consistent(internal, internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_quad_inner_consistent(internal, internal) is 'SP-GiST support for quad tree over point';

create function pg_catalog.spg_quad_leaf_consistent(internal, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_quad_leaf_consistent(internal, internal) is 'SP-GiST support for quad tree and k-d tree over point';

create function pg_catalog.spg_quad_picksplit(internal, internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_quad_picksplit(internal, internal) is 'SP-GiST support for quad tree over point';

create function pg_catalog.spg_range_quad_choose(internal, internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_range_quad_choose(internal, internal) is 'SP-GiST support for quad tree over range';

create function pg_catalog.spg_range_quad_config(internal, internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_range_quad_config(internal, internal) is 'SP-GiST support for quad tree over range';

create function pg_catalog.spg_range_quad_inner_consistent(internal, internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_range_quad_inner_consistent(internal, internal) is 'SP-GiST support for quad tree over range';

create function pg_catalog.spg_range_quad_leaf_consistent(internal, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_range_quad_leaf_consistent(internal, internal) is 'SP-GiST support for quad tree over range';

create function pg_catalog.spg_range_quad_picksplit(internal, internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_range_quad_picksplit(internal, internal) is 'SP-GiST support for quad tree over range';

create function pg_catalog.spg_text_choose(internal, internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_text_choose(internal, internal) is 'SP-GiST support for radix tree over text';

create function pg_catalog.spg_text_config(internal, internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_text_config(internal, internal) is 'SP-GiST support for radix tree over text';

create function pg_catalog.spg_text_inner_consistent(internal, internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_text_inner_consistent(internal, internal) is 'SP-GiST support for radix tree over text';

create function pg_catalog.spg_text_leaf_consistent(internal, internal) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_text_leaf_consistent(internal, internal) is 'SP-GiST support for radix tree over text';

create function pg_catalog.spg_text_picksplit(internal, internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spg_text_picksplit(internal, internal) is 'SP-GiST support for radix tree over text';

create function pg_catalog.spghandler(internal) returns index_am_handler
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.spghandler(internal) is 'spgist index access method handler';

create function pg_catalog.split_part(text, text, integer) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.split_part(text, text, integer) is 'split string by field_sep and return field_num';

create function pg_catalog.sqrt(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.sqrt(double precision) is 'square root';

create function pg_catalog.sqrt(numeric) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.sqrt(numeric) is 'square root';

create function pg_catalog.starts_with(text, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.starts_with(text, text) is 'implementation of ^@ operator';

create function pg_catalog.statement_timestamp() returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.statement_timestamp() is 'current statement time';

create function pg_catalog.string_agg_finalfn(internal) returns text
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.string_agg_finalfn(internal) is 'aggregate final function';

create function pg_catalog.string_agg_transfn(internal, text, text) returns internal
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.string_agg_transfn(internal, text, text) is 'aggregate transition function';

create function pg_catalog.string_to_array(text, text) returns text[]
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.string_to_array(text, text) is 'split delimited text into text[]';

create function pg_catalog.string_to_array(text, text, text) returns text[]
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.string_to_array(text, text, text) is 'split delimited text into text[], with null string';

create function pg_catalog.strip(tsvector) returns tsvector
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.strip(tsvector) is 'strip position information';

create function pg_catalog.strpos(text, text) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.strpos(text, text) is 'position of substring';

create function pg_catalog.substr(bytea, integer) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.substr(bytea, integer) is 'extract portion of string';

create function pg_catalog.substr(bytea, integer, integer) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.substr(bytea, integer, integer) is 'extract portion of string';

create function pg_catalog.substr(text, integer) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.substr(text, integer) is 'extract portion of string';

create function pg_catalog.substr(text, integer, integer) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.substr(text, integer, integer) is 'extract portion of string';

create function pg_catalog.substring(bit, integer) returns bit
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.substring(bit, integer) is 'extract portion of bitstring';

create function pg_catalog.substring(bit, integer, integer) returns bit
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.substring(bit, integer, integer) is 'extract portion of bitstring';

create function pg_catalog.substring(bytea, integer) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.substring(bytea, integer) is 'extract portion of string';

create function pg_catalog.substring(bytea, integer, integer) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.substring(bytea, integer, integer) is 'extract portion of string';

create function pg_catalog.substring(text, integer) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.substring(text, integer) is 'extract portion of string';

create function pg_catalog.substring(text, integer, integer) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.substring(text, integer, integer) is 'extract portion of string';

create function pg_catalog.substring(text, text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.substring(text, text) is 'extract text matching regular expression';

create function pg_catalog.substring(text, text, text) returns text
    immutable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.substring(text, text, text) is 'extract text matching SQL99 regular expression';

create function pg_catalog.suppress_redundant_updates_trigger() returns trigger
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.suppress_redundant_updates_trigger() is 'trigger to suppress updates when new and old records match';

create function pg_catalog.system(internal) returns tsm_handler
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.system(internal) is 'SYSTEM tablesample method handler';

create function pg_catalog.table_am_handler_in(cstring) returns table_am_handler
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.table_am_handler_in(cstring) is 'I/O';

create function pg_catalog.table_am_handler_out(table_am_handler) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.table_am_handler_out(table_am_handler) is 'I/O';

create function pg_catalog.table_to_xml(tbl regclass, nulls boolean, tableforest boolean, targetns text) returns xml
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.table_to_xml(regclass, boolean, boolean, text) is 'map table contents to XML';

create function pg_catalog.table_to_xml_and_xmlschema(tbl regclass, nulls boolean, tableforest boolean, targetns text) returns xml
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.table_to_xml_and_xmlschema(regclass, boolean, boolean, text) is 'map table contents and structure to XML and XML Schema';

create function pg_catalog.table_to_xmlschema(tbl regclass, nulls boolean, tableforest boolean, targetns text) returns xml
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.table_to_xmlschema(regclass, boolean, boolean, text) is 'map table structure to XML Schema';

create function pg_catalog.tan(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tan(double precision) is 'tangent';

create function pg_catalog.tand(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tand(double precision) is 'tangent, degrees';

create function pg_catalog.tanh(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tanh(double precision) is 'hyperbolic tangent';

create function pg_catalog.text("char") returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.text("char") is 'convert char to text';

create function pg_catalog.text(boolean) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.text(boolean) is 'convert boolean to text';

create function pg_catalog.text(char) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.text(char) is 'convert char(n) to text';

create function pg_catalog.text(inet) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.text(inet) is 'show all parts of inet/cidr value';

create function pg_catalog.text(name) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.text(name) is 'convert name to text';

create function pg_catalog.text(xml) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.text(xml) is 'serialize an XML value to a character string';

create function pg_catalog.text_ge(text, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.text_ge(text, text) is 'implementation of >= operator';

create function pg_catalog.text_gt(text, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.text_gt(text, text) is 'implementation of > operator';

create function pg_catalog.text_larger(text, text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.text_larger(text, text) is 'larger of two';

create function pg_catalog.text_le(text, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.text_le(text, text) is 'implementation of <= operator';

create function pg_catalog.text_lt(text, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.text_lt(text, text) is 'implementation of < operator';

create function pg_catalog.text_pattern_ge(text, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.text_pattern_ge(text, text) is 'implementation of ~>=~ operator';

create function pg_catalog.text_pattern_gt(text, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.text_pattern_gt(text, text) is 'implementation of ~>~ operator';

create function pg_catalog.text_pattern_le(text, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.text_pattern_le(text, text) is 'implementation of ~<=~ operator';

create function pg_catalog.text_pattern_lt(text, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.text_pattern_lt(text, text) is 'implementation of ~<~ operator';

create function pg_catalog.text_smaller(text, text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.text_smaller(text, text) is 'smaller of two';

create function pg_catalog.textanycat(text, anynonarray) returns text
    stable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.textanycat(text, anynonarray) is 'implementation of || operator';

create function pg_catalog.textcat(text, text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.textcat(text, text) is 'implementation of || operator';

create function pg_catalog.texteq(text, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.texteq(text, text) is 'implementation of = operator';

create function pg_catalog.texteqname(text, name) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.texteqname(text, name) is 'implementation of = operator';

create function pg_catalog.textgename(text, name) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.textgename(text, name) is 'implementation of >= operator';

create function pg_catalog.textgtname(text, name) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.textgtname(text, name) is 'implementation of > operator';

create function pg_catalog.texticlike(text, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.texticlike(text, text) is 'implementation of ~~* operator';

create function pg_catalog.texticlike_support(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.texticlike_support(internal) is 'planner support for texticlike';

create function pg_catalog.texticnlike(text, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.texticnlike(text, text) is 'implementation of !~~* operator';

create function pg_catalog.texticregexeq(text, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.texticregexeq(text, text) is 'implementation of ~* operator';

create function pg_catalog.texticregexeq_support(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.texticregexeq_support(internal) is 'planner support for texticregexeq';

create function pg_catalog.texticregexne(text, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.texticregexne(text, text) is 'implementation of !~* operator';

create function pg_catalog.textin(cstring) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.textin(cstring) is 'I/O';

create function pg_catalog.textlen(text) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.textlen(text) is 'length';

create function pg_catalog.textlename(text, name) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.textlename(text, name) is 'implementation of <= operator';

create function pg_catalog.textlike(text, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.textlike(text, text) is 'implementation of ~~ operator';

create function pg_catalog.textlike_support(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.textlike_support(internal) is 'planner support for textlike';

create function pg_catalog.textltname(text, name) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.textltname(text, name) is 'implementation of < operator';

create function pg_catalog.textne(text, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.textne(text, text) is 'implementation of <> operator';

create function pg_catalog.textnename(text, name) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.textnename(text, name) is 'implementation of <> operator';

create function pg_catalog.textnlike(text, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.textnlike(text, text) is 'implementation of !~~ operator';

create function pg_catalog.textout(text) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.textout(text) is 'I/O';

create function pg_catalog.textrecv(internal) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.textrecv(internal) is 'I/O';

create function pg_catalog.textregexeq(text, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.textregexeq(text, text) is 'implementation of ~ operator';

create function pg_catalog.textregexeq_support(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.textregexeq_support(internal) is 'planner support for textregexeq';

create function pg_catalog.textregexne(text, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.textregexne(text, text) is 'implementation of !~ operator';

create function pg_catalog.textsend(text) returns bytea
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.textsend(text) is 'I/O';

create function pg_catalog.thesaurus_init(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.thesaurus_init(internal) is '(internal)';

create function pg_catalog.thesaurus_lexize(internal, internal, internal, internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.thesaurus_lexize(internal, internal, internal, internal) is '(internal)';

create function pg_catalog.tideq(tid, tid) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tideq(tid, tid) is 'implementation of = operator';

create function pg_catalog.tidge(tid, tid) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tidge(tid, tid) is 'implementation of >= operator';

create function pg_catalog.tidgt(tid, tid) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tidgt(tid, tid) is 'implementation of > operator';

create function pg_catalog.tidin(cstring) returns tid
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tidin(cstring) is 'I/O';

create function pg_catalog.tidlarger(tid, tid) returns tid
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tidlarger(tid, tid) is 'larger of two';

create function pg_catalog.tidle(tid, tid) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tidle(tid, tid) is 'implementation of <= operator';

create function pg_catalog.tidlt(tid, tid) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tidlt(tid, tid) is 'implementation of < operator';

create function pg_catalog.tidne(tid, tid) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tidne(tid, tid) is 'implementation of <> operator';

create function pg_catalog.tidout(tid) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tidout(tid) is 'I/O';

create function pg_catalog.tidrecv(internal) returns tid
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tidrecv(internal) is 'I/O';

create function pg_catalog.tidsend(tid) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tidsend(tid) is 'I/O';

create function pg_catalog.tidsmaller(tid, tid) returns tid
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tidsmaller(tid, tid) is 'smaller of two';

create function pg_catalog.time(interval) returns time
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.time(interval) is 'convert interval to time';

create function pg_catalog.time(time with time zone) returns time
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.time(time with time zone) is 'convert time with time zone to time';

create function pg_catalog.time(time, integer) returns time
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.time(time, integer) is 'adjust time precision';

create function pg_catalog.time(timestamp with time zone) returns time
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.time(timestamp with time zone) is 'convert timestamp with time zone to time';

create function pg_catalog.time(timestamp) returns time
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.time(timestamp) is 'convert timestamp to time';

create function pg_catalog.time_cmp(time, time) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.time_cmp(time, time) is 'less-equal-greater';

create function pg_catalog.time_eq(time, time) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.time_eq(time, time) is 'implementation of = operator';

create function pg_catalog.time_ge(time, time) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.time_ge(time, time) is 'implementation of >= operator';

create function pg_catalog.time_gt(time, time) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.time_gt(time, time) is 'implementation of > operator';

create function pg_catalog.time_hash(time) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.time_hash(time) is 'hash';

create function pg_catalog.time_hash_extended(time, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.time_hash_extended(time, bigint) is 'hash';

create function pg_catalog.time_in(cstring, oid, integer) returns time
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.time_in(cstring, oid, integer) is 'I/O';

create function pg_catalog.time_larger(time, time) returns time
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.time_larger(time, time) is 'larger of two';

create function pg_catalog.time_le(time, time) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.time_le(time, time) is 'implementation of <= operator';

create function pg_catalog.time_lt(time, time) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.time_lt(time, time) is 'implementation of < operator';

create function pg_catalog.time_mi_interval(time, interval) returns time
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.time_mi_interval(time, interval) is 'implementation of - operator';

create function pg_catalog.time_mi_time(time, time) returns interval
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.time_mi_time(time, time) is 'implementation of - operator';

create function pg_catalog.time_ne(time, time) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.time_ne(time, time) is 'implementation of <> operator';

create function pg_catalog.time_out(time) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.time_out(time) is 'I/O';

create function pg_catalog.time_pl_interval(time, interval) returns time
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.time_pl_interval(time, interval) is 'implementation of + operator';

create function pg_catalog.time_recv(internal, oid, integer) returns time
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.time_recv(internal, oid, integer) is 'I/O';

create function pg_catalog.time_send(time) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.time_send(time) is 'I/O';

create function pg_catalog.time_smaller(time, time) returns time
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.time_smaller(time, time) is 'smaller of two';

create function pg_catalog.time_support(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.time_support(internal) is 'planner support for time length coercion';

create function pg_catalog.timedate_pl(time without time zone, date) returns timestamp without time zone
    immutable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timedate_pl(time, date) is 'implementation of + operator';

create function pg_catalog.timeofday() returns text
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timeofday() is 'current date and time - increments during transactions';

create function pg_catalog.timestamp(date) returns timestamp
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp(date) is 'convert date to timestamp';

create function pg_catalog.timestamp(date, time) returns timestamp
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp(date, time) is 'convert date and time to timestamp';

create function pg_catalog.timestamp(timestamp with time zone) returns timestamp
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp(timestamp with time zone) is 'convert timestamp with time zone to timestamp';

create function pg_catalog.timestamp(timestamp, integer) returns timestamp
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp(timestamp, integer) is 'adjust timestamp precision';

create function pg_catalog.timestamp_cmp(timestamp, timestamp) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_cmp(timestamp, timestamp) is 'less-equal-greater';

create function pg_catalog.timestamp_cmp_date(timestamp, date) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_cmp_date(timestamp, date) is 'less-equal-greater';

create function pg_catalog.timestamp_cmp_timestamptz(timestamp, timestamp with time zone) returns integer
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_cmp_timestamptz(timestamp, timestamp with time zone) is 'less-equal-greater';

create function pg_catalog.timestamp_eq(timestamp, timestamp) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_eq(timestamp, timestamp) is 'implementation of = operator';

create function pg_catalog.timestamp_eq_date(timestamp, date) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_eq_date(timestamp, date) is 'implementation of = operator';

create function pg_catalog.timestamp_eq_timestamptz(timestamp, timestamp with time zone) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_eq_timestamptz(timestamp, timestamp with time zone) is 'implementation of = operator';

create function pg_catalog.timestamp_ge(timestamp, timestamp) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_ge(timestamp, timestamp) is 'implementation of >= operator';

create function pg_catalog.timestamp_ge_date(timestamp, date) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_ge_date(timestamp, date) is 'implementation of >= operator';

create function pg_catalog.timestamp_ge_timestamptz(timestamp, timestamp with time zone) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_ge_timestamptz(timestamp, timestamp with time zone) is 'implementation of >= operator';

create function pg_catalog.timestamp_gt(timestamp, timestamp) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_gt(timestamp, timestamp) is 'implementation of > operator';

create function pg_catalog.timestamp_gt_date(timestamp, date) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_gt_date(timestamp, date) is 'implementation of > operator';

create function pg_catalog.timestamp_gt_timestamptz(timestamp, timestamp with time zone) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_gt_timestamptz(timestamp, timestamp with time zone) is 'implementation of > operator';

create function pg_catalog.timestamp_hash(timestamp) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_hash(timestamp) is 'hash';

create function pg_catalog.timestamp_hash_extended(timestamp, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_hash_extended(timestamp, bigint) is 'hash';

create function pg_catalog.timestamp_in(cstring, oid, integer) returns timestamp
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_in(cstring, oid, integer) is 'I/O';

create function pg_catalog.timestamp_larger(timestamp, timestamp) returns timestamp
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_larger(timestamp, timestamp) is 'larger of two';

create function pg_catalog.timestamp_le(timestamp, timestamp) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_le(timestamp, timestamp) is 'implementation of <= operator';

create function pg_catalog.timestamp_le_date(timestamp, date) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_le_date(timestamp, date) is 'implementation of <= operator';

create function pg_catalog.timestamp_le_timestamptz(timestamp, timestamp with time zone) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_le_timestamptz(timestamp, timestamp with time zone) is 'implementation of <= operator';

create function pg_catalog.timestamp_lt(timestamp, timestamp) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_lt(timestamp, timestamp) is 'implementation of < operator';

create function pg_catalog.timestamp_lt_date(timestamp, date) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_lt_date(timestamp, date) is 'implementation of < operator';

create function pg_catalog.timestamp_lt_timestamptz(timestamp, timestamp with time zone) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_lt_timestamptz(timestamp, timestamp with time zone) is 'implementation of < operator';

create function pg_catalog.timestamp_mi(timestamp, timestamp) returns interval
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_mi(timestamp, timestamp) is 'implementation of - operator';

create function pg_catalog.timestamp_mi_interval(timestamp, interval) returns timestamp
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_mi_interval(timestamp, interval) is 'implementation of - operator';

create function pg_catalog.timestamp_ne(timestamp, timestamp) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_ne(timestamp, timestamp) is 'implementation of <> operator';

create function pg_catalog.timestamp_ne_date(timestamp, date) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_ne_date(timestamp, date) is 'implementation of <> operator';

create function pg_catalog.timestamp_ne_timestamptz(timestamp, timestamp with time zone) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_ne_timestamptz(timestamp, timestamp with time zone) is 'implementation of <> operator';

create function pg_catalog.timestamp_out(timestamp) returns cstring
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_out(timestamp) is 'I/O';

create function pg_catalog.timestamp_pl_interval(timestamp, interval) returns timestamp
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_pl_interval(timestamp, interval) is 'implementation of + operator';

create function pg_catalog.timestamp_recv(internal, oid, integer) returns timestamp
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_recv(internal, oid, integer) is 'I/O';

create function pg_catalog.timestamp_send(timestamp) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_send(timestamp) is 'I/O';

create function pg_catalog.timestamp_smaller(timestamp, timestamp) returns timestamp
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_smaller(timestamp, timestamp) is 'smaller of two';

create function pg_catalog.timestamp_sortsupport(internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_sortsupport(internal) is 'sort support';

create function pg_catalog.timestamp_support(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamp_support(internal) is 'planner support for timestamp length coercion';

create function pg_catalog.timestamptypmodin(cstring[]) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptypmodin(cstring[]) is 'I/O typmod';

create function pg_catalog.timestamptypmodout(integer) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptypmodout(integer) is 'I/O typmod';

create function pg_catalog.timestamptz(date) returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz(date) is 'convert date to timestamp with time zone';

create function pg_catalog.timestamptz(date, time with time zone) returns timestamp with time zone
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz(date, time with time zone) is 'convert date and time with time zone to timestamp with time zone';

create function pg_catalog.timestamptz(date, time without time zone) returns timestamp with time zone
    stable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz(date, time) is 'convert date and time to timestamp with time zone';

create function pg_catalog.timestamptz(timestamp with time zone, integer) returns timestamp with time zone
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz(timestamp with time zone, integer) is 'adjust timestamptz precision';

create function pg_catalog.timestamptz(timestamp) returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz(timestamp) is 'convert timestamp to timestamp with time zone';

create function pg_catalog.timestamptz_cmp(timestamp with time zone, timestamp with time zone) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_cmp(timestamp with time zone, timestamp with time zone) is 'less-equal-greater';

create function pg_catalog.timestamptz_cmp_date(timestamp with time zone, date) returns integer
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_cmp_date(timestamp with time zone, date) is 'less-equal-greater';

create function pg_catalog.timestamptz_cmp_timestamp(timestamp with time zone, timestamp) returns integer
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_cmp_timestamp(timestamp with time zone, timestamp) is 'less-equal-greater';

create function pg_catalog.timestamptz_eq(timestamp with time zone, timestamp with time zone) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_eq(timestamp with time zone, timestamp with time zone) is 'implementation of = operator';

create function pg_catalog.timestamptz_eq_date(timestamp with time zone, date) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_eq_date(timestamp with time zone, date) is 'implementation of = operator';

create function pg_catalog.timestamptz_eq_timestamp(timestamp with time zone, timestamp) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_eq_timestamp(timestamp with time zone, timestamp) is 'implementation of = operator';

create function pg_catalog.timestamptz_ge(timestamp with time zone, timestamp with time zone) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_ge(timestamp with time zone, timestamp with time zone) is 'implementation of >= operator';

create function pg_catalog.timestamptz_ge_date(timestamp with time zone, date) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_ge_date(timestamp with time zone, date) is 'implementation of >= operator';

create function pg_catalog.timestamptz_ge_timestamp(timestamp with time zone, timestamp) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_ge_timestamp(timestamp with time zone, timestamp) is 'implementation of >= operator';

create function pg_catalog.timestamptz_gt(timestamp with time zone, timestamp with time zone) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_gt(timestamp with time zone, timestamp with time zone) is 'implementation of > operator';

create function pg_catalog.timestamptz_gt_date(timestamp with time zone, date) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_gt_date(timestamp with time zone, date) is 'implementation of > operator';

create function pg_catalog.timestamptz_gt_timestamp(timestamp with time zone, timestamp) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_gt_timestamp(timestamp with time zone, timestamp) is 'implementation of > operator';

create function pg_catalog.timestamptz_in(cstring, oid, integer) returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_in(cstring, oid, integer) is 'I/O';

create function pg_catalog.timestamptz_larger(timestamp with time zone, timestamp with time zone) returns timestamp with time zone
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_larger(timestamp with time zone, timestamp with time zone) is 'larger of two';

create function pg_catalog.timestamptz_le(timestamp with time zone, timestamp with time zone) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_le(timestamp with time zone, timestamp with time zone) is 'implementation of <= operator';

create function pg_catalog.timestamptz_le_date(timestamp with time zone, date) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_le_date(timestamp with time zone, date) is 'implementation of <= operator';

create function pg_catalog.timestamptz_le_timestamp(timestamp with time zone, timestamp) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_le_timestamp(timestamp with time zone, timestamp) is 'implementation of <= operator';

create function pg_catalog.timestamptz_lt(timestamp with time zone, timestamp with time zone) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_lt(timestamp with time zone, timestamp with time zone) is 'implementation of < operator';

create function pg_catalog.timestamptz_lt_date(timestamp with time zone, date) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_lt_date(timestamp with time zone, date) is 'implementation of < operator';

create function pg_catalog.timestamptz_lt_timestamp(timestamp with time zone, timestamp) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_lt_timestamp(timestamp with time zone, timestamp) is 'implementation of < operator';

create function pg_catalog.timestamptz_mi(timestamp with time zone, timestamp with time zone) returns interval
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_mi(timestamp with time zone, timestamp with time zone) is 'implementation of - operator';

create function pg_catalog.timestamptz_mi_interval(timestamp with time zone, interval) returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_mi_interval(timestamp with time zone, interval) is 'implementation of - operator';

create function pg_catalog.timestamptz_ne(timestamp with time zone, timestamp with time zone) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_ne(timestamp with time zone, timestamp with time zone) is 'implementation of <> operator';

create function pg_catalog.timestamptz_ne_date(timestamp with time zone, date) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_ne_date(timestamp with time zone, date) is 'implementation of <> operator';

create function pg_catalog.timestamptz_ne_timestamp(timestamp with time zone, timestamp) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_ne_timestamp(timestamp with time zone, timestamp) is 'implementation of <> operator';

create function pg_catalog.timestamptz_out(timestamp with time zone) returns cstring
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_out(timestamp with time zone) is 'I/O';

create function pg_catalog.timestamptz_pl_interval(timestamp with time zone, interval) returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_pl_interval(timestamp with time zone, interval) is 'implementation of + operator';

create function pg_catalog.timestamptz_recv(internal, oid, integer) returns timestamp with time zone
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_recv(internal, oid, integer) is 'I/O';

create function pg_catalog.timestamptz_send(timestamp with time zone) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_send(timestamp with time zone) is 'I/O';

create function pg_catalog.timestamptz_smaller(timestamp with time zone, timestamp with time zone) returns timestamp with time zone
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptz_smaller(timestamp with time zone, timestamp with time zone) is 'smaller of two';

create function pg_catalog.timestamptztypmodin(cstring[]) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptztypmodin(cstring[]) is 'I/O typmod';

create function pg_catalog.timestamptztypmodout(integer) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timestamptztypmodout(integer) is 'I/O typmod';

create function pg_catalog.timetypmodin(cstring[]) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timetypmodin(cstring[]) is 'I/O typmod';

create function pg_catalog.timetypmodout(integer) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timetypmodout(integer) is 'I/O typmod';

create function pg_catalog.timetz(time with time zone, integer) returns time with time zone
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timetz(time with time zone, integer) is 'adjust time with time zone precision';

create function pg_catalog.timetz(time) returns time with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timetz(time) is 'convert time to time with time zone';

create function pg_catalog.timetz(timestamp with time zone) returns time with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timetz(timestamp with time zone) is 'convert timestamp with time zone to time with time zone';

create function pg_catalog.timetz_cmp(time with time zone, time with time zone) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timetz_cmp(time with time zone, time with time zone) is 'less-equal-greater';

create function pg_catalog.timetz_eq(time with time zone, time with time zone) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timetz_eq(time with time zone, time with time zone) is 'implementation of = operator';

create function pg_catalog.timetz_ge(time with time zone, time with time zone) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timetz_ge(time with time zone, time with time zone) is 'implementation of >= operator';

create function pg_catalog.timetz_gt(time with time zone, time with time zone) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timetz_gt(time with time zone, time with time zone) is 'implementation of > operator';

create function pg_catalog.timetz_hash(time with time zone) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timetz_hash(time with time zone) is 'hash';

create function pg_catalog.timetz_hash_extended(time with time zone, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timetz_hash_extended(time with time zone, bigint) is 'hash';

create function pg_catalog.timetz_in(cstring, oid, integer) returns time with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timetz_in(cstring, oid, integer) is 'I/O';

create function pg_catalog.timetz_larger(time with time zone, time with time zone) returns time with time zone
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timetz_larger(time with time zone, time with time zone) is 'larger of two';

create function pg_catalog.timetz_le(time with time zone, time with time zone) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timetz_le(time with time zone, time with time zone) is 'implementation of <= operator';

create function pg_catalog.timetz_lt(time with time zone, time with time zone) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timetz_lt(time with time zone, time with time zone) is 'implementation of < operator';

create function pg_catalog.timetz_mi_interval(time with time zone, interval) returns time with time zone
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timetz_mi_interval(time with time zone, interval) is 'implementation of - operator';

create function pg_catalog.timetz_ne(time with time zone, time with time zone) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timetz_ne(time with time zone, time with time zone) is 'implementation of <> operator';

create function pg_catalog.timetz_out(time with time zone) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timetz_out(time with time zone) is 'I/O';

create function pg_catalog.timetz_pl_interval(time with time zone, interval) returns time with time zone
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timetz_pl_interval(time with time zone, interval) is 'implementation of + operator';

create function pg_catalog.timetz_recv(internal, oid, integer) returns time with time zone
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timetz_recv(internal, oid, integer) is 'I/O';

create function pg_catalog.timetz_send(time with time zone) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timetz_send(time with time zone) is 'I/O';

create function pg_catalog.timetz_smaller(time with time zone, time with time zone) returns time with time zone
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timetz_smaller(time with time zone, time with time zone) is 'smaller of two';

create function pg_catalog.timetzdate_pl(time with time zone, date) returns timestamp with time zone
    immutable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timetzdate_pl(time with time zone, date) is 'implementation of + operator';

create function pg_catalog.timetztypmodin(cstring[]) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timetztypmodin(cstring[]) is 'I/O typmod';

create function pg_catalog.timetztypmodout(integer) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timetztypmodout(integer) is 'I/O typmod';

create function pg_catalog.timezone(interval, time with time zone) returns time with time zone
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timezone(interval, time with time zone) is 'adjust time with time zone to new zone';

create function pg_catalog.timezone(interval, timestamp with time zone) returns timestamp
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timezone(interval, timestamp with time zone) is 'adjust timestamp to new time zone';

create function pg_catalog.timezone(interval, timestamp) returns timestamp with time zone
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timezone(interval, timestamp) is 'adjust timestamp to new time zone';

create function pg_catalog.timezone(text, time with time zone) returns time with time zone
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timezone(text, time with time zone) is 'adjust time with time zone to new zone';

create function pg_catalog.timezone(text, timestamp with time zone) returns timestamp
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timezone(text, timestamp with time zone) is 'adjust timestamp to new time zone';

create function pg_catalog.timezone(text, timestamp) returns timestamp with time zone
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.timezone(text, timestamp) is 'adjust timestamp to new time zone';

create function pg_catalog.to_ascii(text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_ascii(text) is 'encode text from DB encoding to ASCII text';

create function pg_catalog.to_ascii(text, integer) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_ascii(text, integer) is 'encode text from encoding to ASCII text';

create function pg_catalog.to_ascii(text, name) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_ascii(text, name) is 'encode text from encoding to ASCII text';

create function pg_catalog.to_char(bigint, text) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_char(bigint, text) is 'format int8 to text';

create function pg_catalog.to_char(double precision, text) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_char(double precision, text) is 'format float8 to text';

create function pg_catalog.to_char(integer, text) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_char(integer, text) is 'format int4 to text';

create function pg_catalog.to_char(interval, text) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_char(interval, text) is 'format interval to text';

create function pg_catalog.to_char(numeric, text) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_char(numeric, text) is 'format numeric to text';

create function pg_catalog.to_char(real, text) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_char(real, text) is 'format float4 to text';

create function pg_catalog.to_char(timestamp with time zone, text) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_char(timestamp with time zone, text) is 'format timestamp with time zone to text';

create function pg_catalog.to_char(timestamp, text) returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_char(timestamp, text) is 'format timestamp to text';

create function pg_catalog.to_date(text, text) returns date
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_date(text, text) is 'convert text to date';

create function pg_catalog.to_hex(bigint) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_hex(bigint) is 'convert int8 number to hex';

create function pg_catalog.to_hex(integer) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_hex(integer) is 'convert int4 number to hex';

create function pg_catalog.to_json(anyelement) returns json
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_json(anyelement) is 'map input to json';

create function pg_catalog.to_jsonb(anyelement) returns jsonb
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_jsonb(anyelement) is 'map input to jsonb';

create function pg_catalog.to_number(text, text) returns numeric
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_number(text, text) is 'convert text to numeric';

create function pg_catalog.to_regclass(text) returns regclass
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_regclass(text) is 'convert classname to regclass';

create function pg_catalog.to_regnamespace(text) returns regnamespace
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_regnamespace(text) is 'convert namespace name to regnamespace';

create function pg_catalog.to_regoper(text) returns regoper
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_regoper(text) is 'convert operator name to regoper';

create function pg_catalog.to_regoperator(text) returns regoperator
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_regoperator(text) is 'convert operator name to regoperator';

create function pg_catalog.to_regproc(text) returns regproc
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_regproc(text) is 'convert proname to regproc';

create function pg_catalog.to_regprocedure(text) returns regprocedure
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_regprocedure(text) is 'convert proname to regprocedure';

create function pg_catalog.to_regrole(text) returns regrole
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_regrole(text) is 'convert role name to regrole';

create function pg_catalog.to_regtype(text) returns regtype
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_regtype(text) is 'convert type name to regtype';

create function pg_catalog.to_timestamp(double precision) returns timestamp with time zone
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_timestamp(double precision) is 'convert UNIX epoch to timestamptz';

create function pg_catalog.to_timestamp(text, text) returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_timestamp(text, text) is 'convert text to timestamp with time zone';

create function pg_catalog.to_tsquery(regconfig, text) returns tsquery
    immutable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_tsquery(regconfig, text) is 'make tsquery';

create function pg_catalog.to_tsquery(text) returns tsquery
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_tsquery(text) is 'make tsquery';

create function pg_catalog.to_tsvector(json) returns tsvector
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_tsvector(json) is 'transform string values from json to tsvector';

create function pg_catalog.to_tsvector(jsonb) returns tsvector
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_tsvector(jsonb) is 'transform string values from jsonb to tsvector';

create function pg_catalog.to_tsvector(regconfig, json) returns tsvector
    immutable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_tsvector(regconfig, json) is 'transform string values from json to tsvector';

create function pg_catalog.to_tsvector(regconfig, jsonb) returns tsvector
    immutable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_tsvector(regconfig, jsonb) is 'transform string values from jsonb to tsvector';

create function pg_catalog.to_tsvector(regconfig, text) returns tsvector
    immutable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_tsvector(regconfig, text) is 'transform to tsvector';

create function pg_catalog.to_tsvector(text) returns tsvector
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.to_tsvector(text) is 'transform to tsvector';

create function pg_catalog.transaction_timestamp() returns timestamp with time zone
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.transaction_timestamp() is 'current transaction time';

create function pg_catalog.translate(text, text, text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.translate(text, text, text) is 'map a set of characters appearing in string';

create function pg_catalog.trigger_in(cstring) returns trigger
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.trigger_in(cstring) is 'I/O';

create function pg_catalog.trigger_out(trigger) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.trigger_out(trigger) is 'I/O';

create function pg_catalog.trunc(double precision) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.trunc(double precision) is 'truncate to integer';

create function pg_catalog.trunc(macaddr) returns macaddr
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.trunc(macaddr) is 'MACADDR manufacturer fields';

create function pg_catalog.trunc(macaddr8) returns macaddr8
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.trunc(macaddr8) is 'MACADDR8 manufacturer fields';

create function pg_catalog.trunc(numeric) returns numeric
    immutable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.trunc(numeric) is 'value truncated to ''scale'' of zero';

create function pg_catalog.trunc(numeric, integer) returns numeric
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.trunc(numeric, integer) is 'value truncated to ''scale''';

create function pg_catalog.ts_debug(config regconfig, document text, OUT alias text, OUT description text, OUT token text, OUT dictionaries regdictionary[], OUT dictionary regdictionary, OUT lexemes text[]) returns SETOF record
    stable
    strict
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_debug(regconfig, text, out text, out text, out text, out regdictionary[], out regdictionary, out text[]) is 'debug function for text search configuration';

create function pg_catalog.ts_debug(document text, OUT alias text, OUT description text, OUT token text, OUT dictionaries regdictionary[], OUT dictionary regdictionary, OUT lexemes text[]) returns SETOF record
    stable
    strict
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_debug(text, out text, out text, out text, out regdictionary[], out regdictionary, out text[]) is 'debug function for current text search configuration';

create function pg_catalog.ts_delete(tsvector, text) returns tsvector
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_delete(tsvector, text) is 'delete lexeme';

create function pg_catalog.ts_delete(tsvector, text[]) returns tsvector
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_delete(tsvector, text[]) is 'delete given lexemes';

create function pg_catalog.ts_filter(tsvector, "char"[]) returns tsvector
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_filter(tsvector, "char"[]) is 'delete lexemes that do not have one of the given weights';

create function pg_catalog.ts_headline(json, tsquery) returns json
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_headline(json, tsquery) is 'generate headline from json';

create function pg_catalog.ts_headline(json, tsquery, text) returns json
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_headline(json, tsquery, text) is 'generate headline from json';

create function pg_catalog.ts_headline(jsonb, tsquery) returns jsonb
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_headline(jsonb, tsquery) is 'generate headline from jsonb';

create function pg_catalog.ts_headline(jsonb, tsquery, text) returns jsonb
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_headline(jsonb, tsquery, text) is 'generate headline from jsonb';

create function pg_catalog.ts_headline(regconfig, json, tsquery) returns json
    immutable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_headline(regconfig, json, tsquery) is 'generate headline from json';

create function pg_catalog.ts_headline(regconfig, json, tsquery, text) returns json
    immutable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_headline(regconfig, json, tsquery, text) is 'generate headline from json';

create function pg_catalog.ts_headline(regconfig, jsonb, tsquery) returns jsonb
    immutable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_headline(regconfig, jsonb, tsquery) is 'generate headline from jsonb';

create function pg_catalog.ts_headline(regconfig, jsonb, tsquery, text) returns jsonb
    immutable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_headline(regconfig, jsonb, tsquery, text) is 'generate headline from jsonb';

create function pg_catalog.ts_headline(regconfig, text, tsquery) returns text
    immutable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_headline(regconfig, text, tsquery) is 'generate headline';

create function pg_catalog.ts_headline(regconfig, text, tsquery, text) returns text
    immutable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_headline(regconfig, text, tsquery, text) is 'generate headline';

create function pg_catalog.ts_headline(text, tsquery) returns text
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_headline(text, tsquery) is 'generate headline';

create function pg_catalog.ts_headline(text, tsquery, text) returns text
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_headline(text, tsquery, text) is 'generate headline';

create function pg_catalog.ts_lexize(regdictionary, text) returns text[]
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_lexize(regdictionary, text) is 'normalize one word by dictionary';

create function pg_catalog.ts_match_qv(tsquery, tsvector) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_match_qv(tsquery, tsvector) is 'implementation of @@ operator';

create function pg_catalog.ts_match_tq(text, tsquery) returns boolean
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_match_tq(text, tsquery) is 'implementation of @@ operator';

create function pg_catalog.ts_match_tt(text, text) returns boolean
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_match_tt(text, text) is 'implementation of @@ operator';

create function pg_catalog.ts_match_vq(tsvector, tsquery) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_match_vq(tsvector, tsquery) is 'implementation of @@ operator';

create function pg_catalog.ts_parse(parser_oid oid, txt text, out tokid integer, out token text) returns setof setof record
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_parse(oid, text, out integer, out text) is 'parse text to tokens';

create function pg_catalog.ts_parse(parser_name text, txt text, out tokid integer, out token text) returns setof setof record
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_parse(text, text, out integer, out text) is 'parse text to tokens';

create function pg_catalog.ts_rank(real[], tsvector, tsquery) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_rank(real[], tsvector, tsquery) is 'relevance';

create function pg_catalog.ts_rank(real[], tsvector, tsquery, integer) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_rank(real[], tsvector, tsquery, integer) is 'relevance';

create function pg_catalog.ts_rank(tsvector, tsquery) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_rank(tsvector, tsquery) is 'relevance';

create function pg_catalog.ts_rank(tsvector, tsquery, integer) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_rank(tsvector, tsquery, integer) is 'relevance';

create function pg_catalog.ts_rank_cd(real[], tsvector, tsquery) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_rank_cd(real[], tsvector, tsquery) is 'relevance';

create function pg_catalog.ts_rank_cd(real[], tsvector, tsquery, integer) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_rank_cd(real[], tsvector, tsquery, integer) is 'relevance';

create function pg_catalog.ts_rank_cd(tsvector, tsquery) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_rank_cd(tsvector, tsquery) is 'relevance';

create function pg_catalog.ts_rank_cd(tsvector, tsquery, integer) returns real
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_rank_cd(tsvector, tsquery, integer) is 'relevance';

create function pg_catalog.ts_rewrite(tsquery, text) returns tsquery
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_rewrite(tsquery, text) is 'rewrite tsquery';

create function pg_catalog.ts_rewrite(tsquery, tsquery, tsquery) returns tsquery
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_rewrite(tsquery, tsquery, tsquery) is 'rewrite tsquery';

create function pg_catalog.ts_stat(query text, out word text, out ndoc integer, out nentry integer) returns setof setof record
    strict
    cost 10
    rows 10000
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_stat(text, out text, out integer, out integer) is 'statistics of tsvector column';

create function pg_catalog.ts_stat(query text, weights text, out word text, out ndoc integer, out nentry integer) returns setof setof record
    strict
    cost 10
    rows 10000
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_stat(text, text, out text, out integer, out integer) is 'statistics of tsvector column';

create function pg_catalog.ts_token_type(parser_oid oid, out tokid integer, out alias text, out description text) returns setof setof record
    immutable
    strict
    cost 1
    rows 16
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_token_type(oid, out integer, out text, out text) is 'get parser''s token types';

create function pg_catalog.ts_token_type(parser_name text, out tokid integer, out alias text, out description text) returns setof setof record
    stable
    strict
    cost 1
    rows 16
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_token_type(text, out integer, out text, out text) is 'get parser''s token types';

create function pg_catalog.ts_typanalyze(internal) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.ts_typanalyze(internal) is 'tsvector typanalyze';

create function pg_catalog.tsm_handler_in(cstring) returns tsm_handler
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsm_handler_in(cstring) is 'I/O';

create function pg_catalog.tsm_handler_out(tsm_handler) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsm_handler_out(tsm_handler) is 'I/O';

create function pg_catalog.tsmatchjoinsel(internal, oid, internal, smallint, internal) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsmatchjoinsel(internal, oid, internal, smallint, internal) is 'join selectivity of tsvector @@ tsquery';

create function pg_catalog.tsmatchsel(internal, oid, internal, integer) returns double precision
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsmatchsel(internal, oid, internal, integer) is 'restriction selectivity of tsvector @@ tsquery';

create function pg_catalog.tsq_mcontained(tsquery, tsquery) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsq_mcontained(tsquery, tsquery) is 'implementation of <@ operator';

create function pg_catalog.tsq_mcontains(tsquery, tsquery) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsq_mcontains(tsquery, tsquery) is 'implementation of @> operator';

create function pg_catalog.tsquery_and(tsquery, tsquery) returns tsquery
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsquery_and(tsquery, tsquery) is 'implementation of && operator';

create function pg_catalog.tsquery_cmp(tsquery, tsquery) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsquery_cmp(tsquery, tsquery) is 'less-equal-greater';

create function pg_catalog.tsquery_eq(tsquery, tsquery) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsquery_eq(tsquery, tsquery) is 'implementation of = operator';

create function pg_catalog.tsquery_ge(tsquery, tsquery) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsquery_ge(tsquery, tsquery) is 'implementation of >= operator';

create function pg_catalog.tsquery_gt(tsquery, tsquery) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsquery_gt(tsquery, tsquery) is 'implementation of > operator';

create function pg_catalog.tsquery_le(tsquery, tsquery) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsquery_le(tsquery, tsquery) is 'implementation of <= operator';

create function pg_catalog.tsquery_lt(tsquery, tsquery) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsquery_lt(tsquery, tsquery) is 'implementation of < operator';

create function pg_catalog.tsquery_ne(tsquery, tsquery) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsquery_ne(tsquery, tsquery) is 'implementation of <> operator';

create function pg_catalog.tsquery_not(tsquery) returns tsquery
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsquery_not(tsquery) is 'implementation of !! operator';

create function pg_catalog.tsquery_or(tsquery, tsquery) returns tsquery
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsquery_or(tsquery, tsquery) is 'implementation of || operator';

create function pg_catalog.tsquery_phrase(tsquery, tsquery) returns tsquery
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsquery_phrase(tsquery, tsquery) is 'implementation of <-> operator';

create function pg_catalog.tsquery_phrase(tsquery, tsquery, integer) returns tsquery
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsquery_phrase(tsquery, tsquery, integer) is 'phrase-concatenate with distance';

create function pg_catalog.tsqueryin(cstring) returns tsquery
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsqueryin(cstring) is 'I/O';

create function pg_catalog.tsqueryout(tsquery) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsqueryout(tsquery) is 'I/O';

create function pg_catalog.tsqueryrecv(internal) returns tsquery
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsqueryrecv(internal) is 'I/O';

create function pg_catalog.tsquerysend(tsquery) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsquerysend(tsquery) is 'I/O';

create function pg_catalog.tsrange(timestamp, timestamp) returns tsrange
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsrange(timestamp, timestamp) is 'tsrange constructor';

create function pg_catalog.tsrange(timestamp, timestamp, text) returns tsrange
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsrange(timestamp, timestamp, text) is 'tsrange constructor';

create function pg_catalog.tsrange_subdiff(timestamp, timestamp) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsrange_subdiff(timestamp, timestamp) is 'float8 difference of two timestamp values';

create function pg_catalog.tstzrange(timestamp with time zone, timestamp with time zone) returns tstzrange
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tstzrange(timestamp with time zone, timestamp with time zone) is 'tstzrange constructor';

create function pg_catalog.tstzrange(timestamp with time zone, timestamp with time zone, text) returns tstzrange
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tstzrange(timestamp with time zone, timestamp with time zone, text) is 'tstzrange constructor';

create function pg_catalog.tstzrange_subdiff(timestamp with time zone, timestamp with time zone) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tstzrange_subdiff(timestamp with time zone, timestamp with time zone) is 'float8 difference of two timestamp with time zone values';

create function pg_catalog.tsvector_cmp(tsvector, tsvector) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsvector_cmp(tsvector, tsvector) is 'less-equal-greater';

create function pg_catalog.tsvector_concat(tsvector, tsvector) returns tsvector
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsvector_concat(tsvector, tsvector) is 'implementation of || operator';

create function pg_catalog.tsvector_eq(tsvector, tsvector) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsvector_eq(tsvector, tsvector) is 'implementation of = operator';

create function pg_catalog.tsvector_ge(tsvector, tsvector) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsvector_ge(tsvector, tsvector) is 'implementation of >= operator';

create function pg_catalog.tsvector_gt(tsvector, tsvector) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsvector_gt(tsvector, tsvector) is 'implementation of > operator';

create function pg_catalog.tsvector_le(tsvector, tsvector) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsvector_le(tsvector, tsvector) is 'implementation of <= operator';

create function pg_catalog.tsvector_lt(tsvector, tsvector) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsvector_lt(tsvector, tsvector) is 'implementation of < operator';

create function pg_catalog.tsvector_ne(tsvector, tsvector) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsvector_ne(tsvector, tsvector) is 'implementation of <> operator';

create function pg_catalog.tsvector_to_array(tsvector) returns text[]
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsvector_to_array(tsvector) is 'convert tsvector to array of lexemes';

create function pg_catalog.tsvector_update_trigger() returns trigger
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsvector_update_trigger() is 'trigger for automatic update of tsvector column';

create function pg_catalog.tsvector_update_trigger_column() returns trigger
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsvector_update_trigger_column() is 'trigger for automatic update of tsvector column';

create function pg_catalog.tsvectorin(cstring) returns tsvector
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsvectorin(cstring) is 'I/O';

create function pg_catalog.tsvectorout(tsvector) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsvectorout(tsvector) is 'I/O';

create function pg_catalog.tsvectorrecv(internal) returns tsvector
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsvectorrecv(internal) is 'I/O';

create function pg_catalog.tsvectorsend(tsvector) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.tsvectorsend(tsvector) is 'I/O';

create function pg_catalog.txid_current() returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.txid_current() is 'get current transaction ID';

create function pg_catalog.txid_current_if_assigned() returns bigint
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.txid_current_if_assigned() is 'get current transaction ID';

create function pg_catalog.txid_current_snapshot() returns txid_snapshot
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.txid_current_snapshot() is 'get current snapshot';

create function pg_catalog.txid_snapshot_in(cstring) returns txid_snapshot
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.txid_snapshot_in(cstring) is 'I/O';

create function pg_catalog.txid_snapshot_out(txid_snapshot) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.txid_snapshot_out(txid_snapshot) is 'I/O';

create function pg_catalog.txid_snapshot_recv(internal) returns txid_snapshot
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.txid_snapshot_recv(internal) is 'I/O';

create function pg_catalog.txid_snapshot_send(txid_snapshot) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.txid_snapshot_send(txid_snapshot) is 'I/O';

create function pg_catalog.txid_snapshot_xip(txid_snapshot) returns setof setof bigint
    immutable
    strict
    cost 1
    rows 50
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.txid_snapshot_xip(txid_snapshot) is 'get set of in-progress txids in snapshot';

create function pg_catalog.txid_snapshot_xmax(txid_snapshot) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.txid_snapshot_xmax(txid_snapshot) is 'get xmax of snapshot';

create function pg_catalog.txid_snapshot_xmin(txid_snapshot) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.txid_snapshot_xmin(txid_snapshot) is 'get xmin of snapshot';

create function pg_catalog.txid_status(bigint) returns text
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.txid_status(bigint) is 'commit status of transaction';

create function pg_catalog.txid_visible_in_snapshot(bigint, txid_snapshot) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.txid_visible_in_snapshot(bigint, txid_snapshot) is 'is txid visible in snapshot?';

create function pg_catalog.uhc_to_utf8(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.uhc_to_utf8(integer, integer, cstring, internal, integer) is 'internal conversion function for UHC to UTF8';

create function pg_catalog.unique_key_recheck() returns trigger
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.unique_key_recheck() is 'deferred UNIQUE constraint check';

create function pg_catalog.unknownin(cstring) returns unknown
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.unknownin(cstring) is 'I/O';

create function pg_catalog.unknownout(unknown) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.unknownout(unknown) is 'I/O';

create function pg_catalog.unknownrecv(internal) returns unknown
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.unknownrecv(internal) is 'I/O';

create function pg_catalog.unknownsend(unknown) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.unknownsend(unknown) is 'I/O';

create function pg_catalog.unnest(anyarray) returns setof setof anyelement
    immutable
    strict
    cost 1
    rows 100
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.unnest(anyarray) is 'expand array to set of rows';

create function pg_catalog.unnest(tsvector tsvector, out lexeme text, out positions smallint[], out weights text[]) returns setof setof record
    immutable
    strict
    cost 1
    rows 10
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.unnest(tsvector, out text, out smallint[], out text[]) is 'expand tsvector to set of rows';

create function pg_catalog.upper(anyrange) returns anyelement
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.upper(anyrange) is 'upper bound of range';

create function pg_catalog.upper(text) returns text
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.upper(text) is 'uppercase';

create function pg_catalog.upper_inc(anyrange) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.upper_inc(anyrange) is 'is the range''s upper bound inclusive?';

create function pg_catalog.upper_inf(anyrange) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.upper_inf(anyrange) is 'is the range''s upper bound infinite?';

create function pg_catalog.utf8_to_ascii(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.utf8_to_ascii(integer, integer, cstring, internal, integer) is 'internal conversion function for UTF8 to SQL_ASCII';

create function pg_catalog.utf8_to_big5(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.utf8_to_big5(integer, integer, cstring, internal, integer) is 'internal conversion function for UTF8 to BIG5';

create function pg_catalog.utf8_to_euc_cn(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.utf8_to_euc_cn(integer, integer, cstring, internal, integer) is 'internal conversion function for UTF8 to EUC_CN';

create function pg_catalog.utf8_to_euc_jis_2004(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.utf8_to_euc_jis_2004(integer, integer, cstring, internal, integer) is 'internal conversion function for UTF8 to EUC_JIS_2004';

create function pg_catalog.utf8_to_euc_jp(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.utf8_to_euc_jp(integer, integer, cstring, internal, integer) is 'internal conversion function for UTF8 to EUC_JP';

create function pg_catalog.utf8_to_euc_kr(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.utf8_to_euc_kr(integer, integer, cstring, internal, integer) is 'internal conversion function for UTF8 to EUC_KR';

create function pg_catalog.utf8_to_euc_tw(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.utf8_to_euc_tw(integer, integer, cstring, internal, integer) is 'internal conversion function for UTF8 to EUC_TW';

create function pg_catalog.utf8_to_gb18030(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.utf8_to_gb18030(integer, integer, cstring, internal, integer) is 'internal conversion function for UTF8 to GB18030';

create function pg_catalog.utf8_to_gbk(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.utf8_to_gbk(integer, integer, cstring, internal, integer) is 'internal conversion function for UTF8 to GBK';

create function pg_catalog.utf8_to_iso8859(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.utf8_to_iso8859(integer, integer, cstring, internal, integer) is 'internal conversion function for UTF8 to ISO-8859 2-16';

create function pg_catalog.utf8_to_iso8859_1(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.utf8_to_iso8859_1(integer, integer, cstring, internal, integer) is 'internal conversion function for UTF8 to LATIN1';

create function pg_catalog.utf8_to_johab(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.utf8_to_johab(integer, integer, cstring, internal, integer) is 'internal conversion function for UTF8 to JOHAB';

create function pg_catalog.utf8_to_koi8r(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.utf8_to_koi8r(integer, integer, cstring, internal, integer) is 'internal conversion function for UTF8 to KOI8R';

create function pg_catalog.utf8_to_koi8u(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.utf8_to_koi8u(integer, integer, cstring, internal, integer) is 'internal conversion function for UTF8 to KOI8U';

create function pg_catalog.utf8_to_shift_jis_2004(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.utf8_to_shift_jis_2004(integer, integer, cstring, internal, integer) is 'internal conversion function for UTF8 to SHIFT_JIS_2004';

create function pg_catalog.utf8_to_sjis(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.utf8_to_sjis(integer, integer, cstring, internal, integer) is 'internal conversion function for UTF8 to SJIS';

create function pg_catalog.utf8_to_uhc(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.utf8_to_uhc(integer, integer, cstring, internal, integer) is 'internal conversion function for UTF8 to UHC';

create function pg_catalog.utf8_to_win(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.utf8_to_win(integer, integer, cstring, internal, integer) is 'internal conversion function for UTF8 to WIN';

create function pg_catalog.uuid_cmp(uuid, uuid) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.uuid_cmp(uuid, uuid) is 'less-equal-greater';

create function pg_catalog.uuid_eq(uuid, uuid) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.uuid_eq(uuid, uuid) is 'implementation of = operator';

create function pg_catalog.uuid_ge(uuid, uuid) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.uuid_ge(uuid, uuid) is 'implementation of >= operator';

create function pg_catalog.uuid_gt(uuid, uuid) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.uuid_gt(uuid, uuid) is 'implementation of > operator';

create function pg_catalog.uuid_hash(uuid) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.uuid_hash(uuid) is 'hash';

create function pg_catalog.uuid_hash_extended(uuid, bigint) returns bigint
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.uuid_hash_extended(uuid, bigint) is 'hash';

create function pg_catalog.uuid_in(cstring) returns uuid
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.uuid_in(cstring) is 'I/O';

create function pg_catalog.uuid_le(uuid, uuid) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.uuid_le(uuid, uuid) is 'implementation of <= operator';

create function pg_catalog.uuid_lt(uuid, uuid) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.uuid_lt(uuid, uuid) is 'implementation of < operator';

create function pg_catalog.uuid_ne(uuid, uuid) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.uuid_ne(uuid, uuid) is 'implementation of <> operator';

create function pg_catalog.uuid_out(uuid) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.uuid_out(uuid) is 'I/O';

create function pg_catalog.uuid_recv(internal) returns uuid
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.uuid_recv(internal) is 'I/O';

create function pg_catalog.uuid_send(uuid) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.uuid_send(uuid) is 'I/O';

create function pg_catalog.uuid_sortsupport(internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.uuid_sortsupport(internal) is 'sort support';

create function pg_catalog.varbit(bit varying, integer, boolean) returns bit varying
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.varbit(bit varying, integer, boolean) is 'adjust varbit() to typmod length';

create function pg_catalog.varbit_in(cstring, oid, integer) returns bit varying
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.varbit_in(cstring, oid, integer) is 'I/O';

create function pg_catalog.varbit_out(bit varying) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.varbit_out(bit varying) is 'I/O';

create function pg_catalog.varbit_recv(internal, oid, integer) returns bit varying
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.varbit_recv(internal, oid, integer) is 'I/O';

create function pg_catalog.varbit_send(bit varying) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.varbit_send(bit varying) is 'I/O';

create function pg_catalog.varbit_support(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.varbit_support(internal) is 'planner support for varbit length coercion';

create function pg_catalog.varbitcmp(bit varying, bit varying) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.varbitcmp(bit varying, bit varying) is 'less-equal-greater';

create function pg_catalog.varbiteq(bit varying, bit varying) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.varbiteq(bit varying, bit varying) is 'implementation of = operator';

create function pg_catalog.varbitge(bit varying, bit varying) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.varbitge(bit varying, bit varying) is 'implementation of >= operator';

create function pg_catalog.varbitgt(bit varying, bit varying) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.varbitgt(bit varying, bit varying) is 'implementation of > operator';

create function pg_catalog.varbitle(bit varying, bit varying) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.varbitle(bit varying, bit varying) is 'implementation of <= operator';

create function pg_catalog.varbitlt(bit varying, bit varying) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.varbitlt(bit varying, bit varying) is 'implementation of < operator';

create function pg_catalog.varbitne(bit varying, bit varying) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.varbitne(bit varying, bit varying) is 'implementation of <> operator';

create function pg_catalog.varbittypmodin(cstring[]) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.varbittypmodin(cstring[]) is 'I/O typmod';

create function pg_catalog.varbittypmodout(integer) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.varbittypmodout(integer) is 'I/O typmod';

create function pg_catalog.varchar(name) returns varchar
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.varchar(name) is 'convert name to varchar';

create function pg_catalog.varchar(varchar, integer, boolean) returns varchar
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.varchar(varchar, integer, boolean) is 'adjust varchar() to typmod length';

create function pg_catalog.varchar_support(internal) returns internal
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.varchar_support(internal) is 'planner support for varchar length coercion';

create function pg_catalog.varcharin(cstring, oid, integer) returns varchar
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.varcharin(cstring, oid, integer) is 'I/O';

create function pg_catalog.varcharout(varchar) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.varcharout(varchar) is 'I/O';

create function pg_catalog.varcharrecv(internal, oid, integer) returns varchar
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.varcharrecv(internal, oid, integer) is 'I/O';

create function pg_catalog.varcharsend(varchar) returns bytea
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.varcharsend(varchar) is 'I/O';

create function pg_catalog.varchartypmodin(cstring[]) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.varchartypmodin(cstring[]) is 'I/O typmod';

create function pg_catalog.varchartypmodout(integer) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.varchartypmodout(integer) is 'I/O typmod';

create function pg_catalog.version() returns text
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.version() is 'PostgreSQL version string';

create function pg_catalog.void_in(cstring) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.void_in(cstring) is 'I/O';

create function pg_catalog.void_out(void) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.void_out(void) is 'I/O';

create function pg_catalog.void_recv(internal) returns void
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.void_recv(internal) is 'I/O';

create function pg_catalog.void_send(void) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.void_send(void) is 'I/O';

create function pg_catalog.websearch_to_tsquery(regconfig, text) returns tsquery
    immutable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.websearch_to_tsquery(regconfig, text) is 'transform to tsquery';

create function pg_catalog.websearch_to_tsquery(text) returns tsquery
    stable
    strict
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.websearch_to_tsquery(text) is 'transform to tsquery';

create function pg_catalog.width(box) returns double precision
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.width(box) is 'box width';

create function pg_catalog.width_bucket(anyelement, anyarray) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.width_bucket(anyelement, anyarray) is 'bucket number of operand given a sorted array of bucket lower bounds';

create function pg_catalog.width_bucket(double precision, double precision, double precision, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.width_bucket(double precision, double precision, double precision, integer) is 'bucket number of operand in equal-width histogram';

create function pg_catalog.width_bucket(numeric, numeric, numeric, integer) returns integer
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.width_bucket(numeric, numeric, numeric, integer) is 'bucket number of operand in equal-width histogram';

create function pg_catalog.win1250_to_latin2(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.win1250_to_latin2(integer, integer, cstring, internal, integer) is 'internal conversion function for WIN1250 to LATIN2';

create function pg_catalog.win1250_to_mic(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.win1250_to_mic(integer, integer, cstring, internal, integer) is 'internal conversion function for WIN1250 to MULE_INTERNAL';

create function pg_catalog.win1251_to_iso(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.win1251_to_iso(integer, integer, cstring, internal, integer) is 'internal conversion function for WIN1251 to ISO-8859-5';

create function pg_catalog.win1251_to_koi8r(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.win1251_to_koi8r(integer, integer, cstring, internal, integer) is 'internal conversion function for WIN1251 to KOI8R';

create function pg_catalog.win1251_to_mic(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.win1251_to_mic(integer, integer, cstring, internal, integer) is 'internal conversion function for WIN1251 to MULE_INTERNAL';

create function pg_catalog.win1251_to_win866(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.win1251_to_win866(integer, integer, cstring, internal, integer) is 'internal conversion function for WIN1251 to WIN866';

create function pg_catalog.win866_to_iso(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.win866_to_iso(integer, integer, cstring, internal, integer) is 'internal conversion function for WIN866 to ISO-8859-5';

create function pg_catalog.win866_to_koi8r(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.win866_to_koi8r(integer, integer, cstring, internal, integer) is 'internal conversion function for WIN866 to KOI8R';

create function pg_catalog.win866_to_mic(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.win866_to_mic(integer, integer, cstring, internal, integer) is 'internal conversion function for WIN866 to MULE_INTERNAL';

create function pg_catalog.win866_to_win1251(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.win866_to_win1251(integer, integer, cstring, internal, integer) is 'internal conversion function for WIN866 to WIN1251';

create function pg_catalog.win_to_utf8(integer, integer, cstring, internal, integer) returns void
    immutable
    strict
    language c
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.win_to_utf8(integer, integer, cstring, internal, integer) is 'internal conversion function for WIN to UTF8';

create function pg_catalog.xideq(xid, xid) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.xideq(xid, xid) is 'implementation of = operator';

create function pg_catalog.xideqint4(xid, integer) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.xideqint4(xid, integer) is 'implementation of = operator';

create function pg_catalog.xidin(cstring) returns xid
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.xidin(cstring) is 'I/O';

create function pg_catalog.xidneq(xid, xid) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.xidneq(xid, xid) is 'implementation of <> operator';

create function pg_catalog.xidneqint4(xid, integer) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.xidneqint4(xid, integer) is 'implementation of <> operator';

create function pg_catalog.xidout(xid) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.xidout(xid) is 'I/O';

create function pg_catalog.xidrecv(internal) returns xid
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.xidrecv(internal) is 'I/O';

create function pg_catalog.xidsend(xid) returns bytea
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.xidsend(xid) is 'I/O';

create function pg_catalog.xml(text) returns xml
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.xml(text) is 'perform a non-validating parse of a character string to produce an XML value';

create function pg_catalog.xml_in(cstring) returns xml
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.xml_in(cstring) is 'I/O';

create function pg_catalog.xml_is_well_formed(text) returns boolean
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.xml_is_well_formed(text) is 'determine if a string is well formed XML';

create function pg_catalog.xml_is_well_formed_content(text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.xml_is_well_formed_content(text) is 'determine if a string is well formed XML content';

create function pg_catalog.xml_is_well_formed_document(text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.xml_is_well_formed_document(text) is 'determine if a string is well formed XML document';

create function pg_catalog.xml_out(xml) returns cstring
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.xml_out(xml) is 'I/O';

create function pg_catalog.xml_recv(internal) returns xml
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.xml_recv(internal) is 'I/O';

create function pg_catalog.xml_send(xml) returns bytea
    stable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.xml_send(xml) is 'I/O';

create function pg_catalog.xmlcomment(text) returns xml
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.xmlcomment(text) is 'generate XML comment';

create function pg_catalog.xmlconcat2(xml, xml) returns xml
    immutable
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.xmlconcat2(xml, xml) is 'aggregate transition function';

create function pg_catalog.xmlexists(text, xml) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.xmlexists(text, xml) is 'test XML value against XPath expression';

create function pg_catalog.xmlvalidate(xml, text) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.xmlvalidate(xml, text) is 'validate an XML value';

create function pg_catalog.xpath(text, xml) returns xml[]
    immutable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.xpath(text, xml) is 'evaluate XPath expression';

create function pg_catalog.xpath(text, xml, text[]) returns xml[]
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.xpath(text, xml, text[]) is 'evaluate XPath expression, with namespaces support';

create function pg_catalog.xpath_exists(text, xml) returns boolean
    immutable
    strict
    cost 1
    language sql
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.xpath_exists(text, xml) is 'test XML value against XPath expression';

create function pg_catalog.xpath_exists(text, xml, text[]) returns boolean
    immutable
    strict
    cost 1
    language internal
as $$
begin
-- missing source code
end;
$$;

comment on function pg_catalog.xpath_exists(text, xml, text[]) is 'test XML value against XPath expression, with namespace support';

create operator pg_catalog.!! (procedure = numeric_fac, rightarg = bigint);

comment on operator pg_catalog.!!(none , bigint) is 'deprecated, use ! instead';

create operator pg_catalog.!! (procedure = tsquery_not, rightarg = tsquery);

comment on operator pg_catalog.!!(none , tsquery) is 'NOT tsquery';

create operator pg_catalog.! (procedure = numeric_fac, leftarg = bigint);

comment on operator pg_catalog.!(bigint , none) is 'factorial';

create operator pg_catalog.!~ (procedure = bpcharregexne, leftarg = char, rightarg = text);

comment on operator pg_catalog.!~(char , text) is 'does not match regular expression, case-sensitive';

create operator pg_catalog.!~ (procedure = nameregexne, leftarg = name, rightarg = text);

comment on operator pg_catalog.!~(name , text) is 'does not match regular expression, case-sensitive';

create operator pg_catalog.!~ (procedure = textregexne, leftarg = text, rightarg = text);

comment on operator pg_catalog.!~(text , text) is 'does not match regular expression, case-sensitive';

create operator pg_catalog.!~* (procedure = bpcharicregexne, leftarg = char, rightarg = text);

comment on operator pg_catalog.!~*(char , text) is 'does not match regular expression, case-insensitive';

create operator pg_catalog.!~* (procedure = nameicregexne, leftarg = name, rightarg = text);

comment on operator pg_catalog.!~*(name , text) is 'does not match regular expression, case-insensitive';

create operator pg_catalog.!~* (procedure = texticregexne, leftarg = text, rightarg = text);

comment on operator pg_catalog.!~*(text , text) is 'does not match regular expression, case-insensitive';

create operator pg_catalog.!~~ (procedure = byteanlike, leftarg = bytea, rightarg = bytea);

comment on operator pg_catalog.!~~(bytea , bytea) is 'does not match LIKE expression';

create operator pg_catalog.!~~ (procedure = bpcharnlike, leftarg = char, rightarg = text);

comment on operator pg_catalog.!~~(char , text) is 'does not match LIKE expression';

create operator pg_catalog.!~~ (procedure = namenlike, leftarg = name, rightarg = text);

comment on operator pg_catalog.!~~(name , text) is 'does not match LIKE expression';

create operator pg_catalog.!~~ (procedure = textnlike, leftarg = text, rightarg = text);

comment on operator pg_catalog.!~~(text , text) is 'does not match LIKE expression';

create operator pg_catalog.!~~* (procedure = bpcharicnlike, leftarg = char, rightarg = text);

comment on operator pg_catalog.!~~*(char , text) is 'does not match LIKE expression, case-insensitive';

create operator pg_catalog.!~~* (procedure = nameicnlike, leftarg = name, rightarg = text);

comment on operator pg_catalog.!~~*(name , text) is 'does not match LIKE expression, case-insensitive';

create operator pg_catalog.!~~* (procedure = texticnlike, leftarg = text, rightarg = text);

comment on operator pg_catalog.!~~*(text , text) is 'does not match LIKE expression, case-insensitive';

create operator pg_catalog.## (procedure = close_lb, leftarg = line, rightarg = box);

comment on operator pg_catalog.##(line , box) is 'closest point to A on B';

create operator pg_catalog.## (procedure = close_ls, leftarg = line, rightarg = lseg);

comment on operator pg_catalog.##(line , lseg) is 'closest point to A on B';

create operator pg_catalog.## (procedure = close_sb, leftarg = lseg, rightarg = box);

comment on operator pg_catalog.##(lseg , box) is 'closest point to A on B';

create operator pg_catalog.## (procedure = close_sl, leftarg = lseg, rightarg = line);

comment on operator pg_catalog.##(lseg , line) is 'closest point to A on B';

create operator pg_catalog.## (procedure = close_lseg, leftarg = lseg, rightarg = lseg);

comment on operator pg_catalog.##(lseg , lseg) is 'closest point to A on B';

create operator pg_catalog.## (procedure = close_pb, leftarg = point, rightarg = box);

comment on operator pg_catalog.##(point , box) is 'closest point to A on B';

create operator pg_catalog.## (procedure = close_pl, leftarg = point, rightarg = line);

comment on operator pg_catalog.##(point , line) is 'closest point to A on B';

create operator pg_catalog.## (procedure = close_ps, leftarg = point, rightarg = lseg);

comment on operator pg_catalog.##(point , lseg) is 'closest point to A on B';

create operator pg_catalog.# (procedure = int8xor, leftarg = bigint, rightarg = bigint);

comment on operator pg_catalog.#(bigint , bigint) is 'bitwise exclusive or';

create operator pg_catalog.# (procedure = bitxor, leftarg = bit, rightarg = bit);

comment on operator pg_catalog.#(bit , bit) is 'bitwise exclusive or';

create operator pg_catalog.# (procedure = box_intersect, leftarg = box, rightarg = box);

comment on operator pg_catalog.#(box , box) is 'box intersection';

create operator pg_catalog.# (procedure = int4xor, leftarg = integer, rightarg = integer);

comment on operator pg_catalog.#(integer , integer) is 'bitwise exclusive or';

create operator pg_catalog.# (procedure = line_interpt, leftarg = line, rightarg = line);

comment on operator pg_catalog.#(line , line) is 'intersection point';

create operator pg_catalog.# (procedure = lseg_interpt, leftarg = lseg, rightarg = lseg);

comment on operator pg_catalog.#(lseg , lseg) is 'intersection point';

create operator pg_catalog.# (procedure = int2xor, leftarg = smallint, rightarg = smallint);

comment on operator pg_catalog.#(smallint , smallint) is 'bitwise exclusive or';

create operator pg_catalog.# (procedure = path_npoints, rightarg = path);

comment on operator pg_catalog.#(none , path) is 'number of points';

create operator pg_catalog.# (procedure = poly_npoints, rightarg = polygon);

comment on operator pg_catalog.#(none , polygon) is 'number of points';

create operator pg_catalog.#- (procedure = jsonb_delete_path, leftarg = jsonb, rightarg = text[]);

comment on operator pg_catalog.#-(jsonb , text[]) is 'delete path';

create operator pg_catalog.#> (procedure = json_extract_path, leftarg = json, rightarg = text[]);

comment on operator pg_catalog.#>(json , text[]) is 'get value from json with path elements';

create operator pg_catalog.#> (procedure = jsonb_extract_path, leftarg = jsonb, rightarg = text[]);

comment on operator pg_catalog.#>(jsonb , text[]) is 'get value from jsonb with path elements';

create operator pg_catalog.#>> (procedure = json_extract_path_text, leftarg = json, rightarg = text[]);

comment on operator pg_catalog.#>>(json , text[]) is 'get value from json as text with path elements';

create operator pg_catalog.#>> (procedure = jsonb_extract_path_text, leftarg = jsonb, rightarg = text[]);

comment on operator pg_catalog.#>>(jsonb , text[]) is 'get value from jsonb as text with path elements';

create operator pg_catalog.% (procedure = int8mod, leftarg = bigint, rightarg = bigint);

comment on operator pg_catalog.%(bigint , bigint) is 'modulus';

create operator pg_catalog.% (procedure = int4mod, leftarg = integer, rightarg = integer);

comment on operator pg_catalog.%(integer , integer) is 'modulus';

create operator pg_catalog.% (procedure = numeric_mod, leftarg = numeric, rightarg = numeric);

comment on operator pg_catalog.%(numeric , numeric) is 'modulus';

create operator pg_catalog.% (procedure = int2mod, leftarg = smallint, rightarg = smallint);

comment on operator pg_catalog.%(smallint , smallint) is 'modulus';

create operator pg_catalog.&& (procedure = arrayoverlap, leftarg = anyarray, rightarg = anyarray);

comment on operator pg_catalog.&&(anyarray , anyarray) is 'overlaps';

create operator pg_catalog.&& (procedure = range_overlaps, leftarg = anyrange, rightarg = anyrange);

comment on operator pg_catalog.&&(anyrange , anyrange) is 'overlaps';

create operator pg_catalog.&& (procedure = box_overlap, leftarg = box, rightarg = box);

comment on operator pg_catalog.&&(box , box) is 'overlaps';

create operator pg_catalog.&& (procedure = circle_overlap, leftarg = circle, rightarg = circle);

comment on operator pg_catalog.&&(circle , circle) is 'overlaps';

create operator pg_catalog.&& (procedure = network_overlap, leftarg = inet, rightarg = inet);

comment on operator pg_catalog.&&(inet , inet) is 'overlaps (is subnet or supernet)';

create operator pg_catalog.&& (procedure = poly_overlap, leftarg = polygon, rightarg = polygon);

comment on operator pg_catalog.&&(polygon , polygon) is 'overlaps';

create operator pg_catalog.&& (procedure = tsquery_and, leftarg = tsquery, rightarg = tsquery);

comment on operator pg_catalog.&&(tsquery , tsquery) is 'AND-concatenate';

create operator pg_catalog.& (procedure = int8and, leftarg = bigint, rightarg = bigint);

comment on operator pg_catalog.&(bigint , bigint) is 'bitwise and';

create operator pg_catalog.& (procedure = bitand, leftarg = bit, rightarg = bit);

comment on operator pg_catalog.&(bit , bit) is 'bitwise and';

create operator pg_catalog.& (procedure = inetand, leftarg = inet, rightarg = inet);

comment on operator pg_catalog.&(inet , inet) is 'bitwise and';

create operator pg_catalog.& (procedure = int4and, leftarg = integer, rightarg = integer);

comment on operator pg_catalog.&(integer , integer) is 'bitwise and';

create operator pg_catalog.& (procedure = macaddr_and, leftarg = macaddr, rightarg = macaddr);

comment on operator pg_catalog.&(macaddr , macaddr) is 'bitwise and';

create operator pg_catalog.& (procedure = macaddr8_and, leftarg = macaddr8, rightarg = macaddr8);

comment on operator pg_catalog.&(macaddr8 , macaddr8) is 'bitwise and';

create operator pg_catalog.& (procedure = int2and, leftarg = smallint, rightarg = smallint);

comment on operator pg_catalog.&(smallint , smallint) is 'bitwise and';

create operator pg_catalog.&< (procedure = range_overleft, leftarg = anyrange, rightarg = anyrange);

comment on operator pg_catalog.&<(anyrange , anyrange) is 'overlaps or is left of';

create operator pg_catalog.&< (procedure = box_overleft, leftarg = box, rightarg = box);

comment on operator pg_catalog.&<(box , box) is 'overlaps or is left of';

create operator pg_catalog.&< (procedure = circle_overleft, leftarg = circle, rightarg = circle);

comment on operator pg_catalog.&<(circle , circle) is 'overlaps or is left of';

create operator pg_catalog.&< (procedure = poly_overleft, leftarg = polygon, rightarg = polygon);

comment on operator pg_catalog.&<(polygon , polygon) is 'overlaps or is left of';

create operator pg_catalog.&<| (procedure = box_overbelow, leftarg = box, rightarg = box);

comment on operator pg_catalog.&<|(box , box) is 'overlaps or is below';

create operator pg_catalog.&<| (procedure = circle_overbelow, leftarg = circle, rightarg = circle);

comment on operator pg_catalog.&<|(circle , circle) is 'overlaps or is below';

create operator pg_catalog.&<| (procedure = poly_overbelow, leftarg = polygon, rightarg = polygon);

comment on operator pg_catalog.&<|(polygon , polygon) is 'overlaps or is below';

create operator pg_catalog.&> (procedure = range_overright, leftarg = anyrange, rightarg = anyrange);

comment on operator pg_catalog.&>(anyrange , anyrange) is 'overlaps or is right of';

create operator pg_catalog.&> (procedure = box_overright, leftarg = box, rightarg = box);

comment on operator pg_catalog.&>(box , box) is 'overlaps or is right of';

create operator pg_catalog.&> (procedure = circle_overright, leftarg = circle, rightarg = circle);

comment on operator pg_catalog.&>(circle , circle) is 'overlaps or is right of';

create operator pg_catalog.&> (procedure = poly_overright, leftarg = polygon, rightarg = polygon);

comment on operator pg_catalog.&>(polygon , polygon) is 'overlaps or is right of';

create operator pg_catalog.* (procedure = range_intersect, leftarg = anyrange, rightarg = anyrange);

comment on operator pg_catalog.*(anyrange , anyrange) is 'range intersection';

create operator pg_catalog.* (procedure = int8mul, leftarg = bigint, rightarg = bigint);

comment on operator pg_catalog.*(bigint , bigint) is 'multiply';

create operator pg_catalog.* (procedure = int84mul, leftarg = bigint, rightarg = integer);

comment on operator pg_catalog.*(bigint , integer) is 'multiply';

create operator pg_catalog.* (procedure = int8_mul_cash, leftarg = bigint, rightarg = money);

comment on operator pg_catalog.*(bigint , money) is 'multiply';

create operator pg_catalog.* (procedure = int82mul, leftarg = bigint, rightarg = smallint);

comment on operator pg_catalog.*(bigint , smallint) is 'multiply';

create operator pg_catalog.* (procedure = box_mul, leftarg = box, rightarg = point);

comment on operator pg_catalog.*(box , point) is 'multiply box by point (scale)';

create operator pg_catalog.* (procedure = circle_mul_pt, leftarg = circle, rightarg = point);

comment on operator pg_catalog.*(circle , point) is 'multiply';

create operator pg_catalog.* (procedure = float8mul, leftarg = double precision, rightarg = double precision);

comment on operator pg_catalog.*(double precision , double precision) is 'multiply';

create operator pg_catalog.* (procedure = mul_d_interval, leftarg = double precision, rightarg = interval);

comment on operator pg_catalog.*(double precision , interval) is 'multiply';

create operator pg_catalog.* (procedure = flt8_mul_cash, leftarg = double precision, rightarg = money);

comment on operator pg_catalog.*(double precision , money) is 'multiply';

create operator pg_catalog.* (procedure = float84mul, leftarg = double precision, rightarg = real);

comment on operator pg_catalog.*(double precision , real) is 'multiply';

create operator pg_catalog.* (procedure = int48mul, leftarg = integer, rightarg = bigint);

comment on operator pg_catalog.*(integer , bigint) is 'multiply';

create operator pg_catalog.* (procedure = int4mul, leftarg = integer, rightarg = integer);

comment on operator pg_catalog.*(integer , integer) is 'multiply';

create operator pg_catalog.* (procedure = int4_mul_cash, leftarg = integer, rightarg = money);

comment on operator pg_catalog.*(integer , money) is 'multiply';

create operator pg_catalog.* (procedure = int42mul, leftarg = integer, rightarg = smallint);

comment on operator pg_catalog.*(integer , smallint) is 'multiply';

create operator pg_catalog.* (procedure = interval_mul, leftarg = interval, rightarg = double precision);

comment on operator pg_catalog.*(interval , double precision) is 'multiply';

create operator pg_catalog.* (procedure = cash_mul_int8, leftarg = money, rightarg = bigint);

comment on operator pg_catalog.*(money , bigint) is 'multiply';

create operator pg_catalog.* (procedure = cash_mul_flt8, leftarg = money, rightarg = double precision);

comment on operator pg_catalog.*(money , double precision) is 'multiply';

create operator pg_catalog.* (procedure = cash_mul_int4, leftarg = money, rightarg = integer);

comment on operator pg_catalog.*(money , integer) is 'multiply';

create operator pg_catalog.* (procedure = cash_mul_flt4, leftarg = money, rightarg = real);

comment on operator pg_catalog.*(money , real) is 'multiply';

create operator pg_catalog.* (procedure = cash_mul_int2, leftarg = money, rightarg = smallint);

comment on operator pg_catalog.*(money , smallint) is 'multiply';

create operator pg_catalog.* (procedure = numeric_mul, leftarg = numeric, rightarg = numeric);

comment on operator pg_catalog.*(numeric , numeric) is 'multiply';

create operator pg_catalog.* (procedure = path_mul_pt, leftarg = path, rightarg = point);

comment on operator pg_catalog.*(path , point) is 'multiply (rotate/scale path)';

create operator pg_catalog.* (procedure = point_mul, leftarg = point, rightarg = point);

comment on operator pg_catalog.*(point , point) is 'multiply points (scale/rotate)';

create operator pg_catalog.* (procedure = float48mul, leftarg = real, rightarg = double precision);

comment on operator pg_catalog.*(real , double precision) is 'multiply';

create operator pg_catalog.* (procedure = flt4_mul_cash, leftarg = real, rightarg = money);

comment on operator pg_catalog.*(real , money) is 'multiply';

create operator pg_catalog.* (procedure = float4mul, leftarg = real, rightarg = real);

comment on operator pg_catalog.*(real , real) is 'multiply';

create operator pg_catalog.* (procedure = int28mul, leftarg = smallint, rightarg = bigint);

comment on operator pg_catalog.*(smallint , bigint) is 'multiply';

create operator pg_catalog.* (procedure = int24mul, leftarg = smallint, rightarg = integer);

comment on operator pg_catalog.*(smallint , integer) is 'multiply';

create operator pg_catalog.* (procedure = int2_mul_cash, leftarg = smallint, rightarg = money);

comment on operator pg_catalog.*(smallint , money) is 'multiply';

create operator pg_catalog.* (procedure = int2mul, leftarg = smallint, rightarg = smallint);

comment on operator pg_catalog.*(smallint , smallint) is 'multiply';

create operator pg_catalog.*< (procedure = record_image_lt, leftarg = record, rightarg = record);

comment on operator pg_catalog.*<(record , record) is 'less than';

create operator pg_catalog.*<= (procedure = record_image_le, leftarg = record, rightarg = record);

comment on operator pg_catalog.*<=(record , record) is 'less than or equal';

create operator pg_catalog.*<> (procedure = record_image_ne, leftarg = record, rightarg = record);

comment on operator pg_catalog.*<>(record , record) is 'not identical';

create operator pg_catalog.*= (procedure = record_image_eq, leftarg = record, rightarg = record);

comment on operator pg_catalog.*=(record , record) is 'identical';

create operator pg_catalog.*> (procedure = record_image_gt, leftarg = record, rightarg = record);

comment on operator pg_catalog.*>(record , record) is 'greater than';

create operator pg_catalog.*>= (procedure = record_image_ge, leftarg = record, rightarg = record);

comment on operator pg_catalog.*>=(record , record) is 'greater than or equal';

create operator pg_catalog.+ (procedure = aclinsert, leftarg = aclitem[], rightarg = aclitem);

comment on operator pg_catalog.+(aclitem[] , aclitem) is 'add/update ACL item';

create operator pg_catalog.+ (procedure = range_union, leftarg = anyrange, rightarg = anyrange);

comment on operator pg_catalog.+(anyrange , anyrange) is 'range union';

create operator pg_catalog.+ (procedure = int8pl, leftarg = bigint, rightarg = bigint);

comment on operator pg_catalog.+(bigint , bigint) is 'add';

create operator pg_catalog.+ (procedure = int8pl_inet, leftarg = bigint, rightarg = inet);

comment on operator pg_catalog.+(bigint , inet) is 'add';

create operator pg_catalog.+ (procedure = int84pl, leftarg = bigint, rightarg = integer);

comment on operator pg_catalog.+(bigint , integer) is 'add';

create operator pg_catalog.+ (procedure = int82pl, leftarg = bigint, rightarg = smallint);

comment on operator pg_catalog.+(bigint , smallint) is 'add';

create operator pg_catalog.+ (procedure = box_add, leftarg = box, rightarg = point);

comment on operator pg_catalog.+(box , point) is 'add point to box (translate)';

create operator pg_catalog.+ (procedure = circle_add_pt, leftarg = circle, rightarg = point);

comment on operator pg_catalog.+(circle , point) is 'add';

create operator pg_catalog.+ (procedure = date_pli, leftarg = date, rightarg = integer);

comment on operator pg_catalog.+(date , integer) is 'add';

create operator pg_catalog.+ (procedure = date_pl_interval, leftarg = date, rightarg = interval);

comment on operator pg_catalog.+(date , interval) is 'add';

create operator pg_catalog.+ (procedure = datetimetz_pl, leftarg = date, rightarg = time with time zone);

comment on operator pg_catalog.+(date , time with time zone) is 'convert date and time with time zone to timestamp with time zone';

create operator pg_catalog.+ (procedure = datetime_pl, leftarg = date, rightarg = time);

comment on operator pg_catalog.+(date , time) is 'convert date and time to timestamp';

create operator pg_catalog.+ (procedure = float8pl, leftarg = double precision, rightarg = double precision);

comment on operator pg_catalog.+(double precision , double precision) is 'add';

create operator pg_catalog.+ (procedure = float84pl, leftarg = double precision, rightarg = real);

comment on operator pg_catalog.+(double precision , real) is 'add';

create operator pg_catalog.+ (procedure = inetpl, leftarg = inet, rightarg = bigint);

comment on operator pg_catalog.+(inet , bigint) is 'add';

create operator pg_catalog.+ (procedure = int48pl, leftarg = integer, rightarg = bigint);

comment on operator pg_catalog.+(integer , bigint) is 'add';

create operator pg_catalog.+ (procedure = integer_pl_date, leftarg = integer, rightarg = date);

comment on operator pg_catalog.+(integer , date) is 'add';

create operator pg_catalog.+ (procedure = int4pl, leftarg = integer, rightarg = integer);

comment on operator pg_catalog.+(integer , integer) is 'add';

create operator pg_catalog.+ (procedure = int42pl, leftarg = integer, rightarg = smallint);

comment on operator pg_catalog.+(integer , smallint) is 'add';

create operator pg_catalog.+ (procedure = interval_pl_date, leftarg = interval, rightarg = date);

comment on operator pg_catalog.+(interval , date) is 'add';

create operator pg_catalog.+ (procedure = interval_pl, leftarg = interval, rightarg = interval);

comment on operator pg_catalog.+(interval , interval) is 'add';

create operator pg_catalog.+ (procedure = interval_pl_timetz, leftarg = interval, rightarg = time with time zone);

comment on operator pg_catalog.+(interval , time with time zone) is 'add';

create operator pg_catalog.+ (procedure = interval_pl_time, leftarg = interval, rightarg = time);

comment on operator pg_catalog.+(interval , time) is 'add';

create operator pg_catalog.+ (procedure = interval_pl_timestamptz, leftarg = interval, rightarg = timestamp with time zone);

comment on operator pg_catalog.+(interval , timestamp with time zone) is 'add';

create operator pg_catalog.+ (procedure = interval_pl_timestamp, leftarg = interval, rightarg = timestamp);

comment on operator pg_catalog.+(interval , timestamp) is 'add';

create operator pg_catalog.+ (procedure = cash_pl, leftarg = money, rightarg = money);

comment on operator pg_catalog.+(money , money) is 'add';

create operator pg_catalog.+ (procedure = numeric_add, leftarg = numeric, rightarg = numeric);

comment on operator pg_catalog.+(numeric , numeric) is 'add';

create operator pg_catalog.+ (procedure = path_add, leftarg = path, rightarg = path);

comment on operator pg_catalog.+(path , path) is 'concatenate';

create operator pg_catalog.+ (procedure = path_add_pt, leftarg = path, rightarg = point);

comment on operator pg_catalog.+(path , point) is 'add (translate path)';

create operator pg_catalog.+ (procedure = point_add, leftarg = point, rightarg = point);

comment on operator pg_catalog.+(point , point) is 'add points (translate)';

create operator pg_catalog.+ (procedure = float48pl, leftarg = real, rightarg = double precision);

comment on operator pg_catalog.+(real , double precision) is 'add';

create operator pg_catalog.+ (procedure = float4pl, leftarg = real, rightarg = real);

comment on operator pg_catalog.+(real , real) is 'add';

create operator pg_catalog.+ (procedure = int28pl, leftarg = smallint, rightarg = bigint);

comment on operator pg_catalog.+(smallint , bigint) is 'add';

create operator pg_catalog.+ (procedure = int24pl, leftarg = smallint, rightarg = integer);

comment on operator pg_catalog.+(smallint , integer) is 'add';

create operator pg_catalog.+ (procedure = int2pl, leftarg = smallint, rightarg = smallint);

comment on operator pg_catalog.+(smallint , smallint) is 'add';

create operator pg_catalog.+ (procedure = timetzdate_pl, leftarg = time with time zone, rightarg = date);

comment on operator pg_catalog.+(time with time zone , date) is 'convert time with time zone and date to timestamp with time zone';

create operator pg_catalog.+ (procedure = timetz_pl_interval, leftarg = time with time zone, rightarg = interval);

comment on operator pg_catalog.+(time with time zone , interval) is 'add';

create operator pg_catalog.+ (procedure = timedate_pl, leftarg = time, rightarg = date);

comment on operator pg_catalog.+(time , date) is 'convert time and date to timestamp';

create operator pg_catalog.+ (procedure = time_pl_interval, leftarg = time, rightarg = interval);

comment on operator pg_catalog.+(time , interval) is 'add';

create operator pg_catalog.+ (procedure = timestamptz_pl_interval, leftarg = timestamp with time zone, rightarg = interval);

comment on operator pg_catalog.+(timestamp with time zone , interval) is 'add';

create operator pg_catalog.+ (procedure = timestamp_pl_interval, leftarg = timestamp, rightarg = interval);

comment on operator pg_catalog.+(timestamp , interval) is 'add';

create operator pg_catalog.+ (procedure = int8up, rightarg = bigint);

comment on operator pg_catalog.+(none , bigint) is 'unary plus';

create operator pg_catalog.+ (procedure = float8up, rightarg = double precision);

comment on operator pg_catalog.+(none , double precision) is 'unary plus';

create operator pg_catalog.+ (procedure = int4up, rightarg = integer);

comment on operator pg_catalog.+(none , integer) is 'unary plus';

create operator pg_catalog.+ (procedure = numeric_uplus, rightarg = numeric);

comment on operator pg_catalog.+(none , numeric) is 'unary plus';

create operator pg_catalog.+ (procedure = float4up, rightarg = real);

comment on operator pg_catalog.+(none , real) is 'unary plus';

create operator pg_catalog.+ (procedure = int2up, rightarg = smallint);

comment on operator pg_catalog.+(none , smallint) is 'unary plus';

create operator pg_catalog.- (procedure = aclremove, leftarg = aclitem[], rightarg = aclitem);

comment on operator pg_catalog.-(aclitem[] , aclitem) is 'remove ACL item';

create operator pg_catalog.- (procedure = range_minus, leftarg = anyrange, rightarg = anyrange);

comment on operator pg_catalog.-(anyrange , anyrange) is 'range difference';

create operator pg_catalog.- (procedure = int8mi, leftarg = bigint, rightarg = bigint);

comment on operator pg_catalog.-(bigint , bigint) is 'subtract';

create operator pg_catalog.- (procedure = int84mi, leftarg = bigint, rightarg = integer);

comment on operator pg_catalog.-(bigint , integer) is 'subtract';

create operator pg_catalog.- (procedure = int82mi, leftarg = bigint, rightarg = smallint);

comment on operator pg_catalog.-(bigint , smallint) is 'subtract';

create operator pg_catalog.- (procedure = box_sub, leftarg = box, rightarg = point);

comment on operator pg_catalog.-(box , point) is 'subtract point from box (translate)';

create operator pg_catalog.- (procedure = circle_sub_pt, leftarg = circle, rightarg = point);

comment on operator pg_catalog.-(circle , point) is 'subtract';

create operator pg_catalog.- (procedure = date_mi, leftarg = date, rightarg = date);

comment on operator pg_catalog.-(date , date) is 'subtract';

create operator pg_catalog.- (procedure = date_mii, leftarg = date, rightarg = integer);

comment on operator pg_catalog.-(date , integer) is 'subtract';

create operator pg_catalog.- (procedure = date_mi_interval, leftarg = date, rightarg = interval);

comment on operator pg_catalog.-(date , interval) is 'subtract';

create operator pg_catalog.- (procedure = float8mi, leftarg = double precision, rightarg = double precision);

comment on operator pg_catalog.-(double precision , double precision) is 'subtract';

create operator pg_catalog.- (procedure = float84mi, leftarg = double precision, rightarg = real);

comment on operator pg_catalog.-(double precision , real) is 'subtract';

create operator pg_catalog.- (procedure = inetmi_int8, leftarg = inet, rightarg = bigint);

comment on operator pg_catalog.-(inet , bigint) is 'subtract';

create operator pg_catalog.- (procedure = inetmi, leftarg = inet, rightarg = inet);

comment on operator pg_catalog.-(inet , inet) is 'subtract';

create operator pg_catalog.- (procedure = int48mi, leftarg = integer, rightarg = bigint);

comment on operator pg_catalog.-(integer , bigint) is 'subtract';

create operator pg_catalog.- (procedure = int4mi, leftarg = integer, rightarg = integer);

comment on operator pg_catalog.-(integer , integer) is 'subtract';

create operator pg_catalog.- (procedure = int42mi, leftarg = integer, rightarg = smallint);

comment on operator pg_catalog.-(integer , smallint) is 'subtract';

create operator pg_catalog.- (procedure = interval_mi, leftarg = interval, rightarg = interval);

comment on operator pg_catalog.-(interval , interval) is 'subtract';

create operator pg_catalog.- (procedure = "pg_catalog.jsonb_delete", leftarg = jsonb, rightarg = integer);

comment on operator pg_catalog.-(jsonb , integer) is 'delete array element';

create operator pg_catalog.- (procedure = "pg_catalog.jsonb_delete", leftarg = jsonb, rightarg = text);

comment on operator pg_catalog.-(jsonb , text) is 'delete object field';

create operator pg_catalog.- (procedure = "pg_catalog.jsonb_delete", leftarg = jsonb, rightarg = text[]);

comment on operator pg_catalog.-(jsonb , text[]) is 'delete object fields';

create operator pg_catalog.- (procedure = cash_mi, leftarg = money, rightarg = money);

comment on operator pg_catalog.-(money , money) is 'subtract';

create operator pg_catalog.- (procedure = numeric_sub, leftarg = numeric, rightarg = numeric);

comment on operator pg_catalog.-(numeric , numeric) is 'subtract';

create operator pg_catalog.- (procedure = path_sub_pt, leftarg = path, rightarg = point);

comment on operator pg_catalog.-(path , point) is 'subtract (translate path)';

create operator pg_catalog.- (procedure = pg_lsn_mi, leftarg = pg_lsn, rightarg = pg_lsn);

comment on operator pg_catalog.-(pg_lsn , pg_lsn) is 'minus';

create operator pg_catalog.- (procedure = point_sub, leftarg = point, rightarg = point);

comment on operator pg_catalog.-(point , point) is 'subtract points (translate)';

create operator pg_catalog.- (procedure = float48mi, leftarg = real, rightarg = double precision);

comment on operator pg_catalog.-(real , double precision) is 'subtract';

create operator pg_catalog.- (procedure = float4mi, leftarg = real, rightarg = real);

comment on operator pg_catalog.-(real , real) is 'subtract';

create operator pg_catalog.- (procedure = int28mi, leftarg = smallint, rightarg = bigint);

comment on operator pg_catalog.-(smallint , bigint) is 'subtract';

create operator pg_catalog.- (procedure = int24mi, leftarg = smallint, rightarg = integer);

comment on operator pg_catalog.-(smallint , integer) is 'subtract';

create operator pg_catalog.- (procedure = int2mi, leftarg = smallint, rightarg = smallint);

comment on operator pg_catalog.-(smallint , smallint) is 'subtract';

create operator pg_catalog.- (procedure = timetz_mi_interval, leftarg = time with time zone, rightarg = interval);

comment on operator pg_catalog.-(time with time zone , interval) is 'subtract';

create operator pg_catalog.- (procedure = time_mi_interval, leftarg = time, rightarg = interval);

comment on operator pg_catalog.-(time , interval) is 'subtract';

create operator pg_catalog.- (procedure = time_mi_time, leftarg = time, rightarg = time);

comment on operator pg_catalog.-(time , time) is 'subtract';

create operator pg_catalog.- (procedure = timestamptz_mi_interval, leftarg = timestamp with time zone, rightarg = interval);

comment on operator pg_catalog.-(timestamp with time zone , interval) is 'subtract';

create operator pg_catalog.- (procedure = timestamptz_mi, leftarg = timestamp with time zone, rightarg = timestamp with time zone);

comment on operator pg_catalog.-(timestamp with time zone , timestamp with time zone) is 'subtract';

create operator pg_catalog.- (procedure = timestamp_mi_interval, leftarg = timestamp, rightarg = interval);

comment on operator pg_catalog.-(timestamp , interval) is 'subtract';

create operator pg_catalog.- (procedure = timestamp_mi, leftarg = timestamp, rightarg = timestamp);

comment on operator pg_catalog.-(timestamp , timestamp) is 'subtract';

create operator pg_catalog.- (procedure = int8um, rightarg = bigint);

comment on operator pg_catalog.-(none , bigint) is 'negate';

create operator pg_catalog.- (procedure = float8um, rightarg = double precision);

comment on operator pg_catalog.-(none , double precision) is 'negate';

create operator pg_catalog.- (procedure = int4um, rightarg = integer);

comment on operator pg_catalog.-(none , integer) is 'negate';

create operator pg_catalog.- (procedure = interval_um, rightarg = interval);

comment on operator pg_catalog.-(none , interval) is 'negate';

create operator pg_catalog.- (procedure = numeric_uminus, rightarg = numeric);

comment on operator pg_catalog.-(none , numeric) is 'negate';

create operator pg_catalog.- (procedure = float4um, rightarg = real);

comment on operator pg_catalog.-(none , real) is 'negate';

create operator pg_catalog.- (procedure = int2um, rightarg = smallint);

comment on operator pg_catalog.-(none , smallint) is 'negate';

create operator pg_catalog.-> (procedure = json_array_element, leftarg = json, rightarg = integer);

comment on operator pg_catalog.->(json , integer) is 'get json array element';

create operator pg_catalog.-> (procedure = json_object_field, leftarg = json, rightarg = text);

comment on operator pg_catalog.->(json , text) is 'get json object field';

create operator pg_catalog.-> (procedure = jsonb_array_element, leftarg = jsonb, rightarg = integer);

comment on operator pg_catalog.->(jsonb , integer) is 'get jsonb array element';

create operator pg_catalog.-> (procedure = jsonb_object_field, leftarg = jsonb, rightarg = text);

comment on operator pg_catalog.->(jsonb , text) is 'get jsonb object field';

create operator pg_catalog.->> (procedure = json_array_element_text, leftarg = json, rightarg = integer);

comment on operator pg_catalog.->>(json , integer) is 'get json array element as text';

create operator pg_catalog.->> (procedure = json_object_field_text, leftarg = json, rightarg = text);

comment on operator pg_catalog.->>(json , text) is 'get json object field as text';

create operator pg_catalog.->> (procedure = jsonb_array_element_text, leftarg = jsonb, rightarg = integer);

comment on operator pg_catalog.->>(jsonb , integer) is 'get jsonb array element as text';

create operator pg_catalog.->> (procedure = jsonb_object_field_text, leftarg = jsonb, rightarg = text);

comment on operator pg_catalog.->>(jsonb , text) is 'get jsonb object field as text';

create operator pg_catalog.-|- (procedure = range_adjacent, leftarg = anyrange, rightarg = anyrange);

comment on operator pg_catalog.-|-(anyrange , anyrange) is 'is adjacent to';

create operator pg_catalog./ (procedure = int8div, leftarg = bigint, rightarg = bigint);

comment on operator pg_catalog./(bigint , bigint) is 'divide';

create operator pg_catalog./ (procedure = int84div, leftarg = bigint, rightarg = integer);

comment on operator pg_catalog./(bigint , integer) is 'divide';

create operator pg_catalog./ (procedure = int82div, leftarg = bigint, rightarg = smallint);

comment on operator pg_catalog./(bigint , smallint) is 'divide';

create operator pg_catalog./ (procedure = box_div, leftarg = box, rightarg = point);

comment on operator pg_catalog./(box , point) is 'divide box by point (scale)';

create operator pg_catalog./ (procedure = circle_div_pt, leftarg = circle, rightarg = point);

comment on operator pg_catalog./(circle , point) is 'divide';

create operator pg_catalog./ (procedure = float8div, leftarg = double precision, rightarg = double precision);

comment on operator pg_catalog./(double precision , double precision) is 'divide';

create operator pg_catalog./ (procedure = float84div, leftarg = double precision, rightarg = real);

comment on operator pg_catalog./(double precision , real) is 'divide';

create operator pg_catalog./ (procedure = int48div, leftarg = integer, rightarg = bigint);

comment on operator pg_catalog./(integer , bigint) is 'divide';

create operator pg_catalog./ (procedure = int4div, leftarg = integer, rightarg = integer);

comment on operator pg_catalog./(integer , integer) is 'divide';

create operator pg_catalog./ (procedure = int42div, leftarg = integer, rightarg = smallint);

comment on operator pg_catalog./(integer , smallint) is 'divide';

create operator pg_catalog./ (procedure = interval_div, leftarg = interval, rightarg = double precision);

comment on operator pg_catalog./(interval , double precision) is 'divide';

create operator pg_catalog./ (procedure = cash_div_int8, leftarg = money, rightarg = bigint);

comment on operator pg_catalog./(money , bigint) is 'divide';

create operator pg_catalog./ (procedure = cash_div_flt8, leftarg = money, rightarg = double precision);

comment on operator pg_catalog./(money , double precision) is 'divide';

create operator pg_catalog./ (procedure = cash_div_int4, leftarg = money, rightarg = integer);

comment on operator pg_catalog./(money , integer) is 'divide';

create operator pg_catalog./ (procedure = cash_div_cash, leftarg = money, rightarg = money);

comment on operator pg_catalog./(money , money) is 'divide';

create operator pg_catalog./ (procedure = cash_div_flt4, leftarg = money, rightarg = real);

comment on operator pg_catalog./(money , real) is 'divide';

create operator pg_catalog./ (procedure = cash_div_int2, leftarg = money, rightarg = smallint);

comment on operator pg_catalog./(money , smallint) is 'divide';

create operator pg_catalog./ (procedure = numeric_div, leftarg = numeric, rightarg = numeric);

comment on operator pg_catalog./(numeric , numeric) is 'divide';

create operator pg_catalog./ (procedure = path_div_pt, leftarg = path, rightarg = point);

comment on operator pg_catalog./(path , point) is 'divide (rotate/scale path)';

create operator pg_catalog./ (procedure = point_div, leftarg = point, rightarg = point);

comment on operator pg_catalog./(point , point) is 'divide points (scale/rotate)';

create operator pg_catalog./ (procedure = float48div, leftarg = real, rightarg = double precision);

comment on operator pg_catalog./(real , double precision) is 'divide';

create operator pg_catalog./ (procedure = float4div, leftarg = real, rightarg = real);

comment on operator pg_catalog./(real , real) is 'divide';

create operator pg_catalog./ (procedure = int28div, leftarg = smallint, rightarg = bigint);

comment on operator pg_catalog./(smallint , bigint) is 'divide';

create operator pg_catalog./ (procedure = int24div, leftarg = smallint, rightarg = integer);

comment on operator pg_catalog./(smallint , integer) is 'divide';

create operator pg_catalog./ (procedure = int2div, leftarg = smallint, rightarg = smallint);

comment on operator pg_catalog./(smallint , smallint) is 'divide';

create operator pg_catalog.< (procedure = charlt, leftarg = "char", rightarg = "char");

comment on operator pg_catalog.<("char" , "char") is 'less than';

create operator pg_catalog.< (procedure = array_lt, leftarg = anyarray, rightarg = anyarray);

comment on operator pg_catalog.<(anyarray , anyarray) is 'less than';

create operator pg_catalog.< (procedure = enum_lt, leftarg = anyenum, rightarg = anyenum);

comment on operator pg_catalog.<(anyenum , anyenum) is 'less than';

create operator pg_catalog.< (procedure = range_lt, leftarg = anyrange, rightarg = anyrange);

comment on operator pg_catalog.<(anyrange , anyrange) is 'less than';

create operator pg_catalog.< (procedure = int8lt, leftarg = bigint, rightarg = bigint);

comment on operator pg_catalog.<(bigint , bigint) is 'less than';

create operator pg_catalog.< (procedure = int84lt, leftarg = bigint, rightarg = integer);

comment on operator pg_catalog.<(bigint , integer) is 'less than';

create operator pg_catalog.< (procedure = int82lt, leftarg = bigint, rightarg = smallint);

comment on operator pg_catalog.<(bigint , smallint) is 'less than';

create operator pg_catalog.< (procedure = varbitlt, leftarg = bit varying, rightarg = bit varying);

comment on operator pg_catalog.<(bit varying , bit varying) is 'less than';

create operator pg_catalog.< (procedure = bitlt, leftarg = bit, rightarg = bit);

comment on operator pg_catalog.<(bit , bit) is 'less than';

create operator pg_catalog.< (procedure = boollt, leftarg = boolean, rightarg = boolean);

comment on operator pg_catalog.<(boolean , boolean) is 'less than';

create operator pg_catalog.< (procedure = box_lt, leftarg = box, rightarg = box);

comment on operator pg_catalog.<(box , box) is 'less than by area';

create operator pg_catalog.< (procedure = bytealt, leftarg = bytea, rightarg = bytea);

comment on operator pg_catalog.<(bytea , bytea) is 'less than';

create operator pg_catalog.< (procedure = bpcharlt, leftarg = char, rightarg = char);

comment on operator pg_catalog.<(char , char) is 'less than';

create operator pg_catalog.< (procedure = circle_lt, leftarg = circle, rightarg = circle);

comment on operator pg_catalog.<(circle , circle) is 'less than by area';

create operator pg_catalog.< (procedure = date_lt, leftarg = date, rightarg = date);

comment on operator pg_catalog.<(date , date) is 'less than';

create operator pg_catalog.< (procedure = date_lt_timestamptz, leftarg = date, rightarg = timestamp with time zone);

comment on operator pg_catalog.<(date , timestamp with time zone) is 'less than';

create operator pg_catalog.< (procedure = date_lt_timestamp, leftarg = date, rightarg = timestamp);

comment on operator pg_catalog.<(date , timestamp) is 'less than';

create operator pg_catalog.< (procedure = float8lt, leftarg = double precision, rightarg = double precision);

comment on operator pg_catalog.<(double precision , double precision) is 'less than';

create operator pg_catalog.< (procedure = float84lt, leftarg = double precision, rightarg = real);

comment on operator pg_catalog.<(double precision , real) is 'less than';

create operator pg_catalog.< (procedure = network_lt, leftarg = inet, rightarg = inet);

comment on operator pg_catalog.<(inet , inet) is 'less than';

create operator pg_catalog.< (procedure = int48lt, leftarg = integer, rightarg = bigint);

comment on operator pg_catalog.<(integer , bigint) is 'less than';

create operator pg_catalog.< (procedure = int4lt, leftarg = integer, rightarg = integer);

comment on operator pg_catalog.<(integer , integer) is 'less than';

create operator pg_catalog.< (procedure = int42lt, leftarg = integer, rightarg = smallint);

comment on operator pg_catalog.<(integer , smallint) is 'less than';

create operator pg_catalog.< (procedure = interval_lt, leftarg = interval, rightarg = interval);

comment on operator pg_catalog.<(interval , interval) is 'less than';

create operator pg_catalog.< (procedure = jsonb_lt, leftarg = jsonb, rightarg = jsonb);

comment on operator pg_catalog.<(jsonb , jsonb) is 'less than';

create operator pg_catalog.< (procedure = lseg_lt, leftarg = lseg, rightarg = lseg);

comment on operator pg_catalog.<(lseg , lseg) is 'less than by length';

create operator pg_catalog.< (procedure = macaddr_lt, leftarg = macaddr, rightarg = macaddr);

comment on operator pg_catalog.<(macaddr , macaddr) is 'less than';

create operator pg_catalog.< (procedure = macaddr8_lt, leftarg = macaddr8, rightarg = macaddr8);

comment on operator pg_catalog.<(macaddr8 , macaddr8) is 'less than';

create operator pg_catalog.< (procedure = cash_lt, leftarg = money, rightarg = money);

comment on operator pg_catalog.<(money , money) is 'less than';

create operator pg_catalog.< (procedure = namelt, leftarg = name, rightarg = name);

comment on operator pg_catalog.<(name , name) is 'less than';

create operator pg_catalog.< (procedure = namelttext, leftarg = name, rightarg = text);

comment on operator pg_catalog.<(name , text) is 'less than';

create operator pg_catalog.< (procedure = numeric_lt, leftarg = numeric, rightarg = numeric);

comment on operator pg_catalog.<(numeric , numeric) is 'less than';

create operator pg_catalog.< (procedure = oidlt, leftarg = oid, rightarg = oid);

comment on operator pg_catalog.<(oid , oid) is 'less than';

create operator pg_catalog.< (procedure = oidvectorlt, leftarg = oidvector, rightarg = oidvector);

comment on operator pg_catalog.<(oidvector , oidvector) is 'less than';

create operator pg_catalog.< (procedure = path_n_lt, leftarg = path, rightarg = path);

comment on operator pg_catalog.<(path , path) is 'less than';

create operator pg_catalog.< (procedure = pg_lsn_lt, leftarg = pg_lsn, rightarg = pg_lsn);

comment on operator pg_catalog.<(pg_lsn , pg_lsn) is 'less than';

create operator pg_catalog.< (procedure = float48lt, leftarg = real, rightarg = double precision);

comment on operator pg_catalog.<(real , double precision) is 'less than';

create operator pg_catalog.< (procedure = float4lt, leftarg = real, rightarg = real);

comment on operator pg_catalog.<(real , real) is 'less than';

create operator pg_catalog.< (procedure = record_lt, leftarg = record, rightarg = record);

comment on operator pg_catalog.<(record , record) is 'less than';

create operator pg_catalog.< (procedure = int28lt, leftarg = smallint, rightarg = bigint);

comment on operator pg_catalog.<(smallint , bigint) is 'less than';

create operator pg_catalog.< (procedure = int24lt, leftarg = smallint, rightarg = integer);

comment on operator pg_catalog.<(smallint , integer) is 'less than';

create operator pg_catalog.< (procedure = int2lt, leftarg = smallint, rightarg = smallint);

comment on operator pg_catalog.<(smallint , smallint) is 'less than';

create operator pg_catalog.< (procedure = textltname, leftarg = text, rightarg = name);

comment on operator pg_catalog.<(text , name) is 'less than';

create operator pg_catalog.< (procedure = text_lt, leftarg = text, rightarg = text);

comment on operator pg_catalog.<(text , text) is 'less than';

create operator pg_catalog.< (procedure = tidlt, leftarg = tid, rightarg = tid);

comment on operator pg_catalog.<(tid , tid) is 'less than';

create operator pg_catalog.< (procedure = timetz_lt, leftarg = time with time zone, rightarg = time with time zone);

comment on operator pg_catalog.<(time with time zone , time with time zone) is 'less than';

create operator pg_catalog.< (procedure = time_lt, leftarg = time, rightarg = time);

comment on operator pg_catalog.<(time , time) is 'less than';

create operator pg_catalog.< (procedure = timestamptz_lt_date, leftarg = timestamp with time zone, rightarg = date);

comment on operator pg_catalog.<(timestamp with time zone , date) is 'less than';

create operator pg_catalog.< (procedure = timestamptz_lt, leftarg = timestamp with time zone, rightarg = timestamp with time zone);

comment on operator pg_catalog.<(timestamp with time zone , timestamp with time zone) is 'less than';

create operator pg_catalog.< (procedure = timestamptz_lt_timestamp, leftarg = timestamp with time zone, rightarg = timestamp);

comment on operator pg_catalog.<(timestamp with time zone , timestamp) is 'less than';

create operator pg_catalog.< (procedure = timestamp_lt_date, leftarg = timestamp, rightarg = date);

comment on operator pg_catalog.<(timestamp , date) is 'less than';

create operator pg_catalog.< (procedure = timestamp_lt_timestamptz, leftarg = timestamp, rightarg = timestamp with time zone);

comment on operator pg_catalog.<(timestamp , timestamp with time zone) is 'less than';

create operator pg_catalog.< (procedure = timestamp_lt, leftarg = timestamp, rightarg = timestamp);

comment on operator pg_catalog.<(timestamp , timestamp) is 'less than';

create operator pg_catalog.< (procedure = tsquery_lt, leftarg = tsquery, rightarg = tsquery);

comment on operator pg_catalog.<(tsquery , tsquery) is 'less than';

create operator pg_catalog.< (procedure = tsvector_lt, leftarg = tsvector, rightarg = tsvector);

comment on operator pg_catalog.<(tsvector , tsvector) is 'less than';

create operator pg_catalog.< (procedure = uuid_lt, leftarg = uuid, rightarg = uuid);

comment on operator pg_catalog.<(uuid , uuid) is 'less than';

create operator pg_catalog.<-> (procedure = box_distance, leftarg = box, rightarg = box);

comment on operator pg_catalog.<->(box , box) is 'distance between';

create operator pg_catalog.<-> (procedure = circle_distance, leftarg = circle, rightarg = circle);

comment on operator pg_catalog.<->(circle , circle) is 'distance between';

create operator pg_catalog.<-> (procedure = dist_cpoint, leftarg = circle, rightarg = point);

comment on operator pg_catalog.<->(circle , point) is 'distance between';

create operator pg_catalog.<-> (procedure = dist_cpoly, leftarg = circle, rightarg = polygon);

comment on operator pg_catalog.<->(circle , polygon) is 'distance between';

create operator pg_catalog.<-> (procedure = dist_lb, leftarg = line, rightarg = box);

comment on operator pg_catalog.<->(line , box) is 'distance between';

create operator pg_catalog.<-> (procedure = line_distance, leftarg = line, rightarg = line);

comment on operator pg_catalog.<->(line , line) is 'distance between';

create operator pg_catalog.<-> (procedure = dist_sb, leftarg = lseg, rightarg = box);

comment on operator pg_catalog.<->(lseg , box) is 'distance between';

create operator pg_catalog.<-> (procedure = dist_sl, leftarg = lseg, rightarg = line);

comment on operator pg_catalog.<->(lseg , line) is 'distance between';

create operator pg_catalog.<-> (procedure = lseg_distance, leftarg = lseg, rightarg = lseg);

comment on operator pg_catalog.<->(lseg , lseg) is 'distance between';

create operator pg_catalog.<-> (procedure = path_distance, leftarg = path, rightarg = path);

comment on operator pg_catalog.<->(path , path) is 'distance between';

create operator pg_catalog.<-> (procedure = dist_pb, leftarg = point, rightarg = box);

comment on operator pg_catalog.<->(point , box) is 'distance between';

create operator pg_catalog.<-> (procedure = dist_pc, leftarg = point, rightarg = circle);

comment on operator pg_catalog.<->(point , circle) is 'distance between';

create operator pg_catalog.<-> (procedure = dist_pl, leftarg = point, rightarg = line);

comment on operator pg_catalog.<->(point , line) is 'distance between';

create operator pg_catalog.<-> (procedure = dist_ps, leftarg = point, rightarg = lseg);

comment on operator pg_catalog.<->(point , lseg) is 'distance between';

create operator pg_catalog.<-> (procedure = dist_ppath, leftarg = point, rightarg = path);

comment on operator pg_catalog.<->(point , path) is 'distance between';

create operator pg_catalog.<-> (procedure = point_distance, leftarg = point, rightarg = point);

comment on operator pg_catalog.<->(point , point) is 'distance between';

create operator pg_catalog.<-> (procedure = dist_ppoly, leftarg = point, rightarg = polygon);

comment on operator pg_catalog.<->(point , polygon) is 'distance between';

create operator pg_catalog.<-> (procedure = dist_polyp, leftarg = polygon, rightarg = point);

comment on operator pg_catalog.<->(polygon , point) is 'distance between';

create operator pg_catalog.<-> (procedure = poly_distance, leftarg = polygon, rightarg = polygon);

comment on operator pg_catalog.<->(polygon , polygon) is 'distance between';

create operator pg_catalog.<-> (procedure = "pg_catalog.tsquery_phrase", leftarg = tsquery, rightarg = tsquery);

comment on operator pg_catalog.<->(tsquery , tsquery) is 'phrase-concatenate';

create operator pg_catalog.<< (procedure = range_before, leftarg = anyrange, rightarg = anyrange);

comment on operator pg_catalog.<<(anyrange , anyrange) is 'is left of';

create operator pg_catalog.<< (procedure = int8shl, leftarg = bigint, rightarg = integer);

comment on operator pg_catalog.<<(bigint , integer) is 'bitwise shift left';

create operator pg_catalog.<< (procedure = bitshiftleft, leftarg = bit, rightarg = integer);

comment on operator pg_catalog.<<(bit , integer) is 'bitwise shift left';

create operator pg_catalog.<< (procedure = box_left, leftarg = box, rightarg = box);

comment on operator pg_catalog.<<(box , box) is 'is left of';

create operator pg_catalog.<< (procedure = circle_left, leftarg = circle, rightarg = circle);

comment on operator pg_catalog.<<(circle , circle) is 'is left of';

create operator pg_catalog.<< (procedure = network_sub, leftarg = inet, rightarg = inet);

comment on operator pg_catalog.<<(inet , inet) is 'is subnet';

create operator pg_catalog.<< (procedure = int4shl, leftarg = integer, rightarg = integer);

comment on operator pg_catalog.<<(integer , integer) is 'bitwise shift left';

create operator pg_catalog.<< (procedure = point_left, leftarg = point, rightarg = point);

comment on operator pg_catalog.<<(point , point) is 'is left of';

create operator pg_catalog.<< (procedure = poly_left, leftarg = polygon, rightarg = polygon);

comment on operator pg_catalog.<<(polygon , polygon) is 'is left of';

create operator pg_catalog.<< (procedure = int2shl, leftarg = smallint, rightarg = integer);

comment on operator pg_catalog.<<(smallint , integer) is 'bitwise shift left';

create operator pg_catalog.<<= (procedure = network_subeq, leftarg = inet, rightarg = inet);

comment on operator pg_catalog.<<=(inet , inet) is 'is subnet or equal';

create operator pg_catalog.<<| (procedure = box_below, leftarg = box, rightarg = box);

comment on operator pg_catalog.<<|(box , box) is 'is below';

create operator pg_catalog.<<| (procedure = circle_below, leftarg = circle, rightarg = circle);

comment on operator pg_catalog.<<|(circle , circle) is 'is below';

create operator pg_catalog.<<| (procedure = poly_below, leftarg = polygon, rightarg = polygon);

comment on operator pg_catalog.<<|(polygon , polygon) is 'is below';

create operator pg_catalog.<= (procedure = charle, leftarg = "char", rightarg = "char");

comment on operator pg_catalog.<=("char" , "char") is 'less than or equal';

create operator pg_catalog.<= (procedure = array_le, leftarg = anyarray, rightarg = anyarray);

comment on operator pg_catalog.<=(anyarray , anyarray) is 'less than or equal';

create operator pg_catalog.<= (procedure = enum_le, leftarg = anyenum, rightarg = anyenum);

comment on operator pg_catalog.<=(anyenum , anyenum) is 'less than or equal';

create operator pg_catalog.<= (procedure = range_le, leftarg = anyrange, rightarg = anyrange);

comment on operator pg_catalog.<=(anyrange , anyrange) is 'less than or equal';

create operator pg_catalog.<= (procedure = int8le, leftarg = bigint, rightarg = bigint);

comment on operator pg_catalog.<=(bigint , bigint) is 'less than or equal';

create operator pg_catalog.<= (procedure = int84le, leftarg = bigint, rightarg = integer);

comment on operator pg_catalog.<=(bigint , integer) is 'less than or equal';

create operator pg_catalog.<= (procedure = int82le, leftarg = bigint, rightarg = smallint);

comment on operator pg_catalog.<=(bigint , smallint) is 'less than or equal';

create operator pg_catalog.<= (procedure = varbitle, leftarg = bit varying, rightarg = bit varying);

comment on operator pg_catalog.<=(bit varying , bit varying) is 'less than or equal';

create operator pg_catalog.<= (procedure = bitle, leftarg = bit, rightarg = bit);

comment on operator pg_catalog.<=(bit , bit) is 'less than or equal';

create operator pg_catalog.<= (procedure = boolle, leftarg = boolean, rightarg = boolean);

comment on operator pg_catalog.<=(boolean , boolean) is 'less than or equal';

create operator pg_catalog.<= (procedure = box_le, leftarg = box, rightarg = box);

comment on operator pg_catalog.<=(box , box) is 'less than or equal by area';

create operator pg_catalog.<= (procedure = byteale, leftarg = bytea, rightarg = bytea);

comment on operator pg_catalog.<=(bytea , bytea) is 'less than or equal';

create operator pg_catalog.<= (procedure = bpcharle, leftarg = char, rightarg = char);

comment on operator pg_catalog.<=(char , char) is 'less than or equal';

create operator pg_catalog.<= (procedure = circle_le, leftarg = circle, rightarg = circle);

comment on operator pg_catalog.<=(circle , circle) is 'less than or equal by area';

create operator pg_catalog.<= (procedure = date_le, leftarg = date, rightarg = date);

comment on operator pg_catalog.<=(date , date) is 'less than or equal';

create operator pg_catalog.<= (procedure = date_le_timestamptz, leftarg = date, rightarg = timestamp with time zone);

comment on operator pg_catalog.<=(date , timestamp with time zone) is 'less than or equal';

create operator pg_catalog.<= (procedure = date_le_timestamp, leftarg = date, rightarg = timestamp);

comment on operator pg_catalog.<=(date , timestamp) is 'less than or equal';

create operator pg_catalog.<= (procedure = float8le, leftarg = double precision, rightarg = double precision);

comment on operator pg_catalog.<=(double precision , double precision) is 'less than or equal';

create operator pg_catalog.<= (procedure = float84le, leftarg = double precision, rightarg = real);

comment on operator pg_catalog.<=(double precision , real) is 'less than or equal';

create operator pg_catalog.<= (procedure = network_le, leftarg = inet, rightarg = inet);

comment on operator pg_catalog.<=(inet , inet) is 'less than or equal';

create operator pg_catalog.<= (procedure = int48le, leftarg = integer, rightarg = bigint);

comment on operator pg_catalog.<=(integer , bigint) is 'less than or equal';

create operator pg_catalog.<= (procedure = int4le, leftarg = integer, rightarg = integer);

comment on operator pg_catalog.<=(integer , integer) is 'less than or equal';

create operator pg_catalog.<= (procedure = int42le, leftarg = integer, rightarg = smallint);

comment on operator pg_catalog.<=(integer , smallint) is 'less than or equal';

create operator pg_catalog.<= (procedure = interval_le, leftarg = interval, rightarg = interval);

comment on operator pg_catalog.<=(interval , interval) is 'less than or equal';

create operator pg_catalog.<= (procedure = jsonb_le, leftarg = jsonb, rightarg = jsonb);

comment on operator pg_catalog.<=(jsonb , jsonb) is 'less than or equal';

create operator pg_catalog.<= (procedure = lseg_le, leftarg = lseg, rightarg = lseg);

comment on operator pg_catalog.<=(lseg , lseg) is 'less than or equal by length';

create operator pg_catalog.<= (procedure = macaddr_le, leftarg = macaddr, rightarg = macaddr);

comment on operator pg_catalog.<=(macaddr , macaddr) is 'less than or equal';

create operator pg_catalog.<= (procedure = macaddr8_le, leftarg = macaddr8, rightarg = macaddr8);

comment on operator pg_catalog.<=(macaddr8 , macaddr8) is 'less than or equal';

create operator pg_catalog.<= (procedure = cash_le, leftarg = money, rightarg = money);

comment on operator pg_catalog.<=(money , money) is 'less than or equal';

create operator pg_catalog.<= (procedure = namele, leftarg = name, rightarg = name);

comment on operator pg_catalog.<=(name , name) is 'less than or equal';

create operator pg_catalog.<= (procedure = nameletext, leftarg = name, rightarg = text);

comment on operator pg_catalog.<=(name , text) is 'less than or equal';

create operator pg_catalog.<= (procedure = numeric_le, leftarg = numeric, rightarg = numeric);

comment on operator pg_catalog.<=(numeric , numeric) is 'less than or equal';

create operator pg_catalog.<= (procedure = oidle, leftarg = oid, rightarg = oid);

comment on operator pg_catalog.<=(oid , oid) is 'less than or equal';

create operator pg_catalog.<= (procedure = oidvectorle, leftarg = oidvector, rightarg = oidvector);

comment on operator pg_catalog.<=(oidvector , oidvector) is 'less than or equal';

create operator pg_catalog.<= (procedure = path_n_le, leftarg = path, rightarg = path);

comment on operator pg_catalog.<=(path , path) is 'less than or equal';

create operator pg_catalog.<= (procedure = pg_lsn_le, leftarg = pg_lsn, rightarg = pg_lsn);

comment on operator pg_catalog.<=(pg_lsn , pg_lsn) is 'less than or equal';

create operator pg_catalog.<= (procedure = float48le, leftarg = real, rightarg = double precision);

comment on operator pg_catalog.<=(real , double precision) is 'less than or equal';

create operator pg_catalog.<= (procedure = float4le, leftarg = real, rightarg = real);

comment on operator pg_catalog.<=(real , real) is 'less than or equal';

create operator pg_catalog.<= (procedure = record_le, leftarg = record, rightarg = record);

comment on operator pg_catalog.<=(record , record) is 'less than or equal';

create operator pg_catalog.<= (procedure = int28le, leftarg = smallint, rightarg = bigint);

comment on operator pg_catalog.<=(smallint , bigint) is 'less than or equal';

create operator pg_catalog.<= (procedure = int24le, leftarg = smallint, rightarg = integer);

comment on operator pg_catalog.<=(smallint , integer) is 'less than or equal';

create operator pg_catalog.<= (procedure = int2le, leftarg = smallint, rightarg = smallint);

comment on operator pg_catalog.<=(smallint , smallint) is 'less than or equal';

create operator pg_catalog.<= (procedure = textlename, leftarg = text, rightarg = name);

comment on operator pg_catalog.<=(text , name) is 'less than or equal';

create operator pg_catalog.<= (procedure = text_le, leftarg = text, rightarg = text);

comment on operator pg_catalog.<=(text , text) is 'less than or equal';

create operator pg_catalog.<= (procedure = tidle, leftarg = tid, rightarg = tid);

comment on operator pg_catalog.<=(tid , tid) is 'less than or equal';

create operator pg_catalog.<= (procedure = timetz_le, leftarg = time with time zone, rightarg = time with time zone);

comment on operator pg_catalog.<=(time with time zone , time with time zone) is 'less than or equal';

create operator pg_catalog.<= (procedure = time_le, leftarg = time, rightarg = time);

comment on operator pg_catalog.<=(time , time) is 'less than or equal';

create operator pg_catalog.<= (procedure = timestamptz_le_date, leftarg = timestamp with time zone, rightarg = date);

comment on operator pg_catalog.<=(timestamp with time zone , date) is 'less than or equal';

create operator pg_catalog.<= (procedure = timestamptz_le, leftarg = timestamp with time zone, rightarg = timestamp with time zone);

comment on operator pg_catalog.<=(timestamp with time zone , timestamp with time zone) is 'less than or equal';

create operator pg_catalog.<= (procedure = timestamptz_le_timestamp, leftarg = timestamp with time zone, rightarg = timestamp);

comment on operator pg_catalog.<=(timestamp with time zone , timestamp) is 'less than or equal';

create operator pg_catalog.<= (procedure = timestamp_le_date, leftarg = timestamp, rightarg = date);

comment on operator pg_catalog.<=(timestamp , date) is 'less than or equal';

create operator pg_catalog.<= (procedure = timestamp_le_timestamptz, leftarg = timestamp, rightarg = timestamp with time zone);

comment on operator pg_catalog.<=(timestamp , timestamp with time zone) is 'less than or equal';

create operator pg_catalog.<= (procedure = timestamp_le, leftarg = timestamp, rightarg = timestamp);

comment on operator pg_catalog.<=(timestamp , timestamp) is 'less than or equal';

create operator pg_catalog.<= (procedure = tsquery_le, leftarg = tsquery, rightarg = tsquery);

comment on operator pg_catalog.<=(tsquery , tsquery) is 'less than or equal';

create operator pg_catalog.<= (procedure = tsvector_le, leftarg = tsvector, rightarg = tsvector);

comment on operator pg_catalog.<=(tsvector , tsvector) is 'less than or equal';

create operator pg_catalog.<= (procedure = uuid_le, leftarg = uuid, rightarg = uuid);

comment on operator pg_catalog.<=(uuid , uuid) is 'less than or equal';

create operator pg_catalog.<> (procedure = charne, leftarg = "char", rightarg = "char");

comment on operator pg_catalog.<>("char" , "char") is 'not equal';

create operator pg_catalog.<> (procedure = array_ne, leftarg = anyarray, rightarg = anyarray);

comment on operator pg_catalog.<>(anyarray , anyarray) is 'not equal';

create operator pg_catalog.<> (procedure = enum_ne, leftarg = anyenum, rightarg = anyenum);

comment on operator pg_catalog.<>(anyenum , anyenum) is 'not equal';

create operator pg_catalog.<> (procedure = range_ne, leftarg = anyrange, rightarg = anyrange);

comment on operator pg_catalog.<>(anyrange , anyrange) is 'not equal';

create operator pg_catalog.<> (procedure = int8ne, leftarg = bigint, rightarg = bigint);

comment on operator pg_catalog.<>(bigint , bigint) is 'not equal';

create operator pg_catalog.<> (procedure = int84ne, leftarg = bigint, rightarg = integer);

comment on operator pg_catalog.<>(bigint , integer) is 'not equal';

create operator pg_catalog.<> (procedure = int82ne, leftarg = bigint, rightarg = smallint);

comment on operator pg_catalog.<>(bigint , smallint) is 'not equal';

create operator pg_catalog.<> (procedure = varbitne, leftarg = bit varying, rightarg = bit varying);

comment on operator pg_catalog.<>(bit varying , bit varying) is 'not equal';

create operator pg_catalog.<> (procedure = bitne, leftarg = bit, rightarg = bit);

comment on operator pg_catalog.<>(bit , bit) is 'not equal';

create operator pg_catalog.<> (procedure = boolne, leftarg = boolean, rightarg = boolean);

comment on operator pg_catalog.<>(boolean , boolean) is 'not equal';

create operator pg_catalog.<> (procedure = byteane, leftarg = bytea, rightarg = bytea);

comment on operator pg_catalog.<>(bytea , bytea) is 'not equal';

create operator pg_catalog.<> (procedure = bpcharne, leftarg = char, rightarg = char);

comment on operator pg_catalog.<>(char , char) is 'not equal';

create operator pg_catalog.<> (procedure = circle_ne, leftarg = circle, rightarg = circle);

comment on operator pg_catalog.<>(circle , circle) is 'not equal by area';

create operator pg_catalog.<> (procedure = date_ne, leftarg = date, rightarg = date);

comment on operator pg_catalog.<>(date , date) is 'not equal';

create operator pg_catalog.<> (procedure = date_ne_timestamptz, leftarg = date, rightarg = timestamp with time zone);

comment on operator pg_catalog.<>(date , timestamp with time zone) is 'not equal';

create operator pg_catalog.<> (procedure = date_ne_timestamp, leftarg = date, rightarg = timestamp);

comment on operator pg_catalog.<>(date , timestamp) is 'not equal';

create operator pg_catalog.<> (procedure = float8ne, leftarg = double precision, rightarg = double precision);

comment on operator pg_catalog.<>(double precision , double precision) is 'not equal';

create operator pg_catalog.<> (procedure = float84ne, leftarg = double precision, rightarg = real);

comment on operator pg_catalog.<>(double precision , real) is 'not equal';

create operator pg_catalog.<> (procedure = network_ne, leftarg = inet, rightarg = inet);

comment on operator pg_catalog.<>(inet , inet) is 'not equal';

create operator pg_catalog.<> (procedure = int48ne, leftarg = integer, rightarg = bigint);

comment on operator pg_catalog.<>(integer , bigint) is 'not equal';

create operator pg_catalog.<> (procedure = int4ne, leftarg = integer, rightarg = integer);

comment on operator pg_catalog.<>(integer , integer) is 'not equal';

create operator pg_catalog.<> (procedure = int42ne, leftarg = integer, rightarg = smallint);

comment on operator pg_catalog.<>(integer , smallint) is 'not equal';

create operator pg_catalog.<> (procedure = interval_ne, leftarg = interval, rightarg = interval);

comment on operator pg_catalog.<>(interval , interval) is 'not equal';

create operator pg_catalog.<> (procedure = jsonb_ne, leftarg = jsonb, rightarg = jsonb);

comment on operator pg_catalog.<>(jsonb , jsonb) is 'not equal';

create operator pg_catalog.<> (procedure = lseg_ne, leftarg = lseg, rightarg = lseg);

comment on operator pg_catalog.<>(lseg , lseg) is 'not equal';

create operator pg_catalog.<> (procedure = macaddr_ne, leftarg = macaddr, rightarg = macaddr);

comment on operator pg_catalog.<>(macaddr , macaddr) is 'not equal';

create operator pg_catalog.<> (procedure = macaddr8_ne, leftarg = macaddr8, rightarg = macaddr8);

comment on operator pg_catalog.<>(macaddr8 , macaddr8) is 'not equal';

create operator pg_catalog.<> (procedure = cash_ne, leftarg = money, rightarg = money);

comment on operator pg_catalog.<>(money , money) is 'not equal';

create operator pg_catalog.<> (procedure = namene, leftarg = name, rightarg = name);

comment on operator pg_catalog.<>(name , name) is 'not equal';

create operator pg_catalog.<> (procedure = namenetext, leftarg = name, rightarg = text);

comment on operator pg_catalog.<>(name , text) is 'not equal';

create operator pg_catalog.<> (procedure = numeric_ne, leftarg = numeric, rightarg = numeric);

comment on operator pg_catalog.<>(numeric , numeric) is 'not equal';

create operator pg_catalog.<> (procedure = oidne, leftarg = oid, rightarg = oid);

comment on operator pg_catalog.<>(oid , oid) is 'not equal';

create operator pg_catalog.<> (procedure = oidvectorne, leftarg = oidvector, rightarg = oidvector);

comment on operator pg_catalog.<>(oidvector , oidvector) is 'not equal';

create operator pg_catalog.<> (procedure = pg_lsn_ne, leftarg = pg_lsn, rightarg = pg_lsn);

comment on operator pg_catalog.<>(pg_lsn , pg_lsn) is 'not equal';

create operator pg_catalog.<> (procedure = point_ne, leftarg = point, rightarg = point);

comment on operator pg_catalog.<>(point , point) is 'not equal';

create operator pg_catalog.<> (procedure = float48ne, leftarg = real, rightarg = double precision);

comment on operator pg_catalog.<>(real , double precision) is 'not equal';

create operator pg_catalog.<> (procedure = float4ne, leftarg = real, rightarg = real);

comment on operator pg_catalog.<>(real , real) is 'not equal';

create operator pg_catalog.<> (procedure = record_ne, leftarg = record, rightarg = record);

comment on operator pg_catalog.<>(record , record) is 'not equal';

create operator pg_catalog.<> (procedure = int28ne, leftarg = smallint, rightarg = bigint);

comment on operator pg_catalog.<>(smallint , bigint) is 'not equal';

create operator pg_catalog.<> (procedure = int24ne, leftarg = smallint, rightarg = integer);

comment on operator pg_catalog.<>(smallint , integer) is 'not equal';

create operator pg_catalog.<> (procedure = int2ne, leftarg = smallint, rightarg = smallint);

comment on operator pg_catalog.<>(smallint , smallint) is 'not equal';

create operator pg_catalog.<> (procedure = textnename, leftarg = text, rightarg = name);

comment on operator pg_catalog.<>(text , name) is 'not equal';

create operator pg_catalog.<> (procedure = textne, leftarg = text, rightarg = text);

comment on operator pg_catalog.<>(text , text) is 'not equal';

create operator pg_catalog.<> (procedure = tidne, leftarg = tid, rightarg = tid);

comment on operator pg_catalog.<>(tid , tid) is 'not equal';

create operator pg_catalog.<> (procedure = timetz_ne, leftarg = time with time zone, rightarg = time with time zone);

comment on operator pg_catalog.<>(time with time zone , time with time zone) is 'not equal';

create operator pg_catalog.<> (procedure = time_ne, leftarg = time, rightarg = time);

comment on operator pg_catalog.<>(time , time) is 'not equal';

create operator pg_catalog.<> (procedure = timestamptz_ne_date, leftarg = timestamp with time zone, rightarg = date);

comment on operator pg_catalog.<>(timestamp with time zone , date) is 'not equal';

create operator pg_catalog.<> (procedure = timestamptz_ne, leftarg = timestamp with time zone, rightarg = timestamp with time zone);

comment on operator pg_catalog.<>(timestamp with time zone , timestamp with time zone) is 'not equal';

create operator pg_catalog.<> (procedure = timestamptz_ne_timestamp, leftarg = timestamp with time zone, rightarg = timestamp);

comment on operator pg_catalog.<>(timestamp with time zone , timestamp) is 'not equal';

create operator pg_catalog.<> (procedure = timestamp_ne_date, leftarg = timestamp, rightarg = date);

comment on operator pg_catalog.<>(timestamp , date) is 'not equal';

create operator pg_catalog.<> (procedure = timestamp_ne_timestamptz, leftarg = timestamp, rightarg = timestamp with time zone);

comment on operator pg_catalog.<>(timestamp , timestamp with time zone) is 'not equal';

create operator pg_catalog.<> (procedure = timestamp_ne, leftarg = timestamp, rightarg = timestamp);

comment on operator pg_catalog.<>(timestamp , timestamp) is 'not equal';

create operator pg_catalog.<> (procedure = tsquery_ne, leftarg = tsquery, rightarg = tsquery);

comment on operator pg_catalog.<>(tsquery , tsquery) is 'not equal';

create operator pg_catalog.<> (procedure = tsvector_ne, leftarg = tsvector, rightarg = tsvector);

comment on operator pg_catalog.<>(tsvector , tsvector) is 'not equal';

create operator pg_catalog.<> (procedure = uuid_ne, leftarg = uuid, rightarg = uuid);

comment on operator pg_catalog.<>(uuid , uuid) is 'not equal';

create operator pg_catalog.<> (procedure = xidneqint4, leftarg = xid, rightarg = integer);

comment on operator pg_catalog.<>(xid , integer) is 'not equal';

create operator pg_catalog.<> (procedure = xidneq, leftarg = xid, rightarg = xid);

comment on operator pg_catalog.<>(xid , xid) is 'not equal';

create operator pg_catalog.<@ (procedure = arraycontained, leftarg = anyarray, rightarg = anyarray);

comment on operator pg_catalog.<@(anyarray , anyarray) is 'is contained by';

create operator pg_catalog.<@ (procedure = elem_contained_by_range, leftarg = anyelement, rightarg = anyrange);

comment on operator pg_catalog.<@(anyelement , anyrange) is 'is contained by';

create operator pg_catalog.<@ (procedure = range_contained_by, leftarg = anyrange, rightarg = anyrange);

comment on operator pg_catalog.<@(anyrange , anyrange) is 'is contained by';

create operator pg_catalog.<@ (procedure = box_contained, leftarg = box, rightarg = box);

comment on operator pg_catalog.<@(box , box) is 'is contained by';

create operator pg_catalog.<@ (procedure = circle_contained, leftarg = circle, rightarg = circle);

comment on operator pg_catalog.<@(circle , circle) is 'is contained by';

create operator pg_catalog.<@ (procedure = jsonb_contained, leftarg = jsonb, rightarg = jsonb);

comment on operator pg_catalog.<@(jsonb , jsonb) is 'is contained by';

create operator pg_catalog.<@ (procedure = on_sb, leftarg = lseg, rightarg = box);

comment on operator pg_catalog.<@(lseg , box) is 'is contained by';

create operator pg_catalog.<@ (procedure = on_sl, leftarg = lseg, rightarg = line);

comment on operator pg_catalog.<@(lseg , line) is 'lseg on line';

create operator pg_catalog.<@ (procedure = on_pb, leftarg = point, rightarg = box);

comment on operator pg_catalog.<@(point , box) is 'point inside box';

create operator pg_catalog.<@ (procedure = pt_contained_circle, leftarg = point, rightarg = circle);

comment on operator pg_catalog.<@(point , circle) is 'is contained by';

create operator pg_catalog.<@ (procedure = on_pl, leftarg = point, rightarg = line);

comment on operator pg_catalog.<@(point , line) is 'point on line';

create operator pg_catalog.<@ (procedure = on_ps, leftarg = point, rightarg = lseg);

comment on operator pg_catalog.<@(point , lseg) is 'is contained by';

create operator pg_catalog.<@ (procedure = on_ppath, leftarg = point, rightarg = path);

comment on operator pg_catalog.<@(point , path) is 'point within closed path, or point on open path';

create operator pg_catalog.<@ (procedure = pt_contained_poly, leftarg = point, rightarg = polygon);

comment on operator pg_catalog.<@(point , polygon) is 'is contained by';

create operator pg_catalog.<@ (procedure = poly_contained, leftarg = polygon, rightarg = polygon);

comment on operator pg_catalog.<@(polygon , polygon) is 'is contained by';

create operator pg_catalog.<@ (procedure = tsq_mcontained, leftarg = tsquery, rightarg = tsquery);

comment on operator pg_catalog.<@(tsquery , tsquery) is 'is contained by';

create operator pg_catalog.<^ (procedure = box_below_eq, leftarg = box, rightarg = box);

comment on operator pg_catalog.<^(box , box) is 'is below (allows touching)';

create operator pg_catalog.<^ (procedure = point_below, leftarg = point, rightarg = point);

comment on operator pg_catalog.<^(point , point) is 'is below';

create operator pg_catalog.= (procedure = chareq, leftarg = "char", rightarg = "char");

comment on operator pg_catalog.=("char" , "char") is 'equal';

create operator pg_catalog.= (procedure = aclitemeq, leftarg = aclitem, rightarg = aclitem);

comment on operator pg_catalog.=(aclitem , aclitem) is 'equal';

create operator pg_catalog.= (procedure = array_eq, leftarg = anyarray, rightarg = anyarray);

comment on operator pg_catalog.=(anyarray , anyarray) is 'equal';

create operator pg_catalog.= (procedure = enum_eq, leftarg = anyenum, rightarg = anyenum);

comment on operator pg_catalog.=(anyenum , anyenum) is 'equal';

create operator pg_catalog.= (procedure = range_eq, leftarg = anyrange, rightarg = anyrange);

comment on operator pg_catalog.=(anyrange , anyrange) is 'equal';

create operator pg_catalog.= (procedure = int8eq, leftarg = bigint, rightarg = bigint);

comment on operator pg_catalog.=(bigint , bigint) is 'equal';

create operator pg_catalog.= (procedure = int84eq, leftarg = bigint, rightarg = integer);

comment on operator pg_catalog.=(bigint , integer) is 'equal';

create operator pg_catalog.= (procedure = int82eq, leftarg = bigint, rightarg = smallint);

comment on operator pg_catalog.=(bigint , smallint) is 'equal';

create operator pg_catalog.= (procedure = varbiteq, leftarg = bit varying, rightarg = bit varying);

comment on operator pg_catalog.=(bit varying , bit varying) is 'equal';

create operator pg_catalog.= (procedure = biteq, leftarg = bit, rightarg = bit);

comment on operator pg_catalog.=(bit , bit) is 'equal';

create operator pg_catalog.= (procedure = booleq, leftarg = boolean, rightarg = boolean);

comment on operator pg_catalog.=(boolean , boolean) is 'equal';

create operator pg_catalog.= (procedure = box_eq, leftarg = box, rightarg = box);

comment on operator pg_catalog.=(box , box) is 'equal by area';

create operator pg_catalog.= (procedure = byteaeq, leftarg = bytea, rightarg = bytea);

comment on operator pg_catalog.=(bytea , bytea) is 'equal';

create operator pg_catalog.= (procedure = bpchareq, leftarg = char, rightarg = char);

comment on operator pg_catalog.=(char , char) is 'equal';

create operator pg_catalog.= (procedure = cideq, leftarg = cid, rightarg = cid);

comment on operator pg_catalog.=(cid , cid) is 'equal';

create operator pg_catalog.= (procedure = circle_eq, leftarg = circle, rightarg = circle);

comment on operator pg_catalog.=(circle , circle) is 'equal by area';

create operator pg_catalog.= (procedure = date_eq, leftarg = date, rightarg = date);

comment on operator pg_catalog.=(date , date) is 'equal';

create operator pg_catalog.= (procedure = date_eq_timestamptz, leftarg = date, rightarg = timestamp with time zone);

comment on operator pg_catalog.=(date , timestamp with time zone) is 'equal';

create operator pg_catalog.= (procedure = date_eq_timestamp, leftarg = date, rightarg = timestamp);

comment on operator pg_catalog.=(date , timestamp) is 'equal';

create operator pg_catalog.= (procedure = float8eq, leftarg = double precision, rightarg = double precision);

comment on operator pg_catalog.=(double precision , double precision) is 'equal';

create operator pg_catalog.= (procedure = float84eq, leftarg = double precision, rightarg = real);

comment on operator pg_catalog.=(double precision , real) is 'equal';

create operator pg_catalog.= (procedure = network_eq, leftarg = inet, rightarg = inet);

comment on operator pg_catalog.=(inet , inet) is 'equal';

create operator pg_catalog.= (procedure = int48eq, leftarg = integer, rightarg = bigint);

comment on operator pg_catalog.=(integer , bigint) is 'equal';

create operator pg_catalog.= (procedure = int4eq, leftarg = integer, rightarg = integer);

comment on operator pg_catalog.=(integer , integer) is 'equal';

create operator pg_catalog.= (procedure = int42eq, leftarg = integer, rightarg = smallint);

comment on operator pg_catalog.=(integer , smallint) is 'equal';

create operator pg_catalog.= (procedure = interval_eq, leftarg = interval, rightarg = interval);

comment on operator pg_catalog.=(interval , interval) is 'equal';

create operator pg_catalog.= (procedure = jsonb_eq, leftarg = jsonb, rightarg = jsonb);

comment on operator pg_catalog.=(jsonb , jsonb) is 'equal';

create operator pg_catalog.= (procedure = line_eq, leftarg = line, rightarg = line);

comment on operator pg_catalog.=(line , line) is 'equal';

create operator pg_catalog.= (procedure = lseg_eq, leftarg = lseg, rightarg = lseg);

comment on operator pg_catalog.=(lseg , lseg) is 'equal';

create operator pg_catalog.= (procedure = macaddr_eq, leftarg = macaddr, rightarg = macaddr);

comment on operator pg_catalog.=(macaddr , macaddr) is 'equal';

create operator pg_catalog.= (procedure = macaddr8_eq, leftarg = macaddr8, rightarg = macaddr8);

comment on operator pg_catalog.=(macaddr8 , macaddr8) is 'equal';

create operator pg_catalog.= (procedure = cash_eq, leftarg = money, rightarg = money);

comment on operator pg_catalog.=(money , money) is 'equal';

create operator pg_catalog.= (procedure = nameeq, leftarg = name, rightarg = name);

comment on operator pg_catalog.=(name , name) is 'equal';

create operator pg_catalog.= (procedure = nameeqtext, leftarg = name, rightarg = text);

comment on operator pg_catalog.=(name , text) is 'equal';

create operator pg_catalog.= (procedure = numeric_eq, leftarg = numeric, rightarg = numeric);

comment on operator pg_catalog.=(numeric , numeric) is 'equal';

create operator pg_catalog.= (procedure = oideq, leftarg = oid, rightarg = oid);

comment on operator pg_catalog.=(oid , oid) is 'equal';

create operator pg_catalog.= (procedure = oidvectoreq, leftarg = oidvector, rightarg = oidvector);

comment on operator pg_catalog.=(oidvector , oidvector) is 'equal';

create operator pg_catalog.= (procedure = path_n_eq, leftarg = path, rightarg = path);

comment on operator pg_catalog.=(path , path) is 'equal';

create operator pg_catalog.= (procedure = pg_lsn_eq, leftarg = pg_lsn, rightarg = pg_lsn);

comment on operator pg_catalog.=(pg_lsn , pg_lsn) is 'equal';

create operator pg_catalog.= (procedure = float48eq, leftarg = real, rightarg = double precision);

comment on operator pg_catalog.=(real , double precision) is 'equal';

create operator pg_catalog.= (procedure = float4eq, leftarg = real, rightarg = real);

comment on operator pg_catalog.=(real , real) is 'equal';

create operator pg_catalog.= (procedure = record_eq, leftarg = record, rightarg = record);

comment on operator pg_catalog.=(record , record) is 'equal';

create operator pg_catalog.= (procedure = int28eq, leftarg = smallint, rightarg = bigint);

comment on operator pg_catalog.=(smallint , bigint) is 'equal';

create operator pg_catalog.= (procedure = int24eq, leftarg = smallint, rightarg = integer);

comment on operator pg_catalog.=(smallint , integer) is 'equal';

create operator pg_catalog.= (procedure = int2eq, leftarg = smallint, rightarg = smallint);

comment on operator pg_catalog.=(smallint , smallint) is 'equal';

create operator pg_catalog.= (procedure = texteqname, leftarg = text, rightarg = name);

comment on operator pg_catalog.=(text , name) is 'equal';

create operator pg_catalog.= (procedure = texteq, leftarg = text, rightarg = text);

comment on operator pg_catalog.=(text , text) is 'equal';

create operator pg_catalog.= (procedure = tideq, leftarg = tid, rightarg = tid);

comment on operator pg_catalog.=(tid , tid) is 'equal';

create operator pg_catalog.= (procedure = timetz_eq, leftarg = time with time zone, rightarg = time with time zone);

comment on operator pg_catalog.=(time with time zone , time with time zone) is 'equal';

create operator pg_catalog.= (procedure = time_eq, leftarg = time, rightarg = time);

comment on operator pg_catalog.=(time , time) is 'equal';

create operator pg_catalog.= (procedure = timestamptz_eq_date, leftarg = timestamp with time zone, rightarg = date);

comment on operator pg_catalog.=(timestamp with time zone , date) is 'equal';

create operator pg_catalog.= (procedure = timestamptz_eq, leftarg = timestamp with time zone, rightarg = timestamp with time zone);

comment on operator pg_catalog.=(timestamp with time zone , timestamp with time zone) is 'equal';

create operator pg_catalog.= (procedure = timestamptz_eq_timestamp, leftarg = timestamp with time zone, rightarg = timestamp);

comment on operator pg_catalog.=(timestamp with time zone , timestamp) is 'equal';

create operator pg_catalog.= (procedure = timestamp_eq_date, leftarg = timestamp, rightarg = date);

comment on operator pg_catalog.=(timestamp , date) is 'equal';

create operator pg_catalog.= (procedure = timestamp_eq_timestamptz, leftarg = timestamp, rightarg = timestamp with time zone);

comment on operator pg_catalog.=(timestamp , timestamp with time zone) is 'equal';

create operator pg_catalog.= (procedure = timestamp_eq, leftarg = timestamp, rightarg = timestamp);

comment on operator pg_catalog.=(timestamp , timestamp) is 'equal';

create operator pg_catalog.= (procedure = tsquery_eq, leftarg = tsquery, rightarg = tsquery);

comment on operator pg_catalog.=(tsquery , tsquery) is 'equal';

create operator pg_catalog.= (procedure = tsvector_eq, leftarg = tsvector, rightarg = tsvector);

comment on operator pg_catalog.=(tsvector , tsvector) is 'equal';

create operator pg_catalog.= (procedure = uuid_eq, leftarg = uuid, rightarg = uuid);

comment on operator pg_catalog.=(uuid , uuid) is 'equal';

create operator pg_catalog.= (procedure = xideqint4, leftarg = xid, rightarg = integer);

comment on operator pg_catalog.=(xid , integer) is 'equal';

create operator pg_catalog.= (procedure = xideq, leftarg = xid, rightarg = xid);

comment on operator pg_catalog.=(xid , xid) is 'equal';

create operator pg_catalog.> (procedure = chargt, leftarg = "char", rightarg = "char");

comment on operator pg_catalog.>("char" , "char") is 'greater than';

create operator pg_catalog.> (procedure = array_gt, leftarg = anyarray, rightarg = anyarray);

comment on operator pg_catalog.>(anyarray , anyarray) is 'greater than';

create operator pg_catalog.> (procedure = enum_gt, leftarg = anyenum, rightarg = anyenum);

comment on operator pg_catalog.>(anyenum , anyenum) is 'greater than';

create operator pg_catalog.> (procedure = range_gt, leftarg = anyrange, rightarg = anyrange);

comment on operator pg_catalog.>(anyrange , anyrange) is 'greater than';

create operator pg_catalog.> (procedure = int8gt, leftarg = bigint, rightarg = bigint);

comment on operator pg_catalog.>(bigint , bigint) is 'greater than';

create operator pg_catalog.> (procedure = int84gt, leftarg = bigint, rightarg = integer);

comment on operator pg_catalog.>(bigint , integer) is 'greater than';

create operator pg_catalog.> (procedure = int82gt, leftarg = bigint, rightarg = smallint);

comment on operator pg_catalog.>(bigint , smallint) is 'greater than';

create operator pg_catalog.> (procedure = varbitgt, leftarg = bit varying, rightarg = bit varying);

comment on operator pg_catalog.>(bit varying , bit varying) is 'greater than';

create operator pg_catalog.> (procedure = bitgt, leftarg = bit, rightarg = bit);

comment on operator pg_catalog.>(bit , bit) is 'greater than';

create operator pg_catalog.> (procedure = boolgt, leftarg = boolean, rightarg = boolean);

comment on operator pg_catalog.>(boolean , boolean) is 'greater than';

create operator pg_catalog.> (procedure = box_gt, leftarg = box, rightarg = box);

comment on operator pg_catalog.>(box , box) is 'greater than by area';

create operator pg_catalog.> (procedure = byteagt, leftarg = bytea, rightarg = bytea);

comment on operator pg_catalog.>(bytea , bytea) is 'greater than';

create operator pg_catalog.> (procedure = bpchargt, leftarg = char, rightarg = char);

comment on operator pg_catalog.>(char , char) is 'greater than';

create operator pg_catalog.> (procedure = circle_gt, leftarg = circle, rightarg = circle);

comment on operator pg_catalog.>(circle , circle) is 'greater than by area';

create operator pg_catalog.> (procedure = date_gt, leftarg = date, rightarg = date);

comment on operator pg_catalog.>(date , date) is 'greater than';

create operator pg_catalog.> (procedure = date_gt_timestamptz, leftarg = date, rightarg = timestamp with time zone);

comment on operator pg_catalog.>(date , timestamp with time zone) is 'greater than';

create operator pg_catalog.> (procedure = date_gt_timestamp, leftarg = date, rightarg = timestamp);

comment on operator pg_catalog.>(date , timestamp) is 'greater than';

create operator pg_catalog.> (procedure = float8gt, leftarg = double precision, rightarg = double precision);

comment on operator pg_catalog.>(double precision , double precision) is 'greater than';

create operator pg_catalog.> (procedure = float84gt, leftarg = double precision, rightarg = real);

comment on operator pg_catalog.>(double precision , real) is 'greater than';

create operator pg_catalog.> (procedure = network_gt, leftarg = inet, rightarg = inet);

comment on operator pg_catalog.>(inet , inet) is 'greater than';

create operator pg_catalog.> (procedure = int48gt, leftarg = integer, rightarg = bigint);

comment on operator pg_catalog.>(integer , bigint) is 'greater than';

create operator pg_catalog.> (procedure = int4gt, leftarg = integer, rightarg = integer);

comment on operator pg_catalog.>(integer , integer) is 'greater than';

create operator pg_catalog.> (procedure = int42gt, leftarg = integer, rightarg = smallint);

comment on operator pg_catalog.>(integer , smallint) is 'greater than';

create operator pg_catalog.> (procedure = interval_gt, leftarg = interval, rightarg = interval);

comment on operator pg_catalog.>(interval , interval) is 'greater than';

create operator pg_catalog.> (procedure = jsonb_gt, leftarg = jsonb, rightarg = jsonb);

comment on operator pg_catalog.>(jsonb , jsonb) is 'greater than';

create operator pg_catalog.> (procedure = lseg_gt, leftarg = lseg, rightarg = lseg);

comment on operator pg_catalog.>(lseg , lseg) is 'greater than by length';

create operator pg_catalog.> (procedure = macaddr_gt, leftarg = macaddr, rightarg = macaddr);

comment on operator pg_catalog.>(macaddr , macaddr) is 'greater than';

create operator pg_catalog.> (procedure = macaddr8_gt, leftarg = macaddr8, rightarg = macaddr8);

comment on operator pg_catalog.>(macaddr8 , macaddr8) is 'greater than';

create operator pg_catalog.> (procedure = cash_gt, leftarg = money, rightarg = money);

comment on operator pg_catalog.>(money , money) is 'greater than';

create operator pg_catalog.> (procedure = namegt, leftarg = name, rightarg = name);

comment on operator pg_catalog.>(name , name) is 'greater than';

create operator pg_catalog.> (procedure = namegttext, leftarg = name, rightarg = text);

comment on operator pg_catalog.>(name , text) is 'greater than';

create operator pg_catalog.> (procedure = numeric_gt, leftarg = numeric, rightarg = numeric);

comment on operator pg_catalog.>(numeric , numeric) is 'greater than';

create operator pg_catalog.> (procedure = oidgt, leftarg = oid, rightarg = oid);

comment on operator pg_catalog.>(oid , oid) is 'greater than';

create operator pg_catalog.> (procedure = oidvectorgt, leftarg = oidvector, rightarg = oidvector);

comment on operator pg_catalog.>(oidvector , oidvector) is 'greater than';

create operator pg_catalog.> (procedure = path_n_gt, leftarg = path, rightarg = path);

comment on operator pg_catalog.>(path , path) is 'greater than';

create operator pg_catalog.> (procedure = pg_lsn_gt, leftarg = pg_lsn, rightarg = pg_lsn);

comment on operator pg_catalog.>(pg_lsn , pg_lsn) is 'greater than';

create operator pg_catalog.> (procedure = float48gt, leftarg = real, rightarg = double precision);

comment on operator pg_catalog.>(real , double precision) is 'greater than';

create operator pg_catalog.> (procedure = float4gt, leftarg = real, rightarg = real);

comment on operator pg_catalog.>(real , real) is 'greater than';

create operator pg_catalog.> (procedure = record_gt, leftarg = record, rightarg = record);

comment on operator pg_catalog.>(record , record) is 'greater than';

create operator pg_catalog.> (procedure = int28gt, leftarg = smallint, rightarg = bigint);

comment on operator pg_catalog.>(smallint , bigint) is 'greater than';

create operator pg_catalog.> (procedure = int24gt, leftarg = smallint, rightarg = integer);

comment on operator pg_catalog.>(smallint , integer) is 'greater than';

create operator pg_catalog.> (procedure = int2gt, leftarg = smallint, rightarg = smallint);

comment on operator pg_catalog.>(smallint , smallint) is 'greater than';

create operator pg_catalog.> (procedure = textgtname, leftarg = text, rightarg = name);

comment on operator pg_catalog.>(text , name) is 'greater than';

create operator pg_catalog.> (procedure = text_gt, leftarg = text, rightarg = text);

comment on operator pg_catalog.>(text , text) is 'greater than';

create operator pg_catalog.> (procedure = tidgt, leftarg = tid, rightarg = tid);

comment on operator pg_catalog.>(tid , tid) is 'greater than';

create operator pg_catalog.> (procedure = timetz_gt, leftarg = time with time zone, rightarg = time with time zone);

comment on operator pg_catalog.>(time with time zone , time with time zone) is 'greater than';

create operator pg_catalog.> (procedure = time_gt, leftarg = time, rightarg = time);

comment on operator pg_catalog.>(time , time) is 'greater than';

create operator pg_catalog.> (procedure = timestamptz_gt_date, leftarg = timestamp with time zone, rightarg = date);

comment on operator pg_catalog.>(timestamp with time zone , date) is 'greater than';

create operator pg_catalog.> (procedure = timestamptz_gt, leftarg = timestamp with time zone, rightarg = timestamp with time zone);

comment on operator pg_catalog.>(timestamp with time zone , timestamp with time zone) is 'greater than';

create operator pg_catalog.> (procedure = timestamptz_gt_timestamp, leftarg = timestamp with time zone, rightarg = timestamp);

comment on operator pg_catalog.>(timestamp with time zone , timestamp) is 'greater than';

create operator pg_catalog.> (procedure = timestamp_gt_date, leftarg = timestamp, rightarg = date);

comment on operator pg_catalog.>(timestamp , date) is 'greater than';

create operator pg_catalog.> (procedure = timestamp_gt_timestamptz, leftarg = timestamp, rightarg = timestamp with time zone);

comment on operator pg_catalog.>(timestamp , timestamp with time zone) is 'greater than';

create operator pg_catalog.> (procedure = timestamp_gt, leftarg = timestamp, rightarg = timestamp);

comment on operator pg_catalog.>(timestamp , timestamp) is 'greater than';

create operator pg_catalog.> (procedure = tsquery_gt, leftarg = tsquery, rightarg = tsquery);

comment on operator pg_catalog.>(tsquery , tsquery) is 'greater than';

create operator pg_catalog.> (procedure = tsvector_gt, leftarg = tsvector, rightarg = tsvector);

comment on operator pg_catalog.>(tsvector , tsvector) is 'greater than';

create operator pg_catalog.> (procedure = uuid_gt, leftarg = uuid, rightarg = uuid);

comment on operator pg_catalog.>(uuid , uuid) is 'greater than';

create operator pg_catalog.>= (procedure = charge, leftarg = "char", rightarg = "char");

comment on operator pg_catalog.>=("char" , "char") is 'greater than or equal';

create operator pg_catalog.>= (procedure = array_ge, leftarg = anyarray, rightarg = anyarray);

comment on operator pg_catalog.>=(anyarray , anyarray) is 'greater than or equal';

create operator pg_catalog.>= (procedure = enum_ge, leftarg = anyenum, rightarg = anyenum);

comment on operator pg_catalog.>=(anyenum , anyenum) is 'greater than or equal';

create operator pg_catalog.>= (procedure = range_ge, leftarg = anyrange, rightarg = anyrange);

comment on operator pg_catalog.>=(anyrange , anyrange) is 'greater than or equal';

create operator pg_catalog.>= (procedure = int8ge, leftarg = bigint, rightarg = bigint);

comment on operator pg_catalog.>=(bigint , bigint) is 'greater than or equal';

create operator pg_catalog.>= (procedure = int84ge, leftarg = bigint, rightarg = integer);

comment on operator pg_catalog.>=(bigint , integer) is 'greater than or equal';

create operator pg_catalog.>= (procedure = int82ge, leftarg = bigint, rightarg = smallint);

comment on operator pg_catalog.>=(bigint , smallint) is 'greater than or equal';

create operator pg_catalog.>= (procedure = varbitge, leftarg = bit varying, rightarg = bit varying);

comment on operator pg_catalog.>=(bit varying , bit varying) is 'greater than or equal';

create operator pg_catalog.>= (procedure = bitge, leftarg = bit, rightarg = bit);

comment on operator pg_catalog.>=(bit , bit) is 'greater than or equal';

create operator pg_catalog.>= (procedure = boolge, leftarg = boolean, rightarg = boolean);

comment on operator pg_catalog.>=(boolean , boolean) is 'greater than or equal';

create operator pg_catalog.>= (procedure = box_ge, leftarg = box, rightarg = box);

comment on operator pg_catalog.>=(box , box) is 'greater than or equal by area';

create operator pg_catalog.>= (procedure = byteage, leftarg = bytea, rightarg = bytea);

comment on operator pg_catalog.>=(bytea , bytea) is 'greater than or equal';

create operator pg_catalog.>= (procedure = bpcharge, leftarg = char, rightarg = char);

comment on operator pg_catalog.>=(char , char) is 'greater than or equal';

create operator pg_catalog.>= (procedure = circle_ge, leftarg = circle, rightarg = circle);

comment on operator pg_catalog.>=(circle , circle) is 'greater than or equal by area';

create operator pg_catalog.>= (procedure = date_ge, leftarg = date, rightarg = date);

comment on operator pg_catalog.>=(date , date) is 'greater than or equal';

create operator pg_catalog.>= (procedure = date_ge_timestamptz, leftarg = date, rightarg = timestamp with time zone);

comment on operator pg_catalog.>=(date , timestamp with time zone) is 'greater than or equal';

create operator pg_catalog.>= (procedure = date_ge_timestamp, leftarg = date, rightarg = timestamp);

comment on operator pg_catalog.>=(date , timestamp) is 'greater than or equal';

create operator pg_catalog.>= (procedure = float8ge, leftarg = double precision, rightarg = double precision);

comment on operator pg_catalog.>=(double precision , double precision) is 'greater than or equal';

create operator pg_catalog.>= (procedure = float84ge, leftarg = double precision, rightarg = real);

comment on operator pg_catalog.>=(double precision , real) is 'greater than or equal';

create operator pg_catalog.>= (procedure = network_ge, leftarg = inet, rightarg = inet);

comment on operator pg_catalog.>=(inet , inet) is 'greater than or equal';

create operator pg_catalog.>= (procedure = int48ge, leftarg = integer, rightarg = bigint);

comment on operator pg_catalog.>=(integer , bigint) is 'greater than or equal';

create operator pg_catalog.>= (procedure = int4ge, leftarg = integer, rightarg = integer);

comment on operator pg_catalog.>=(integer , integer) is 'greater than or equal';

create operator pg_catalog.>= (procedure = int42ge, leftarg = integer, rightarg = smallint);

comment on operator pg_catalog.>=(integer , smallint) is 'greater than or equal';

create operator pg_catalog.>= (procedure = interval_ge, leftarg = interval, rightarg = interval);

comment on operator pg_catalog.>=(interval , interval) is 'greater than or equal';

create operator pg_catalog.>= (procedure = jsonb_ge, leftarg = jsonb, rightarg = jsonb);

comment on operator pg_catalog.>=(jsonb , jsonb) is 'greater than or equal';

create operator pg_catalog.>= (procedure = lseg_ge, leftarg = lseg, rightarg = lseg);

comment on operator pg_catalog.>=(lseg , lseg) is 'greater than or equal by length';

create operator pg_catalog.>= (procedure = macaddr_ge, leftarg = macaddr, rightarg = macaddr);

comment on operator pg_catalog.>=(macaddr , macaddr) is 'greater than or equal';

create operator pg_catalog.>= (procedure = macaddr8_ge, leftarg = macaddr8, rightarg = macaddr8);

comment on operator pg_catalog.>=(macaddr8 , macaddr8) is 'greater than or equal';

create operator pg_catalog.>= (procedure = cash_ge, leftarg = money, rightarg = money);

comment on operator pg_catalog.>=(money , money) is 'greater than or equal';

create operator pg_catalog.>= (procedure = namege, leftarg = name, rightarg = name);

comment on operator pg_catalog.>=(name , name) is 'greater than or equal';

create operator pg_catalog.>= (procedure = namegetext, leftarg = name, rightarg = text);

comment on operator pg_catalog.>=(name , text) is 'greater than or equal';

create operator pg_catalog.>= (procedure = numeric_ge, leftarg = numeric, rightarg = numeric);

comment on operator pg_catalog.>=(numeric , numeric) is 'greater than or equal';

create operator pg_catalog.>= (procedure = oidge, leftarg = oid, rightarg = oid);

comment on operator pg_catalog.>=(oid , oid) is 'greater than or equal';

create operator pg_catalog.>= (procedure = oidvectorge, leftarg = oidvector, rightarg = oidvector);

comment on operator pg_catalog.>=(oidvector , oidvector) is 'greater than or equal';

create operator pg_catalog.>= (procedure = path_n_ge, leftarg = path, rightarg = path);

comment on operator pg_catalog.>=(path , path) is 'greater than or equal';

create operator pg_catalog.>= (procedure = pg_lsn_ge, leftarg = pg_lsn, rightarg = pg_lsn);

comment on operator pg_catalog.>=(pg_lsn , pg_lsn) is 'greater than or equal';

create operator pg_catalog.>= (procedure = float48ge, leftarg = real, rightarg = double precision);

comment on operator pg_catalog.>=(real , double precision) is 'greater than or equal';

create operator pg_catalog.>= (procedure = float4ge, leftarg = real, rightarg = real);

comment on operator pg_catalog.>=(real , real) is 'greater than or equal';

create operator pg_catalog.>= (procedure = record_ge, leftarg = record, rightarg = record);

comment on operator pg_catalog.>=(record , record) is 'greater than or equal';

create operator pg_catalog.>= (procedure = int28ge, leftarg = smallint, rightarg = bigint);

comment on operator pg_catalog.>=(smallint , bigint) is 'greater than or equal';

create operator pg_catalog.>= (procedure = int24ge, leftarg = smallint, rightarg = integer);

comment on operator pg_catalog.>=(smallint , integer) is 'greater than or equal';

create operator pg_catalog.>= (procedure = int2ge, leftarg = smallint, rightarg = smallint);

comment on operator pg_catalog.>=(smallint , smallint) is 'greater than or equal';

create operator pg_catalog.>= (procedure = textgename, leftarg = text, rightarg = name);

comment on operator pg_catalog.>=(text , name) is 'greater than or equal';

create operator pg_catalog.>= (procedure = text_ge, leftarg = text, rightarg = text);

comment on operator pg_catalog.>=(text , text) is 'greater than or equal';

create operator pg_catalog.>= (procedure = tidge, leftarg = tid, rightarg = tid);

comment on operator pg_catalog.>=(tid , tid) is 'greater than or equal';

create operator pg_catalog.>= (procedure = timetz_ge, leftarg = time with time zone, rightarg = time with time zone);

comment on operator pg_catalog.>=(time with time zone , time with time zone) is 'greater than or equal';

create operator pg_catalog.>= (procedure = time_ge, leftarg = time, rightarg = time);

comment on operator pg_catalog.>=(time , time) is 'greater than or equal';

create operator pg_catalog.>= (procedure = timestamptz_ge_date, leftarg = timestamp with time zone, rightarg = date);

comment on operator pg_catalog.>=(timestamp with time zone , date) is 'greater than or equal';

create operator pg_catalog.>= (procedure = timestamptz_ge, leftarg = timestamp with time zone, rightarg = timestamp with time zone);

comment on operator pg_catalog.>=(timestamp with time zone , timestamp with time zone) is 'greater than or equal';

create operator pg_catalog.>= (procedure = timestamptz_ge_timestamp, leftarg = timestamp with time zone, rightarg = timestamp);

comment on operator pg_catalog.>=(timestamp with time zone , timestamp) is 'greater than or equal';

create operator pg_catalog.>= (procedure = timestamp_ge_date, leftarg = timestamp, rightarg = date);

comment on operator pg_catalog.>=(timestamp , date) is 'greater than or equal';

create operator pg_catalog.>= (procedure = timestamp_ge_timestamptz, leftarg = timestamp, rightarg = timestamp with time zone);

comment on operator pg_catalog.>=(timestamp , timestamp with time zone) is 'greater than or equal';

create operator pg_catalog.>= (procedure = timestamp_ge, leftarg = timestamp, rightarg = timestamp);

comment on operator pg_catalog.>=(timestamp , timestamp) is 'greater than or equal';

create operator pg_catalog.>= (procedure = tsquery_ge, leftarg = tsquery, rightarg = tsquery);

comment on operator pg_catalog.>=(tsquery , tsquery) is 'greater than or equal';

create operator pg_catalog.>= (procedure = tsvector_ge, leftarg = tsvector, rightarg = tsvector);

comment on operator pg_catalog.>=(tsvector , tsvector) is 'greater than or equal';

create operator pg_catalog.>= (procedure = uuid_ge, leftarg = uuid, rightarg = uuid);

comment on operator pg_catalog.>=(uuid , uuid) is 'greater than or equal';

create operator pg_catalog.>> (procedure = range_after, leftarg = anyrange, rightarg = anyrange);

comment on operator pg_catalog.>>(anyrange , anyrange) is 'is right of';

create operator pg_catalog.>> (procedure = int8shr, leftarg = bigint, rightarg = integer);

comment on operator pg_catalog.>>(bigint , integer) is 'bitwise shift right';

create operator pg_catalog.>> (procedure = bitshiftright, leftarg = bit, rightarg = integer);

comment on operator pg_catalog.>>(bit , integer) is 'bitwise shift right';

create operator pg_catalog.>> (procedure = box_right, leftarg = box, rightarg = box);

comment on operator pg_catalog.>>(box , box) is 'is right of';

create operator pg_catalog.>> (procedure = circle_right, leftarg = circle, rightarg = circle);

comment on operator pg_catalog.>>(circle , circle) is 'is right of';

create operator pg_catalog.>> (procedure = network_sup, leftarg = inet, rightarg = inet);

comment on operator pg_catalog.>>(inet , inet) is 'is supernet';

create operator pg_catalog.>> (procedure = int4shr, leftarg = integer, rightarg = integer);

comment on operator pg_catalog.>>(integer , integer) is 'bitwise shift right';

create operator pg_catalog.>> (procedure = point_right, leftarg = point, rightarg = point);

comment on operator pg_catalog.>>(point , point) is 'is right of';

create operator pg_catalog.>> (procedure = poly_right, leftarg = polygon, rightarg = polygon);

comment on operator pg_catalog.>>(polygon , polygon) is 'is right of';

create operator pg_catalog.>> (procedure = int2shr, leftarg = smallint, rightarg = integer);

comment on operator pg_catalog.>>(smallint , integer) is 'bitwise shift right';

create operator pg_catalog.>>= (procedure = network_supeq, leftarg = inet, rightarg = inet);

comment on operator pg_catalog.>>=(inet , inet) is 'is supernet or equal';

create operator pg_catalog.>^ (procedure = box_above_eq, leftarg = box, rightarg = box);

comment on operator pg_catalog.>^(box , box) is 'is above (allows touching)';

create operator pg_catalog.>^ (procedure = point_above, leftarg = point, rightarg = point);

comment on operator pg_catalog.>^(point , point) is 'is above';

create operator pg_catalog.?# (procedure = box_overlap, leftarg = box, rightarg = box);

comment on operator pg_catalog.?#(box , box) is 'deprecated, use && instead';

create operator pg_catalog.?# (procedure = inter_lb, leftarg = line, rightarg = box);

comment on operator pg_catalog.?#(line , box) is 'intersect';

create operator pg_catalog.?# (procedure = line_intersect, leftarg = line, rightarg = line);

comment on operator pg_catalog.?#(line , line) is 'intersect';

create operator pg_catalog.?# (procedure = inter_sb, leftarg = lseg, rightarg = box);

comment on operator pg_catalog.?#(lseg , box) is 'intersect';

create operator pg_catalog.?# (procedure = inter_sl, leftarg = lseg, rightarg = line);

comment on operator pg_catalog.?#(lseg , line) is 'intersect';

create operator pg_catalog.?# (procedure = lseg_intersect, leftarg = lseg, rightarg = lseg);

comment on operator pg_catalog.?#(lseg , lseg) is 'intersect';

create operator pg_catalog.?# (procedure = path_inter, leftarg = path, rightarg = path);

comment on operator pg_catalog.?#(path , path) is 'intersect';

create operator pg_catalog.?& (procedure = jsonb_exists_all, leftarg = jsonb, rightarg = text[]);

comment on operator pg_catalog.?&(jsonb , text[]) is 'all keys exist';

create operator pg_catalog.? (procedure = jsonb_exists, leftarg = jsonb, rightarg = text);

comment on operator pg_catalog.?(jsonb , text) is 'key exists';

create operator pg_catalog.?- (procedure = point_horiz, leftarg = point, rightarg = point);

comment on operator pg_catalog.?-(point , point) is 'horizontally aligned';

create operator pg_catalog.?- (procedure = line_horizontal, rightarg = line);

comment on operator pg_catalog.?-(none , line) is 'horizontal';

create operator pg_catalog.?- (procedure = lseg_horizontal, rightarg = lseg);

comment on operator pg_catalog.?-(none , lseg) is 'horizontal';

create operator pg_catalog.?-| (procedure = line_perp, leftarg = line, rightarg = line);

comment on operator pg_catalog.?-|(line , line) is 'perpendicular';

create operator pg_catalog.?-| (procedure = lseg_perp, leftarg = lseg, rightarg = lseg);

comment on operator pg_catalog.?-|(lseg , lseg) is 'perpendicular';

create operator pg_catalog.?| (procedure = jsonb_exists_any, leftarg = jsonb, rightarg = text[]);

comment on operator pg_catalog.?|(jsonb , text[]) is 'any key exists';

create operator pg_catalog.?| (procedure = point_vert, leftarg = point, rightarg = point);

comment on operator pg_catalog.?|(point , point) is 'vertically aligned';

create operator pg_catalog.?| (procedure = line_vertical, rightarg = line);

comment on operator pg_catalog.?|(none , line) is 'vertical';

create operator pg_catalog.?| (procedure = lseg_vertical, rightarg = lseg);

comment on operator pg_catalog.?|(none , lseg) is 'vertical';

create operator pg_catalog.?|| (procedure = line_parallel, leftarg = line, rightarg = line);

comment on operator pg_catalog.?||(line , line) is 'parallel';

create operator pg_catalog.?|| (procedure = lseg_parallel, leftarg = lseg, rightarg = lseg);

comment on operator pg_catalog.?||(lseg , lseg) is 'parallel';

create operator pg_catalog.@ (procedure = box_contained, leftarg = box, rightarg = box);

comment on operator pg_catalog.@(box , box) is 'deprecated, use <@ instead';

create operator pg_catalog.@ (procedure = circle_contained, leftarg = circle, rightarg = circle);

comment on operator pg_catalog.@(circle , circle) is 'deprecated, use <@ instead';

create operator pg_catalog.@ (procedure = on_sb, leftarg = lseg, rightarg = box);

comment on operator pg_catalog.@(lseg , box) is 'deprecated, use <@ instead';

create operator pg_catalog.@ (procedure = on_sl, leftarg = lseg, rightarg = line);

comment on operator pg_catalog.@(lseg , line) is 'deprecated, use <@ instead';

create operator pg_catalog.@ (procedure = on_pb, leftarg = point, rightarg = box);

comment on operator pg_catalog.@(point , box) is 'deprecated, use <@ instead';

create operator pg_catalog.@ (procedure = pt_contained_circle, leftarg = point, rightarg = circle);

comment on operator pg_catalog.@(point , circle) is 'deprecated, use <@ instead';

create operator pg_catalog.@ (procedure = on_pl, leftarg = point, rightarg = line);

comment on operator pg_catalog.@(point , line) is 'deprecated, use <@ instead';

create operator pg_catalog.@ (procedure = on_ps, leftarg = point, rightarg = lseg);

comment on operator pg_catalog.@(point , lseg) is 'deprecated, use <@ instead';

create operator pg_catalog.@ (procedure = on_ppath, leftarg = point, rightarg = path);

comment on operator pg_catalog.@(point , path) is 'deprecated, use <@ instead';

create operator pg_catalog.@ (procedure = pt_contained_poly, leftarg = point, rightarg = polygon);

comment on operator pg_catalog.@(point , polygon) is 'deprecated, use <@ instead';

create operator pg_catalog.@ (procedure = poly_contained, leftarg = polygon, rightarg = polygon);

comment on operator pg_catalog.@(polygon , polygon) is 'deprecated, use <@ instead';

create operator pg_catalog.@ (procedure = int8abs, rightarg = bigint);

comment on operator pg_catalog.@(none , bigint) is 'absolute value';

create operator pg_catalog.@ (procedure = float8abs, rightarg = double precision);

comment on operator pg_catalog.@(none , double precision) is 'absolute value';

create operator pg_catalog.@ (procedure = int4abs, rightarg = integer);

comment on operator pg_catalog.@(none , integer) is 'absolute value';

create operator pg_catalog.@ (procedure = numeric_abs, rightarg = numeric);

comment on operator pg_catalog.@(none , numeric) is 'absolute value';

create operator pg_catalog.@ (procedure = float4abs, rightarg = real);

comment on operator pg_catalog.@(none , real) is 'absolute value';

create operator pg_catalog.@ (procedure = int2abs, rightarg = smallint);

comment on operator pg_catalog.@(none , smallint) is 'absolute value';

create operator pg_catalog.@-@ (procedure = lseg_length, rightarg = lseg);

comment on operator pg_catalog.@-@(none , lseg) is 'distance between endpoints';

create operator pg_catalog.@-@ (procedure = path_length, rightarg = path);

comment on operator pg_catalog.@-@(none , path) is 'sum of path segment lengths';

create operator pg_catalog.@> (procedure = aclcontains, leftarg = aclitem[], rightarg = aclitem);

comment on operator pg_catalog.@>(aclitem[] , aclitem) is 'contains';

create operator pg_catalog.@> (procedure = arraycontains, leftarg = anyarray, rightarg = anyarray);

comment on operator pg_catalog.@>(anyarray , anyarray) is 'contains';

create operator pg_catalog.@> (procedure = range_contains_elem, leftarg = anyrange, rightarg = anyelement);

comment on operator pg_catalog.@>(anyrange , anyelement) is 'contains';

create operator pg_catalog.@> (procedure = range_contains, leftarg = anyrange, rightarg = anyrange);

comment on operator pg_catalog.@>(anyrange , anyrange) is 'contains';

create operator pg_catalog.@> (procedure = box_contain, leftarg = box, rightarg = box);

comment on operator pg_catalog.@>(box , box) is 'contains';

create operator pg_catalog.@> (procedure = box_contain_pt, leftarg = box, rightarg = point);

comment on operator pg_catalog.@>(box , point) is 'contains';

create operator pg_catalog.@> (procedure = circle_contain, leftarg = circle, rightarg = circle);

comment on operator pg_catalog.@>(circle , circle) is 'contains';

create operator pg_catalog.@> (procedure = circle_contain_pt, leftarg = circle, rightarg = point);

comment on operator pg_catalog.@>(circle , point) is 'contains';

create operator pg_catalog.@> (procedure = jsonb_contains, leftarg = jsonb, rightarg = jsonb);

comment on operator pg_catalog.@>(jsonb , jsonb) is 'contains';

create operator pg_catalog.@> (procedure = path_contain_pt, leftarg = path, rightarg = point);

comment on operator pg_catalog.@>(path , point) is 'contains';

create operator pg_catalog.@> (procedure = poly_contain_pt, leftarg = polygon, rightarg = point);

comment on operator pg_catalog.@>(polygon , point) is 'contains';

create operator pg_catalog.@> (procedure = poly_contain, leftarg = polygon, rightarg = polygon);

comment on operator pg_catalog.@>(polygon , polygon) is 'contains';

create operator pg_catalog.@> (procedure = tsq_mcontains, leftarg = tsquery, rightarg = tsquery);

comment on operator pg_catalog.@>(tsquery , tsquery) is 'contains';

create operator pg_catalog.@? (procedure = jsonb_path_exists_opr, leftarg = jsonb, rightarg = jsonpath);

comment on operator pg_catalog.@?(jsonb , jsonpath) is 'jsonpath exists';

create operator pg_catalog.@@ (procedure = jsonb_path_match_opr, leftarg = jsonb, rightarg = jsonpath);

comment on operator pg_catalog.@@(jsonb , jsonpath) is 'jsonpath match';

create operator pg_catalog.@@ (procedure = ts_match_tt, leftarg = text, rightarg = text);

comment on operator pg_catalog.@@(text , text) is 'text search match';

create operator pg_catalog.@@ (procedure = ts_match_tq, leftarg = text, rightarg = tsquery);

comment on operator pg_catalog.@@(text , tsquery) is 'text search match';

create operator pg_catalog.@@ (procedure = ts_match_qv, leftarg = tsquery, rightarg = tsvector);

comment on operator pg_catalog.@@(tsquery , tsvector) is 'text search match';

create operator pg_catalog.@@ (procedure = ts_match_vq, leftarg = tsvector, rightarg = tsquery);

comment on operator pg_catalog.@@(tsvector , tsquery) is 'text search match';

create operator pg_catalog.@@ (procedure = box_center, rightarg = box);

comment on operator pg_catalog.@@(none , box) is 'center of';

create operator pg_catalog.@@ (procedure = circle_center, rightarg = circle);

comment on operator pg_catalog.@@(none , circle) is 'center of';

create operator pg_catalog.@@ (procedure = lseg_center, rightarg = lseg);

comment on operator pg_catalog.@@(none , lseg) is 'center of';

create operator pg_catalog.@@ (procedure = path_center, rightarg = path);

comment on operator pg_catalog.@@(none , path) is 'center of';

create operator pg_catalog.@@ (procedure = poly_center, rightarg = polygon);

comment on operator pg_catalog.@@(none , polygon) is 'center of';

create operator pg_catalog.@@@ (procedure = ts_match_qv, leftarg = tsquery, rightarg = tsvector);

comment on operator pg_catalog.@@@(tsquery , tsvector) is 'deprecated, use @@ instead';

create operator pg_catalog.@@@ (procedure = ts_match_vq, leftarg = tsvector, rightarg = tsquery);

comment on operator pg_catalog.@@@(tsvector , tsquery) is 'deprecated, use @@ instead';

create operator pg_catalog.^ (procedure = dpow, leftarg = double precision, rightarg = double precision);

comment on operator pg_catalog.^(double precision , double precision) is 'exponentiation';

create operator pg_catalog.^ (procedure = numeric_power, leftarg = numeric, rightarg = numeric);

comment on operator pg_catalog.^(numeric , numeric) is 'exponentiation';

create operator pg_catalog.^@ (procedure = starts_with, leftarg = text, rightarg = text);

comment on operator pg_catalog.^@(text , text) is 'starts with';

create operator pg_catalog.|&> (procedure = box_overabove, leftarg = box, rightarg = box);

comment on operator pg_catalog.|&>(box , box) is 'overlaps or is above';

create operator pg_catalog.|&> (procedure = circle_overabove, leftarg = circle, rightarg = circle);

comment on operator pg_catalog.|&>(circle , circle) is 'overlaps or is above';

create operator pg_catalog.|&> (procedure = poly_overabove, leftarg = polygon, rightarg = polygon);

comment on operator pg_catalog.|&>(polygon , polygon) is 'overlaps or is above';

create operator pg_catalog.| (procedure = int8or, leftarg = bigint, rightarg = bigint);

comment on operator pg_catalog.|(bigint , bigint) is 'bitwise or';

create operator pg_catalog.| (procedure = bitor, leftarg = bit, rightarg = bit);

comment on operator pg_catalog.|(bit , bit) is 'bitwise or';

create operator pg_catalog.| (procedure = inetor, leftarg = inet, rightarg = inet);

comment on operator pg_catalog.|(inet , inet) is 'bitwise or';

create operator pg_catalog.| (procedure = int4or, leftarg = integer, rightarg = integer);

comment on operator pg_catalog.|(integer , integer) is 'bitwise or';

create operator pg_catalog.| (procedure = macaddr_or, leftarg = macaddr, rightarg = macaddr);

comment on operator pg_catalog.|(macaddr , macaddr) is 'bitwise or';

create operator pg_catalog.| (procedure = macaddr8_or, leftarg = macaddr8, rightarg = macaddr8);

comment on operator pg_catalog.|(macaddr8 , macaddr8) is 'bitwise or';

create operator pg_catalog.| (procedure = int2or, leftarg = smallint, rightarg = smallint);

comment on operator pg_catalog.|(smallint , smallint) is 'bitwise or';

create operator pg_catalog.|/ (procedure = dsqrt, rightarg = double precision);

comment on operator pg_catalog.|/(none , double precision) is 'square root';

create operator pg_catalog.|>> (procedure = box_above, leftarg = box, rightarg = box);

comment on operator pg_catalog.|>>(box , box) is 'is above';

create operator pg_catalog.|>> (procedure = circle_above, leftarg = circle, rightarg = circle);

comment on operator pg_catalog.|>>(circle , circle) is 'is above';

create operator pg_catalog.|>> (procedure = poly_above, leftarg = polygon, rightarg = polygon);

comment on operator pg_catalog.|>>(polygon , polygon) is 'is above';

create operator pg_catalog.|| (procedure = array_cat, leftarg = anyarray, rightarg = anyarray);

comment on operator pg_catalog.||(anyarray , anyarray) is 'concatenate';

create operator pg_catalog.|| (procedure = array_append, leftarg = anyarray, rightarg = anyelement);

comment on operator pg_catalog.||(anyarray , anyelement) is 'append element onto end of array';

create operator pg_catalog.|| (procedure = array_prepend, leftarg = anyelement, rightarg = anyarray);

comment on operator pg_catalog.||(anyelement , anyarray) is 'prepend element onto front of array';

create operator pg_catalog.|| (procedure = anytextcat, leftarg = anynonarray, rightarg = text);

comment on operator pg_catalog.||(anynonarray , text) is 'concatenate';

create operator pg_catalog.|| (procedure = bitcat, leftarg = bit varying, rightarg = bit varying);

comment on operator pg_catalog.||(bit varying , bit varying) is 'concatenate';

create operator pg_catalog.|| (procedure = byteacat, leftarg = bytea, rightarg = bytea);

comment on operator pg_catalog.||(bytea , bytea) is 'concatenate';

create operator pg_catalog.|| (procedure = jsonb_concat, leftarg = jsonb, rightarg = jsonb);

comment on operator pg_catalog.||(jsonb , jsonb) is 'concatenate';

create operator pg_catalog.|| (procedure = textanycat, leftarg = text, rightarg = anynonarray);

comment on operator pg_catalog.||(text , anynonarray) is 'concatenate';

create operator pg_catalog.|| (procedure = textcat, leftarg = text, rightarg = text);

comment on operator pg_catalog.||(text , text) is 'concatenate';

create operator pg_catalog.|| (procedure = tsquery_or, leftarg = tsquery, rightarg = tsquery);

comment on operator pg_catalog.||(tsquery , tsquery) is 'OR-concatenate';

create operator pg_catalog.|| (procedure = tsvector_concat, leftarg = tsvector, rightarg = tsvector);

comment on operator pg_catalog.||(tsvector , tsvector) is 'concatenate';

create operator pg_catalog.||/ (procedure = dcbrt, rightarg = double precision);

comment on operator pg_catalog.||/(none , double precision) is 'cube root';

create operator pg_catalog.~ (procedure = aclcontains, leftarg = aclitem[], rightarg = aclitem);

comment on operator pg_catalog.~(aclitem[] , aclitem) is 'deprecated, use @> instead';

create operator pg_catalog.~ (procedure = box_contain, leftarg = box, rightarg = box);

comment on operator pg_catalog.~(box , box) is 'deprecated, use @> instead';

create operator pg_catalog.~ (procedure = bpcharregexeq, leftarg = char, rightarg = text);

comment on operator pg_catalog.~(char , text) is 'matches regular expression, case-sensitive';

create operator pg_catalog.~ (procedure = circle_contain, leftarg = circle, rightarg = circle);

comment on operator pg_catalog.~(circle , circle) is 'deprecated, use @> instead';

create operator pg_catalog.~ (procedure = circle_contain_pt, leftarg = circle, rightarg = point);

comment on operator pg_catalog.~(circle , point) is 'deprecated, use @> instead';

create operator pg_catalog.~ (procedure = nameregexeq, leftarg = name, rightarg = text);

comment on operator pg_catalog.~(name , text) is 'matches regular expression, case-sensitive';

create operator pg_catalog.~ (procedure = path_contain_pt, leftarg = path, rightarg = point);

comment on operator pg_catalog.~(path , point) is 'deprecated, use @> instead';

create operator pg_catalog.~ (procedure = poly_contain_pt, leftarg = polygon, rightarg = point);

comment on operator pg_catalog.~(polygon , point) is 'deprecated, use @> instead';

create operator pg_catalog.~ (procedure = poly_contain, leftarg = polygon, rightarg = polygon);

comment on operator pg_catalog.~(polygon , polygon) is 'deprecated, use @> instead';

create operator pg_catalog.~ (procedure = textregexeq, leftarg = text, rightarg = text);

comment on operator pg_catalog.~(text , text) is 'matches regular expression, case-sensitive';

create operator pg_catalog.~ (procedure = int8not, rightarg = bigint);

comment on operator pg_catalog.~(none , bigint) is 'bitwise not';

create operator pg_catalog.~ (procedure = bitnot, rightarg = bit);

comment on operator pg_catalog.~(none , bit) is 'bitwise not';

create operator pg_catalog.~ (procedure = inetnot, rightarg = inet);

comment on operator pg_catalog.~(none , inet) is 'bitwise not';

create operator pg_catalog.~ (procedure = int4not, rightarg = integer);

comment on operator pg_catalog.~(none , integer) is 'bitwise not';

create operator pg_catalog.~ (procedure = macaddr_not, rightarg = macaddr);

comment on operator pg_catalog.~(none , macaddr) is 'bitwise not';

create operator pg_catalog.~ (procedure = macaddr8_not, rightarg = macaddr8);

comment on operator pg_catalog.~(none , macaddr8) is 'bitwise not';

create operator pg_catalog.~ (procedure = int2not, rightarg = smallint);

comment on operator pg_catalog.~(none , smallint) is 'bitwise not';

create operator pg_catalog.~* (procedure = bpcharicregexeq, leftarg = char, rightarg = text);

comment on operator pg_catalog.~*(char , text) is 'matches regular expression, case-insensitive';

create operator pg_catalog.~* (procedure = nameicregexeq, leftarg = name, rightarg = text);

comment on operator pg_catalog.~*(name , text) is 'matches regular expression, case-insensitive';

create operator pg_catalog.~* (procedure = texticregexeq, leftarg = text, rightarg = text);

comment on operator pg_catalog.~*(text , text) is 'matches regular expression, case-insensitive';

create operator pg_catalog.~<=~ (procedure = bpchar_pattern_le, leftarg = char, rightarg = char);

comment on operator pg_catalog.~<=~(char , char) is 'less than or equal';

create operator pg_catalog.~<=~ (procedure = text_pattern_le, leftarg = text, rightarg = text);

comment on operator pg_catalog.~<=~(text , text) is 'less than or equal';

create operator pg_catalog.~<~ (procedure = bpchar_pattern_lt, leftarg = char, rightarg = char);

comment on operator pg_catalog.~<~(char , char) is 'less than';

create operator pg_catalog.~<~ (procedure = text_pattern_lt, leftarg = text, rightarg = text);

comment on operator pg_catalog.~<~(text , text) is 'less than';

create operator pg_catalog.~= (procedure = box_same, leftarg = box, rightarg = box);

comment on operator pg_catalog.~=(box , box) is 'same as';

create operator pg_catalog.~= (procedure = circle_same, leftarg = circle, rightarg = circle);

comment on operator pg_catalog.~=(circle , circle) is 'same as';

create operator pg_catalog.~= (procedure = point_eq, leftarg = point, rightarg = point);

comment on operator pg_catalog.~=(point , point) is 'same as';

create operator pg_catalog.~= (procedure = poly_same, leftarg = polygon, rightarg = polygon);

comment on operator pg_catalog.~=(polygon , polygon) is 'same as';

create operator pg_catalog.~>=~ (procedure = bpchar_pattern_ge, leftarg = char, rightarg = char);

comment on operator pg_catalog.~>=~(char , char) is 'greater than or equal';

create operator pg_catalog.~>=~ (procedure = text_pattern_ge, leftarg = text, rightarg = text);

comment on operator pg_catalog.~>=~(text , text) is 'greater than or equal';

create operator pg_catalog.~>~ (procedure = bpchar_pattern_gt, leftarg = char, rightarg = char);

comment on operator pg_catalog.~>~(char , char) is 'greater than';

create operator pg_catalog.~>~ (procedure = text_pattern_gt, leftarg = text, rightarg = text);

comment on operator pg_catalog.~>~(text , text) is 'greater than';

create operator pg_catalog.~~ (procedure = bytealike, leftarg = bytea, rightarg = bytea);

comment on operator pg_catalog.~~(bytea , bytea) is 'matches LIKE expression';

create operator pg_catalog.~~ (procedure = bpcharlike, leftarg = char, rightarg = text);

comment on operator pg_catalog.~~(char , text) is 'matches LIKE expression';

create operator pg_catalog.~~ (procedure = namelike, leftarg = name, rightarg = text);

comment on operator pg_catalog.~~(name , text) is 'matches LIKE expression';

create operator pg_catalog.~~ (procedure = textlike, leftarg = text, rightarg = text);

comment on operator pg_catalog.~~(text , text) is 'matches LIKE expression';

create operator pg_catalog.~~* (procedure = bpchariclike, leftarg = char, rightarg = text);

comment on operator pg_catalog.~~*(char , text) is 'matches LIKE expression, case-insensitive';

create operator pg_catalog.~~* (procedure = nameiclike, leftarg = name, rightarg = text);

comment on operator pg_catalog.~~*(name , text) is 'matches LIKE expression, case-insensitive';

create operator pg_catalog.~~* (procedure = texticlike, leftarg = text, rightarg = text);

comment on operator pg_catalog.~~*(text , text) is 'matches LIKE expression, case-insensitive';

create aggregate pg_catalog.array_agg(anyarray) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.array_agg(anyarray) is 'concatenate aggregate input into an array';

create aggregate pg_catalog.array_agg(anynonarray) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.array_agg(anynonarray) is 'concatenate aggregate input into an array';

create aggregate pg_catalog.avg(bigint) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.avg(bigint) is 'the average (arithmetic mean) as numeric of all bigint values';

create aggregate pg_catalog.avg(double precision) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.avg(double precision) is 'the average (arithmetic mean) as float8 of all float8 values';

create aggregate pg_catalog.avg(integer) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.avg(integer) is 'the average (arithmetic mean) as numeric of all integer values';

create aggregate pg_catalog.avg(interval) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.avg(interval) is 'the average (arithmetic mean) as interval of all interval values';

create aggregate pg_catalog.avg(numeric) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.avg(numeric) is 'the average (arithmetic mean) as numeric of all numeric values';

create aggregate pg_catalog.avg(real) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.avg(real) is 'the average (arithmetic mean) as float8 of all float4 values';

create aggregate pg_catalog.avg(smallint) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.avg(smallint) is 'the average (arithmetic mean) as numeric of all smallint values';

create aggregate pg_catalog.bit_and(bigint) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.bit_and(bigint) is 'bitwise-and bigint aggregate';

create aggregate pg_catalog.bit_and(bit) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.bit_and(bit) is 'bitwise-and bit aggregate';

create aggregate pg_catalog.bit_and(integer) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.bit_and(integer) is 'bitwise-and integer aggregate';

create aggregate pg_catalog.bit_and(smallint) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.bit_and(smallint) is 'bitwise-and smallint aggregate';

create aggregate pg_catalog.bit_or(bigint) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.bit_or(bigint) is 'bitwise-or bigint aggregate';

create aggregate pg_catalog.bit_or(bit) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.bit_or(bit) is 'bitwise-or bit aggregate';

create aggregate pg_catalog.bit_or(integer) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.bit_or(integer) is 'bitwise-or integer aggregate';

create aggregate pg_catalog.bit_or(smallint) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.bit_or(smallint) is 'bitwise-or smallint aggregate';

create aggregate pg_catalog.bool_and(boolean) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.bool_and(boolean) is 'boolean-and aggregate';

create aggregate pg_catalog.bool_or(boolean) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.bool_or(boolean) is 'boolean-or aggregate';

create aggregate pg_catalog.corr(double precision, double precision) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.corr(double precision, double precision) is 'correlation coefficient';

create aggregate pg_catalog.count("any") (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.count("any") is 'number of input rows for which the input expression is not null';

create aggregate pg_catalog.count() (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.count() is 'number of input rows';

create aggregate pg_catalog.covar_pop(double precision, double precision) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.covar_pop(double precision, double precision) is 'population covariance';

create aggregate pg_catalog.covar_samp(double precision, double precision) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.covar_samp(double precision, double precision) is 'sample covariance';

create aggregate pg_catalog.cume_dist("any") (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.cume_dist("any") is 'cumulative distribution of hypothetical row';

create aggregate pg_catalog.dense_rank("any") (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.dense_rank("any") is 'rank of hypothetical row without gaps';

create aggregate pg_catalog.every(boolean) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.every(boolean) is 'boolean-and aggregate';

create aggregate pg_catalog.json_agg(anyelement) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.json_agg(anyelement) is 'aggregate input into json';

create aggregate pg_catalog.json_object_agg("any", "any") (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.json_object_agg("any", "any") is 'aggregate input into a json object';

create aggregate pg_catalog.jsonb_agg(anyelement) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.jsonb_agg(anyelement) is 'aggregate input into jsonb';

create aggregate pg_catalog.jsonb_object_agg("any", "any") (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.jsonb_object_agg("any", "any") is 'aggregate inputs into jsonb object';

create aggregate pg_catalog.max(anyarray) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.max(anyarray) is 'maximum value of all anyarray input values';

create aggregate pg_catalog.max(anyenum) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.max(anyenum) is 'maximum value of all enum input values';

create aggregate pg_catalog.max(bigint) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.max(bigint) is 'maximum value of all bigint input values';

create aggregate pg_catalog.max(char) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.max(char) is 'maximum value of all bpchar input values';

create aggregate pg_catalog.max(date) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.max(date) is 'maximum value of all date input values';

create aggregate pg_catalog.max(double precision) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.max(double precision) is 'maximum value of all float8 input values';

create aggregate pg_catalog.max(inet) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.max(inet) is 'maximum value of all inet input values';

create aggregate pg_catalog.max(integer) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.max(integer) is 'maximum value of all integer input values';

create aggregate pg_catalog.max(interval) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.max(interval) is 'maximum value of all interval input values';

create aggregate pg_catalog.max(money) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.max(money) is 'maximum value of all money input values';

create aggregate pg_catalog.max(numeric) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.max(numeric) is 'maximum value of all numeric input values';

create aggregate pg_catalog.max(oid) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.max(oid) is 'maximum value of all oid input values';

create aggregate pg_catalog.max(real) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.max(real) is 'maximum value of all float4 input values';

create aggregate pg_catalog.max(smallint) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.max(smallint) is 'maximum value of all smallint input values';

create aggregate pg_catalog.max(text) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.max(text) is 'maximum value of all text input values';

create aggregate pg_catalog.max(tid) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.max(tid) is 'maximum value of all tid input values';

create aggregate pg_catalog.max(time with time zone) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.max(time with time zone) is 'maximum value of all time with time zone input values';

create aggregate pg_catalog.max(time) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.max(time) is 'maximum value of all time input values';

create aggregate pg_catalog.max(timestamp with time zone) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.max(timestamp with time zone) is 'maximum value of all timestamp with time zone input values';

create aggregate pg_catalog.max(timestamp) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.max(timestamp) is 'maximum value of all timestamp input values';

create aggregate pg_catalog.min(anyarray) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.min(anyarray) is 'minimum value of all anyarray input values';

create aggregate pg_catalog.min(anyenum) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.min(anyenum) is 'minimum value of all enum input values';

create aggregate pg_catalog.min(bigint) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.min(bigint) is 'minimum value of all bigint input values';

create aggregate pg_catalog.min(char) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.min(char) is 'minimum value of all bpchar input values';

create aggregate pg_catalog.min(date) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.min(date) is 'minimum value of all date input values';

create aggregate pg_catalog.min(double precision) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.min(double precision) is 'minimum value of all float8 input values';

create aggregate pg_catalog.min(inet) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.min(inet) is 'minimum value of all inet input values';

create aggregate pg_catalog.min(integer) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.min(integer) is 'minimum value of all integer input values';

create aggregate pg_catalog.min(interval) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.min(interval) is 'minimum value of all interval input values';

create aggregate pg_catalog.min(money) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.min(money) is 'minimum value of all money input values';

create aggregate pg_catalog.min(numeric) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.min(numeric) is 'minimum value of all numeric input values';

create aggregate pg_catalog.min(oid) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.min(oid) is 'minimum value of all oid input values';

create aggregate pg_catalog.min(real) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.min(real) is 'minimum value of all float4 input values';

create aggregate pg_catalog.min(smallint) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.min(smallint) is 'minimum value of all smallint input values';

create aggregate pg_catalog.min(text) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.min(text) is 'minimum value of all text values';

create aggregate pg_catalog.min(tid) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.min(tid) is 'minimum value of all tid input values';

create aggregate pg_catalog.min(time with time zone) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.min(time with time zone) is 'minimum value of all time with time zone input values';

create aggregate pg_catalog.min(time) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.min(time) is 'minimum value of all time input values';

create aggregate pg_catalog.min(timestamp with time zone) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.min(timestamp with time zone) is 'minimum value of all timestamp with time zone input values';

create aggregate pg_catalog.min(timestamp) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.min(timestamp) is 'minimum value of all timestamp input values';

create aggregate pg_catalog.mode(anyelement) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.mode(anyelement) is 'most common value';

create aggregate pg_catalog.percent_rank("any") (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.percent_rank("any") is 'fractional rank of hypothetical row';

create aggregate pg_catalog.percentile_cont(double precision, double precision) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.percentile_cont(double precision, double precision) is 'continuous distribution percentile';

create aggregate pg_catalog.percentile_cont(double precision, interval) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.percentile_cont(double precision, interval) is 'continuous distribution percentile';

create aggregate pg_catalog.percentile_cont(double precision[], double precision) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.percentile_cont(double precision[], double precision) is 'multiple continuous percentiles';

create aggregate pg_catalog.percentile_cont(double precision[], interval) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.percentile_cont(double precision[], interval) is 'multiple continuous percentiles';

create aggregate pg_catalog.percentile_disc(double precision, anyelement) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.percentile_disc(double precision, anyelement) is 'discrete percentile';

create aggregate pg_catalog.percentile_disc(double precision[], anyelement) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.percentile_disc(double precision[], anyelement) is 'multiple discrete percentiles';

create aggregate pg_catalog.rank("any") (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.rank("any") is 'rank of hypothetical row';

create aggregate pg_catalog.regr_avgx(double precision, double precision) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.regr_avgx(double precision, double precision) is 'average of the independent variable (sum(X)/N)';

create aggregate pg_catalog.regr_avgy(double precision, double precision) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.regr_avgy(double precision, double precision) is 'average of the dependent variable (sum(Y)/N)';

create aggregate pg_catalog.regr_count(double precision, double precision) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.regr_count(double precision, double precision) is 'number of input rows in which both expressions are not null';

create aggregate pg_catalog.regr_intercept(double precision, double precision) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.regr_intercept(double precision, double precision) is 'y-intercept of the least-squares-fit linear equation determined by the (X, Y) pairs';

create aggregate pg_catalog.regr_r2(double precision, double precision) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.regr_r2(double precision, double precision) is 'square of the correlation coefficient';

create aggregate pg_catalog.regr_slope(double precision, double precision) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.regr_slope(double precision, double precision) is 'slope of the least-squares-fit linear equation determined by the (X, Y) pairs';

create aggregate pg_catalog.regr_sxx(double precision, double precision) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.regr_sxx(double precision, double precision) is 'sum of squares of the independent variable (sum(X^2) - sum(X)^2/N)';

create aggregate pg_catalog.regr_sxy(double precision, double precision) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.regr_sxy(double precision, double precision) is 'sum of products of independent times dependent variable (sum(X*Y) - sum(X) * sum(Y)/N)';

create aggregate pg_catalog.regr_syy(double precision, double precision) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.regr_syy(double precision, double precision) is 'sum of squares of the dependent variable (sum(Y^2) - sum(Y)^2/N)';

create aggregate pg_catalog.stddev(bigint) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.stddev(bigint) is 'historical alias for stddev_samp';

create aggregate pg_catalog.stddev(double precision) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.stddev(double precision) is 'historical alias for stddev_samp';

create aggregate pg_catalog.stddev(integer) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.stddev(integer) is 'historical alias for stddev_samp';

create aggregate pg_catalog.stddev(numeric) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.stddev(numeric) is 'historical alias for stddev_samp';

create aggregate pg_catalog.stddev(real) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.stddev(real) is 'historical alias for stddev_samp';

create aggregate pg_catalog.stddev(smallint) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.stddev(smallint) is 'historical alias for stddev_samp';

create aggregate pg_catalog.stddev_pop(bigint) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.stddev_pop(bigint) is 'population standard deviation of bigint input values';

create aggregate pg_catalog.stddev_pop(double precision) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.stddev_pop(double precision) is 'population standard deviation of float8 input values';

create aggregate pg_catalog.stddev_pop(integer) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.stddev_pop(integer) is 'population standard deviation of integer input values';

create aggregate pg_catalog.stddev_pop(numeric) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.stddev_pop(numeric) is 'population standard deviation of numeric input values';

create aggregate pg_catalog.stddev_pop(real) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.stddev_pop(real) is 'population standard deviation of float4 input values';

create aggregate pg_catalog.stddev_pop(smallint) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.stddev_pop(smallint) is 'population standard deviation of smallint input values';

create aggregate pg_catalog.stddev_samp(bigint) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.stddev_samp(bigint) is 'sample standard deviation of bigint input values';

create aggregate pg_catalog.stddev_samp(double precision) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.stddev_samp(double precision) is 'sample standard deviation of float8 input values';

create aggregate pg_catalog.stddev_samp(integer) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.stddev_samp(integer) is 'sample standard deviation of integer input values';

create aggregate pg_catalog.stddev_samp(numeric) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.stddev_samp(numeric) is 'sample standard deviation of numeric input values';

create aggregate pg_catalog.stddev_samp(real) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.stddev_samp(real) is 'sample standard deviation of float4 input values';

create aggregate pg_catalog.stddev_samp(smallint) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.stddev_samp(smallint) is 'sample standard deviation of smallint input values';

create aggregate pg_catalog.string_agg(bytea, bytea) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.string_agg(bytea, bytea) is 'concatenate aggregate input into a bytea';

create aggregate pg_catalog.string_agg(text, text) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.string_agg(text, text) is 'concatenate aggregate input into a string';

create aggregate pg_catalog.sum(bigint) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.sum(bigint) is 'sum as numeric across all bigint input values';

create aggregate pg_catalog.sum(double precision) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.sum(double precision) is 'sum as float8 across all float8 input values';

create aggregate pg_catalog.sum(integer) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.sum(integer) is 'sum as bigint across all integer input values';

create aggregate pg_catalog.sum(interval) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.sum(interval) is 'sum as interval across all interval input values';

create aggregate pg_catalog.sum(money) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.sum(money) is 'sum as money across all money input values';

create aggregate pg_catalog.sum(numeric) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.sum(numeric) is 'sum as numeric across all numeric input values';

create aggregate pg_catalog.sum(real) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.sum(real) is 'sum as float4 across all float4 input values';

create aggregate pg_catalog.sum(smallint) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.sum(smallint) is 'sum as bigint across all smallint input values';

create aggregate pg_catalog.var_pop(bigint) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.var_pop(bigint) is 'population variance of bigint input values (square of the population standard deviation)';

create aggregate pg_catalog.var_pop(double precision) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.var_pop(double precision) is 'population variance of float8 input values (square of the population standard deviation)';

create aggregate pg_catalog.var_pop(integer) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.var_pop(integer) is 'population variance of integer input values (square of the population standard deviation)';

create aggregate pg_catalog.var_pop(numeric) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.var_pop(numeric) is 'population variance of numeric input values (square of the population standard deviation)';

create aggregate pg_catalog.var_pop(real) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.var_pop(real) is 'population variance of float4 input values (square of the population standard deviation)';

create aggregate pg_catalog.var_pop(smallint) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.var_pop(smallint) is 'population variance of smallint input values (square of the population standard deviation)';

create aggregate pg_catalog.var_samp(bigint) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.var_samp(bigint) is 'sample variance of bigint input values (square of the sample standard deviation)';

create aggregate pg_catalog.var_samp(double precision) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.var_samp(double precision) is 'sample variance of float8 input values (square of the sample standard deviation)';

create aggregate pg_catalog.var_samp(integer) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.var_samp(integer) is 'sample variance of integer input values (square of the sample standard deviation)';

create aggregate pg_catalog.var_samp(numeric) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.var_samp(numeric) is 'sample variance of numeric input values (square of the sample standard deviation)';

create aggregate pg_catalog.var_samp(real) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.var_samp(real) is 'sample variance of float4 input values (square of the sample standard deviation)';

create aggregate pg_catalog.var_samp(smallint) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.var_samp(smallint) is 'sample variance of smallint input values (square of the sample standard deviation)';

create aggregate pg_catalog.variance(bigint) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.variance(bigint) is 'historical alias for var_samp';

create aggregate pg_catalog.variance(double precision) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.variance(double precision) is 'historical alias for var_samp';

create aggregate pg_catalog.variance(integer) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.variance(integer) is 'historical alias for var_samp';

create aggregate pg_catalog.variance(numeric) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.variance(numeric) is 'historical alias for var_samp';

create aggregate pg_catalog.variance(real) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.variance(real) is 'historical alias for var_samp';

create aggregate pg_catalog.variance(smallint) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.variance(smallint) is 'historical alias for var_samp';

create aggregate pg_catalog.xmlagg(xml) (
sfunc = ???,
stype = ???
);

comment on aggregate pg_catalog.xmlagg(xml) is 'concatenate XML values';

create operator family pg_catalog.aclitem_ops using hash;

alter operator family pg_catalog.aclitem_ops using hash add
    operator 1 =(aclitem,aclitem),
    function 1(aclitem, aclitem) hash_aclitem(aclitem),
    function 2(aclitem, aclitem) hash_aclitem_extended(aclitem,bigint);

create operator class pg_catalog.aclitem_ops default for type aclitem using hash as;

create operator family pg_catalog.array_ops using btree;

alter operator family pg_catalog.array_ops using btree add
    operator 1 <(anyarray,anyarray),
    operator 2 <=(anyarray,anyarray),
    operator 3 =(anyarray,anyarray),
    operator 4 >=(anyarray,anyarray),
    operator 5 >(anyarray,anyarray),
    function 1(anyarray, anyarray) btarraycmp(anyarray,anyarray);

create operator class pg_catalog.array_ops default for type anyarray using btree as;

create operator class pg_catalog.array_ops default for type anyarray using gin as storage anyelement;

create operator class pg_catalog.array_ops default for type anyarray using hash as;

create operator family pg_catalog.array_ops using gin;

alter operator family pg_catalog.array_ops using gin add
    operator 1 &&(anyarray,anyarray),
    operator 2 @>(anyarray,anyarray),
    operator 3 <@(anyarray,anyarray),
    operator 4 =(anyarray,anyarray),
    function 2(anyarray, anyarray) ginarrayextract(anyarray,internal,internal),
    function 3(anyarray, anyarray) ginqueryarrayextract(anyarray,internal,smallint,internal,internal,internal,internal),
    function 4(anyarray, anyarray) ginarrayconsistent(internal,smallint,anyarray,integer,internal,internal,internal,internal),
    function 6(anyarray, anyarray) ginarraytriconsistent(internal,smallint,anyarray,integer,internal,internal,internal);

create operator family pg_catalog.array_ops using hash;

alter operator family pg_catalog.array_ops using hash add
    operator 1 =(anyarray,anyarray),
    function 1(anyarray, anyarray) hash_array(anyarray),
    function 2(anyarray, anyarray) hash_array_extended(anyarray,bigint);

create operator family pg_catalog.bit_minmax_ops using brin;

alter operator family pg_catalog.bit_minmax_ops using brin add
    operator 1 <(bit,bit),
    operator 2 <=(bit,bit),
    operator 3 =(bit,bit),
    operator 4 >=(bit,bit),
    operator 5 >(bit,bit),
    function 1(bit, bit) brin_minmax_opcinfo(internal),
    function 2(bit, bit) brin_minmax_add_value(internal,internal,internal,internal),
    function 3(bit, bit) brin_minmax_consistent(internal,internal,internal),
    function 4(bit, bit) brin_minmax_union(internal,internal,internal);

create operator class pg_catalog.bit_minmax_ops default for type bit using brin as storage bit;

create operator family pg_catalog.bit_ops using btree;

alter operator family pg_catalog.bit_ops using btree add
    operator 1 <(bit,bit),
    operator 2 <=(bit,bit),
    operator 3 =(bit,bit),
    operator 4 >=(bit,bit),
    operator 5 >(bit,bit),
    function 1(bit, bit) bitcmp(bit,bit);

create operator class pg_catalog.bit_ops default for type bit using btree as;

create operator family pg_catalog.bool_ops using btree;

alter operator family pg_catalog.bool_ops using btree add
    operator 1 <(boolean,boolean),
    operator 2 <=(boolean,boolean),
    operator 3 =(boolean,boolean),
    operator 4 >=(boolean,boolean),
    operator 5 >(boolean,boolean),
    function 1(boolean, boolean) btboolcmp(boolean,boolean);

create operator class pg_catalog.bool_ops default for type boolean using btree as;

create operator class pg_catalog.bool_ops default for type boolean using hash as;

create operator family pg_catalog.bool_ops using hash;

alter operator family pg_catalog.bool_ops using hash add
    operator 1 =(boolean,boolean),
    function 1(boolean, boolean) hashchar("char"),
    function 2(boolean, boolean) hashcharextended("char",bigint);

create operator family pg_catalog.box_inclusion_ops using brin;

alter operator family pg_catalog.box_inclusion_ops using brin add
    operator 10 <<|(box,box),
    operator 11 |>>(box,box),
    operator 12 |&>(box,box),
    operator 1 <<(box,box),
    operator 2 &<(box,box),
    operator 3 &&(box,box),
    operator 4 &>(box,box),
    operator 5 >>(box,box),
    operator 6 ~=(box,box),
    operator 7 @>(box,box),
    operator 7 @>(box,point),
    operator 8 <@(box,box),
    operator 9 &<|(box,box),
    function 11(box, box) bound_box(box,box),
    function 13(box, box) box_contain(box,box),
    function 1(box, box) brin_inclusion_opcinfo(internal),
    function 2(box, box) brin_inclusion_add_value(internal,internal,internal,internal),
    function 3(box, box) brin_inclusion_consistent(internal,internal,internal),
    function 4(box, box) brin_inclusion_union(internal,internal,internal);

create operator class pg_catalog.box_inclusion_ops default for type box using brin as storage box;

create operator family pg_catalog.box_ops using gist;

alter operator family pg_catalog.box_ops using gist add
    operator 10 <<|(box,box),
    operator 11 |>>(box,box),
    operator 12 |&>(box,box),
    operator 13 ~(box,box),
    operator 14 @(box,box),
    operator 1 <<(box,box),
    operator 2 &<(box,box),
    operator 3 &&(box,box),
    operator 4 &>(box,box),
    operator 5 >>(box,box),
    operator 6 ~=(box,box),
    operator 7 @>(box,box),
    operator 8 <@(box,box),
    operator 9 &<|(box,box),
    function 1(box, box) gist_box_consistent(internal,box,smallint,oid,internal),
    function 2(box, box) gist_box_union(internal,internal),
    function 5(box, box) gist_box_penalty(internal,internal,internal),
    function 6(box, box) gist_box_picksplit(internal,internal),
    function 7(box, box) gist_box_same(box,box,internal);

create operator family pg_catalog.box_ops using spgist;

alter operator family pg_catalog.box_ops using spgist add
    operator 10 <<|(box,box),
    operator 11 |>>(box,box),
    operator 12 |&>(box,box),
    operator 1 <<(box,box),
    operator 2 &<(box,box),
    operator 3 &&(box,box),
    operator 4 &>(box,box),
    operator 5 >>(box,box),
    operator 6 ~=(box,box),
    operator 7 @>(box,box),
    operator 8 <@(box,box),
    operator 9 &<|(box,box),
    function 1(box, box) spg_box_quad_config(internal,internal),
    function 2(box, box) spg_box_quad_choose(internal,internal),
    function 3(box, box) spg_box_quad_picksplit(internal,internal),
    function 4(box, box) spg_box_quad_inner_consistent(internal,internal),
    function 5(box, box) spg_box_quad_leaf_consistent(internal,internal);

create operator class pg_catalog.box_ops default for type box using gist as;

create operator class pg_catalog.box_ops default for type box using spgist as;

create operator family pg_catalog.bpchar_minmax_ops using brin;

alter operator family pg_catalog.bpchar_minmax_ops using brin add
    operator 1 <(character,character),
    operator 2 <=(character,character),
    operator 3 =(character,character),
    operator 4 >=(character,character),
    operator 5 >(character,character),
    function 1(character, character) brin_minmax_opcinfo(internal),
    function 2(character, character) brin_minmax_add_value(internal,internal,internal,internal),
    function 3(character, character) brin_minmax_consistent(internal,internal,internal),
    function 4(character, character) brin_minmax_union(internal,internal,internal);

create operator class pg_catalog.bpchar_minmax_ops default for type character using brin as storage character;

create operator family pg_catalog.bpchar_ops using btree;

alter operator family pg_catalog.bpchar_ops using btree add
    operator 1 <(character,character),
    operator 2 <=(character,character),
    operator 3 =(character,character),
    operator 4 >=(character,character),
    operator 5 >(character,character),
    function 1(character, character) bpcharcmp(character,character),
    function 2(character, character) bpchar_sortsupport(internal);

create operator class pg_catalog.bpchar_ops default for type character using btree as;

create operator class pg_catalog.bpchar_ops default for type character using hash as;

create operator family pg_catalog.bpchar_ops using hash;

alter operator family pg_catalog.bpchar_ops using hash add
    operator 1 =(character,character),
    function 1(character, character) hashbpchar(character),
    function 2(character, character) hashbpcharextended(character,bigint);

create operator family pg_catalog.bpchar_pattern_ops using btree;

alter operator family pg_catalog.bpchar_pattern_ops using btree add
    operator 1 ~<~(character,character),
    operator 2 ~<=~(character,character),
    operator 3 =(character,character),
    operator 4 ~>=~(character,character),
    operator 5 ~>~(character,character),
    function 1(character, character) btbpchar_pattern_cmp(character,character),
    function 2(character, character) btbpchar_pattern_sortsupport(internal);

create operator class pg_catalog.bpchar_pattern_ops for type character using btree as;

create operator class pg_catalog.bpchar_pattern_ops for type character using hash as;

create operator family pg_catalog.bpchar_pattern_ops using hash;

alter operator family pg_catalog.bpchar_pattern_ops using hash add
    operator 1 =(character,character),
    function 1(character, character) hashbpchar(character),
    function 2(character, character) hashbpcharextended(character,bigint);

create operator family pg_catalog.bytea_minmax_ops using brin;

alter operator family pg_catalog.bytea_minmax_ops using brin add
    operator 1 <(bytea,bytea),
    operator 2 <=(bytea,bytea),
    operator 3 =(bytea,bytea),
    operator 4 >=(bytea,bytea),
    operator 5 >(bytea,bytea),
    function 1(bytea, bytea) brin_minmax_opcinfo(internal),
    function 2(bytea, bytea) brin_minmax_add_value(internal,internal,internal,internal),
    function 3(bytea, bytea) brin_minmax_consistent(internal,internal,internal),
    function 4(bytea, bytea) brin_minmax_union(internal,internal,internal);

create operator class pg_catalog.bytea_minmax_ops default for type bytea using brin as storage bytea;

create operator family pg_catalog.bytea_ops using btree;

alter operator family pg_catalog.bytea_ops using btree add
    operator 1 <(bytea,bytea),
    operator 2 <=(bytea,bytea),
    operator 3 =(bytea,bytea),
    operator 4 >=(bytea,bytea),
    operator 5 >(bytea,bytea),
    function 1(bytea, bytea) byteacmp(bytea,bytea),
    function 2(bytea, bytea) bytea_sortsupport(internal);

create operator class pg_catalog.bytea_ops default for type bytea using btree as;

create operator class pg_catalog.bytea_ops default for type bytea using hash as;

create operator family pg_catalog.bytea_ops using hash;

alter operator family pg_catalog.bytea_ops using hash add
    operator 1 =(bytea,bytea),
    function 1(bytea, bytea) hashvarlena(internal),
    function 2(bytea, bytea) hashvarlenaextended(internal,bigint);

create operator family pg_catalog.char_minmax_ops using brin;

alter operator family pg_catalog.char_minmax_ops using brin add
    operator 1 <("char","char"),
    operator 2 <=("char","char"),
    operator 3 =("char","char"),
    operator 4 >=("char","char"),
    operator 5 >("char","char"),
    function 1("char", "char") brin_minmax_opcinfo(internal),
    function 2("char", "char") brin_minmax_add_value(internal,internal,internal,internal),
    function 3("char", "char") brin_minmax_consistent(internal,internal,internal),
    function 4("char", "char") brin_minmax_union(internal,internal,internal);

create operator class pg_catalog.char_minmax_ops default for type "char" using brin as storage "char";

create operator family pg_catalog.char_ops using btree;

alter operator family pg_catalog.char_ops using btree add
    operator 1 <("char","char"),
    operator 2 <=("char","char"),
    operator 3 =("char","char"),
    operator 4 >=("char","char"),
    operator 5 >("char","char"),
    function 1("char", "char") btcharcmp("char","char");

create operator class pg_catalog.char_ops default for type "char" using btree as;

create operator class pg_catalog.char_ops default for type "char" using hash as;

create operator family pg_catalog.char_ops using hash;

alter operator family pg_catalog.char_ops using hash add
    operator 1 =("char","char"),
    function 1("char", "char") hashchar("char"),
    function 2("char", "char") hashcharextended("char",bigint);

create operator family pg_catalog.cid_ops using hash;

alter operator family pg_catalog.cid_ops using hash add
    operator 1 =(cid,cid),
    function 1(cid, cid) hashint4(integer),
    function 2(cid, cid) hashint4extended(integer,bigint);

create operator class pg_catalog.cid_ops default for type cid using hash as;

create operator family pg_catalog.circle_ops using gist;

alter operator family pg_catalog.circle_ops using gist add
    operator 10 <<|(circle,circle),
    operator 11 |>>(circle,circle),
    operator 12 |&>(circle,circle),
    operator 13 ~(circle,circle),
    operator 14 @(circle,circle),
    operator 15 <->(circle,point),
    operator 1 <<(circle,circle),
    operator 2 &<(circle,circle),
    operator 3 &&(circle,circle),
    operator 4 &>(circle,circle),
    operator 5 >>(circle,circle),
    operator 6 ~=(circle,circle),
    operator 7 @>(circle,circle),
    operator 8 <@(circle,circle),
    operator 9 &<|(circle,circle),
    function 1(circle, circle) gist_circle_consistent(internal,circle,smallint,oid,internal),
    function 2(circle, circle) gist_box_union(internal,internal),
    function 3(circle, circle) gist_circle_compress(internal),
    function 5(circle, circle) gist_box_penalty(internal,internal,internal),
    function 6(circle, circle) gist_box_picksplit(internal,internal),
    function 7(circle, circle) gist_box_same(box,box,internal),
    function 8(circle, circle) gist_circle_distance(internal,circle,smallint,oid,internal);

create operator class pg_catalog.circle_ops default for type circle using gist as storage box;

create operator family pg_catalog.date_ops using hash;

alter operator family pg_catalog.date_ops using hash add
    operator 1 =(date,date),
    function 1(date, date) hashint4(integer),
    function 2(date, date) hashint4extended(integer,bigint);

create operator class pg_catalog.date_ops default for type date using hash as;

create operator family pg_catalog.datetime_minmax_ops using brin;

alter operator family pg_catalog.datetime_minmax_ops using brin add
    operator 1 <(date,date),
    operator 1 <(date,timestamp with time zone),
    operator 1 <(date,timestamp without time zone),
    operator 1 <(timestamp with time zone,date),
    operator 1 <(timestamp with time zone,timestamp with time zone),
    operator 1 <(timestamp with time zone,timestamp without time zone),
    operator 1 <(timestamp without time zone,date),
    operator 1 <(timestamp without time zone,timestamp with time zone),
    operator 1 <(timestamp without time zone,timestamp without time zone),
    operator 2 <=(date,date),
    operator 2 <=(date,timestamp with time zone),
    operator 2 <=(date,timestamp without time zone),
    operator 2 <=(timestamp with time zone,date),
    operator 2 <=(timestamp with time zone,timestamp with time zone),
    operator 2 <=(timestamp with time zone,timestamp without time zone),
    operator 2 <=(timestamp without time zone,date),
    operator 2 <=(timestamp without time zone,timestamp with time zone),
    operator 2 <=(timestamp without time zone,timestamp without time zone),
    operator 3 =(date,date),
    operator 3 =(date,timestamp with time zone),
    operator 3 =(date,timestamp without time zone),
    operator 3 =(timestamp with time zone,date),
    operator 3 =(timestamp with time zone,timestamp with time zone),
    operator 3 =(timestamp with time zone,timestamp without time zone),
    operator 3 =(timestamp without time zone,date),
    operator 3 =(timestamp without time zone,timestamp with time zone),
    operator 3 =(timestamp without time zone,timestamp without time zone),
    operator 4 >=(date,date),
    operator 4 >=(date,timestamp with time zone),
    operator 4 >=(date,timestamp without time zone),
    operator 4 >=(timestamp with time zone,date),
    operator 4 >=(timestamp with time zone,timestamp with time zone),
    operator 4 >=(timestamp with time zone,timestamp without time zone),
    operator 4 >=(timestamp without time zone,date),
    operator 4 >=(timestamp without time zone,timestamp with time zone),
    operator 4 >=(timestamp without time zone,timestamp without time zone),
    operator 5 >(date,date),
    operator 5 >(date,timestamp with time zone),
    operator 5 >(date,timestamp without time zone),
    operator 5 >(timestamp with time zone,date),
    operator 5 >(timestamp with time zone,timestamp with time zone),
    operator 5 >(timestamp with time zone,timestamp without time zone),
    operator 5 >(timestamp without time zone,date),
    operator 5 >(timestamp without time zone,timestamp with time zone),
    operator 5 >(timestamp without time zone,timestamp without time zone),
    function 1(date, date) brin_minmax_opcinfo(internal),
    function 1(date, timestamp with time zone) brin_minmax_opcinfo(internal),
    function 1(date, timestamp without time zone) brin_minmax_opcinfo(internal),
    function 1(timestamp with time zone, date) brin_minmax_opcinfo(internal),
    function 1(timestamp with time zone, timestamp with time zone) brin_minmax_opcinfo(internal),
    function 1(timestamp with time zone, timestamp without time zone) brin_minmax_opcinfo(internal),
    function 1(timestamp without time zone, date) brin_minmax_opcinfo(internal),
    function 1(timestamp without time zone, timestamp with time zone) brin_minmax_opcinfo(internal),
    function 1(timestamp without time zone, timestamp without time zone) brin_minmax_opcinfo(internal),
    function 2(date, date) brin_minmax_add_value(internal,internal,internal,internal),
    function 2(date, timestamp with time zone) brin_minmax_add_value(internal,internal,internal,internal),
    function 2(date, timestamp without time zone) brin_minmax_add_value(internal,internal,internal,internal),
    function 2(timestamp with time zone, date) brin_minmax_add_value(internal,internal,internal,internal),
    function 2(timestamp with time zone, timestamp with time zone) brin_minmax_add_value(internal,internal,internal,internal),
    function 2(timestamp with time zone, timestamp without time zone) brin_minmax_add_value(internal,internal,internal,internal),
    function 2(timestamp without time zone, date) brin_minmax_add_value(internal,internal,internal,internal),
    function 2(timestamp without time zone, timestamp with time zone) brin_minmax_add_value(internal,internal,internal,internal),
    function 2(timestamp without time zone, timestamp without time zone) brin_minmax_add_value(internal,internal,internal,internal),
    function 3(date, date) brin_minmax_consistent(internal,internal,internal),
    function 3(date, timestamp with time zone) brin_minmax_consistent(internal,internal,internal),
    function 3(date, timestamp without time zone) brin_minmax_consistent(internal,internal,internal),
    function 3(timestamp with time zone, date) brin_minmax_consistent(internal,internal,internal),
    function 3(timestamp with time zone, timestamp with time zone) brin_minmax_consistent(internal,internal,internal),
    function 3(timestamp with time zone, timestamp without time zone) brin_minmax_consistent(internal,internal,internal),
    function 3(timestamp without time zone, date) brin_minmax_consistent(internal,internal,internal),
    function 3(timestamp without time zone, timestamp with time zone) brin_minmax_consistent(internal,internal,internal),
    function 3(timestamp without time zone, timestamp without time zone) brin_minmax_consistent(internal,internal,internal),
    function 4(date, date) brin_minmax_union(internal,internal,internal),
    function 4(date, timestamp with time zone) brin_minmax_union(internal,internal,internal),
    function 4(date, timestamp without time zone) brin_minmax_union(internal,internal,internal),
    function 4(timestamp with time zone, date) brin_minmax_union(internal,internal,internal),
    function 4(timestamp with time zone, timestamp with time zone) brin_minmax_union(internal,internal,internal),
    function 4(timestamp with time zone, timestamp without time zone) brin_minmax_union(internal,internal,internal),
    function 4(timestamp without time zone, date) brin_minmax_union(internal,internal,internal),
    function 4(timestamp without time zone, timestamp with time zone) brin_minmax_union(internal,internal,internal),
    function 4(timestamp without time zone, timestamp without time zone) brin_minmax_union(internal,internal,internal);

create operator class pg_catalog.date_minmax_ops default for type date using brin family pg_catalog.datetime_minmax_ops as storage date;

create operator class pg_catalog.timestamp_minmax_ops default for type timestamp without time zone using brin family pg_catalog.datetime_minmax_ops as storage timestamp without time zone;

create operator class pg_catalog.timestamptz_minmax_ops default for type timestamp with time zone using brin family pg_catalog.datetime_minmax_ops as storage timestamp with time zone;

create operator family pg_catalog.datetime_ops using btree;

alter operator family pg_catalog.datetime_ops using btree add
    operator 1 <(date,date),
    operator 1 <(date,timestamp with time zone),
    operator 1 <(date,timestamp without time zone),
    operator 1 <(timestamp with time zone,date),
    operator 1 <(timestamp with time zone,timestamp with time zone),
    operator 1 <(timestamp with time zone,timestamp without time zone),
    operator 1 <(timestamp without time zone,date),
    operator 1 <(timestamp without time zone,timestamp with time zone),
    operator 1 <(timestamp without time zone,timestamp without time zone),
    operator 2 <=(date,date),
    operator 2 <=(date,timestamp with time zone),
    operator 2 <=(date,timestamp without time zone),
    operator 2 <=(timestamp with time zone,date),
    operator 2 <=(timestamp with time zone,timestamp with time zone),
    operator 2 <=(timestamp with time zone,timestamp without time zone),
    operator 2 <=(timestamp without time zone,date),
    operator 2 <=(timestamp without time zone,timestamp with time zone),
    operator 2 <=(timestamp without time zone,timestamp without time zone),
    operator 3 =(date,date),
    operator 3 =(date,timestamp with time zone),
    operator 3 =(date,timestamp without time zone),
    operator 3 =(timestamp with time zone,date),
    operator 3 =(timestamp with time zone,timestamp with time zone),
    operator 3 =(timestamp with time zone,timestamp without time zone),
    operator 3 =(timestamp without time zone,date),
    operator 3 =(timestamp without time zone,timestamp with time zone),
    operator 3 =(timestamp without time zone,timestamp without time zone),
    operator 4 >=(date,date),
    operator 4 >=(date,timestamp with time zone),
    operator 4 >=(date,timestamp without time zone),
    operator 4 >=(timestamp with time zone,date),
    operator 4 >=(timestamp with time zone,timestamp with time zone),
    operator 4 >=(timestamp with time zone,timestamp without time zone),
    operator 4 >=(timestamp without time zone,date),
    operator 4 >=(timestamp without time zone,timestamp with time zone),
    operator 4 >=(timestamp without time zone,timestamp without time zone),
    operator 5 >(date,date),
    operator 5 >(date,timestamp with time zone),
    operator 5 >(date,timestamp without time zone),
    operator 5 >(timestamp with time zone,date),
    operator 5 >(timestamp with time zone,timestamp with time zone),
    operator 5 >(timestamp with time zone,timestamp without time zone),
    operator 5 >(timestamp without time zone,date),
    operator 5 >(timestamp without time zone,timestamp with time zone),
    operator 5 >(timestamp without time zone,timestamp without time zone),
    function 1(date, date) date_cmp(date,date),
    function 1(date, timestamp with time zone) date_cmp_timestamptz(date,timestamp with time zone),
    function 1(date, timestamp without time zone) date_cmp_timestamp(date,timestamp without time zone),
    function 1(timestamp with time zone, date) timestamptz_cmp_date(timestamp with time zone,date),
    function 1(timestamp with time zone, timestamp with time zone) timestamptz_cmp(timestamp with time zone,timestamp with time zone),
    function 1(timestamp with time zone, timestamp without time zone) timestamptz_cmp_timestamp(timestamp with time zone,timestamp without time zone),
    function 1(timestamp without time zone, date) timestamp_cmp_date(timestamp without time zone,date),
    function 1(timestamp without time zone, timestamp with time zone) timestamp_cmp_timestamptz(timestamp without time zone,timestamp with time zone),
    function 1(timestamp without time zone, timestamp without time zone) timestamp_cmp(timestamp without time zone,timestamp without time zone),
    function 2(date, date) date_sortsupport(internal),
    function 2(timestamp with time zone, timestamp with time zone) timestamp_sortsupport(internal),
    function 2(timestamp without time zone, timestamp without time zone) timestamp_sortsupport(internal),
    function 3(date, interval) in_range(date,date,interval,boolean,boolean),
    function 3(timestamp with time zone, interval) in_range(timestamp with time zone,timestamp with time zone,interval,boolean,boolean),
    function 3(timestamp without time zone, interval) in_range(timestamp without time zone,timestamp without time zone,interval,boolean,boolean);

create operator class pg_catalog.date_ops default for type date using btree family pg_catalog.datetime_ops as;

create operator class pg_catalog.timestamp_ops default for type timestamp without time zone using btree family pg_catalog.datetime_ops as;

create operator class pg_catalog.timestamptz_ops default for type timestamp with time zone using btree family pg_catalog.datetime_ops as;

create operator family pg_catalog.enum_ops using btree;

alter operator family pg_catalog.enum_ops using btree add
    operator 1 <(anyenum,anyenum),
    operator 2 <=(anyenum,anyenum),
    operator 3 =(anyenum,anyenum),
    operator 4 >=(anyenum,anyenum),
    operator 5 >(anyenum,anyenum),
    function 1(anyenum, anyenum) enum_cmp(anyenum,anyenum);

create operator class pg_catalog.enum_ops default for type anyenum using btree as;

create operator class pg_catalog.enum_ops default for type anyenum using hash as;

create operator family pg_catalog.enum_ops using hash;

alter operator family pg_catalog.enum_ops using hash add
    operator 1 =(anyenum,anyenum),
    function 1(anyenum, anyenum) hashenum(anyenum),
    function 2(anyenum, anyenum) hashenumextended(anyenum,bigint);

create operator family pg_catalog.float_minmax_ops using brin;

alter operator family pg_catalog.float_minmax_ops using brin add
    operator 1 <(double precision,double precision),
    operator 1 <(double precision,real),
    operator 1 <(real,double precision),
    operator 1 <(real,real),
    operator 2 <=(double precision,double precision),
    operator 2 <=(double precision,real),
    operator 2 <=(real,double precision),
    operator 2 <=(real,real),
    operator 3 =(double precision,double precision),
    operator 3 =(double precision,real),
    operator 3 =(real,double precision),
    operator 3 =(real,real),
    operator 4 >=(double precision,double precision),
    operator 4 >=(double precision,real),
    operator 4 >=(real,double precision),
    operator 4 >=(real,real),
    operator 5 >(double precision,double precision),
    operator 5 >(double precision,real),
    operator 5 >(real,double precision),
    operator 5 >(real,real),
    function 1(double precision, double precision) brin_minmax_opcinfo(internal),
    function 1(double precision, real) brin_minmax_opcinfo(internal),
    function 1(real, double precision) brin_minmax_opcinfo(internal),
    function 1(real, real) brin_minmax_opcinfo(internal),
    function 2(double precision, double precision) brin_minmax_add_value(internal,internal,internal,internal),
    function 2(double precision, real) brin_minmax_add_value(internal,internal,internal,internal),
    function 2(real, double precision) brin_minmax_add_value(internal,internal,internal,internal),
    function 2(real, real) brin_minmax_add_value(internal,internal,internal,internal),
    function 3(double precision, double precision) brin_minmax_consistent(internal,internal,internal),
    function 3(double precision, real) brin_minmax_consistent(internal,internal,internal),
    function 3(real, double precision) brin_minmax_consistent(internal,internal,internal),
    function 3(real, real) brin_minmax_consistent(internal,internal,internal),
    function 4(double precision, double precision) brin_minmax_union(internal,internal,internal),
    function 4(double precision, real) brin_minmax_union(internal,internal,internal),
    function 4(real, double precision) brin_minmax_union(internal,internal,internal),
    function 4(real, real) brin_minmax_union(internal,internal,internal);

create operator class pg_catalog.float4_minmax_ops default for type real using brin family pg_catalog.float_minmax_ops as storage real;

create operator class pg_catalog.float8_minmax_ops default for type double precision using brin family pg_catalog.float_minmax_ops as storage double precision;

create operator family pg_catalog.float_ops using btree;

alter operator family pg_catalog.float_ops using btree add
    operator 1 <(double precision,double precision),
    operator 1 <(double precision,real),
    operator 1 <(real,double precision),
    operator 1 <(real,real),
    operator 2 <=(double precision,double precision),
    operator 2 <=(double precision,real),
    operator 2 <=(real,double precision),
    operator 2 <=(real,real),
    operator 3 =(double precision,double precision),
    operator 3 =(double precision,real),
    operator 3 =(real,double precision),
    operator 3 =(real,real),
    operator 4 >=(double precision,double precision),
    operator 4 >=(double precision,real),
    operator 4 >=(real,double precision),
    operator 4 >=(real,real),
    operator 5 >(double precision,double precision),
    operator 5 >(double precision,real),
    operator 5 >(real,double precision),
    operator 5 >(real,real),
    function 1(double precision, double precision) btfloat8cmp(double precision,double precision),
    function 1(double precision, real) btfloat84cmp(double precision,real),
    function 1(real, double precision) btfloat48cmp(real,double precision),
    function 1(real, real) btfloat4cmp(real,real),
    function 2(double precision, double precision) btfloat8sortsupport(internal),
    function 2(real, real) btfloat4sortsupport(internal),
    function 3(double precision, double precision) in_range(double precision,double precision,double precision,boolean,boolean),
    function 3(real, double precision) in_range(real,real,double precision,boolean,boolean);

create operator class pg_catalog.float4_ops default for type real using btree family pg_catalog.float_ops as;

create operator class pg_catalog.float4_ops default for type real using hash family pg_catalog.float_ops as;

create operator class pg_catalog.float8_ops default for type double precision using btree family pg_catalog.float_ops as;

create operator class pg_catalog.float8_ops default for type double precision using hash family pg_catalog.float_ops as;

create operator family pg_catalog.float_ops using hash;

alter operator family pg_catalog.float_ops using hash add
    operator 1 =(double precision,double precision),
    operator 1 =(double precision,real),
    operator 1 =(real,double precision),
    operator 1 =(real,real),
    function 1(double precision, double precision) hashfloat8(double precision),
    function 1(real, real) hashfloat4(real),
    function 2(double precision, double precision) hashfloat8extended(double precision,bigint),
    function 2(real, real) hashfloat4extended(real,bigint);

create operator family pg_catalog.integer_minmax_ops using brin;

alter operator family pg_catalog.integer_minmax_ops using brin add
    operator 1 <(bigint,bigint),
    operator 1 <(bigint,integer),
    operator 1 <(bigint,smallint),
    operator 1 <(integer,bigint),
    operator 1 <(integer,integer),
    operator 1 <(integer,smallint),
    operator 1 <(smallint,bigint),
    operator 1 <(smallint,integer),
    operator 1 <(smallint,smallint),
    operator 2 <=(bigint,bigint),
    operator 2 <=(bigint,integer),
    operator 2 <=(bigint,smallint),
    operator 2 <=(integer,bigint),
    operator 2 <=(integer,integer),
    operator 2 <=(integer,smallint),
    operator 2 <=(smallint,bigint),
    operator 2 <=(smallint,integer),
    operator 2 <=(smallint,smallint),
    operator 3 =(bigint,bigint),
    operator 3 =(bigint,integer),
    operator 3 =(bigint,smallint),
    operator 3 =(integer,bigint),
    operator 3 =(integer,integer),
    operator 3 =(integer,smallint),
    operator 3 =(smallint,bigint),
    operator 3 =(smallint,integer),
    operator 3 =(smallint,smallint),
    operator 4 >=(bigint,bigint),
    operator 4 >=(bigint,integer),
    operator 4 >=(bigint,smallint),
    operator 4 >=(integer,bigint),
    operator 4 >=(integer,integer),
    operator 4 >=(integer,smallint),
    operator 4 >=(smallint,bigint),
    operator 4 >=(smallint,integer),
    operator 4 >=(smallint,smallint),
    operator 5 >(bigint,bigint),
    operator 5 >(bigint,integer),
    operator 5 >(bigint,smallint),
    operator 5 >(integer,bigint),
    operator 5 >(integer,integer),
    operator 5 >(integer,smallint),
    operator 5 >(smallint,bigint),
    operator 5 >(smallint,integer),
    operator 5 >(smallint,smallint),
    function 1(bigint, bigint) brin_minmax_opcinfo(internal),
    function 1(bigint, integer) brin_minmax_opcinfo(internal),
    function 1(bigint, smallint) brin_minmax_opcinfo(internal),
    function 1(integer, bigint) brin_minmax_opcinfo(internal),
    function 1(integer, integer) brin_minmax_opcinfo(internal),
    function 1(integer, smallint) brin_minmax_opcinfo(internal),
    function 1(smallint, bigint) brin_minmax_opcinfo(internal),
    function 1(smallint, integer) brin_minmax_opcinfo(internal),
    function 1(smallint, smallint) brin_minmax_opcinfo(internal),
    function 2(bigint, bigint) brin_minmax_add_value(internal,internal,internal,internal),
    function 2(bigint, integer) brin_minmax_add_value(internal,internal,internal,internal),
    function 2(bigint, smallint) brin_minmax_add_value(internal,internal,internal,internal),
    function 2(integer, bigint) brin_minmax_add_value(internal,internal,internal,internal),
    function 2(integer, integer) brin_minmax_add_value(internal,internal,internal,internal),
    function 2(integer, smallint) brin_minmax_add_value(internal,internal,internal,internal),
    function 2(smallint, bigint) brin_minmax_add_value(internal,internal,internal,internal),
    function 2(smallint, integer) brin_minmax_add_value(internal,internal,internal,internal),
    function 2(smallint, smallint) brin_minmax_add_value(internal,internal,internal,internal),
    function 3(bigint, bigint) brin_minmax_consistent(internal,internal,internal),
    function 3(bigint, integer) brin_minmax_consistent(internal,internal,internal),
    function 3(bigint, smallint) brin_minmax_consistent(internal,internal,internal),
    function 3(integer, bigint) brin_minmax_consistent(internal,internal,internal),
    function 3(integer, integer) brin_minmax_consistent(internal,internal,internal),
    function 3(integer, smallint) brin_minmax_consistent(internal,internal,internal),
    function 3(smallint, bigint) brin_minmax_consistent(internal,internal,internal),
    function 3(smallint, integer) brin_minmax_consistent(internal,internal,internal),
    function 3(smallint, smallint) brin_minmax_consistent(internal,internal,internal),
    function 4(bigint, bigint) brin_minmax_union(internal,internal,internal),
    function 4(bigint, integer) brin_minmax_union(internal,internal,internal),
    function 4(bigint, smallint) brin_minmax_union(internal,internal,internal),
    function 4(integer, bigint) brin_minmax_union(internal,internal,internal),
    function 4(integer, integer) brin_minmax_union(internal,internal,internal),
    function 4(integer, smallint) brin_minmax_union(internal,internal,internal),
    function 4(smallint, bigint) brin_minmax_union(internal,internal,internal),
    function 4(smallint, integer) brin_minmax_union(internal,internal,internal),
    function 4(smallint, smallint) brin_minmax_union(internal,internal,internal);

create operator class pg_catalog.int2_minmax_ops default for type smallint using brin family pg_catalog.integer_minmax_ops as storage smallint;

create operator class pg_catalog.int4_minmax_ops default for type integer using brin family pg_catalog.integer_minmax_ops as storage integer;

create operator class pg_catalog.int8_minmax_ops default for type bigint using brin family pg_catalog.integer_minmax_ops as storage bigint;

create operator family pg_catalog.integer_ops using btree;

alter operator family pg_catalog.integer_ops using btree add
    operator 1 <(bigint,bigint),
    operator 1 <(bigint,integer),
    operator 1 <(bigint,smallint),
    operator 1 <(integer,bigint),
    operator 1 <(integer,integer),
    operator 1 <(integer,smallint),
    operator 1 <(smallint,bigint),
    operator 1 <(smallint,integer),
    operator 1 <(smallint,smallint),
    operator 2 <=(bigint,bigint),
    operator 2 <=(bigint,integer),
    operator 2 <=(bigint,smallint),
    operator 2 <=(integer,bigint),
    operator 2 <=(integer,integer),
    operator 2 <=(integer,smallint),
    operator 2 <=(smallint,bigint),
    operator 2 <=(smallint,integer),
    operator 2 <=(smallint,smallint),
    operator 3 =(bigint,bigint),
    operator 3 =(bigint,integer),
    operator 3 =(bigint,smallint),
    operator 3 =(integer,bigint),
    operator 3 =(integer,integer),
    operator 3 =(integer,smallint),
    operator 3 =(smallint,bigint),
    operator 3 =(smallint,integer),
    operator 3 =(smallint,smallint),
    operator 4 >=(bigint,bigint),
    operator 4 >=(bigint,integer),
    operator 4 >=(bigint,smallint),
    operator 4 >=(integer,bigint),
    operator 4 >=(integer,integer),
    operator 4 >=(integer,smallint),
    operator 4 >=(smallint,bigint),
    operator 4 >=(smallint,integer),
    operator 4 >=(smallint,smallint),
    operator 5 >(bigint,bigint),
    operator 5 >(bigint,integer),
    operator 5 >(bigint,smallint),
    operator 5 >(integer,bigint),
    operator 5 >(integer,integer),
    operator 5 >(integer,smallint),
    operator 5 >(smallint,bigint),
    operator 5 >(smallint,integer),
    operator 5 >(smallint,smallint),
    function 1(bigint, bigint) btint8cmp(bigint,bigint),
    function 1(bigint, integer) btint84cmp(bigint,integer),
    function 1(bigint, smallint) btint82cmp(bigint,smallint),
    function 1(integer, bigint) btint48cmp(integer,bigint),
    function 1(integer, integer) btint4cmp(integer,integer),
    function 1(integer, smallint) btint42cmp(integer,smallint),
    function 1(smallint, bigint) btint28cmp(smallint,bigint),
    function 1(smallint, integer) btint24cmp(smallint,integer),
    function 1(smallint, smallint) btint2cmp(smallint,smallint),
    function 2(bigint, bigint) btint8sortsupport(internal),
    function 2(integer, integer) btint4sortsupport(internal),
    function 2(smallint, smallint) btint2sortsupport(internal),
    function 3(bigint, bigint) in_range(bigint,bigint,bigint,boolean,boolean),
    function 3(integer, bigint) in_range(integer,integer,bigint,boolean,boolean),
    function 3(integer, integer) in_range(integer,integer,integer,boolean,boolean),
    function 3(integer, smallint) in_range(integer,integer,smallint,boolean,boolean),
    function 3(smallint, bigint) in_range(smallint,smallint,bigint,boolean,boolean),
    function 3(smallint, integer) in_range(smallint,smallint,integer,boolean,boolean),
    function 3(smallint, smallint) in_range(smallint,smallint,smallint,boolean,boolean);

create operator class pg_catalog.int2_ops default for type smallint using btree family pg_catalog.integer_ops as;

create operator class pg_catalog.int2_ops default for type smallint using hash family pg_catalog.integer_ops as;

create operator class pg_catalog.int4_ops default for type integer using btree family pg_catalog.integer_ops as;

create operator class pg_catalog.int4_ops default for type integer using hash family pg_catalog.integer_ops as;

create operator class pg_catalog.int8_ops default for type bigint using btree family pg_catalog.integer_ops as;

create operator class pg_catalog.int8_ops default for type bigint using hash family pg_catalog.integer_ops as;

create operator family pg_catalog.integer_ops using hash;

alter operator family pg_catalog.integer_ops using hash add
    operator 1 =(bigint,bigint),
    operator 1 =(bigint,integer),
    operator 1 =(bigint,smallint),
    operator 1 =(integer,bigint),
    operator 1 =(integer,integer),
    operator 1 =(integer,smallint),
    operator 1 =(smallint,bigint),
    operator 1 =(smallint,integer),
    operator 1 =(smallint,smallint),
    function 1(bigint, bigint) hashint8(bigint),
    function 1(integer, integer) hashint4(integer),
    function 1(smallint, smallint) hashint2(smallint),
    function 2(bigint, bigint) hashint8extended(bigint,bigint),
    function 2(integer, integer) hashint4extended(integer,bigint),
    function 2(smallint, smallint) hashint2extended(smallint,bigint);

create operator family pg_catalog.interval_minmax_ops using brin;

alter operator family pg_catalog.interval_minmax_ops using brin add
    operator 1 <(interval,interval),
    operator 2 <=(interval,interval),
    operator 3 =(interval,interval),
    operator 4 >=(interval,interval),
    operator 5 >(interval,interval),
    function 1(interval, interval) brin_minmax_opcinfo(internal),
    function 2(interval, interval) brin_minmax_add_value(internal,internal,internal,internal),
    function 3(interval, interval) brin_minmax_consistent(internal,internal,internal),
    function 4(interval, interval) brin_minmax_union(internal,internal,internal);

create operator class pg_catalog.interval_minmax_ops default for type interval using brin as storage interval;

create operator family pg_catalog.interval_ops using btree;

alter operator family pg_catalog.interval_ops using btree add
    operator 1 <(interval,interval),
    operator 2 <=(interval,interval),
    operator 3 =(interval,interval),
    operator 4 >=(interval,interval),
    operator 5 >(interval,interval),
    function 1(interval, interval) interval_cmp(interval,interval),
    function 3(interval, interval) in_range(interval,interval,interval,boolean,boolean);

create operator class pg_catalog.interval_ops default for type interval using btree as;

create operator class pg_catalog.interval_ops default for type interval using hash as;

create operator family pg_catalog.interval_ops using hash;

alter operator family pg_catalog.interval_ops using hash add
    operator 1 =(interval,interval),
    function 1(interval, interval) interval_hash(interval),
    function 2(interval, interval) interval_hash_extended(interval,bigint);

create operator family pg_catalog.jsonb_ops using btree;

alter operator family pg_catalog.jsonb_ops using btree add
    operator 1 <(jsonb,jsonb),
    operator 2 <=(jsonb,jsonb),
    operator 3 =(jsonb,jsonb),
    operator 4 >=(jsonb,jsonb),
    operator 5 >(jsonb,jsonb),
    function 1(jsonb, jsonb) jsonb_cmp(jsonb,jsonb);

create operator class pg_catalog.jsonb_ops default for type jsonb using btree as;

create operator class pg_catalog.jsonb_ops default for type jsonb using gin as storage text;

create operator class pg_catalog.jsonb_ops default for type jsonb using hash as;

create operator family pg_catalog.jsonb_ops using gin;

alter operator family pg_catalog.jsonb_ops using gin add
    operator 10 ?|(jsonb,text[]),
    operator 11 ?&(jsonb,text[]),
    operator 15 @?(jsonb,jsonpath),
    operator 16 @@(jsonb,jsonpath),
    operator 7 @>(jsonb,jsonb),
    operator 9 ?(jsonb,text),
    function 1(jsonb, jsonb) gin_compare_jsonb(text,text),
    function 2(jsonb, jsonb) gin_extract_jsonb(jsonb,internal,internal),
    function 3(jsonb, jsonb) gin_extract_jsonb_query(jsonb,internal,smallint,internal,internal,internal,internal),
    function 4(jsonb, jsonb) gin_consistent_jsonb(internal,smallint,jsonb,integer,internal,internal,internal,internal),
    function 6(jsonb, jsonb) gin_triconsistent_jsonb(internal,smallint,jsonb,integer,internal,internal,internal);

create operator family pg_catalog.jsonb_ops using hash;

alter operator family pg_catalog.jsonb_ops using hash add
    operator 1 =(jsonb,jsonb),
    function 1(jsonb, jsonb) jsonb_hash(jsonb),
    function 2(jsonb, jsonb) jsonb_hash_extended(jsonb,bigint);

create operator family pg_catalog.jsonb_path_ops using gin;

alter operator family pg_catalog.jsonb_path_ops using gin add
    operator 15 @?(jsonb,jsonpath),
    operator 16 @@(jsonb,jsonpath),
    operator 7 @>(jsonb,jsonb),
    function 1(jsonb, jsonb) btint4cmp(integer,integer),
    function 2(jsonb, jsonb) gin_extract_jsonb_path(jsonb,internal,internal),
    function 3(jsonb, jsonb) gin_extract_jsonb_query_path(jsonb,internal,smallint,internal,internal,internal,internal),
    function 4(jsonb, jsonb) gin_consistent_jsonb_path(internal,smallint,jsonb,integer,internal,internal,internal,internal),
    function 6(jsonb, jsonb) gin_triconsistent_jsonb_path(internal,smallint,jsonb,integer,internal,internal,internal);

create operator class pg_catalog.jsonb_path_ops for type jsonb using gin as storage integer;

create operator family pg_catalog.kd_point_ops using spgist;

alter operator family pg_catalog.kd_point_ops using spgist add
    operator 10 <^(point,point),
    operator 11 >^(point,point),
    operator 15 <->(point,point),
    operator 1 <<(point,point),
    operator 5 >>(point,point),
    operator 6 ~=(point,point),
    operator 8 <@(point,box),
    function 1(point, point) spg_kd_config(internal,internal),
    function 2(point, point) spg_kd_choose(internal,internal),
    function 3(point, point) spg_kd_picksplit(internal,internal),
    function 4(point, point) spg_kd_inner_consistent(internal,internal),
    function 5(point, point) spg_quad_leaf_consistent(internal,internal);

create operator class pg_catalog.kd_point_ops for type point using spgist as;

create operator family pg_catalog.macaddr8_minmax_ops using brin;

alter operator family pg_catalog.macaddr8_minmax_ops using brin add
    operator 1 <(macaddr8,macaddr8),
    operator 2 <=(macaddr8,macaddr8),
    operator 3 =(macaddr8,macaddr8),
    operator 4 >=(macaddr8,macaddr8),
    operator 5 >(macaddr8,macaddr8),
    function 1(macaddr8, macaddr8) brin_minmax_opcinfo(internal),
    function 2(macaddr8, macaddr8) brin_minmax_add_value(internal,internal,internal,internal),
    function 3(macaddr8, macaddr8) brin_minmax_consistent(internal,internal,internal),
    function 4(macaddr8, macaddr8) brin_minmax_union(internal,internal,internal);

create operator class pg_catalog.macaddr8_minmax_ops default for type macaddr8 using brin as storage macaddr8;

create operator family pg_catalog.macaddr8_ops using btree;

alter operator family pg_catalog.macaddr8_ops using btree add
    operator 1 <(macaddr8,macaddr8),
    operator 2 <=(macaddr8,macaddr8),
    operator 3 =(macaddr8,macaddr8),
    operator 4 >=(macaddr8,macaddr8),
    operator 5 >(macaddr8,macaddr8),
    function 1(macaddr8, macaddr8) macaddr8_cmp(macaddr8,macaddr8);

create operator class pg_catalog.macaddr8_ops default for type macaddr8 using btree as;

create operator class pg_catalog.macaddr8_ops default for type macaddr8 using hash as;

create operator family pg_catalog.macaddr8_ops using hash;

alter operator family pg_catalog.macaddr8_ops using hash add
    operator 1 =(macaddr8,macaddr8),
    function 1(macaddr8, macaddr8) hashmacaddr8(macaddr8),
    function 2(macaddr8, macaddr8) hashmacaddr8extended(macaddr8,bigint);

create operator family pg_catalog.macaddr_minmax_ops using brin;

alter operator family pg_catalog.macaddr_minmax_ops using brin add
    operator 1 <(macaddr,macaddr),
    operator 2 <=(macaddr,macaddr),
    operator 3 =(macaddr,macaddr),
    operator 4 >=(macaddr,macaddr),
    operator 5 >(macaddr,macaddr),
    function 1(macaddr, macaddr) brin_minmax_opcinfo(internal),
    function 2(macaddr, macaddr) brin_minmax_add_value(internal,internal,internal,internal),
    function 3(macaddr, macaddr) brin_minmax_consistent(internal,internal,internal),
    function 4(macaddr, macaddr) brin_minmax_union(internal,internal,internal);

create operator class pg_catalog.macaddr_minmax_ops default for type macaddr using brin as storage macaddr;

create operator family pg_catalog.macaddr_ops using btree;

alter operator family pg_catalog.macaddr_ops using btree add
    operator 1 <(macaddr,macaddr),
    operator 2 <=(macaddr,macaddr),
    operator 3 =(macaddr,macaddr),
    operator 4 >=(macaddr,macaddr),
    operator 5 >(macaddr,macaddr),
    function 1(macaddr, macaddr) macaddr_cmp(macaddr,macaddr),
    function 2(macaddr, macaddr) macaddr_sortsupport(internal);

create operator class pg_catalog.macaddr_ops default for type macaddr using btree as;

create operator class pg_catalog.macaddr_ops default for type macaddr using hash as;

create operator family pg_catalog.macaddr_ops using hash;

alter operator family pg_catalog.macaddr_ops using hash add
    operator 1 =(macaddr,macaddr),
    function 1(macaddr, macaddr) hashmacaddr(macaddr),
    function 2(macaddr, macaddr) hashmacaddrextended(macaddr,bigint);

create operator family pg_catalog.money_ops using btree;

alter operator family pg_catalog.money_ops using btree add
    operator 1 <(money,money),
    operator 2 <=(money,money),
    operator 3 =(money,money),
    operator 4 >=(money,money),
    operator 5 >(money,money),
    function 1(money, money) cash_cmp(money,money);

create operator class pg_catalog.money_ops default for type money using btree as;

create operator family pg_catalog.name_minmax_ops using brin;

alter operator family pg_catalog.name_minmax_ops using brin add
    operator 1 <(name,name),
    operator 2 <=(name,name),
    operator 3 =(name,name),
    operator 4 >=(name,name),
    operator 5 >(name,name),
    function 1(name, name) brin_minmax_opcinfo(internal),
    function 2(name, name) brin_minmax_add_value(internal,internal,internal,internal),
    function 3(name, name) brin_minmax_consistent(internal,internal,internal),
    function 4(name, name) brin_minmax_union(internal,internal,internal);

create operator class pg_catalog.name_minmax_ops default for type name using brin as storage name;

create operator family pg_catalog.network_inclusion_ops using brin;

alter operator family pg_catalog.network_inclusion_ops using brin add
    operator 18 =(inet,inet),
    operator 24 >>(inet,inet),
    operator 26 <<(inet,inet),
    operator 3 &&(inet,inet),
    operator 7 >>=(inet,inet),
    operator 8 <<=(inet,inet),
    function 11(inet, inet) inet_merge(inet,inet),
    function 12(inet, inet) inet_same_family(inet,inet),
    function 13(inet, inet) network_supeq(inet,inet),
    function 1(inet, inet) brin_inclusion_opcinfo(internal),
    function 2(inet, inet) brin_inclusion_add_value(internal,internal,internal,internal),
    function 3(inet, inet) brin_inclusion_consistent(internal,internal,internal),
    function 4(inet, inet) brin_inclusion_union(internal,internal,internal);

create operator class pg_catalog.inet_inclusion_ops default for type inet using brin family pg_catalog.network_inclusion_ops as storage inet;

create operator family pg_catalog.network_minmax_ops using brin;

alter operator family pg_catalog.network_minmax_ops using brin add
    operator 1 <(inet,inet),
    operator 2 <=(inet,inet),
    operator 3 =(inet,inet),
    operator 4 >=(inet,inet),
    operator 5 >(inet,inet),
    function 1(inet, inet) brin_minmax_opcinfo(internal),
    function 2(inet, inet) brin_minmax_add_value(internal,internal,internal,internal),
    function 3(inet, inet) brin_minmax_consistent(internal,internal,internal),
    function 4(inet, inet) brin_minmax_union(internal,internal,internal);

create operator class pg_catalog.inet_minmax_ops for type inet using brin family pg_catalog.network_minmax_ops as storage inet;

create operator family pg_catalog.network_ops using btree;

alter operator family pg_catalog.network_ops using btree add
    operator 1 <(inet,inet),
    operator 2 <=(inet,inet),
    operator 3 =(inet,inet),
    operator 4 >=(inet,inet),
    operator 5 >(inet,inet),
    function 1(inet, inet) network_cmp(inet,inet);

create operator class pg_catalog.cidr_ops for type inet using btree family pg_catalog.network_ops as;

create operator class pg_catalog.cidr_ops for type inet using hash family pg_catalog.network_ops as;

create operator class pg_catalog.inet_ops default for type inet using btree family pg_catalog.network_ops as;

create operator class pg_catalog.inet_ops for type inet using gist family pg_catalog.network_ops as;

create operator class pg_catalog.inet_ops default for type inet using hash family pg_catalog.network_ops as;

create operator class pg_catalog.inet_ops default for type inet using spgist family pg_catalog.network_ops as;

create operator family pg_catalog.network_ops using gist;

alter operator family pg_catalog.network_ops using gist add
    operator 18 =(inet,inet),
    operator 19 <>(inet,inet),
    operator 20 <(inet,inet),
    operator 21 <=(inet,inet),
    operator 22 >(inet,inet),
    operator 23 >=(inet,inet),
    operator 24 <<(inet,inet),
    operator 25 <<=(inet,inet),
    operator 26 >>(inet,inet),
    operator 27 >>=(inet,inet),
    operator 3 &&(inet,inet),
    function 1(inet, inet) inet_gist_consistent(internal,inet,smallint,oid,internal),
    function 2(inet, inet) inet_gist_union(internal,internal),
    function 3(inet, inet) inet_gist_compress(internal),
    function 5(inet, inet) inet_gist_penalty(internal,internal,internal),
    function 6(inet, inet) inet_gist_picksplit(internal,internal),
    function 7(inet, inet) inet_gist_same(inet,inet,internal),
    function 9(inet, inet) inet_gist_fetch(internal);

create operator family pg_catalog.network_ops using hash;

alter operator family pg_catalog.network_ops using hash add
    operator 1 =(inet,inet),
    function 1(inet, inet) hashinet(inet),
    function 2(inet, inet) hashinetextended(inet,bigint);

create operator family pg_catalog.network_ops using spgist;

alter operator family pg_catalog.network_ops using spgist add
    operator 18 =(inet,inet),
    operator 19 <>(inet,inet),
    operator 20 <(inet,inet),
    operator 21 <=(inet,inet),
    operator 22 >(inet,inet),
    operator 23 >=(inet,inet),
    operator 24 <<(inet,inet),
    operator 25 <<=(inet,inet),
    operator 26 >>(inet,inet),
    operator 27 >>=(inet,inet),
    operator 3 &&(inet,inet),
    function 1(inet, inet) inet_spg_config(internal,internal),
    function 2(inet, inet) inet_spg_choose(internal,internal),
    function 3(inet, inet) inet_spg_picksplit(internal,internal),
    function 4(inet, inet) inet_spg_inner_consistent(internal,internal),
    function 5(inet, inet) inet_spg_leaf_consistent(internal,internal);

create operator family pg_catalog.numeric_minmax_ops using brin;

alter operator family pg_catalog.numeric_minmax_ops using brin add
    operator 1 <(numeric,numeric),
    operator 2 <=(numeric,numeric),
    operator 3 =(numeric,numeric),
    operator 4 >=(numeric,numeric),
    operator 5 >(numeric,numeric),
    function 1(numeric, numeric) brin_minmax_opcinfo(internal),
    function 2(numeric, numeric) brin_minmax_add_value(internal,internal,internal,internal),
    function 3(numeric, numeric) brin_minmax_consistent(internal,internal,internal),
    function 4(numeric, numeric) brin_minmax_union(internal,internal,internal);

create operator class pg_catalog.numeric_minmax_ops default for type numeric using brin as storage numeric;

create operator family pg_catalog.numeric_ops using btree;

alter operator family pg_catalog.numeric_ops using btree add
    operator 1 <(numeric,numeric),
    operator 2 <=(numeric,numeric),
    operator 3 =(numeric,numeric),
    operator 4 >=(numeric,numeric),
    operator 5 >(numeric,numeric),
    function 1(numeric, numeric) numeric_cmp(numeric,numeric),
    function 2(numeric, numeric) numeric_sortsupport(internal),
    function 3(numeric, numeric) in_range(numeric,numeric,numeric,boolean,boolean);

create operator class pg_catalog.numeric_ops default for type numeric using btree as;

create operator class pg_catalog.numeric_ops default for type numeric using hash as;

create operator family pg_catalog.numeric_ops using hash;

alter operator family pg_catalog.numeric_ops using hash add
    operator 1 =(numeric,numeric),
    function 1(numeric, numeric) hash_numeric(numeric),
    function 2(numeric, numeric) hash_numeric_extended(numeric,bigint);

create operator family pg_catalog.oid_minmax_ops using brin;

alter operator family pg_catalog.oid_minmax_ops using brin add
    operator 1 <(oid,oid),
    operator 2 <=(oid,oid),
    operator 3 =(oid,oid),
    operator 4 >=(oid,oid),
    operator 5 >(oid,oid),
    function 1(oid, oid) brin_minmax_opcinfo(internal),
    function 2(oid, oid) brin_minmax_add_value(internal,internal,internal,internal),
    function 3(oid, oid) brin_minmax_consistent(internal,internal,internal),
    function 4(oid, oid) brin_minmax_union(internal,internal,internal);

create operator class pg_catalog.oid_minmax_ops default for type oid using brin as storage oid;

create operator family pg_catalog.oid_ops using btree;

alter operator family pg_catalog.oid_ops using btree add
    operator 1 <(oid,oid),
    operator 2 <=(oid,oid),
    operator 3 =(oid,oid),
    operator 4 >=(oid,oid),
    operator 5 >(oid,oid),
    function 1(oid, oid) btoidcmp(oid,oid),
    function 2(oid, oid) btoidsortsupport(internal);

create operator class pg_catalog.oid_ops default for type oid using btree as;

create operator class pg_catalog.oid_ops default for type oid using hash as;

create operator family pg_catalog.oid_ops using hash;

alter operator family pg_catalog.oid_ops using hash add
    operator 1 =(oid,oid),
    function 1(oid, oid) hashoid(oid),
    function 2(oid, oid) hashoidextended(oid,bigint);

create operator family pg_catalog.oidvector_ops using btree;

alter operator family pg_catalog.oidvector_ops using btree add
    operator 1 <(oidvector,oidvector),
    operator 2 <=(oidvector,oidvector),
    operator 3 =(oidvector,oidvector),
    operator 4 >=(oidvector,oidvector),
    operator 5 >(oidvector,oidvector),
    function 1(oidvector, oidvector) btoidvectorcmp(oidvector,oidvector);

create operator class pg_catalog.oidvector_ops default for type oidvector using btree as;

create operator class pg_catalog.oidvector_ops default for type oidvector using hash as;

create operator family pg_catalog.oidvector_ops using hash;

alter operator family pg_catalog.oidvector_ops using hash add
    operator 1 =(oidvector,oidvector),
    function 1(oidvector, oidvector) hashoidvector(oidvector),
    function 2(oidvector, oidvector) hashoidvectorextended(oidvector,bigint);

create operator family pg_catalog.pg_lsn_minmax_ops using brin;

alter operator family pg_catalog.pg_lsn_minmax_ops using brin add
    operator 1 <(pg_lsn,pg_lsn),
    operator 2 <=(pg_lsn,pg_lsn),
    operator 3 =(pg_lsn,pg_lsn),
    operator 4 >=(pg_lsn,pg_lsn),
    operator 5 >(pg_lsn,pg_lsn),
    function 1(pg_lsn, pg_lsn) brin_minmax_opcinfo(internal),
    function 2(pg_lsn, pg_lsn) brin_minmax_add_value(internal,internal,internal,internal),
    function 3(pg_lsn, pg_lsn) brin_minmax_consistent(internal,internal,internal),
    function 4(pg_lsn, pg_lsn) brin_minmax_union(internal,internal,internal);

create operator class pg_catalog.pg_lsn_minmax_ops default for type pg_lsn using brin as storage pg_lsn;

create operator family pg_catalog.pg_lsn_ops using btree;

alter operator family pg_catalog.pg_lsn_ops using btree add
    operator 1 <(pg_lsn,pg_lsn),
    operator 2 <=(pg_lsn,pg_lsn),
    operator 3 =(pg_lsn,pg_lsn),
    operator 4 >=(pg_lsn,pg_lsn),
    operator 5 >(pg_lsn,pg_lsn),
    function 1(pg_lsn, pg_lsn) pg_lsn_cmp(pg_lsn,pg_lsn);

create operator class pg_catalog.pg_lsn_ops default for type pg_lsn using btree as;

create operator class pg_catalog.pg_lsn_ops default for type pg_lsn using hash as;

create operator family pg_catalog.pg_lsn_ops using hash;

alter operator family pg_catalog.pg_lsn_ops using hash add
    operator 1 =(pg_lsn,pg_lsn),
    function 1(pg_lsn, pg_lsn) pg_lsn_hash(pg_lsn),
    function 2(pg_lsn, pg_lsn) pg_lsn_hash_extended(pg_lsn,bigint);

create operator family pg_catalog.point_ops using gist;

alter operator family pg_catalog.point_ops using gist add
    operator 10 <^(point,point),
    operator 11 >^(point,point),
    operator 15 <->(point,point),
    operator 1 <<(point,point),
    operator 28 <@(point,box),
    operator 48 <@(point,polygon),
    operator 5 >>(point,point),
    operator 68 <@(point,circle),
    operator 6 ~=(point,point),
    function 1(point, point) gist_point_consistent(internal,point,smallint,oid,internal),
    function 2(point, point) gist_box_union(internal,internal),
    function 3(point, point) gist_point_compress(internal),
    function 5(point, point) gist_box_penalty(internal,internal,internal),
    function 6(point, point) gist_box_picksplit(internal,internal),
    function 7(point, point) gist_box_same(box,box,internal),
    function 8(point, point) gist_point_distance(internal,point,smallint,oid,internal),
    function 9(point, point) gist_point_fetch(internal);

create operator class pg_catalog.point_ops default for type point using gist as storage box;

create operator family pg_catalog.poly_ops using gist;

alter operator family pg_catalog.poly_ops using gist add
    operator 10 <<|(polygon,polygon),
    operator 11 |>>(polygon,polygon),
    operator 12 |&>(polygon,polygon),
    operator 13 ~(polygon,polygon),
    operator 14 @(polygon,polygon),
    operator 15 <->(polygon,point),
    operator 1 <<(polygon,polygon),
    operator 2 &<(polygon,polygon),
    operator 3 &&(polygon,polygon),
    operator 4 &>(polygon,polygon),
    operator 5 >>(polygon,polygon),
    operator 6 ~=(polygon,polygon),
    operator 7 @>(polygon,polygon),
    operator 8 <@(polygon,polygon),
    operator 9 &<|(polygon,polygon),
    function 1(polygon, polygon) gist_poly_consistent(internal,polygon,smallint,oid,internal),
    function 2(polygon, polygon) gist_box_union(internal,internal),
    function 3(polygon, polygon) gist_poly_compress(internal),
    function 5(polygon, polygon) gist_box_penalty(internal,internal,internal),
    function 6(polygon, polygon) gist_box_picksplit(internal,internal),
    function 7(polygon, polygon) gist_box_same(box,box,internal),
    function 8(polygon, polygon) gist_poly_distance(internal,polygon,smallint,oid,internal);

create operator class pg_catalog.poly_ops default for type polygon using gist as storage box;

create operator class pg_catalog.poly_ops default for type polygon using spgist as storage box;

create operator family pg_catalog.poly_ops using spgist;

alter operator family pg_catalog.poly_ops using spgist add
    operator 10 <<|(polygon,polygon),
    operator 11 |>>(polygon,polygon),
    operator 12 |&>(polygon,polygon),
    operator 15 <->(polygon,point),
    operator 1 <<(polygon,polygon),
    operator 2 &<(polygon,polygon),
    operator 3 &&(polygon,polygon),
    operator 4 &>(polygon,polygon),
    operator 5 >>(polygon,polygon),
    operator 6 ~=(polygon,polygon),
    operator 7 @>(polygon,polygon),
    operator 8 <@(polygon,polygon),
    operator 9 &<|(polygon,polygon),
    function 1(polygon, polygon) spg_bbox_quad_config(internal,internal),
    function 2(polygon, polygon) spg_box_quad_choose(internal,internal),
    function 3(polygon, polygon) spg_box_quad_picksplit(internal,internal),
    function 4(polygon, polygon) spg_box_quad_inner_consistent(internal,internal),
    function 5(polygon, polygon) spg_box_quad_leaf_consistent(internal,internal),
    function 6(polygon, polygon) spg_poly_quad_compress(polygon);

create operator family pg_catalog.quad_point_ops using spgist;

alter operator family pg_catalog.quad_point_ops using spgist add
    operator 10 <^(point,point),
    operator 11 >^(point,point),
    operator 15 <->(point,point),
    operator 1 <<(point,point),
    operator 5 >>(point,point),
    operator 6 ~=(point,point),
    operator 8 <@(point,box),
    function 1(point, point) spg_quad_config(internal,internal),
    function 2(point, point) spg_quad_choose(internal,internal),
    function 3(point, point) spg_quad_picksplit(internal,internal),
    function 4(point, point) spg_quad_inner_consistent(internal,internal),
    function 5(point, point) spg_quad_leaf_consistent(internal,internal);

create operator class pg_catalog.quad_point_ops default for type point using spgist as;

create operator family pg_catalog.range_inclusion_ops using brin;

alter operator family pg_catalog.range_inclusion_ops using brin add
    operator 16 @>(anyrange,anyelement),
    operator 17 -|-(anyrange,anyrange),
    operator 18 =(anyrange,anyrange),
    operator 1 <<(anyrange,anyrange),
    operator 20 <(anyrange,anyrange),
    operator 21 <=(anyrange,anyrange),
    operator 22 >(anyrange,anyrange),
    operator 23 >=(anyrange,anyrange),
    operator 2 &<(anyrange,anyrange),
    operator 3 &&(anyrange,anyrange),
    operator 4 &>(anyrange,anyrange),
    operator 5 >>(anyrange,anyrange),
    operator 7 @>(anyrange,anyrange),
    operator 8 <@(anyrange,anyrange),
    function 11(anyrange, anyrange) range_merge(anyrange,anyrange),
    function 13(anyrange, anyrange) range_contains(anyrange,anyrange),
    function 14(anyrange, anyrange) isempty(anyrange),
    function 1(anyrange, anyrange) brin_inclusion_opcinfo(internal),
    function 2(anyrange, anyrange) brin_inclusion_add_value(internal,internal,internal,internal),
    function 3(anyrange, anyrange) brin_inclusion_consistent(internal,internal,internal),
    function 4(anyrange, anyrange) brin_inclusion_union(internal,internal,internal);

create operator class pg_catalog.range_inclusion_ops default for type anyrange using brin as storage anyrange;

create operator family pg_catalog.range_ops using btree;

alter operator family pg_catalog.range_ops using btree add
    operator 1 <(anyrange,anyrange),
    operator 2 <=(anyrange,anyrange),
    operator 3 =(anyrange,anyrange),
    operator 4 >=(anyrange,anyrange),
    operator 5 >(anyrange,anyrange),
    function 1(anyrange, anyrange) range_cmp(anyrange,anyrange);

create operator class pg_catalog.range_ops default for type anyrange using btree as;

create operator class pg_catalog.range_ops default for type anyrange using gist as;

create operator class pg_catalog.range_ops default for type anyrange using hash as;

create operator class pg_catalog.range_ops default for type anyrange using spgist as;

create operator family pg_catalog.range_ops using gist;

alter operator family pg_catalog.range_ops using gist add
    operator 16 @>(anyrange,anyelement),
    operator 18 =(anyrange,anyrange),
    operator 1 <<(anyrange,anyrange),
    operator 2 &<(anyrange,anyrange),
    operator 3 &&(anyrange,anyrange),
    operator 4 &>(anyrange,anyrange),
    operator 5 >>(anyrange,anyrange),
    operator 6 -|-(anyrange,anyrange),
    operator 7 @>(anyrange,anyrange),
    operator 8 <@(anyrange,anyrange),
    function 1(anyrange, anyrange) range_gist_consistent(internal,anyrange,smallint,oid,internal),
    function 2(anyrange, anyrange) range_gist_union(internal,internal),
    function 5(anyrange, anyrange) range_gist_penalty(internal,internal,internal),
    function 6(anyrange, anyrange) range_gist_picksplit(internal,internal),
    function 7(anyrange, anyrange) range_gist_same(anyrange,anyrange,internal);

create operator family pg_catalog.range_ops using hash;

alter operator family pg_catalog.range_ops using hash add
    operator 1 =(anyrange,anyrange),
    function 1(anyrange, anyrange) hash_range(anyrange),
    function 2(anyrange, anyrange) hash_range_extended(anyrange,bigint);

create operator family pg_catalog.range_ops using spgist;

alter operator family pg_catalog.range_ops using spgist add
    operator 16 @>(anyrange,anyelement),
    operator 18 =(anyrange,anyrange),
    operator 1 <<(anyrange,anyrange),
    operator 2 &<(anyrange,anyrange),
    operator 3 &&(anyrange,anyrange),
    operator 4 &>(anyrange,anyrange),
    operator 5 >>(anyrange,anyrange),
    operator 6 -|-(anyrange,anyrange),
    operator 7 @>(anyrange,anyrange),
    operator 8 <@(anyrange,anyrange),
    function 1(anyrange, anyrange) spg_range_quad_config(internal,internal),
    function 2(anyrange, anyrange) spg_range_quad_choose(internal,internal),
    function 3(anyrange, anyrange) spg_range_quad_picksplit(internal,internal),
    function 4(anyrange, anyrange) spg_range_quad_inner_consistent(internal,internal),
    function 5(anyrange, anyrange) spg_range_quad_leaf_consistent(internal,internal);

create operator family pg_catalog.record_image_ops using btree;

alter operator family pg_catalog.record_image_ops using btree add
    operator 1 *<(record,record),
    operator 2 *<=(record,record),
    operator 3 *=(record,record),
    operator 4 *>=(record,record),
    operator 5 *>(record,record),
    function 1(record, record) btrecordimagecmp(record,record);

create operator class pg_catalog.record_image_ops for type record using btree as;

create operator family pg_catalog.record_ops using btree;

alter operator family pg_catalog.record_ops using btree add
    operator 1 <(record,record),
    operator 2 <=(record,record),
    operator 3 =(record,record),
    operator 4 >=(record,record),
    operator 5 >(record,record),
    function 1(record, record) btrecordcmp(record,record);

create operator class pg_catalog.record_ops default for type record using btree as;

create operator family pg_catalog.text_minmax_ops using brin;

alter operator family pg_catalog.text_minmax_ops using brin add
    operator 1 <(text,text),
    operator 2 <=(text,text),
    operator 3 =(text,text),
    operator 4 >=(text,text),
    operator 5 >(text,text),
    function 1(text, text) brin_minmax_opcinfo(internal),
    function 2(text, text) brin_minmax_add_value(internal,internal,internal,internal),
    function 3(text, text) brin_minmax_consistent(internal,internal,internal),
    function 4(text, text) brin_minmax_union(internal,internal,internal);

create operator class pg_catalog.text_minmax_ops default for type text using brin as storage text;

create operator family pg_catalog.text_ops using btree;

alter operator family pg_catalog.text_ops using btree add
    operator 1 <(name,name),
    operator 1 <(name,text),
    operator 1 <(text,name),
    operator 1 <(text,text),
    operator 2 <=(name,name),
    operator 2 <=(name,text),
    operator 2 <=(text,name),
    operator 2 <=(text,text),
    operator 3 =(name,name),
    operator 3 =(name,text),
    operator 3 =(text,name),
    operator 3 =(text,text),
    operator 4 >=(name,name),
    operator 4 >=(name,text),
    operator 4 >=(text,name),
    operator 4 >=(text,text),
    operator 5 >(name,name),
    operator 5 >(name,text),
    operator 5 >(text,name),
    operator 5 >(text,text),
    function 1(name, name) btnamecmp(name,name),
    function 1(name, text) btnametextcmp(name,text),
    function 1(text, name) bttextnamecmp(text,name),
    function 1(text, text) bttextcmp(text,text),
    function 2(name, name) btnamesortsupport(internal),
    function 2(text, text) bttextsortsupport(internal);

create operator family pg_catalog.text_ops using hash;

alter operator family pg_catalog.text_ops using hash add
    operator 1 =(name,name),
    operator 1 =(name,text),
    operator 1 =(text,name),
    operator 1 =(text,text),
    function 1(name, name) hashname(name),
    function 1(text, text) hashtext(text),
    function 2(name, name) hashnameextended(name,bigint),
    function 2(text, text) hashtextextended(text,bigint);

create operator family pg_catalog.text_ops using spgist;

alter operator family pg_catalog.text_ops using spgist add
    operator 11 <(text,text),
    operator 12 <=(text,text),
    operator 14 >=(text,text),
    operator 15 >(text,text),
    operator 1 ~<~(text,text),
    operator 28 ^@(text,text),
    operator 2 ~<=~(text,text),
    operator 3 =(text,text),
    operator 4 ~>=~(text,text),
    operator 5 ~>~(text,text),
    function 1(text, text) spg_text_config(internal,internal),
    function 2(text, text) spg_text_choose(internal,internal),
    function 3(text, text) spg_text_picksplit(internal,internal),
    function 4(text, text) spg_text_inner_consistent(internal,internal),
    function 5(text, text) spg_text_leaf_consistent(internal,internal);

create operator class pg_catalog.name_ops default for type name using btree family pg_catalog.text_ops as storage cstring;

create operator class pg_catalog.name_ops default for type name using hash family pg_catalog.text_ops as;

create operator class pg_catalog.text_ops default for type text using btree as;

create operator class pg_catalog.text_ops default for type text using hash as;

create operator class pg_catalog.text_ops default for type text using spgist as;

create operator class pg_catalog.varchar_ops for type text using btree family pg_catalog.text_ops as;

create operator class pg_catalog.varchar_ops for type text using hash family pg_catalog.text_ops as;

create operator family pg_catalog.text_pattern_ops using btree;

alter operator family pg_catalog.text_pattern_ops using btree add
    operator 1 ~<~(text,text),
    operator 2 ~<=~(text,text),
    operator 3 =(text,text),
    operator 4 ~>=~(text,text),
    operator 5 ~>~(text,text),
    function 1(text, text) bttext_pattern_cmp(text,text),
    function 2(text, text) bttext_pattern_sortsupport(internal);

create operator class pg_catalog.text_pattern_ops for type text using btree as;

create operator class pg_catalog.text_pattern_ops for type text using hash as;

create operator class pg_catalog.varchar_pattern_ops for type text using btree family pg_catalog.text_pattern_ops as;

create operator class pg_catalog.varchar_pattern_ops for type text using hash family pg_catalog.text_pattern_ops as;

create operator family pg_catalog.text_pattern_ops using hash;

alter operator family pg_catalog.text_pattern_ops using hash add
    operator 1 =(text,text),
    function 1(text, text) hashtext(text),
    function 2(text, text) hashtextextended(text,bigint);

create operator family pg_catalog.tid_minmax_ops using brin;

alter operator family pg_catalog.tid_minmax_ops using brin add
    operator 1 <(tid,tid),
    operator 2 <=(tid,tid),
    operator 3 =(tid,tid),
    operator 4 >=(tid,tid),
    operator 5 >(tid,tid),
    function 1(tid, tid) brin_minmax_opcinfo(internal),
    function 2(tid, tid) brin_minmax_add_value(internal,internal,internal,internal),
    function 3(tid, tid) brin_minmax_consistent(internal,internal,internal),
    function 4(tid, tid) brin_minmax_union(internal,internal,internal);

create operator class pg_catalog.tid_minmax_ops default for type tid using brin as storage tid;

create operator family pg_catalog.tid_ops using btree;

alter operator family pg_catalog.tid_ops using btree add
    operator 1 <(tid,tid),
    operator 2 <=(tid,tid),
    operator 3 =(tid,tid),
    operator 4 >=(tid,tid),
    operator 5 >(tid,tid),
    function 1(tid, tid) bttidcmp(tid,tid);

create operator class pg_catalog.tid_ops default for type tid using btree as;

create operator class pg_catalog.tid_ops default for type tid using hash as;

create operator family pg_catalog.tid_ops using hash;

alter operator family pg_catalog.tid_ops using hash add
    operator 1 =(tid,tid),
    function 1(tid, tid) hashtid(tid),
    function 2(tid, tid) hashtidextended(tid,bigint);

create operator family pg_catalog.time_minmax_ops using brin;

alter operator family pg_catalog.time_minmax_ops using brin add
    operator 1 <(time without time zone,time without time zone),
    operator 2 <=(time without time zone,time without time zone),
    operator 3 =(time without time zone,time without time zone),
    operator 4 >=(time without time zone,time without time zone),
    operator 5 >(time without time zone,time without time zone),
    function 1(time without time zone, time without time zone) brin_minmax_opcinfo(internal),
    function 2(time without time zone, time without time zone) brin_minmax_add_value(internal,internal,internal,internal),
    function 3(time without time zone, time without time zone) brin_minmax_consistent(internal,internal,internal),
    function 4(time without time zone, time without time zone) brin_minmax_union(internal,internal,internal);

create operator class pg_catalog.time_minmax_ops default for type time without time zone using brin as storage time without time zone;

create operator family pg_catalog.time_ops using btree;

alter operator family pg_catalog.time_ops using btree add
    operator 1 <(time without time zone,time without time zone),
    operator 2 <=(time without time zone,time without time zone),
    operator 3 =(time without time zone,time without time zone),
    operator 4 >=(time without time zone,time without time zone),
    operator 5 >(time without time zone,time without time zone),
    function 1(time without time zone, time without time zone) time_cmp(time without time zone,time without time zone),
    function 3(time without time zone, interval) in_range(time without time zone,time without time zone,interval,boolean,boolean);

create operator class pg_catalog.time_ops default for type time without time zone using btree as;

create operator class pg_catalog.time_ops default for type time without time zone using hash as;

create operator family pg_catalog.time_ops using hash;

alter operator family pg_catalog.time_ops using hash add
    operator 1 =(time without time zone,time without time zone),
    function 1(time without time zone, time without time zone) time_hash(time without time zone),
    function 2(time without time zone, time without time zone) time_hash_extended(time without time zone,bigint);

create operator family pg_catalog.timestamp_ops using hash;

alter operator family pg_catalog.timestamp_ops using hash add
    operator 1 =(timestamp without time zone,timestamp without time zone),
    function 1(timestamp without time zone, timestamp without time zone) timestamp_hash(timestamp without time zone),
    function 2(timestamp without time zone, timestamp without time zone) timestamp_hash_extended(timestamp without time zone,bigint);

create operator class pg_catalog.timestamp_ops default for type timestamp without time zone using hash as;

create operator family pg_catalog.timestamptz_ops using hash;

alter operator family pg_catalog.timestamptz_ops using hash add
    operator 1 =(timestamp with time zone,timestamp with time zone),
    function 1(timestamp with time zone, timestamp with time zone) timestamp_hash(timestamp without time zone),
    function 2(timestamp with time zone, timestamp with time zone) timestamp_hash_extended(timestamp without time zone,bigint);

create operator class pg_catalog.timestamptz_ops default for type timestamp with time zone using hash as;

create operator family pg_catalog.timetz_minmax_ops using brin;

alter operator family pg_catalog.timetz_minmax_ops using brin add
    operator 1 <(time with time zone,time with time zone),
    operator 2 <=(time with time zone,time with time zone),
    operator 3 =(time with time zone,time with time zone),
    operator 4 >=(time with time zone,time with time zone),
    operator 5 >(time with time zone,time with time zone),
    function 1(time with time zone, time with time zone) brin_minmax_opcinfo(internal),
    function 2(time with time zone, time with time zone) brin_minmax_add_value(internal,internal,internal,internal),
    function 3(time with time zone, time with time zone) brin_minmax_consistent(internal,internal,internal),
    function 4(time with time zone, time with time zone) brin_minmax_union(internal,internal,internal);

create operator class pg_catalog.timetz_minmax_ops default for type time with time zone using brin as storage time with time zone;

create operator family pg_catalog.timetz_ops using btree;

alter operator family pg_catalog.timetz_ops using btree add
    operator 1 <(time with time zone,time with time zone),
    operator 2 <=(time with time zone,time with time zone),
    operator 3 =(time with time zone,time with time zone),
    operator 4 >=(time with time zone,time with time zone),
    operator 5 >(time with time zone,time with time zone),
    function 1(time with time zone, time with time zone) timetz_cmp(time with time zone,time with time zone),
    function 3(time with time zone, interval) in_range(time with time zone,time with time zone,interval,boolean,boolean);

create operator class pg_catalog.timetz_ops default for type time with time zone using btree as;

create operator class pg_catalog.timetz_ops default for type time with time zone using hash as;

create operator family pg_catalog.timetz_ops using hash;

alter operator family pg_catalog.timetz_ops using hash add
    operator 1 =(time with time zone,time with time zone),
    function 1(time with time zone, time with time zone) timetz_hash(time with time zone),
    function 2(time with time zone, time with time zone) timetz_hash_extended(time with time zone,bigint);

create operator family pg_catalog.tsquery_ops using btree;

alter operator family pg_catalog.tsquery_ops using btree add
    operator 1 <(tsquery,tsquery),
    operator 2 <=(tsquery,tsquery),
    operator 3 =(tsquery,tsquery),
    operator 4 >=(tsquery,tsquery),
    operator 5 >(tsquery,tsquery),
    function 1(tsquery, tsquery) tsquery_cmp(tsquery,tsquery);

create operator class pg_catalog.tsquery_ops default for type tsquery using btree as;

create operator class pg_catalog.tsquery_ops default for type tsquery using gist as storage bigint;

create operator family pg_catalog.tsquery_ops using gist;

alter operator family pg_catalog.tsquery_ops using gist add
    operator 7 @>(tsquery,tsquery),
    operator 8 <@(tsquery,tsquery),
    function 1(tsquery, tsquery) gtsquery_consistent(internal,tsquery,smallint,oid,internal),
    function 2(tsquery, tsquery) gtsquery_union(internal,internal),
    function 3(tsquery, tsquery) gtsquery_compress(internal),
    function 5(tsquery, tsquery) gtsquery_penalty(internal,internal,internal),
    function 6(tsquery, tsquery) gtsquery_picksplit(internal,internal),
    function 7(tsquery, tsquery) gtsquery_same(bigint,bigint,internal);

create operator family pg_catalog.tsvector_ops using btree;

alter operator family pg_catalog.tsvector_ops using btree add
    operator 1 <(tsvector,tsvector),
    operator 2 <=(tsvector,tsvector),
    operator 3 =(tsvector,tsvector),
    operator 4 >=(tsvector,tsvector),
    operator 5 >(tsvector,tsvector),
    function 1(tsvector, tsvector) tsvector_cmp(tsvector,tsvector);

create operator class pg_catalog.tsvector_ops default for type tsvector using btree as;

create operator class pg_catalog.tsvector_ops default for type tsvector using gin as storage text;

create operator class pg_catalog.tsvector_ops default for type tsvector using gist as storage gtsvector;

create operator family pg_catalog.tsvector_ops using gin;

alter operator family pg_catalog.tsvector_ops using gin add
    operator 1 @@(tsvector,tsquery),
    operator 2 @@@(tsvector,tsquery),
    function 1(tsvector, tsvector) gin_cmp_tslexeme(text,text),
    function 2(tsvector, tsvector) gin_extract_tsvector(tsvector,internal,internal),
    function 3(tsvector, tsvector) gin_extract_tsquery(tsvector,internal,smallint,internal,internal,internal,internal),
    function 4(tsvector, tsvector) gin_tsquery_consistent(internal,smallint,tsvector,integer,internal,internal,internal,internal),
    function 5(tsvector, tsvector) gin_cmp_prefix(text,text,smallint,internal),
    function 6(tsvector, tsvector) gin_tsquery_triconsistent(internal,smallint,tsvector,integer,internal,internal,internal);

create operator family pg_catalog.tsvector_ops using gist;

alter operator family pg_catalog.tsvector_ops using gist add
    operator 1 @@(tsvector,tsquery),
    function 1(tsvector, tsvector) gtsvector_consistent(internal,tsvector,smallint,oid,internal),
    function 2(tsvector, tsvector) gtsvector_union(internal,internal),
    function 3(tsvector, tsvector) gtsvector_compress(internal),
    function 4(tsvector, tsvector) gtsvector_decompress(internal),
    function 5(tsvector, tsvector) gtsvector_penalty(internal,internal,internal),
    function 6(tsvector, tsvector) gtsvector_picksplit(internal,internal),
    function 7(tsvector, tsvector) gtsvector_same(gtsvector,gtsvector,internal);

create operator family pg_catalog.uuid_minmax_ops using brin;

alter operator family pg_catalog.uuid_minmax_ops using brin add
    operator 1 <(uuid,uuid),
    operator 2 <=(uuid,uuid),
    operator 3 =(uuid,uuid),
    operator 4 >=(uuid,uuid),
    operator 5 >(uuid,uuid),
    function 1(uuid, uuid) brin_minmax_opcinfo(internal),
    function 2(uuid, uuid) brin_minmax_add_value(internal,internal,internal,internal),
    function 3(uuid, uuid) brin_minmax_consistent(internal,internal,internal),
    function 4(uuid, uuid) brin_minmax_union(internal,internal,internal);

create operator class pg_catalog.uuid_minmax_ops default for type uuid using brin as storage uuid;

create operator family pg_catalog.uuid_ops using btree;

alter operator family pg_catalog.uuid_ops using btree add
    operator 1 <(uuid,uuid),
    operator 2 <=(uuid,uuid),
    operator 3 =(uuid,uuid),
    operator 4 >=(uuid,uuid),
    operator 5 >(uuid,uuid),
    function 1(uuid, uuid) uuid_cmp(uuid,uuid),
    function 2(uuid, uuid) uuid_sortsupport(internal);

create operator class pg_catalog.uuid_ops default for type uuid using btree as;

create operator class pg_catalog.uuid_ops default for type uuid using hash as;

create operator family pg_catalog.uuid_ops using hash;

alter operator family pg_catalog.uuid_ops using hash add
    operator 1 =(uuid,uuid),
    function 1(uuid, uuid) uuid_hash(uuid),
    function 2(uuid, uuid) uuid_hash_extended(uuid,bigint);

create operator family pg_catalog.varbit_minmax_ops using brin;

alter operator family pg_catalog.varbit_minmax_ops using brin add
    operator 1 <(bit varying,bit varying),
    operator 2 <=(bit varying,bit varying),
    operator 3 =(bit varying,bit varying),
    operator 4 >=(bit varying,bit varying),
    operator 5 >(bit varying,bit varying),
    function 1(bit varying, bit varying) brin_minmax_opcinfo(internal),
    function 2(bit varying, bit varying) brin_minmax_add_value(internal,internal,internal,internal),
    function 3(bit varying, bit varying) brin_minmax_consistent(internal,internal,internal),
    function 4(bit varying, bit varying) brin_minmax_union(internal,internal,internal);

create operator class pg_catalog.varbit_minmax_ops default for type bit varying using brin as storage bit varying;

create operator family pg_catalog.varbit_ops using btree;

alter operator family pg_catalog.varbit_ops using btree add
    operator 1 <(bit varying,bit varying),
    operator 2 <=(bit varying,bit varying),
    operator 3 =(bit varying,bit varying),
    operator 4 >=(bit varying,bit varying),
    operator 5 >(bit varying,bit varying),
    function 1(bit varying, bit varying) varbitcmp(bit varying,bit varying);

create operator class pg_catalog.varbit_ops default for type bit varying using btree as;

create operator family pg_catalog.xid_ops using hash;

alter operator family pg_catalog.xid_ops using hash add
    operator 1 =(xid,xid),
    function 1(xid, xid) hashint4(integer),
    function 2(xid, xid) hashint4extended(integer,bigint);

create operator class pg_catalog.xid_ops default for type xid using hash as;

